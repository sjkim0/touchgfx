
StldrMaker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000494  24000004  24000004  00001004  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .ARM          00000008  24000498  24000498  00001498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .init_array   00000004  240004a0  240004a0  000014a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  240004a4  240004a4  000014a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  240004a8  240004a8  000014a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000251c  2400051c  2400051c  0000151c  2**2
                  ALLOC
  6 .text         00018afc  24002a38  24002a38  00003a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .Dev_info     000000c8  2401b534  2401b534  0001d534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .rodata       00000060  2401b5fc  2401b5fc  0001c5fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 ._user_heap_stack 00000600  2401b65c  2401b65c  0001c65c  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0001d5fc  2**0
                  CONTENTS, READONLY
 11 .debug_info   00015b03  00000000  00000000  0001d62a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003d37  00000000  00000000  0003312d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000013b0  00000000  00000000  00036e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000e77  00000000  00000000  00038218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00037488  00000000  00000000  0003908f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000225cd  00000000  00000000  00070517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00145db9  00000000  00000000  00092ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  001d889d  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005138  00000000  00000000  001d88e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000085  00000000  00000000  001dda18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

24002a38 <__do_global_dtors_aux>:
24002a38:	b510      	push	{r4, lr}
24002a3a:	4c05      	ldr	r4, [pc, #20]	@ (24002a50 <__do_global_dtors_aux+0x18>)
24002a3c:	7823      	ldrb	r3, [r4, #0]
24002a3e:	b933      	cbnz	r3, 24002a4e <__do_global_dtors_aux+0x16>
24002a40:	4b04      	ldr	r3, [pc, #16]	@ (24002a54 <__do_global_dtors_aux+0x1c>)
24002a42:	b113      	cbz	r3, 24002a4a <__do_global_dtors_aux+0x12>
24002a44:	4804      	ldr	r0, [pc, #16]	@ (24002a58 <__do_global_dtors_aux+0x20>)
24002a46:	f3af 8000 	nop.w
24002a4a:	2301      	movs	r3, #1
24002a4c:	7023      	strb	r3, [r4, #0]
24002a4e:	bd10      	pop	{r4, pc}
24002a50:	2400051c 	.word	0x2400051c
24002a54:	00000000 	.word	0x00000000
24002a58:	2401b518 	.word	0x2401b518

24002a5c <frame_dummy>:
24002a5c:	b508      	push	{r3, lr}
24002a5e:	4b03      	ldr	r3, [pc, #12]	@ (24002a6c <frame_dummy+0x10>)
24002a60:	b11b      	cbz	r3, 24002a6a <frame_dummy+0xe>
24002a62:	4903      	ldr	r1, [pc, #12]	@ (24002a70 <frame_dummy+0x14>)
24002a64:	4803      	ldr	r0, [pc, #12]	@ (24002a74 <frame_dummy+0x18>)
24002a66:	f3af 8000 	nop.w
24002a6a:	bd08      	pop	{r3, pc}
24002a6c:	00000000 	.word	0x00000000
24002a70:	24000520 	.word	0x24000520
24002a74:	2401b518 	.word	0x2401b518

24002a78 <_stack_init>:
24002a78:	f5a3 3a80 	sub.w	sl, r3, #65536	@ 0x10000
24002a7c:	4770      	bx	lr
24002a7e:	bf00      	nop

24002a80 <_mainCRTStartup>:
24002a80:	4b17      	ldr	r3, [pc, #92]	@ (24002ae0 <_mainCRTStartup+0x60>)
24002a82:	2b00      	cmp	r3, #0
24002a84:	bf08      	it	eq
24002a86:	4b13      	ldreq	r3, [pc, #76]	@ (24002ad4 <_mainCRTStartup+0x54>)
24002a88:	469d      	mov	sp, r3
24002a8a:	f7ff fff5 	bl	24002a78 <_stack_init>
24002a8e:	2100      	movs	r1, #0
24002a90:	468b      	mov	fp, r1
24002a92:	460f      	mov	r7, r1
24002a94:	4813      	ldr	r0, [pc, #76]	@ (24002ae4 <_mainCRTStartup+0x64>)
24002a96:	4a14      	ldr	r2, [pc, #80]	@ (24002ae8 <_mainCRTStartup+0x68>)
24002a98:	1a12      	subs	r2, r2, r0
24002a9a:	f018 fa9a 	bl	2401afd2 <memset>
24002a9e:	4b0e      	ldr	r3, [pc, #56]	@ (24002ad8 <_mainCRTStartup+0x58>)
24002aa0:	2b00      	cmp	r3, #0
24002aa2:	d000      	beq.n	24002aa6 <_mainCRTStartup+0x26>
24002aa4:	4798      	blx	r3
24002aa6:	4b0d      	ldr	r3, [pc, #52]	@ (24002adc <_mainCRTStartup+0x5c>)
24002aa8:	2b00      	cmp	r3, #0
24002aaa:	d000      	beq.n	24002aae <_mainCRTStartup+0x2e>
24002aac:	4798      	blx	r3
24002aae:	2000      	movs	r0, #0
24002ab0:	2100      	movs	r1, #0
24002ab2:	0004      	movs	r4, r0
24002ab4:	000d      	movs	r5, r1
24002ab6:	480d      	ldr	r0, [pc, #52]	@ (24002aec <_mainCRTStartup+0x6c>)
24002ab8:	2800      	cmp	r0, #0
24002aba:	d002      	beq.n	24002ac2 <_mainCRTStartup+0x42>
24002abc:	480c      	ldr	r0, [pc, #48]	@ (24002af0 <_mainCRTStartup+0x70>)
24002abe:	f3af 8000 	nop.w
24002ac2:	f018 fb31 	bl	2401b128 <__libc_init_array>
24002ac6:	0020      	movs	r0, r4
24002ac8:	0029      	movs	r1, r5
24002aca:	f018 f8d7 	bl	2401ac7c <main>
24002ace:	f018 f8e1 	bl	2401ac94 <exit>
24002ad2:	bf00      	nop
24002ad4:	00080000 	.word	0x00080000
	...
24002ae4:	2400051c 	.word	0x2400051c
24002ae8:	24002a38 	.word	0x24002a38
	...
24002af4:	240004a8 	.word	0x240004a8
24002af8:	240004a8 	.word	0x240004a8
24002afc:	2400051c 	.word	0x2400051c
24002b00:	2400051c 	.word	0x2400051c
24002b04:	24002a38 	.word	0x24002a38

24002b08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
24002b08:	b580      	push	{r7, lr}
24002b0a:	b082      	sub	sp, #8
24002b0c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
24002b0e:	2003      	movs	r0, #3
24002b10:	f000 ff66 	bl	240039e0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24002b14:	f013 f8d4 	bl	24015cc0 <HAL_RCC_GetSysClockFreq>
24002b18:	4602      	mov	r2, r0
24002b1a:	4b15      	ldr	r3, [pc, #84]	@ (24002b70 <HAL_Init+0x68>)
24002b1c:	699b      	ldr	r3, [r3, #24]
24002b1e:	0a1b      	lsrs	r3, r3, #8
24002b20:	f003 030f 	and.w	r3, r3, #15
24002b24:	4913      	ldr	r1, [pc, #76]	@ (24002b74 <HAL_Init+0x6c>)
24002b26:	5ccb      	ldrb	r3, [r1, r3]
24002b28:	f003 031f 	and.w	r3, r3, #31
24002b2c:	fa22 f303 	lsr.w	r3, r2, r3
24002b30:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24002b32:	4b0f      	ldr	r3, [pc, #60]	@ (24002b70 <HAL_Init+0x68>)
24002b34:	699b      	ldr	r3, [r3, #24]
24002b36:	f003 030f 	and.w	r3, r3, #15
24002b3a:	4a0e      	ldr	r2, [pc, #56]	@ (24002b74 <HAL_Init+0x6c>)
24002b3c:	5cd3      	ldrb	r3, [r2, r3]
24002b3e:	f003 031f 	and.w	r3, r3, #31
24002b42:	687a      	ldr	r2, [r7, #4]
24002b44:	fa22 f303 	lsr.w	r3, r2, r3
24002b48:	4a0b      	ldr	r2, [pc, #44]	@ (24002b78 <HAL_Init+0x70>)
24002b4a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
24002b4c:	4a0b      	ldr	r2, [pc, #44]	@ (24002b7c <HAL_Init+0x74>)
24002b4e:	687b      	ldr	r3, [r7, #4]
24002b50:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
24002b52:	200f      	movs	r0, #15
24002b54:	f000 f882 	bl	24002c5c <HAL_InitTick>
24002b58:	4603      	mov	r3, r0
24002b5a:	2b00      	cmp	r3, #0
24002b5c:	d001      	beq.n	24002b62 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
24002b5e:	2301      	movs	r3, #1
24002b60:	e002      	b.n	24002b68 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
24002b62:	f017 fb11 	bl	2401a188 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
24002b66:	2300      	movs	r3, #0
}
24002b68:	4618      	mov	r0, r3
24002b6a:	3708      	adds	r7, #8
24002b6c:	46bd      	mov	sp, r7
24002b6e:	bd80      	pop	{r7, pc}
24002b70:	58024400 	.word	0x58024400
24002b74:	2401b64c 	.word	0x2401b64c
24002b78:	240004bc 	.word	0x240004bc
24002b7c:	240004b8 	.word	0x240004b8

24002b80 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
24002b80:	b580      	push	{r7, lr}
24002b82:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_AHB3_FORCE_RESET();
24002b84:	4b25      	ldr	r3, [pc, #148]	@ (24002c1c <HAL_DeInit+0x9c>)
24002b86:	4a26      	ldr	r2, [pc, #152]	@ (24002c20 <HAL_DeInit+0xa0>)
24002b88:	67da      	str	r2, [r3, #124]	@ 0x7c
  __HAL_RCC_AHB3_RELEASE_RESET();
24002b8a:	4b24      	ldr	r3, [pc, #144]	@ (24002c1c <HAL_DeInit+0x9c>)
24002b8c:	2200      	movs	r2, #0
24002b8e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_RCC_AHB1_FORCE_RESET();
24002b90:	4b22      	ldr	r3, [pc, #136]	@ (24002c1c <HAL_DeInit+0x9c>)
24002b92:	4a24      	ldr	r2, [pc, #144]	@ (24002c24 <HAL_DeInit+0xa4>)
24002b94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  __HAL_RCC_AHB1_RELEASE_RESET();
24002b98:	4b20      	ldr	r3, [pc, #128]	@ (24002c1c <HAL_DeInit+0x9c>)
24002b9a:	2200      	movs	r2, #0
24002b9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  __HAL_RCC_AHB2_FORCE_RESET();
24002ba0:	4b1e      	ldr	r3, [pc, #120]	@ (24002c1c <HAL_DeInit+0x9c>)
24002ba2:	4a21      	ldr	r2, [pc, #132]	@ (24002c28 <HAL_DeInit+0xa8>)
24002ba4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __HAL_RCC_AHB2_RELEASE_RESET();
24002ba8:	4b1c      	ldr	r3, [pc, #112]	@ (24002c1c <HAL_DeInit+0x9c>)
24002baa:	2200      	movs	r2, #0
24002bac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_RCC_AHB4_FORCE_RESET();
24002bb0:	4b1a      	ldr	r3, [pc, #104]	@ (24002c1c <HAL_DeInit+0x9c>)
24002bb2:	4a1e      	ldr	r2, [pc, #120]	@ (24002c2c <HAL_DeInit+0xac>)
24002bb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 __HAL_RCC_AHB4_RELEASE_RESET();
24002bb8:	4b18      	ldr	r3, [pc, #96]	@ (24002c1c <HAL_DeInit+0x9c>)
24002bba:	2200      	movs	r2, #0
24002bbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_RCC_APB3_FORCE_RESET();
24002bc0:	4b16      	ldr	r3, [pc, #88]	@ (24002c1c <HAL_DeInit+0x9c>)
24002bc2:	2208      	movs	r2, #8
24002bc4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  __HAL_RCC_APB3_RELEASE_RESET();
24002bc8:	4b14      	ldr	r3, [pc, #80]	@ (24002c1c <HAL_DeInit+0x9c>)
24002bca:	2200      	movs	r2, #0
24002bcc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  __HAL_RCC_APB1L_FORCE_RESET();
24002bd0:	4b12      	ldr	r3, [pc, #72]	@ (24002c1c <HAL_DeInit+0x9c>)
24002bd2:	4a17      	ldr	r2, [pc, #92]	@ (24002c30 <HAL_DeInit+0xb0>)
24002bd4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  __HAL_RCC_APB1L_RELEASE_RESET();
24002bd8:	4b10      	ldr	r3, [pc, #64]	@ (24002c1c <HAL_DeInit+0x9c>)
24002bda:	2200      	movs	r2, #0
24002bdc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  __HAL_RCC_APB1H_FORCE_RESET();
24002be0:	4b0e      	ldr	r3, [pc, #56]	@ (24002c1c <HAL_DeInit+0x9c>)
24002be2:	4a14      	ldr	r2, [pc, #80]	@ (24002c34 <HAL_DeInit+0xb4>)
24002be4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  __HAL_RCC_APB1H_RELEASE_RESET();
24002be8:	4b0c      	ldr	r3, [pc, #48]	@ (24002c1c <HAL_DeInit+0x9c>)
24002bea:	2200      	movs	r2, #0
24002bec:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

   __HAL_RCC_APB2_FORCE_RESET();
24002bf0:	4b0a      	ldr	r3, [pc, #40]	@ (24002c1c <HAL_DeInit+0x9c>)
24002bf2:	4a11      	ldr	r2, [pc, #68]	@ (24002c38 <HAL_DeInit+0xb8>)
24002bf4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
   __HAL_RCC_APB2_RELEASE_RESET();
24002bf8:	4b08      	ldr	r3, [pc, #32]	@ (24002c1c <HAL_DeInit+0x9c>)
24002bfa:	2200      	movs	r2, #0
24002bfc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  __HAL_RCC_APB4_FORCE_RESET();
24002c00:	4b06      	ldr	r3, [pc, #24]	@ (24002c1c <HAL_DeInit+0x9c>)
24002c02:	4a0e      	ldr	r2, [pc, #56]	@ (24002c3c <HAL_DeInit+0xbc>)
24002c04:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  __HAL_RCC_APB4_RELEASE_RESET();
24002c08:	4b04      	ldr	r3, [pc, #16]	@ (24002c1c <HAL_DeInit+0x9c>)
24002c0a:	2200      	movs	r2, #0
24002c0c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* De-Init the low level hardware */
  HAL_MspDeInit();
24002c10:	f000 f81d 	bl	24002c4e <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
24002c14:	2300      	movs	r3, #0
}
24002c16:	4618      	mov	r0, r3
24002c18:	bd80      	pop	{r7, pc}
24002c1a:	bf00      	nop
24002c1c:	58024400 	.word	0x58024400
24002c20:	00e95011 	.word	0x00e95011
24002c24:	02008023 	.word	0x02008023
24002c28:	00030271 	.word	0x00030271
24002c2c:	032806ff 	.word	0x032806ff
24002c30:	eaffc3ff 	.word	0xeaffc3ff
24002c34:	03000136 	.word	0x03000136
24002c38:	405730f3 	.word	0x405730f3
24002c3c:	0420deaa 	.word	0x0420deaa
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
24002c40:	b480      	push	{r7}
24002c42:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
24002c44:	bf00      	nop
24002c46:	46bd      	mov	sp, r7
24002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
24002c4c:	4770      	bx	lr

24002c4e <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
24002c4e:	b480      	push	{r7}
24002c50:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
24002c52:	bf00      	nop
24002c54:	46bd      	mov	sp, r7
24002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
24002c5a:	4770      	bx	lr

24002c5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
24002c5c:	b580      	push	{r7, lr}
24002c5e:	b082      	sub	sp, #8
24002c60:	af00      	add	r7, sp, #0
24002c62:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
24002c64:	4b15      	ldr	r3, [pc, #84]	@ (24002cbc <HAL_InitTick+0x60>)
24002c66:	781b      	ldrb	r3, [r3, #0]
24002c68:	2b00      	cmp	r3, #0
24002c6a:	d101      	bne.n	24002c70 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
24002c6c:	2301      	movs	r3, #1
24002c6e:	e021      	b.n	24002cb4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
24002c70:	4b13      	ldr	r3, [pc, #76]	@ (24002cc0 <HAL_InitTick+0x64>)
24002c72:	681a      	ldr	r2, [r3, #0]
24002c74:	4b11      	ldr	r3, [pc, #68]	@ (24002cbc <HAL_InitTick+0x60>)
24002c76:	781b      	ldrb	r3, [r3, #0]
24002c78:	4619      	mov	r1, r3
24002c7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
24002c7e:	fbb3 f3f1 	udiv	r3, r3, r1
24002c82:	fbb2 f3f3 	udiv	r3, r2, r3
24002c86:	4618      	mov	r0, r3
24002c88:	f000 feef 	bl	24003a6a <HAL_SYSTICK_Config>
24002c8c:	4603      	mov	r3, r0
24002c8e:	2b00      	cmp	r3, #0
24002c90:	d001      	beq.n	24002c96 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
24002c92:	2301      	movs	r3, #1
24002c94:	e00e      	b.n	24002cb4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
24002c96:	687b      	ldr	r3, [r7, #4]
24002c98:	2b0f      	cmp	r3, #15
24002c9a:	d80a      	bhi.n	24002cb2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
24002c9c:	2200      	movs	r2, #0
24002c9e:	6879      	ldr	r1, [r7, #4]
24002ca0:	f04f 30ff 	mov.w	r0, #4294967295
24002ca4:	f000 fea7 	bl	240039f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
24002ca8:	4a06      	ldr	r2, [pc, #24]	@ (24002cc4 <HAL_InitTick+0x68>)
24002caa:	687b      	ldr	r3, [r7, #4]
24002cac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
24002cae:	2300      	movs	r3, #0
24002cb0:	e000      	b.n	24002cb4 <HAL_InitTick+0x58>
    return HAL_ERROR;
24002cb2:	2301      	movs	r3, #1
}
24002cb4:	4618      	mov	r0, r3
24002cb6:	3708      	adds	r7, #8
24002cb8:	46bd      	mov	sp, r7
24002cba:	bd80      	pop	{r7, pc}
24002cbc:	240004b0 	.word	0x240004b0
24002cc0:	240004b8 	.word	0x240004b8
24002cc4:	240004ac 	.word	0x240004ac

24002cc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
24002cc8:	b480      	push	{r7}
24002cca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
24002ccc:	4b06      	ldr	r3, [pc, #24]	@ (24002ce8 <HAL_IncTick+0x20>)
24002cce:	781b      	ldrb	r3, [r3, #0]
24002cd0:	461a      	mov	r2, r3
24002cd2:	4b06      	ldr	r3, [pc, #24]	@ (24002cec <HAL_IncTick+0x24>)
24002cd4:	681b      	ldr	r3, [r3, #0]
24002cd6:	4413      	add	r3, r2
24002cd8:	4a04      	ldr	r2, [pc, #16]	@ (24002cec <HAL_IncTick+0x24>)
24002cda:	6013      	str	r3, [r2, #0]
}
24002cdc:	bf00      	nop
24002cde:	46bd      	mov	sp, r7
24002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
24002ce4:	4770      	bx	lr
24002ce6:	bf00      	nop
24002ce8:	240004b0 	.word	0x240004b0
24002cec:	24000538 	.word	0x24000538

24002cf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
24002cf0:	b480      	push	{r7}
24002cf2:	af00      	add	r7, sp, #0
  return uwTick;
24002cf4:	4b03      	ldr	r3, [pc, #12]	@ (24002d04 <HAL_GetTick+0x14>)
24002cf6:	681b      	ldr	r3, [r3, #0]
}
24002cf8:	4618      	mov	r0, r3
24002cfa:	46bd      	mov	sp, r7
24002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
24002d00:	4770      	bx	lr
24002d02:	bf00      	nop
24002d04:	24000538 	.word	0x24000538

24002d08 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
24002d08:	b480      	push	{r7}
24002d0a:	af00      	add	r7, sp, #0
  return uwTickPrio;
24002d0c:	4b03      	ldr	r3, [pc, #12]	@ (24002d1c <HAL_GetTickPrio+0x14>)
24002d0e:	681b      	ldr	r3, [r3, #0]
}
24002d10:	4618      	mov	r0, r3
24002d12:	46bd      	mov	sp, r7
24002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
24002d18:	4770      	bx	lr
24002d1a:	bf00      	nop
24002d1c:	240004ac 	.word	0x240004ac

24002d20 <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
24002d20:	b580      	push	{r7, lr}
24002d22:	b084      	sub	sp, #16
24002d24:	af00      	add	r7, sp, #0
24002d26:	4603      	mov	r3, r0
24002d28:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status  = HAL_OK;
24002d2a:	2300      	movs	r3, #0
24002d2c:	73fb      	strb	r3, [r7, #15]
  HAL_TickFreqTypeDef prevTickFreq;

  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
24002d2e:	4b0e      	ldr	r3, [pc, #56]	@ (24002d68 <HAL_SetTickFreq+0x48>)
24002d30:	781b      	ldrb	r3, [r3, #0]
24002d32:	79fa      	ldrb	r2, [r7, #7]
24002d34:	429a      	cmp	r2, r3
24002d36:	d012      	beq.n	24002d5e <HAL_SetTickFreq+0x3e>
  {

    /* Back up uwTickFreq frequency */
    prevTickFreq = uwTickFreq;
24002d38:	4b0b      	ldr	r3, [pc, #44]	@ (24002d68 <HAL_SetTickFreq+0x48>)
24002d3a:	781b      	ldrb	r3, [r3, #0]
24002d3c:	73bb      	strb	r3, [r7, #14]

    /* Update uwTickFreq global variable used by HAL_InitTick() */
    uwTickFreq = Freq;
24002d3e:	4a0a      	ldr	r2, [pc, #40]	@ (24002d68 <HAL_SetTickFreq+0x48>)
24002d40:	79fb      	ldrb	r3, [r7, #7]
24002d42:	7013      	strb	r3, [r2, #0]

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
24002d44:	4b09      	ldr	r3, [pc, #36]	@ (24002d6c <HAL_SetTickFreq+0x4c>)
24002d46:	681b      	ldr	r3, [r3, #0]
24002d48:	4618      	mov	r0, r3
24002d4a:	f7ff ff87 	bl	24002c5c <HAL_InitTick>
24002d4e:	4603      	mov	r3, r0
24002d50:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
24002d52:	7bfb      	ldrb	r3, [r7, #15]
24002d54:	2b00      	cmp	r3, #0
24002d56:	d002      	beq.n	24002d5e <HAL_SetTickFreq+0x3e>
    {
      /* Restore previous tick frequency */
      uwTickFreq = prevTickFreq;
24002d58:	4a03      	ldr	r2, [pc, #12]	@ (24002d68 <HAL_SetTickFreq+0x48>)
24002d5a:	7bbb      	ldrb	r3, [r7, #14]
24002d5c:	7013      	strb	r3, [r2, #0]
    }
  }

  return status;
24002d5e:	7bfb      	ldrb	r3, [r7, #15]
}
24002d60:	4618      	mov	r0, r3
24002d62:	3710      	adds	r7, #16
24002d64:	46bd      	mov	sp, r7
24002d66:	bd80      	pop	{r7, pc}
24002d68:	240004b0 	.word	0x240004b0
24002d6c:	240004ac 	.word	0x240004ac

24002d70 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
24002d70:	b480      	push	{r7}
24002d72:	af00      	add	r7, sp, #0
  return uwTickFreq;
24002d74:	4b03      	ldr	r3, [pc, #12]	@ (24002d84 <HAL_GetTickFreq+0x14>)
24002d76:	781b      	ldrb	r3, [r3, #0]
}
24002d78:	4618      	mov	r0, r3
24002d7a:	46bd      	mov	sp, r7
24002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
24002d80:	4770      	bx	lr
24002d82:	bf00      	nop
24002d84:	240004b0 	.word	0x240004b0

24002d88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
24002d88:	b580      	push	{r7, lr}
24002d8a:	b084      	sub	sp, #16
24002d8c:	af00      	add	r7, sp, #0
24002d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
24002d90:	f7ff ffae 	bl	24002cf0 <HAL_GetTick>
24002d94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
24002d96:	687b      	ldr	r3, [r7, #4]
24002d98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
24002d9a:	68fb      	ldr	r3, [r7, #12]
24002d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
24002da0:	d005      	beq.n	24002dae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
24002da2:	4b0a      	ldr	r3, [pc, #40]	@ (24002dcc <HAL_Delay+0x44>)
24002da4:	781b      	ldrb	r3, [r3, #0]
24002da6:	461a      	mov	r2, r3
24002da8:	68fb      	ldr	r3, [r7, #12]
24002daa:	4413      	add	r3, r2
24002dac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
24002dae:	bf00      	nop
24002db0:	f7ff ff9e 	bl	24002cf0 <HAL_GetTick>
24002db4:	4602      	mov	r2, r0
24002db6:	68bb      	ldr	r3, [r7, #8]
24002db8:	1ad3      	subs	r3, r2, r3
24002dba:	68fa      	ldr	r2, [r7, #12]
24002dbc:	429a      	cmp	r2, r3
24002dbe:	d8f7      	bhi.n	24002db0 <HAL_Delay+0x28>
  {
  }
}
24002dc0:	bf00      	nop
24002dc2:	bf00      	nop
24002dc4:	3710      	adds	r7, #16
24002dc6:	46bd      	mov	sp, r7
24002dc8:	bd80      	pop	{r7, pc}
24002dca:	bf00      	nop
24002dcc:	240004b0 	.word	0x240004b0

24002dd0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
24002dd0:	b480      	push	{r7}
24002dd2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
24002dd4:	4b05      	ldr	r3, [pc, #20]	@ (24002dec <HAL_SuspendTick+0x1c>)
24002dd6:	681b      	ldr	r3, [r3, #0]
24002dd8:	4a04      	ldr	r2, [pc, #16]	@ (24002dec <HAL_SuspendTick+0x1c>)
24002dda:	f023 0302 	bic.w	r3, r3, #2
24002dde:	6013      	str	r3, [r2, #0]
}
24002de0:	bf00      	nop
24002de2:	46bd      	mov	sp, r7
24002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
24002de8:	4770      	bx	lr
24002dea:	bf00      	nop
24002dec:	e000e010 	.word	0xe000e010

24002df0 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
24002df0:	b480      	push	{r7}
24002df2:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
24002df4:	4b05      	ldr	r3, [pc, #20]	@ (24002e0c <HAL_ResumeTick+0x1c>)
24002df6:	681b      	ldr	r3, [r3, #0]
24002df8:	4a04      	ldr	r2, [pc, #16]	@ (24002e0c <HAL_ResumeTick+0x1c>)
24002dfa:	f043 0302 	orr.w	r3, r3, #2
24002dfe:	6013      	str	r3, [r2, #0]
}
24002e00:	bf00      	nop
24002e02:	46bd      	mov	sp, r7
24002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
24002e08:	4770      	bx	lr
24002e0a:	bf00      	nop
24002e0c:	e000e010 	.word	0xe000e010

24002e10 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
24002e10:	b480      	push	{r7}
24002e12:	af00      	add	r7, sp, #0
 return __STM32H7xx_HAL_VERSION;
24002e14:	4b02      	ldr	r3, [pc, #8]	@ (24002e20 <HAL_GetHalVersion+0x10>)
}
24002e16:	4618      	mov	r0, r3
24002e18:	46bd      	mov	sp, r7
24002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
24002e1e:	4770      	bx	lr
24002e20:	010b0300 	.word	0x010b0300

24002e24 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
24002e24:	b480      	push	{r7}
24002e26:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
24002e28:	4b03      	ldr	r3, [pc, #12]	@ (24002e38 <HAL_GetREVID+0x14>)
24002e2a:	681b      	ldr	r3, [r3, #0]
24002e2c:	0c1b      	lsrs	r3, r3, #16
}
24002e2e:	4618      	mov	r0, r3
24002e30:	46bd      	mov	sp, r7
24002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
24002e36:	4770      	bx	lr
24002e38:	5c001000 	.word	0x5c001000

24002e3c <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
24002e3c:	b480      	push	{r7}
24002e3e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
24002e40:	4b04      	ldr	r3, [pc, #16]	@ (24002e54 <HAL_GetDEVID+0x18>)
24002e42:	681b      	ldr	r3, [r3, #0]
24002e44:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
24002e48:	4618      	mov	r0, r3
24002e4a:	46bd      	mov	sp, r7
24002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
24002e50:	4770      	bx	lr
24002e52:	bf00      	nop
24002e54:	5c001000 	.word	0x5c001000

24002e58 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
24002e58:	b480      	push	{r7}
24002e5a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
24002e5c:	4b03      	ldr	r3, [pc, #12]	@ (24002e6c <HAL_GetUIDw0+0x14>)
24002e5e:	681b      	ldr	r3, [r3, #0]
}
24002e60:	4618      	mov	r0, r3
24002e62:	46bd      	mov	sp, r7
24002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
24002e68:	4770      	bx	lr
24002e6a:	bf00      	nop
24002e6c:	1ff1e800 	.word	0x1ff1e800

24002e70 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
24002e70:	b480      	push	{r7}
24002e72:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
24002e74:	4b03      	ldr	r3, [pc, #12]	@ (24002e84 <HAL_GetUIDw1+0x14>)
24002e76:	681b      	ldr	r3, [r3, #0]
}
24002e78:	4618      	mov	r0, r3
24002e7a:	46bd      	mov	sp, r7
24002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
24002e80:	4770      	bx	lr
24002e82:	bf00      	nop
24002e84:	1ff1e804 	.word	0x1ff1e804

24002e88 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
24002e88:	b480      	push	{r7}
24002e8a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
24002e8c:	4b03      	ldr	r3, [pc, #12]	@ (24002e9c <HAL_GetUIDw2+0x14>)
24002e8e:	681b      	ldr	r3, [r3, #0]
}
24002e90:	4618      	mov	r0, r3
24002e92:	46bd      	mov	sp, r7
24002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
24002e98:	4770      	bx	lr
24002e9a:	bf00      	nop
24002e9c:	1ff1e808 	.word	0x1ff1e808

24002ea0 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE3: VREF_OUT4 around 1.5 V.
  *                                                This requires VDDA equal to or higher than 1.8 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
24002ea0:	b480      	push	{r7}
24002ea2:	b083      	sub	sp, #12
24002ea4:	af00      	add	r7, sp, #0
24002ea6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
24002ea8:	4b06      	ldr	r3, [pc, #24]	@ (24002ec4 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
24002eaa:	681b      	ldr	r3, [r3, #0]
24002eac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
24002eb0:	4904      	ldr	r1, [pc, #16]	@ (24002ec4 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
24002eb2:	687b      	ldr	r3, [r7, #4]
24002eb4:	4313      	orrs	r3, r2
24002eb6:	600b      	str	r3, [r1, #0]
}
24002eb8:	bf00      	nop
24002eba:	370c      	adds	r7, #12
24002ebc:	46bd      	mov	sp, r7
24002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
24002ec2:	4770      	bx	lr
24002ec4:	58003c00 	.word	0x58003c00

24002ec8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
24002ec8:	b480      	push	{r7}
24002eca:	b083      	sub	sp, #12
24002ecc:	af00      	add	r7, sp, #0
24002ece:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
24002ed0:	4b06      	ldr	r3, [pc, #24]	@ (24002eec <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
24002ed2:	681b      	ldr	r3, [r3, #0]
24002ed4:	f023 0202 	bic.w	r2, r3, #2
24002ed8:	4904      	ldr	r1, [pc, #16]	@ (24002eec <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
24002eda:	687b      	ldr	r3, [r7, #4]
24002edc:	4313      	orrs	r3, r2
24002ede:	600b      	str	r3, [r1, #0]
}
24002ee0:	bf00      	nop
24002ee2:	370c      	adds	r7, #12
24002ee4:	46bd      	mov	sp, r7
24002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
24002eea:	4770      	bx	lr
24002eec:	58003c00 	.word	0x58003c00

24002ef0 <HAL_SYSCFG_VREFBUF_TrimmingConfig>:
/**
  * @brief  Tune the Internal Voltage Reference buffer (VREFBUF).
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_TrimmingConfig(uint32_t TrimmingValue)
{
24002ef0:	b480      	push	{r7}
24002ef2:	b083      	sub	sp, #12
24002ef4:	af00      	add	r7, sp, #0
24002ef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_TRIMMING(TrimmingValue));

  MODIFY_REG(VREFBUF->CCR, VREFBUF_CCR_TRIM, TrimmingValue);
24002ef8:	4b06      	ldr	r3, [pc, #24]	@ (24002f14 <HAL_SYSCFG_VREFBUF_TrimmingConfig+0x24>)
24002efa:	685b      	ldr	r3, [r3, #4]
24002efc:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
24002f00:	4904      	ldr	r1, [pc, #16]	@ (24002f14 <HAL_SYSCFG_VREFBUF_TrimmingConfig+0x24>)
24002f02:	687b      	ldr	r3, [r7, #4]
24002f04:	4313      	orrs	r3, r2
24002f06:	604b      	str	r3, [r1, #4]
}
24002f08:	bf00      	nop
24002f0a:	370c      	adds	r7, #12
24002f0c:	46bd      	mov	sp, r7
24002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
24002f12:	4770      	bx	lr
24002f14:	58003c00 	.word	0x58003c00

24002f18 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
24002f18:	b580      	push	{r7, lr}
24002f1a:	b082      	sub	sp, #8
24002f1c:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
24002f1e:	4b0f      	ldr	r3, [pc, #60]	@ (24002f5c <HAL_SYSCFG_EnableVREFBUF+0x44>)
24002f20:	681b      	ldr	r3, [r3, #0]
24002f22:	4a0e      	ldr	r2, [pc, #56]	@ (24002f5c <HAL_SYSCFG_EnableVREFBUF+0x44>)
24002f24:	f043 0301 	orr.w	r3, r3, #1
24002f28:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
24002f2a:	f7ff fee1 	bl	24002cf0 <HAL_GetTick>
24002f2e:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
24002f30:	e008      	b.n	24002f44 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
24002f32:	f7ff fedd 	bl	24002cf0 <HAL_GetTick>
24002f36:	4602      	mov	r2, r0
24002f38:	687b      	ldr	r3, [r7, #4]
24002f3a:	1ad3      	subs	r3, r2, r3
24002f3c:	2b0a      	cmp	r3, #10
24002f3e:	d901      	bls.n	24002f44 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
24002f40:	2303      	movs	r3, #3
24002f42:	e006      	b.n	24002f52 <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
24002f44:	4b05      	ldr	r3, [pc, #20]	@ (24002f5c <HAL_SYSCFG_EnableVREFBUF+0x44>)
24002f46:	681b      	ldr	r3, [r3, #0]
24002f48:	f003 0308 	and.w	r3, r3, #8
24002f4c:	2b00      	cmp	r3, #0
24002f4e:	d0f0      	beq.n	24002f32 <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
24002f50:	2300      	movs	r3, #0
}
24002f52:	4618      	mov	r0, r3
24002f54:	3708      	adds	r7, #8
24002f56:	46bd      	mov	sp, r7
24002f58:	bd80      	pop	{r7, pc}
24002f5a:	bf00      	nop
24002f5c:	58003c00 	.word	0x58003c00

24002f60 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
24002f60:	b480      	push	{r7}
24002f62:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
24002f64:	4b05      	ldr	r3, [pc, #20]	@ (24002f7c <HAL_SYSCFG_DisableVREFBUF+0x1c>)
24002f66:	681b      	ldr	r3, [r3, #0]
24002f68:	4a04      	ldr	r2, [pc, #16]	@ (24002f7c <HAL_SYSCFG_DisableVREFBUF+0x1c>)
24002f6a:	f023 0301 	bic.w	r3, r3, #1
24002f6e:	6013      	str	r3, [r2, #0]
}
24002f70:	bf00      	nop
24002f72:	46bd      	mov	sp, r7
24002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
24002f78:	4770      	bx	lr
24002f7a:	bf00      	nop
24002f7c:	58003c00 	.word	0x58003c00

24002f80 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
24002f80:	b480      	push	{r7}
24002f82:	b083      	sub	sp, #12
24002f84:	af00      	add	r7, sp, #0
24002f86:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
24002f88:	4b06      	ldr	r3, [pc, #24]	@ (24002fa4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
24002f8a:	685b      	ldr	r3, [r3, #4]
24002f8c:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
24002f90:	4904      	ldr	r1, [pc, #16]	@ (24002fa4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
24002f92:	687b      	ldr	r3, [r7, #4]
24002f94:	4313      	orrs	r3, r2
24002f96:	604b      	str	r3, [r1, #4]
}
24002f98:	bf00      	nop
24002f9a:	370c      	adds	r7, #12
24002f9c:	46bd      	mov	sp, r7
24002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
24002fa2:	4770      	bx	lr
24002fa4:	58000400 	.word	0x58000400

24002fa8 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
24002fa8:	b480      	push	{r7}
24002faa:	b083      	sub	sp, #12
24002fac:	af00      	add	r7, sp, #0
24002fae:	6078      	str	r0, [r7, #4]
24002fb0:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
24002fb2:	4b07      	ldr	r3, [pc, #28]	@ (24002fd0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
24002fb4:	685a      	ldr	r2, [r3, #4]
24002fb6:	687b      	ldr	r3, [r7, #4]
24002fb8:	43db      	mvns	r3, r3
24002fba:	401a      	ands	r2, r3
24002fbc:	4904      	ldr	r1, [pc, #16]	@ (24002fd0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
24002fbe:	683b      	ldr	r3, [r7, #0]
24002fc0:	4313      	orrs	r3, r2
24002fc2:	604b      	str	r3, [r1, #4]
}
24002fc4:	bf00      	nop
24002fc6:	370c      	adds	r7, #12
24002fc8:	46bd      	mov	sp, r7
24002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
24002fce:	4770      	bx	lr
24002fd0:	58000400 	.word	0x58000400

24002fd4 <HAL_SYSCFG_EnableBOOST>:
  *         when the supply voltage is below 2.7 V: in this case, the analog switch
  *         performance is the same on the full voltage range
  * @retval None
  */
void HAL_SYSCFG_EnableBOOST(void)
{
24002fd4:	b480      	push	{r7}
24002fd6:	af00      	add	r7, sp, #0
 SET_BIT(SYSCFG->PMCR, SYSCFG_PMCR_BOOSTEN) ;
24002fd8:	4b05      	ldr	r3, [pc, #20]	@ (24002ff0 <HAL_SYSCFG_EnableBOOST+0x1c>)
24002fda:	685b      	ldr	r3, [r3, #4]
24002fdc:	4a04      	ldr	r2, [pc, #16]	@ (24002ff0 <HAL_SYSCFG_EnableBOOST+0x1c>)
24002fde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
24002fe2:	6053      	str	r3, [r2, #4]
}
24002fe4:	bf00      	nop
24002fe6:	46bd      	mov	sp, r7
24002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
24002fec:	4770      	bx	lr
24002fee:	bf00      	nop
24002ff0:	58000400 	.word	0x58000400

24002ff4 <HAL_SYSCFG_DisableBOOST>:
  *         when the supply voltage is below 2.7 V: in this case, the analog switch
  *         performance is the same on the full voltage range
  * @retval None
  */
void HAL_SYSCFG_DisableBOOST(void)
{
24002ff4:	b480      	push	{r7}
24002ff6:	af00      	add	r7, sp, #0
 CLEAR_BIT(SYSCFG->PMCR, SYSCFG_PMCR_BOOSTEN) ;
24002ff8:	4b05      	ldr	r3, [pc, #20]	@ (24003010 <HAL_SYSCFG_DisableBOOST+0x1c>)
24002ffa:	685b      	ldr	r3, [r3, #4]
24002ffc:	4a04      	ldr	r2, [pc, #16]	@ (24003010 <HAL_SYSCFG_DisableBOOST+0x1c>)
24002ffe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
24003002:	6053      	str	r3, [r2, #4]
}
24003004:	bf00      	nop
24003006:	46bd      	mov	sp, r7
24003008:	f85d 7b04 	ldr.w	r7, [sp], #4
2400300c:	4770      	bx	lr
2400300e:	bf00      	nop
24003010:	58000400 	.word	0x58000400

24003014 <HAL_SYSCFG_CM7BootAddConfig>:
  *   @arg SYSCFG_BOOT_ADDR1:  Select the boot address1
  * @param  BootAddress :Specifies the CM7 Boot Address to be loaded in Address0 or Address1
  * @retval None
  */
void HAL_SYSCFG_CM7BootAddConfig(uint32_t BootRegister, uint32_t BootAddress)
{
24003014:	b480      	push	{r7}
24003016:	b083      	sub	sp, #12
24003018:	af00      	add	r7, sp, #0
2400301a:	6078      	str	r0, [r7, #4]
2400301c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SYSCFG_BOOT_REGISTER(BootRegister));
  assert_param(IS_SYSCFG_BOOT_ADDRESS(BootAddress));
  if ( BootRegister == SYSCFG_BOOT_ADDR0 )
2400301e:	687b      	ldr	r3, [r7, #4]
24003020:	2b00      	cmp	r3, #0
24003022:	d10b      	bne.n	2400303c <HAL_SYSCFG_CM7BootAddConfig+0x28>
  {
    /* Configure CM7 BOOT ADD0 */
#if defined(DUAL_CORE)
    MODIFY_REG(SYSCFG->UR2, SYSCFG_UR2_BCM7_ADD0, ((BootAddress >> 16) << SYSCFG_UR2_BCM7_ADD0_Pos));
#else
    MODIFY_REG(SYSCFG->UR2, SYSCFG_UR2_BOOT_ADD0, ((BootAddress >> 16) << SYSCFG_UR2_BOOT_ADD0_Pos));
24003024:	4b0e      	ldr	r3, [pc, #56]	@ (24003060 <HAL_SYSCFG_CM7BootAddConfig+0x4c>)
24003026:	f8d3 3308 	ldr.w	r3, [r3, #776]	@ 0x308
2400302a:	b29a      	uxth	r2, r3
2400302c:	683b      	ldr	r3, [r7, #0]
2400302e:	0c1b      	lsrs	r3, r3, #16
24003030:	041b      	lsls	r3, r3, #16
24003032:	490b      	ldr	r1, [pc, #44]	@ (24003060 <HAL_SYSCFG_CM7BootAddConfig+0x4c>)
24003034:	4313      	orrs	r3, r2
24003036:	f8c1 3308 	str.w	r3, [r1, #776]	@ 0x308
    MODIFY_REG(SYSCFG->UR3, SYSCFG_UR3_BCM7_ADD1, (BootAddress >> 16));
#else
    MODIFY_REG(SYSCFG->UR3, SYSCFG_UR3_BOOT_ADD1, (BootAddress >> 16));
#endif /*DUAL_CORE*/
  }
}
2400303a:	e00a      	b.n	24003052 <HAL_SYSCFG_CM7BootAddConfig+0x3e>
    MODIFY_REG(SYSCFG->UR3, SYSCFG_UR3_BOOT_ADD1, (BootAddress >> 16));
2400303c:	4b08      	ldr	r3, [pc, #32]	@ (24003060 <HAL_SYSCFG_CM7BootAddConfig+0x4c>)
2400303e:	f8d3 230c 	ldr.w	r2, [r3, #780]	@ 0x30c
24003042:	4b08      	ldr	r3, [pc, #32]	@ (24003064 <HAL_SYSCFG_CM7BootAddConfig+0x50>)
24003044:	4013      	ands	r3, r2
24003046:	683a      	ldr	r2, [r7, #0]
24003048:	0c12      	lsrs	r2, r2, #16
2400304a:	4905      	ldr	r1, [pc, #20]	@ (24003060 <HAL_SYSCFG_CM7BootAddConfig+0x4c>)
2400304c:	4313      	orrs	r3, r2
2400304e:	f8c1 330c 	str.w	r3, [r1, #780]	@ 0x30c
}
24003052:	bf00      	nop
24003054:	370c      	adds	r7, #12
24003056:	46bd      	mov	sp, r7
24003058:	f85d 7b04 	ldr.w	r7, [sp], #4
2400305c:	4770      	bx	lr
2400305e:	bf00      	nop
24003060:	58000400 	.word	0x58000400
24003064:	ffff0000 	.word	0xffff0000

24003068 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
24003068:	b480      	push	{r7}
2400306a:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
2400306c:	4b05      	ldr	r3, [pc, #20]	@ (24003084 <HAL_EnableCompensationCell+0x1c>)
2400306e:	6a1b      	ldr	r3, [r3, #32]
24003070:	4a04      	ldr	r2, [pc, #16]	@ (24003084 <HAL_EnableCompensationCell+0x1c>)
24003072:	f043 0301 	orr.w	r3, r3, #1
24003076:	6213      	str	r3, [r2, #32]
}
24003078:	bf00      	nop
2400307a:	46bd      	mov	sp, r7
2400307c:	f85d 7b04 	ldr.w	r7, [sp], #4
24003080:	4770      	bx	lr
24003082:	bf00      	nop
24003084:	58000400 	.word	0x58000400

24003088 <HAL_DisableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_DisableCompensationCell(void)
{
24003088:	b480      	push	{r7}
2400308a:	af00      	add	r7, sp, #0
  CLEAR_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN);
2400308c:	4b05      	ldr	r3, [pc, #20]	@ (240030a4 <HAL_DisableCompensationCell+0x1c>)
2400308e:	6a1b      	ldr	r3, [r3, #32]
24003090:	4a04      	ldr	r2, [pc, #16]	@ (240030a4 <HAL_DisableCompensationCell+0x1c>)
24003092:	f023 0301 	bic.w	r3, r3, #1
24003096:	6213      	str	r3, [r2, #32]
}
24003098:	bf00      	nop
2400309a:	46bd      	mov	sp, r7
2400309c:	f85d 7b04 	ldr.w	r7, [sp], #4
240030a0:	4770      	bx	lr
240030a2:	bf00      	nop
240030a4:	58000400 	.word	0x58000400

240030a8 <HAL_SYSCFG_EnableIOSpeedOptimize>:
  *         used only if the product supply voltage is below 2.5 V. Setting this bit when VDD is
  *         higher than 2.5 V might be destructive.
  * @retval None
  */
void HAL_SYSCFG_EnableIOSpeedOptimize(void)
{
240030a8:	b480      	push	{r7}
240030aa:	af00      	add	r7, sp, #0
#if defined(SYSCFG_CCCSR_HSLV)
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_HSLV);
240030ac:	4b05      	ldr	r3, [pc, #20]	@ (240030c4 <HAL_SYSCFG_EnableIOSpeedOptimize+0x1c>)
240030ae:	6a1b      	ldr	r3, [r3, #32]
240030b0:	4a04      	ldr	r2, [pc, #16]	@ (240030c4 <HAL_SYSCFG_EnableIOSpeedOptimize+0x1c>)
240030b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
240030b6:	6213      	str	r3, [r2, #32]
#else
  SET_BIT(SYSCFG->CCCSR, (SYSCFG_CCCSR_HSLV0| SYSCFG_CCCSR_HSLV1 | SYSCFG_CCCSR_HSLV2  | SYSCFG_CCCSR_HSLV3));
#endif   /* SYSCFG_CCCSR_HSLV */
}
240030b8:	bf00      	nop
240030ba:	46bd      	mov	sp, r7
240030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
240030c0:	4770      	bx	lr
240030c2:	bf00      	nop
240030c4:	58000400 	.word	0x58000400

240030c8 <HAL_SYSCFG_DisableIOSpeedOptimize>:
  *         used only if the product supply voltage is below 2.5 V. Setting this bit when VDD is
  *         higher than 2.5 V might be destructive.
  * @retval None
  */
void HAL_SYSCFG_DisableIOSpeedOptimize(void)
{
240030c8:	b480      	push	{r7}
240030ca:	af00      	add	r7, sp, #0
#if defined(SYSCFG_CCCSR_HSLV)
  CLEAR_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_HSLV);
240030cc:	4b05      	ldr	r3, [pc, #20]	@ (240030e4 <HAL_SYSCFG_DisableIOSpeedOptimize+0x1c>)
240030ce:	6a1b      	ldr	r3, [r3, #32]
240030d0:	4a04      	ldr	r2, [pc, #16]	@ (240030e4 <HAL_SYSCFG_DisableIOSpeedOptimize+0x1c>)
240030d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
240030d6:	6213      	str	r3, [r2, #32]
#else
  CLEAR_BIT(SYSCFG->CCCSR, (SYSCFG_CCCSR_HSLV0| SYSCFG_CCCSR_HSLV1 | SYSCFG_CCCSR_HSLV2  | SYSCFG_CCCSR_HSLV3));
#endif   /* SYSCFG_CCCSR_HSLV */
}
240030d8:	bf00      	nop
240030da:	46bd      	mov	sp, r7
240030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
240030e0:	4770      	bx	lr
240030e2:	bf00      	nop
240030e4:	58000400 	.word	0x58000400

240030e8 <HAL_SYSCFG_CompensationCodeSelect>:
  *   @arg SYSCFG_CELL_CODE : Select Code from the cell (available in the SYSCFG_CCVR)
  *   @arg SYSCFG_REGISTER_CODE: Select Code from the SYSCFG compensation cell code register (SYSCFG_CCCR)
  * @retval None
  */
void HAL_SYSCFG_CompensationCodeSelect(uint32_t SYSCFG_CompCode)
{
240030e8:	b480      	push	{r7}
240030ea:	b083      	sub	sp, #12
240030ec:	af00      	add	r7, sp, #0
240030ee:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_CODE_SELECT(SYSCFG_CompCode));
  MODIFY_REG(SYSCFG->CCCSR, SYSCFG_CCCSR_CS, (uint32_t)(SYSCFG_CompCode));
240030f0:	4b06      	ldr	r3, [pc, #24]	@ (2400310c <HAL_SYSCFG_CompensationCodeSelect+0x24>)
240030f2:	6a1b      	ldr	r3, [r3, #32]
240030f4:	f023 0202 	bic.w	r2, r3, #2
240030f8:	4904      	ldr	r1, [pc, #16]	@ (2400310c <HAL_SYSCFG_CompensationCodeSelect+0x24>)
240030fa:	687b      	ldr	r3, [r7, #4]
240030fc:	4313      	orrs	r3, r2
240030fe:	620b      	str	r3, [r1, #32]
}
24003100:	bf00      	nop
24003102:	370c      	adds	r7, #12
24003104:	46bd      	mov	sp, r7
24003106:	f85d 7b04 	ldr.w	r7, [sp], #4
2400310a:	4770      	bx	lr
2400310c:	58000400 	.word	0x58000400

24003110 <HAL_SYSCFG_CompensationCodeConfig>:
  *         This code is applied to the I/O compensation cell when the CS bit of the
  *          SYSCFG_CMPCR is set
  * @retval None
  */
void HAL_SYSCFG_CompensationCodeConfig(uint32_t SYSCFG_PMOSCode, uint32_t SYSCFG_NMOSCode )
{
24003110:	b480      	push	{r7}
24003112:	b083      	sub	sp, #12
24003114:	af00      	add	r7, sp, #0
24003116:	6078      	str	r0, [r7, #4]
24003118:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_CODE_CONFIG(SYSCFG_PMOSCode));
  assert_param(IS_SYSCFG_CODE_CONFIG(SYSCFG_NMOSCode));
  MODIFY_REG(SYSCFG->CCCR, SYSCFG_CCCR_NCC|SYSCFG_CCCR_PCC, (((uint32_t)(SYSCFG_PMOSCode)<< 4)|(uint32_t)(SYSCFG_NMOSCode)) );
2400311a:	4b08      	ldr	r3, [pc, #32]	@ (2400313c <HAL_SYSCFG_CompensationCodeConfig+0x2c>)
2400311c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
2400311e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
24003122:	687b      	ldr	r3, [r7, #4]
24003124:	0119      	lsls	r1, r3, #4
24003126:	683b      	ldr	r3, [r7, #0]
24003128:	430b      	orrs	r3, r1
2400312a:	4904      	ldr	r1, [pc, #16]	@ (2400313c <HAL_SYSCFG_CompensationCodeConfig+0x2c>)
2400312c:	4313      	orrs	r3, r2
2400312e:	628b      	str	r3, [r1, #40]	@ 0x28
}
24003130:	bf00      	nop
24003132:	370c      	adds	r7, #12
24003134:	46bd      	mov	sp, r7
24003136:	f85d 7b04 	ldr.w	r7, [sp], #4
2400313a:	4770      	bx	lr
2400313c:	58000400 	.word	0x58000400

24003140 <HAL_SYSCFG_ADC2ALT_Rout0Config>:
  * @param Adc2AltRout0 This parameter can be a value of :
  *     @arg @ref SYSCFG_ADC2_ROUT0_DAC1_1   DAC1_out1 connected to ADC2 VINP[16]
  *     @arg @ref SYSCFG_ADC2_ROUT0_VBAT4    VBAT/4 connected to ADC2 VINP[16]
  */
void HAL_SYSCFG_ADC2ALT_Rout0Config(uint32_t Adc2AltRout0)
{
24003140:	b480      	push	{r7}
24003142:	b083      	sub	sp, #12
24003144:	af00      	add	r7, sp, #0
24003146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_ADC2ALT_ROUT0(Adc2AltRout0));

  MODIFY_REG(SYSCFG->ADC2ALT, SYSCFG_ADC2ALT_ADC2_ROUT0, Adc2AltRout0);
24003148:	4b06      	ldr	r3, [pc, #24]	@ (24003164 <HAL_SYSCFG_ADC2ALT_Rout0Config+0x24>)
2400314a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2400314c:	f023 0201 	bic.w	r2, r3, #1
24003150:	4904      	ldr	r1, [pc, #16]	@ (24003164 <HAL_SYSCFG_ADC2ALT_Rout0Config+0x24>)
24003152:	687b      	ldr	r3, [r7, #4]
24003154:	4313      	orrs	r3, r2
24003156:	630b      	str	r3, [r1, #48]	@ 0x30
}
24003158:	bf00      	nop
2400315a:	370c      	adds	r7, #12
2400315c:	46bd      	mov	sp, r7
2400315e:	f85d 7b04 	ldr.w	r7, [sp], #4
24003162:	4770      	bx	lr
24003164:	58000400 	.word	0x58000400

24003168 <HAL_SYSCFG_ADC2ALT_Rout1Config>:
  * @param Adc2AltRout1  This parameter can be a value of :
  *     @arg @ref SYSCFG_ADC2_ROUT1_DAC1_2   DAC1_out2 connected to ADC2 VINP[17]
  *     @arg @ref SYSCFG_ADC2_ROUT1_VREFINT  VREFINT connected to ADC2 VINP[17]
  */
void HAL_SYSCFG_ADC2ALT_Rout1Config(uint32_t Adc2AltRout1)
{
24003168:	b480      	push	{r7}
2400316a:	b083      	sub	sp, #12
2400316c:	af00      	add	r7, sp, #0
2400316e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_ADC2ALT_ROUT1(Adc2AltRout1));

  MODIFY_REG(SYSCFG->ADC2ALT, SYSCFG_ADC2ALT_ADC2_ROUT1, Adc2AltRout1);
24003170:	4b06      	ldr	r3, [pc, #24]	@ (2400318c <HAL_SYSCFG_ADC2ALT_Rout1Config+0x24>)
24003172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
24003174:	f023 0202 	bic.w	r2, r3, #2
24003178:	4904      	ldr	r1, [pc, #16]	@ (2400318c <HAL_SYSCFG_ADC2ALT_Rout1Config+0x24>)
2400317a:	687b      	ldr	r3, [r7, #4]
2400317c:	4313      	orrs	r3, r2
2400317e:	630b      	str	r3, [r1, #48]	@ 0x30
}
24003180:	bf00      	nop
24003182:	370c      	adds	r7, #12
24003184:	46bd      	mov	sp, r7
24003186:	f85d 7b04 	ldr.w	r7, [sp], #4
2400318a:	4770      	bx	lr
2400318c:	58000400 	.word	0x58000400

24003190 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during Domain1/CDomain SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
24003190:	b480      	push	{r7}
24003192:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEPD1);
24003194:	4b05      	ldr	r3, [pc, #20]	@ (240031ac <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
24003196:	685b      	ldr	r3, [r3, #4]
24003198:	4a04      	ldr	r2, [pc, #16]	@ (240031ac <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
2400319a:	f043 0301 	orr.w	r3, r3, #1
2400319e:	6053      	str	r3, [r2, #4]
}
240031a0:	bf00      	nop
240031a2:	46bd      	mov	sp, r7
240031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
240031a8:	4770      	bx	lr
240031aa:	bf00      	nop
240031ac:	5c001000 	.word	0x5c001000

240031b0 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the Debug Module during Domain1/CDomain SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
240031b0:	b480      	push	{r7}
240031b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEPD1);
240031b4:	4b05      	ldr	r3, [pc, #20]	@ (240031cc <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
240031b6:	685b      	ldr	r3, [r3, #4]
240031b8:	4a04      	ldr	r2, [pc, #16]	@ (240031cc <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
240031ba:	f023 0301 	bic.w	r3, r3, #1
240031be:	6053      	str	r3, [r2, #4]
}
240031c0:	bf00      	nop
240031c2:	46bd      	mov	sp, r7
240031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
240031c8:	4770      	bx	lr
240031ca:	bf00      	nop
240031cc:	5c001000 	.word	0x5c001000

240031d0 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during Domain1/CDomain STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
240031d0:	b480      	push	{r7}
240031d2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOPD1);
240031d4:	4b05      	ldr	r3, [pc, #20]	@ (240031ec <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
240031d6:	685b      	ldr	r3, [r3, #4]
240031d8:	4a04      	ldr	r2, [pc, #16]	@ (240031ec <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
240031da:	f043 0302 	orr.w	r3, r3, #2
240031de:	6053      	str	r3, [r2, #4]
}
240031e0:	bf00      	nop
240031e2:	46bd      	mov	sp, r7
240031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
240031e8:	4770      	bx	lr
240031ea:	bf00      	nop
240031ec:	5c001000 	.word	0x5c001000

240031f0 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the Debug Module during Domain1/CDomain STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
240031f0:	b480      	push	{r7}
240031f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOPD1);
240031f4:	4b05      	ldr	r3, [pc, #20]	@ (2400320c <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
240031f6:	685b      	ldr	r3, [r3, #4]
240031f8:	4a04      	ldr	r2, [pc, #16]	@ (2400320c <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
240031fa:	f023 0302 	bic.w	r3, r3, #2
240031fe:	6053      	str	r3, [r2, #4]
}
24003200:	bf00      	nop
24003202:	46bd      	mov	sp, r7
24003204:	f85d 7b04 	ldr.w	r7, [sp], #4
24003208:	4770      	bx	lr
2400320a:	bf00      	nop
2400320c:	5c001000 	.word	0x5c001000

24003210 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during Domain1/CDomain STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
24003210:	b480      	push	{r7}
24003212:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBYD1);
24003214:	4b05      	ldr	r3, [pc, #20]	@ (2400322c <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
24003216:	685b      	ldr	r3, [r3, #4]
24003218:	4a04      	ldr	r2, [pc, #16]	@ (2400322c <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
2400321a:	f043 0304 	orr.w	r3, r3, #4
2400321e:	6053      	str	r3, [r2, #4]
}
24003220:	bf00      	nop
24003222:	46bd      	mov	sp, r7
24003224:	f85d 7b04 	ldr.w	r7, [sp], #4
24003228:	4770      	bx	lr
2400322a:	bf00      	nop
2400322c:	5c001000 	.word	0x5c001000

24003230 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during Domain1/CDomain STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
24003230:	b480      	push	{r7}
24003232:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBYD1);
24003234:	4b05      	ldr	r3, [pc, #20]	@ (2400324c <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
24003236:	685b      	ldr	r3, [r3, #4]
24003238:	4a04      	ldr	r2, [pc, #16]	@ (2400324c <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
2400323a:	f023 0304 	bic.w	r3, r3, #4
2400323e:	6053      	str	r3, [r2, #4]
}
24003240:	bf00      	nop
24003242:	46bd      	mov	sp, r7
24003244:	f85d 7b04 	ldr.w	r7, [sp], #4
24003248:	4770      	bx	lr
2400324a:	bf00      	nop
2400324c:	5c001000 	.word	0x5c001000

24003250 <HAL_EnableDomain3DBGStopMode>:
/**
  * @brief  Enable the Debug Module during Domain3/SRDomain STOP mode
  * @retval None
  */
void HAL_EnableDomain3DBGStopMode(void)
{
24003250:	b480      	push	{r7}
24003252:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOPD3);
24003254:	4b05      	ldr	r3, [pc, #20]	@ (2400326c <HAL_EnableDomain3DBGStopMode+0x1c>)
24003256:	685b      	ldr	r3, [r3, #4]
24003258:	4a04      	ldr	r2, [pc, #16]	@ (2400326c <HAL_EnableDomain3DBGStopMode+0x1c>)
2400325a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
2400325e:	6053      	str	r3, [r2, #4]
}
24003260:	bf00      	nop
24003262:	46bd      	mov	sp, r7
24003264:	f85d 7b04 	ldr.w	r7, [sp], #4
24003268:	4770      	bx	lr
2400326a:	bf00      	nop
2400326c:	5c001000 	.word	0x5c001000

24003270 <HAL_DisableDomain3DBGStopMode>:
/**
  * @brief  Disable the Debug Module during Domain3/SRDomain STOP mode
  * @retval None
  */
void HAL_DisableDomain3DBGStopMode(void)
{
24003270:	b480      	push	{r7}
24003272:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOPD3);
24003274:	4b05      	ldr	r3, [pc, #20]	@ (2400328c <HAL_DisableDomain3DBGStopMode+0x1c>)
24003276:	685b      	ldr	r3, [r3, #4]
24003278:	4a04      	ldr	r2, [pc, #16]	@ (2400328c <HAL_DisableDomain3DBGStopMode+0x1c>)
2400327a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
2400327e:	6053      	str	r3, [r2, #4]
}
24003280:	bf00      	nop
24003282:	46bd      	mov	sp, r7
24003284:	f85d 7b04 	ldr.w	r7, [sp], #4
24003288:	4770      	bx	lr
2400328a:	bf00      	nop
2400328c:	5c001000 	.word	0x5c001000

24003290 <HAL_EnableDomain3DBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during Domain3/SRDomain STANDBY mode
  * @retval None
  */
void HAL_EnableDomain3DBGStandbyMode(void)
{
24003290:	b480      	push	{r7}
24003292:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBYD3);
24003294:	4b05      	ldr	r3, [pc, #20]	@ (240032ac <HAL_EnableDomain3DBGStandbyMode+0x1c>)
24003296:	685b      	ldr	r3, [r3, #4]
24003298:	4a04      	ldr	r2, [pc, #16]	@ (240032ac <HAL_EnableDomain3DBGStandbyMode+0x1c>)
2400329a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
2400329e:	6053      	str	r3, [r2, #4]
}
240032a0:	bf00      	nop
240032a2:	46bd      	mov	sp, r7
240032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
240032a8:	4770      	bx	lr
240032aa:	bf00      	nop
240032ac:	5c001000 	.word	0x5c001000

240032b0 <HAL_DisableDomain3DBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during Domain3/SRDomain STANDBY mode
  * @retval None
  */
void HAL_DisableDomain3DBGStandbyMode(void)
{
240032b0:	b480      	push	{r7}
240032b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBYD3);
240032b4:	4b05      	ldr	r3, [pc, #20]	@ (240032cc <HAL_DisableDomain3DBGStandbyMode+0x1c>)
240032b6:	685b      	ldr	r3, [r3, #4]
240032b8:	4a04      	ldr	r2, [pc, #16]	@ (240032cc <HAL_DisableDomain3DBGStandbyMode+0x1c>)
240032ba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
240032be:	6053      	str	r3, [r2, #4]
}
240032c0:	bf00      	nop
240032c2:	46bd      	mov	sp, r7
240032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
240032c8:	4770      	bx	lr
240032ca:	bf00      	nop
240032cc:	5c001000 	.word	0x5c001000

240032d0 <HAL_SetFMCMemorySwappingConfig>:
  * @param  BankMapConfig: Defines the FMC Bank mapping configuration. This parameter can be
            FMC_SWAPBMAP_DISABLE, FMC_SWAPBMAP_SDRAM_SRAM, FMC_SWAPBMAP_SDRAMB2
  * @retval HAL state
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
240032d0:	b480      	push	{r7}
240032d2:	b083      	sub	sp, #12
240032d4:	af00      	add	r7, sp, #0
240032d6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
240032d8:	4b06      	ldr	r3, [pc, #24]	@ (240032f4 <HAL_SetFMCMemorySwappingConfig+0x24>)
240032da:	681b      	ldr	r3, [r3, #0]
240032dc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
240032e0:	4904      	ldr	r1, [pc, #16]	@ (240032f4 <HAL_SetFMCMemorySwappingConfig+0x24>)
240032e2:	687b      	ldr	r3, [r7, #4]
240032e4:	4313      	orrs	r3, r2
240032e6:	600b      	str	r3, [r1, #0]
}
240032e8:	bf00      	nop
240032ea:	370c      	adds	r7, #12
240032ec:	46bd      	mov	sp, r7
240032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
240032f2:	4770      	bx	lr
240032f4:	52004000 	.word	0x52004000

240032f8 <HAL_GetFMCMemorySwappingConfig>:
  * @brief  Get FMC Bank mapping mode.
  * @retval The FMC Bank mapping mode. This parameter can be
            FMC_SWAPBMAP_DISABLE, FMC_SWAPBMAP_SDRAM_SRAM, FMC_SWAPBMAP_SDRAMB2
*/
uint32_t HAL_GetFMCMemorySwappingConfig(void)
{
240032f8:	b480      	push	{r7}
240032fa:	af00      	add	r7, sp, #0
  return READ_BIT(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP);
240032fc:	4b04      	ldr	r3, [pc, #16]	@ (24003310 <HAL_GetFMCMemorySwappingConfig+0x18>)
240032fe:	681b      	ldr	r3, [r3, #0]
24003300:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
}
24003304:	4618      	mov	r0, r3
24003306:	46bd      	mov	sp, r7
24003308:	f85d 7b04 	ldr.w	r7, [sp], #4
2400330c:	4770      	bx	lr
2400330e:	bf00      	nop
24003310:	52004000 	.word	0x52004000

24003314 <HAL_EXTI_EdgeConfig>:
  *   @arg EXTI_RISING_EDGE : Configurable line, with Rising edge trigger detection
  *   @arg EXTI_FALLING_EDGE: Configurable line, with Falling edge trigger detection
  * @retval None
  */
void HAL_EXTI_EdgeConfig(uint32_t EXTI_Line , uint32_t EXTI_Edge )
{
24003314:	b480      	push	{r7}
24003316:	b083      	sub	sp, #12
24003318:	af00      	add	r7, sp, #0
2400331a:	6078      	str	r0, [r7, #4]
2400331c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_HAL_EXTI_CONFIG_LINE(EXTI_Line));
  assert_param(IS_EXTI_EDGE_LINE(EXTI_Edge));

  /* Clear Rising Falling edge configuration */
  CLEAR_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
2400331e:	687b      	ldr	r3, [r7, #4]
24003320:	095b      	lsrs	r3, r3, #5
24003322:	015a      	lsls	r2, r3, #5
24003324:	4b2e      	ldr	r3, [pc, #184]	@ (240033e0 <HAL_EXTI_EdgeConfig+0xcc>)
24003326:	4413      	add	r3, r2
24003328:	6819      	ldr	r1, [r3, #0]
2400332a:	687b      	ldr	r3, [r7, #4]
2400332c:	f003 031f 	and.w	r3, r3, #31
24003330:	2201      	movs	r2, #1
24003332:	fa02 f303 	lsl.w	r3, r2, r3
24003336:	43da      	mvns	r2, r3
24003338:	687b      	ldr	r3, [r7, #4]
2400333a:	095b      	lsrs	r3, r3, #5
2400333c:	0158      	lsls	r0, r3, #5
2400333e:	4b28      	ldr	r3, [pc, #160]	@ (240033e0 <HAL_EXTI_EdgeConfig+0xcc>)
24003340:	4403      	add	r3, r0
24003342:	4618      	mov	r0, r3
24003344:	ea01 0302 	and.w	r3, r1, r2
24003348:	6003      	str	r3, [r0, #0]
  CLEAR_BIT( *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
2400334a:	687b      	ldr	r3, [r7, #4]
2400334c:	095b      	lsrs	r3, r3, #5
2400334e:	f103 7330 	add.w	r3, r3, #46137344	@ 0x2c00000
24003352:	015b      	lsls	r3, r3, #5
24003354:	681a      	ldr	r2, [r3, #0]
24003356:	687b      	ldr	r3, [r7, #4]
24003358:	f003 031f 	and.w	r3, r3, #31
2400335c:	2101      	movs	r1, #1
2400335e:	fa01 f303 	lsl.w	r3, r1, r3
24003362:	43db      	mvns	r3, r3
24003364:	6879      	ldr	r1, [r7, #4]
24003366:	0949      	lsrs	r1, r1, #5
24003368:	f101 7130 	add.w	r1, r1, #46137344	@ 0x2c00000
2400336c:	0149      	lsls	r1, r1, #5
2400336e:	4013      	ands	r3, r2
24003370:	600b      	str	r3, [r1, #0]

  if( (EXTI_Edge & EXTI_RISING_EDGE) == EXTI_RISING_EDGE)
24003372:	683b      	ldr	r3, [r7, #0]
24003374:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
24003378:	2b00      	cmp	r3, #0
2400337a:	d012      	beq.n	240033a2 <HAL_EXTI_EdgeConfig+0x8e>
  {
   SET_BIT( *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
2400337c:	687b      	ldr	r3, [r7, #4]
2400337e:	095b      	lsrs	r3, r3, #5
24003380:	f103 7330 	add.w	r3, r3, #46137344	@ 0x2c00000
24003384:	015b      	lsls	r3, r3, #5
24003386:	681a      	ldr	r2, [r3, #0]
24003388:	687b      	ldr	r3, [r7, #4]
2400338a:	f003 031f 	and.w	r3, r3, #31
2400338e:	2101      	movs	r1, #1
24003390:	fa01 f303 	lsl.w	r3, r1, r3
24003394:	6879      	ldr	r1, [r7, #4]
24003396:	0949      	lsrs	r1, r1, #5
24003398:	f101 7130 	add.w	r1, r1, #46137344	@ 0x2c00000
2400339c:	0149      	lsls	r1, r1, #5
2400339e:	4313      	orrs	r3, r2
240033a0:	600b      	str	r3, [r1, #0]
  }
  if( (EXTI_Edge & EXTI_FALLING_EDGE) == EXTI_FALLING_EDGE)
240033a2:	683b      	ldr	r3, [r7, #0]
240033a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
240033a8:	2b00      	cmp	r3, #0
240033aa:	d013      	beq.n	240033d4 <HAL_EXTI_EdgeConfig+0xc0>
  {
   SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
240033ac:	687b      	ldr	r3, [r7, #4]
240033ae:	095b      	lsrs	r3, r3, #5
240033b0:	015a      	lsls	r2, r3, #5
240033b2:	4b0b      	ldr	r3, [pc, #44]	@ (240033e0 <HAL_EXTI_EdgeConfig+0xcc>)
240033b4:	4413      	add	r3, r2
240033b6:	6819      	ldr	r1, [r3, #0]
240033b8:	687b      	ldr	r3, [r7, #4]
240033ba:	f003 031f 	and.w	r3, r3, #31
240033be:	2201      	movs	r2, #1
240033c0:	409a      	lsls	r2, r3
240033c2:	687b      	ldr	r3, [r7, #4]
240033c4:	095b      	lsrs	r3, r3, #5
240033c6:	0158      	lsls	r0, r3, #5
240033c8:	4b05      	ldr	r3, [pc, #20]	@ (240033e0 <HAL_EXTI_EdgeConfig+0xcc>)
240033ca:	4403      	add	r3, r0
240033cc:	4618      	mov	r0, r3
240033ce:	ea41 0302 	orr.w	r3, r1, r2
240033d2:	6003      	str	r3, [r0, #0]
  }
}
240033d4:	bf00      	nop
240033d6:	370c      	adds	r7, #12
240033d8:	46bd      	mov	sp, r7
240033da:	f85d 7b04 	ldr.w	r7, [sp], #4
240033de:	4770      	bx	lr
240033e0:	58000004 	.word	0x58000004

240033e4 <HAL_EXTI_GenerateSWInterrupt>:
  * @param   EXTI_Line: Specifies the EXTI LINE, it can be one of the following values,
  *          (EXTI_LINE0..EXTI_LINE21),EXTI_LINE49,EXTI_LINE51,EXTI_LINE82,EXTI_LINE84,EXTI_LINE85 and EXTI_LINE86.
  * @retval None
  */
void HAL_EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
240033e4:	b480      	push	{r7}
240033e6:	b083      	sub	sp, #12
240033e8:	af00      	add	r7, sp, #0
240033ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HAL_EXTI_CONFIG_LINE(EXTI_Line));

  SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->SWIER1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
240033ec:	687b      	ldr	r3, [r7, #4]
240033ee:	095b      	lsrs	r3, r3, #5
240033f0:	015a      	lsls	r2, r3, #5
240033f2:	4b0b      	ldr	r3, [pc, #44]	@ (24003420 <HAL_EXTI_GenerateSWInterrupt+0x3c>)
240033f4:	4413      	add	r3, r2
240033f6:	6819      	ldr	r1, [r3, #0]
240033f8:	687b      	ldr	r3, [r7, #4]
240033fa:	f003 031f 	and.w	r3, r3, #31
240033fe:	2201      	movs	r2, #1
24003400:	409a      	lsls	r2, r3
24003402:	687b      	ldr	r3, [r7, #4]
24003404:	095b      	lsrs	r3, r3, #5
24003406:	0158      	lsls	r0, r3, #5
24003408:	4b05      	ldr	r3, [pc, #20]	@ (24003420 <HAL_EXTI_GenerateSWInterrupt+0x3c>)
2400340a:	4403      	add	r3, r0
2400340c:	4618      	mov	r0, r3
2400340e:	ea41 0302 	orr.w	r3, r1, r2
24003412:	6003      	str	r3, [r0, #0]
}
24003414:	bf00      	nop
24003416:	370c      	adds	r7, #12
24003418:	46bd      	mov	sp, r7
2400341a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400341e:	4770      	bx	lr
24003420:	58000008 	.word	0x58000008

24003424 <HAL_EXTI_D1_ClearFlag>:
  * @param   EXTI_Line: Specifies the EXTI LINE, it can be one of the following values,
  *         (EXTI_LINE0....EXTI_LINE87)excluding :line45, line81,line83 which are reserved
  * @retval None
  */
void HAL_EXTI_D1_ClearFlag(uint32_t EXTI_Line)
{
24003424:	b480      	push	{r7}
24003426:	b083      	sub	sp, #12
24003428:	af00      	add	r7, sp, #0
2400342a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
 assert_param(IS_EXTI_D1_LINE(EXTI_Line));
 WRITE_REG(*(__IO uint32_t *) (((uint32_t) &(EXTI_D1->PR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
2400342c:	687b      	ldr	r3, [r7, #4]
2400342e:	f003 021f 	and.w	r2, r3, #31
24003432:	687b      	ldr	r3, [r7, #4]
24003434:	095b      	lsrs	r3, r3, #5
24003436:	0119      	lsls	r1, r3, #4
24003438:	4b05      	ldr	r3, [pc, #20]	@ (24003450 <HAL_EXTI_D1_ClearFlag+0x2c>)
2400343a:	440b      	add	r3, r1
2400343c:	4619      	mov	r1, r3
2400343e:	2301      	movs	r3, #1
24003440:	4093      	lsls	r3, r2
24003442:	600b      	str	r3, [r1, #0]

}
24003444:	bf00      	nop
24003446:	370c      	adds	r7, #12
24003448:	46bd      	mov	sp, r7
2400344a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400344e:	4770      	bx	lr
24003450:	58000088 	.word	0x58000088

24003454 <HAL_EXTI_D1_EventInputConfig>:
  * @param   EXTI_LineCmd controls (Enable/Disable) the EXTI line.

  * @retval None
  */
void HAL_EXTI_D1_EventInputConfig(uint32_t EXTI_Line , uint32_t EXTI_Mode,  uint32_t EXTI_LineCmd )
{
24003454:	b480      	push	{r7}
24003456:	b085      	sub	sp, #20
24003458:	af00      	add	r7, sp, #0
2400345a:	60f8      	str	r0, [r7, #12]
2400345c:	60b9      	str	r1, [r7, #8]
2400345e:	607a      	str	r2, [r7, #4]
  /* Check the parameter */
  assert_param(IS_EXTI_D1_LINE(EXTI_Line));
  assert_param(IS_EXTI_MODE_LINE(EXTI_Mode));

  if( (EXTI_Mode & EXTI_MODE_IT) == EXTI_MODE_IT)
24003460:	68bb      	ldr	r3, [r7, #8]
24003462:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
24003466:	2b00      	cmp	r3, #0
24003468:	d02d      	beq.n	240034c6 <HAL_EXTI_D1_EventInputConfig+0x72>
  {
     if( EXTI_LineCmd == 0UL)
2400346a:	687b      	ldr	r3, [r7, #4]
2400346c:	2b00      	cmp	r3, #0
2400346e:	d116      	bne.n	2400349e <HAL_EXTI_D1_EventInputConfig+0x4a>
     {
       /* Clear EXTI line configuration */
        CLEAR_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI_D1->IMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)),(uint32_t)(1UL << (EXTI_Line & 0x1FUL)) );
24003470:	68fb      	ldr	r3, [r7, #12]
24003472:	095a      	lsrs	r2, r3, #5
24003474:	4b30      	ldr	r3, [pc, #192]	@ (24003538 <HAL_EXTI_D1_EventInputConfig+0xe4>)
24003476:	4413      	add	r3, r2
24003478:	011b      	lsls	r3, r3, #4
2400347a:	6819      	ldr	r1, [r3, #0]
2400347c:	68fb      	ldr	r3, [r7, #12]
2400347e:	f003 031f 	and.w	r3, r3, #31
24003482:	2201      	movs	r2, #1
24003484:	fa02 f303 	lsl.w	r3, r2, r3
24003488:	43da      	mvns	r2, r3
2400348a:	68fb      	ldr	r3, [r7, #12]
2400348c:	0958      	lsrs	r0, r3, #5
2400348e:	4b2a      	ldr	r3, [pc, #168]	@ (24003538 <HAL_EXTI_D1_EventInputConfig+0xe4>)
24003490:	4403      	add	r3, r0
24003492:	011b      	lsls	r3, r3, #4
24003494:	4618      	mov	r0, r3
24003496:	ea01 0302 	and.w	r3, r1, r2
2400349a:	6003      	str	r3, [r0, #0]
2400349c:	e013      	b.n	240034c6 <HAL_EXTI_D1_EventInputConfig+0x72>
     }
     else
     {
        SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI_D1->IMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
2400349e:	68fb      	ldr	r3, [r7, #12]
240034a0:	095a      	lsrs	r2, r3, #5
240034a2:	4b25      	ldr	r3, [pc, #148]	@ (24003538 <HAL_EXTI_D1_EventInputConfig+0xe4>)
240034a4:	4413      	add	r3, r2
240034a6:	011b      	lsls	r3, r3, #4
240034a8:	6819      	ldr	r1, [r3, #0]
240034aa:	68fb      	ldr	r3, [r7, #12]
240034ac:	f003 031f 	and.w	r3, r3, #31
240034b0:	2201      	movs	r2, #1
240034b2:	409a      	lsls	r2, r3
240034b4:	68fb      	ldr	r3, [r7, #12]
240034b6:	0958      	lsrs	r0, r3, #5
240034b8:	4b1f      	ldr	r3, [pc, #124]	@ (24003538 <HAL_EXTI_D1_EventInputConfig+0xe4>)
240034ba:	4403      	add	r3, r0
240034bc:	011b      	lsls	r3, r3, #4
240034be:	4618      	mov	r0, r3
240034c0:	ea41 0302 	orr.w	r3, r1, r2
240034c4:	6003      	str	r3, [r0, #0]
     }
  }

  if( (EXTI_Mode & EXTI_MODE_EVT) == EXTI_MODE_EVT)
240034c6:	68bb      	ldr	r3, [r7, #8]
240034c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
240034cc:	2b00      	cmp	r3, #0
240034ce:	d02d      	beq.n	2400352c <HAL_EXTI_D1_EventInputConfig+0xd8>
  {
    if( EXTI_LineCmd == 0UL)
240034d0:	687b      	ldr	r3, [r7, #4]
240034d2:	2b00      	cmp	r3, #0
240034d4:	d116      	bne.n	24003504 <HAL_EXTI_D1_EventInputConfig+0xb0>
    {
      /* Clear EXTI line configuration */
      CLEAR_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D1->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
240034d6:	68fb      	ldr	r3, [r7, #12]
240034d8:	095b      	lsrs	r3, r3, #5
240034da:	011a      	lsls	r2, r3, #4
240034dc:	4b17      	ldr	r3, [pc, #92]	@ (2400353c <HAL_EXTI_D1_EventInputConfig+0xe8>)
240034de:	4413      	add	r3, r2
240034e0:	6819      	ldr	r1, [r3, #0]
240034e2:	68fb      	ldr	r3, [r7, #12]
240034e4:	f003 031f 	and.w	r3, r3, #31
240034e8:	2201      	movs	r2, #1
240034ea:	fa02 f303 	lsl.w	r3, r2, r3
240034ee:	43da      	mvns	r2, r3
240034f0:	68fb      	ldr	r3, [r7, #12]
240034f2:	095b      	lsrs	r3, r3, #5
240034f4:	0118      	lsls	r0, r3, #4
240034f6:	4b11      	ldr	r3, [pc, #68]	@ (2400353c <HAL_EXTI_D1_EventInputConfig+0xe8>)
240034f8:	4403      	add	r3, r0
240034fa:	4618      	mov	r0, r3
240034fc:	ea01 0302 	and.w	r3, r1, r2
24003500:	6003      	str	r3, [r0, #0]
    else
    {
      SET_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D1->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
    }
  }
}
24003502:	e013      	b.n	2400352c <HAL_EXTI_D1_EventInputConfig+0xd8>
      SET_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D1->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
24003504:	68fb      	ldr	r3, [r7, #12]
24003506:	095b      	lsrs	r3, r3, #5
24003508:	011a      	lsls	r2, r3, #4
2400350a:	4b0c      	ldr	r3, [pc, #48]	@ (2400353c <HAL_EXTI_D1_EventInputConfig+0xe8>)
2400350c:	4413      	add	r3, r2
2400350e:	6819      	ldr	r1, [r3, #0]
24003510:	68fb      	ldr	r3, [r7, #12]
24003512:	f003 031f 	and.w	r3, r3, #31
24003516:	2201      	movs	r2, #1
24003518:	409a      	lsls	r2, r3
2400351a:	68fb      	ldr	r3, [r7, #12]
2400351c:	095b      	lsrs	r3, r3, #5
2400351e:	0118      	lsls	r0, r3, #4
24003520:	4b06      	ldr	r3, [pc, #24]	@ (2400353c <HAL_EXTI_D1_EventInputConfig+0xe8>)
24003522:	4403      	add	r3, r0
24003524:	4618      	mov	r0, r3
24003526:	ea41 0302 	orr.w	r3, r1, r2
2400352a:	6003      	str	r3, [r0, #0]
}
2400352c:	bf00      	nop
2400352e:	3714      	adds	r7, #20
24003530:	46bd      	mov	sp, r7
24003532:	f85d 7b04 	ldr.w	r7, [sp], #4
24003536:	4770      	bx	lr
24003538:	05800008 	.word	0x05800008
2400353c:	58000084 	.word	0x58000084

24003540 <HAL_EXTI_D3_EventInputConfig>:
  *   @arg LPTIM4_OUT_CLEAR : LPTIM4 out selected as D3 domain pendclear source
  *   @arg LPTIM5_OUT_CLEAR : LPTIM5 out selected as D3 domain pendclear source
  * @retval None
  */
void HAL_EXTI_D3_EventInputConfig(uint32_t EXTI_Line, uint32_t EXTI_LineCmd , uint32_t EXTI_ClearSrc  )
{
24003540:	b480      	push	{r7}
24003542:	b087      	sub	sp, #28
24003544:	af00      	add	r7, sp, #0
24003546:	60f8      	str	r0, [r7, #12]
24003548:	60b9      	str	r1, [r7, #8]
2400354a:	607a      	str	r2, [r7, #4]

  /* Check the parameter */
  assert_param(IS_EXTI_D3_LINE(EXTI_Line));
  assert_param(IS_EXTI_D3_CLEAR(EXTI_ClearSrc));

  if( EXTI_LineCmd == 0UL)
2400354c:	68bb      	ldr	r3, [r7, #8]
2400354e:	2b00      	cmp	r3, #0
24003550:	d116      	bne.n	24003580 <HAL_EXTI_D3_EventInputConfig+0x40>
  {
    /* Clear EXTI line configuration */
    CLEAR_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->D3PMR1)) + ((EXTI_Line >> 5 ) * 0x20UL)),(uint32_t)(1UL << (EXTI_Line & 0x1FUL)) );
24003552:	68fb      	ldr	r3, [r7, #12]
24003554:	095b      	lsrs	r3, r3, #5
24003556:	015a      	lsls	r2, r3, #5
24003558:	4b2a      	ldr	r3, [pc, #168]	@ (24003604 <HAL_EXTI_D3_EventInputConfig+0xc4>)
2400355a:	4413      	add	r3, r2
2400355c:	6819      	ldr	r1, [r3, #0]
2400355e:	68fb      	ldr	r3, [r7, #12]
24003560:	f003 031f 	and.w	r3, r3, #31
24003564:	2201      	movs	r2, #1
24003566:	fa02 f303 	lsl.w	r3, r2, r3
2400356a:	43da      	mvns	r2, r3
2400356c:	68fb      	ldr	r3, [r7, #12]
2400356e:	095b      	lsrs	r3, r3, #5
24003570:	0158      	lsls	r0, r3, #5
24003572:	4b24      	ldr	r3, [pc, #144]	@ (24003604 <HAL_EXTI_D3_EventInputConfig+0xc4>)
24003574:	4403      	add	r3, r0
24003576:	4618      	mov	r0, r3
24003578:	ea01 0302 	and.w	r3, r1, r2
2400357c:	6003      	str	r3, [r0, #0]
2400357e:	e013      	b.n	240035a8 <HAL_EXTI_D3_EventInputConfig+0x68>
  }
  else
  {
    SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->D3PMR1)) +((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
24003580:	68fb      	ldr	r3, [r7, #12]
24003582:	095b      	lsrs	r3, r3, #5
24003584:	015a      	lsls	r2, r3, #5
24003586:	4b1f      	ldr	r3, [pc, #124]	@ (24003604 <HAL_EXTI_D3_EventInputConfig+0xc4>)
24003588:	4413      	add	r3, r2
2400358a:	6819      	ldr	r1, [r3, #0]
2400358c:	68fb      	ldr	r3, [r7, #12]
2400358e:	f003 031f 	and.w	r3, r3, #31
24003592:	2201      	movs	r2, #1
24003594:	409a      	lsls	r2, r3
24003596:	68fb      	ldr	r3, [r7, #12]
24003598:	095b      	lsrs	r3, r3, #5
2400359a:	0158      	lsls	r0, r3, #5
2400359c:	4b19      	ldr	r3, [pc, #100]	@ (24003604 <HAL_EXTI_D3_EventInputConfig+0xc4>)
2400359e:	4403      	add	r3, r0
240035a0:	4618      	mov	r0, r3
240035a2:	ea41 0302 	orr.w	r3, r1, r2
240035a6:	6003      	str	r3, [r0, #0]
  }

  if(((EXTI_Line>>4)%2UL) == 0UL)
240035a8:	68fb      	ldr	r3, [r7, #12]
240035aa:	f003 0310 	and.w	r3, r3, #16
240035ae:	2b00      	cmp	r3, #0
240035b0:	d106      	bne.n	240035c0 <HAL_EXTI_D3_EventInputConfig+0x80>
  {
    pRegv = (__IO uint32_t *) (((uint32_t) &(EXTI->D3PCR1L)) + ((EXTI_Line >> 5 ) * 0x20UL));
240035b2:	68fb      	ldr	r3, [r7, #12]
240035b4:	095b      	lsrs	r3, r3, #5
240035b6:	015a      	lsls	r2, r3, #5
240035b8:	4b13      	ldr	r3, [pc, #76]	@ (24003608 <HAL_EXTI_D3_EventInputConfig+0xc8>)
240035ba:	4413      	add	r3, r2
240035bc:	617b      	str	r3, [r7, #20]
240035be:	e005      	b.n	240035cc <HAL_EXTI_D3_EventInputConfig+0x8c>
  }
  else
  {
    pRegv = (__IO uint32_t *) (((uint32_t) &(EXTI->D3PCR1H)) + ((EXTI_Line >> 5 ) * 0x20UL));
240035c0:	68fb      	ldr	r3, [r7, #12]
240035c2:	095b      	lsrs	r3, r3, #5
240035c4:	015a      	lsls	r2, r3, #5
240035c6:	4b11      	ldr	r3, [pc, #68]	@ (2400360c <HAL_EXTI_D3_EventInputConfig+0xcc>)
240035c8:	4413      	add	r3, r2
240035ca:	617b      	str	r3, [r7, #20]
  }
  MODIFY_REG(*pRegv, (uint32_t)(3UL << ((EXTI_Line*2UL) & 0x1FUL)), (uint32_t)(EXTI_ClearSrc << ((EXTI_Line*2UL) & 0x1FUL)));
240035cc:	697b      	ldr	r3, [r7, #20]
240035ce:	681a      	ldr	r2, [r3, #0]
240035d0:	68fb      	ldr	r3, [r7, #12]
240035d2:	005b      	lsls	r3, r3, #1
240035d4:	f003 031e 	and.w	r3, r3, #30
240035d8:	2103      	movs	r1, #3
240035da:	fa01 f303 	lsl.w	r3, r1, r3
240035de:	43db      	mvns	r3, r3
240035e0:	401a      	ands	r2, r3
240035e2:	68fb      	ldr	r3, [r7, #12]
240035e4:	005b      	lsls	r3, r3, #1
240035e6:	f003 031e 	and.w	r3, r3, #30
240035ea:	6879      	ldr	r1, [r7, #4]
240035ec:	fa01 f303 	lsl.w	r3, r1, r3
240035f0:	431a      	orrs	r2, r3
240035f2:	697b      	ldr	r3, [r7, #20]
240035f4:	601a      	str	r2, [r3, #0]

}
240035f6:	bf00      	nop
240035f8:	371c      	adds	r7, #28
240035fa:	46bd      	mov	sp, r7
240035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
24003600:	4770      	bx	lr
24003602:	bf00      	nop
24003604:	5800000c 	.word	0x5800000c
24003608:	58000010 	.word	0x58000010
2400360c:	58000014 	.word	0x58000014

24003610 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
24003610:	b480      	push	{r7}
24003612:	b085      	sub	sp, #20
24003614:	af00      	add	r7, sp, #0
24003616:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
24003618:	687b      	ldr	r3, [r7, #4]
2400361a:	f003 0307 	and.w	r3, r3, #7
2400361e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
24003620:	4b0b      	ldr	r3, [pc, #44]	@ (24003650 <__NVIC_SetPriorityGrouping+0x40>)
24003622:	68db      	ldr	r3, [r3, #12]
24003624:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
24003626:	68ba      	ldr	r2, [r7, #8]
24003628:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
2400362c:	4013      	ands	r3, r2
2400362e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
24003630:	68fb      	ldr	r3, [r7, #12]
24003632:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
24003634:	68bb      	ldr	r3, [r7, #8]
24003636:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
24003638:	4b06      	ldr	r3, [pc, #24]	@ (24003654 <__NVIC_SetPriorityGrouping+0x44>)
2400363a:	4313      	orrs	r3, r2
2400363c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
2400363e:	4a04      	ldr	r2, [pc, #16]	@ (24003650 <__NVIC_SetPriorityGrouping+0x40>)
24003640:	68bb      	ldr	r3, [r7, #8]
24003642:	60d3      	str	r3, [r2, #12]
}
24003644:	bf00      	nop
24003646:	3714      	adds	r7, #20
24003648:	46bd      	mov	sp, r7
2400364a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400364e:	4770      	bx	lr
24003650:	e000ed00 	.word	0xe000ed00
24003654:	05fa0000 	.word	0x05fa0000

24003658 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
24003658:	b480      	push	{r7}
2400365a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
2400365c:	4b04      	ldr	r3, [pc, #16]	@ (24003670 <__NVIC_GetPriorityGrouping+0x18>)
2400365e:	68db      	ldr	r3, [r3, #12]
24003660:	0a1b      	lsrs	r3, r3, #8
24003662:	f003 0307 	and.w	r3, r3, #7
}
24003666:	4618      	mov	r0, r3
24003668:	46bd      	mov	sp, r7
2400366a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400366e:	4770      	bx	lr
24003670:	e000ed00 	.word	0xe000ed00

24003674 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
24003674:	b480      	push	{r7}
24003676:	b083      	sub	sp, #12
24003678:	af00      	add	r7, sp, #0
2400367a:	4603      	mov	r3, r0
2400367c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
2400367e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24003682:	2b00      	cmp	r3, #0
24003684:	db0b      	blt.n	2400369e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
24003686:	88fb      	ldrh	r3, [r7, #6]
24003688:	f003 021f 	and.w	r2, r3, #31
2400368c:	4907      	ldr	r1, [pc, #28]	@ (240036ac <__NVIC_EnableIRQ+0x38>)
2400368e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24003692:	095b      	lsrs	r3, r3, #5
24003694:	2001      	movs	r0, #1
24003696:	fa00 f202 	lsl.w	r2, r0, r2
2400369a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
2400369e:	bf00      	nop
240036a0:	370c      	adds	r7, #12
240036a2:	46bd      	mov	sp, r7
240036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
240036a8:	4770      	bx	lr
240036aa:	bf00      	nop
240036ac:	e000e100 	.word	0xe000e100

240036b0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
240036b0:	b480      	push	{r7}
240036b2:	b083      	sub	sp, #12
240036b4:	af00      	add	r7, sp, #0
240036b6:	4603      	mov	r3, r0
240036b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
240036ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
240036be:	2b00      	cmp	r3, #0
240036c0:	db12      	blt.n	240036e8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
240036c2:	88fb      	ldrh	r3, [r7, #6]
240036c4:	f003 021f 	and.w	r2, r3, #31
240036c8:	490a      	ldr	r1, [pc, #40]	@ (240036f4 <__NVIC_DisableIRQ+0x44>)
240036ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
240036ce:	095b      	lsrs	r3, r3, #5
240036d0:	2001      	movs	r0, #1
240036d2:	fa00 f202 	lsl.w	r2, r0, r2
240036d6:	3320      	adds	r3, #32
240036d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
240036dc:	f3bf 8f4f 	dsb	sy
}
240036e0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
240036e2:	f3bf 8f6f 	isb	sy
}
240036e6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
240036e8:	bf00      	nop
240036ea:	370c      	adds	r7, #12
240036ec:	46bd      	mov	sp, r7
240036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
240036f2:	4770      	bx	lr
240036f4:	e000e100 	.word	0xe000e100

240036f8 <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
240036f8:	b480      	push	{r7}
240036fa:	b083      	sub	sp, #12
240036fc:	af00      	add	r7, sp, #0
240036fe:	4603      	mov	r3, r0
24003700:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
24003702:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24003706:	2b00      	cmp	r3, #0
24003708:	db0e      	blt.n	24003728 <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
2400370a:	4a0b      	ldr	r2, [pc, #44]	@ (24003738 <__NVIC_GetPendingIRQ+0x40>)
2400370c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24003710:	095b      	lsrs	r3, r3, #5
24003712:	3340      	adds	r3, #64	@ 0x40
24003714:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
24003718:	88fb      	ldrh	r3, [r7, #6]
2400371a:	f003 031f 	and.w	r3, r3, #31
2400371e:	fa22 f303 	lsr.w	r3, r2, r3
24003722:	f003 0301 	and.w	r3, r3, #1
24003726:	e000      	b.n	2400372a <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
24003728:	2300      	movs	r3, #0
  }
}
2400372a:	4618      	mov	r0, r3
2400372c:	370c      	adds	r7, #12
2400372e:	46bd      	mov	sp, r7
24003730:	f85d 7b04 	ldr.w	r7, [sp], #4
24003734:	4770      	bx	lr
24003736:	bf00      	nop
24003738:	e000e100 	.word	0xe000e100

2400373c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
2400373c:	b480      	push	{r7}
2400373e:	b083      	sub	sp, #12
24003740:	af00      	add	r7, sp, #0
24003742:	4603      	mov	r3, r0
24003744:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
24003746:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
2400374a:	2b00      	cmp	r3, #0
2400374c:	db0c      	blt.n	24003768 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
2400374e:	88fb      	ldrh	r3, [r7, #6]
24003750:	f003 021f 	and.w	r2, r3, #31
24003754:	4907      	ldr	r1, [pc, #28]	@ (24003774 <__NVIC_SetPendingIRQ+0x38>)
24003756:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
2400375a:	095b      	lsrs	r3, r3, #5
2400375c:	2001      	movs	r0, #1
2400375e:	fa00 f202 	lsl.w	r2, r0, r2
24003762:	3340      	adds	r3, #64	@ 0x40
24003764:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
24003768:	bf00      	nop
2400376a:	370c      	adds	r7, #12
2400376c:	46bd      	mov	sp, r7
2400376e:	f85d 7b04 	ldr.w	r7, [sp], #4
24003772:	4770      	bx	lr
24003774:	e000e100 	.word	0xe000e100

24003778 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
24003778:	b480      	push	{r7}
2400377a:	b083      	sub	sp, #12
2400377c:	af00      	add	r7, sp, #0
2400377e:	4603      	mov	r3, r0
24003780:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
24003782:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24003786:	2b00      	cmp	r3, #0
24003788:	db0c      	blt.n	240037a4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
2400378a:	88fb      	ldrh	r3, [r7, #6]
2400378c:	f003 021f 	and.w	r2, r3, #31
24003790:	4907      	ldr	r1, [pc, #28]	@ (240037b0 <__NVIC_ClearPendingIRQ+0x38>)
24003792:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24003796:	095b      	lsrs	r3, r3, #5
24003798:	2001      	movs	r0, #1
2400379a:	fa00 f202 	lsl.w	r2, r0, r2
2400379e:	3360      	adds	r3, #96	@ 0x60
240037a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
240037a4:	bf00      	nop
240037a6:	370c      	adds	r7, #12
240037a8:	46bd      	mov	sp, r7
240037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
240037ae:	4770      	bx	lr
240037b0:	e000e100 	.word	0xe000e100

240037b4 <__NVIC_GetActive>:
  \return             0  Interrupt status is not active.
  \return             1  Interrupt status is active.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
{
240037b4:	b480      	push	{r7}
240037b6:	b083      	sub	sp, #12
240037b8:	af00      	add	r7, sp, #0
240037ba:	4603      	mov	r3, r0
240037bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
240037be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
240037c2:	2b00      	cmp	r3, #0
240037c4:	db0e      	blt.n	240037e4 <__NVIC_GetActive+0x30>
  {
    return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
240037c6:	4a0b      	ldr	r2, [pc, #44]	@ (240037f4 <__NVIC_GetActive+0x40>)
240037c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
240037cc:	095b      	lsrs	r3, r3, #5
240037ce:	3380      	adds	r3, #128	@ 0x80
240037d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
240037d4:	88fb      	ldrh	r3, [r7, #6]
240037d6:	f003 031f 	and.w	r3, r3, #31
240037da:	fa22 f303 	lsr.w	r3, r2, r3
240037de:	f003 0301 	and.w	r3, r3, #1
240037e2:	e000      	b.n	240037e6 <__NVIC_GetActive+0x32>
  }
  else
  {
    return(0U);
240037e4:	2300      	movs	r3, #0
  }
}
240037e6:	4618      	mov	r0, r3
240037e8:	370c      	adds	r7, #12
240037ea:	46bd      	mov	sp, r7
240037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
240037f0:	4770      	bx	lr
240037f2:	bf00      	nop
240037f4:	e000e100 	.word	0xe000e100

240037f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
240037f8:	b480      	push	{r7}
240037fa:	b083      	sub	sp, #12
240037fc:	af00      	add	r7, sp, #0
240037fe:	4603      	mov	r3, r0
24003800:	6039      	str	r1, [r7, #0]
24003802:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
24003804:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24003808:	2b00      	cmp	r3, #0
2400380a:	db0a      	blt.n	24003822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
2400380c:	683b      	ldr	r3, [r7, #0]
2400380e:	b2da      	uxtb	r2, r3
24003810:	490c      	ldr	r1, [pc, #48]	@ (24003844 <__NVIC_SetPriority+0x4c>)
24003812:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24003816:	0112      	lsls	r2, r2, #4
24003818:	b2d2      	uxtb	r2, r2
2400381a:	440b      	add	r3, r1
2400381c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
24003820:	e00a      	b.n	24003838 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24003822:	683b      	ldr	r3, [r7, #0]
24003824:	b2da      	uxtb	r2, r3
24003826:	4908      	ldr	r1, [pc, #32]	@ (24003848 <__NVIC_SetPriority+0x50>)
24003828:	88fb      	ldrh	r3, [r7, #6]
2400382a:	f003 030f 	and.w	r3, r3, #15
2400382e:	3b04      	subs	r3, #4
24003830:	0112      	lsls	r2, r2, #4
24003832:	b2d2      	uxtb	r2, r2
24003834:	440b      	add	r3, r1
24003836:	761a      	strb	r2, [r3, #24]
}
24003838:	bf00      	nop
2400383a:	370c      	adds	r7, #12
2400383c:	46bd      	mov	sp, r7
2400383e:	f85d 7b04 	ldr.w	r7, [sp], #4
24003842:	4770      	bx	lr
24003844:	e000e100 	.word	0xe000e100
24003848:	e000ed00 	.word	0xe000ed00

2400384c <__NVIC_GetPriority>:
  \param [in]   IRQn  Interrupt number.
  \return             Interrupt Priority.
                      Value is aligned automatically to the implemented priority bits of the microcontroller.
 */
__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{
2400384c:	b480      	push	{r7}
2400384e:	b083      	sub	sp, #12
24003850:	af00      	add	r7, sp, #0
24003852:	4603      	mov	r3, r0
24003854:	80fb      	strh	r3, [r7, #6]

  if ((int32_t)(IRQn) >= 0)
24003856:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
2400385a:	2b00      	cmp	r3, #0
2400385c:	db09      	blt.n	24003872 <__NVIC_GetPriority+0x26>
  {
    return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]                >> (8U - __NVIC_PRIO_BITS)));
2400385e:	4a0d      	ldr	r2, [pc, #52]	@ (24003894 <__NVIC_GetPriority+0x48>)
24003860:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24003864:	4413      	add	r3, r2
24003866:	f893 3300 	ldrb.w	r3, [r3, #768]	@ 0x300
2400386a:	b2db      	uxtb	r3, r3
2400386c:	091b      	lsrs	r3, r3, #4
2400386e:	b2db      	uxtb	r3, r3
24003870:	e009      	b.n	24003886 <__NVIC_GetPriority+0x3a>
  }
  else
  {
    return(((uint32_t)SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
24003872:	4a09      	ldr	r2, [pc, #36]	@ (24003898 <__NVIC_GetPriority+0x4c>)
24003874:	88fb      	ldrh	r3, [r7, #6]
24003876:	f003 030f 	and.w	r3, r3, #15
2400387a:	3b04      	subs	r3, #4
2400387c:	4413      	add	r3, r2
2400387e:	7e1b      	ldrb	r3, [r3, #24]
24003880:	b2db      	uxtb	r3, r3
24003882:	091b      	lsrs	r3, r3, #4
24003884:	b2db      	uxtb	r3, r3
  }
}
24003886:	4618      	mov	r0, r3
24003888:	370c      	adds	r7, #12
2400388a:	46bd      	mov	sp, r7
2400388c:	f85d 7b04 	ldr.w	r7, [sp], #4
24003890:	4770      	bx	lr
24003892:	bf00      	nop
24003894:	e000e100 	.word	0xe000e100
24003898:	e000ed00 	.word	0xe000ed00

2400389c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
2400389c:	b480      	push	{r7}
2400389e:	b089      	sub	sp, #36	@ 0x24
240038a0:	af00      	add	r7, sp, #0
240038a2:	60f8      	str	r0, [r7, #12]
240038a4:	60b9      	str	r1, [r7, #8]
240038a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
240038a8:	68fb      	ldr	r3, [r7, #12]
240038aa:	f003 0307 	and.w	r3, r3, #7
240038ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
240038b0:	69fb      	ldr	r3, [r7, #28]
240038b2:	f1c3 0307 	rsb	r3, r3, #7
240038b6:	2b04      	cmp	r3, #4
240038b8:	bf28      	it	cs
240038ba:	2304      	movcs	r3, #4
240038bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
240038be:	69fb      	ldr	r3, [r7, #28]
240038c0:	3304      	adds	r3, #4
240038c2:	2b06      	cmp	r3, #6
240038c4:	d902      	bls.n	240038cc <NVIC_EncodePriority+0x30>
240038c6:	69fb      	ldr	r3, [r7, #28]
240038c8:	3b03      	subs	r3, #3
240038ca:	e000      	b.n	240038ce <NVIC_EncodePriority+0x32>
240038cc:	2300      	movs	r3, #0
240038ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
240038d0:	f04f 32ff 	mov.w	r2, #4294967295
240038d4:	69bb      	ldr	r3, [r7, #24]
240038d6:	fa02 f303 	lsl.w	r3, r2, r3
240038da:	43da      	mvns	r2, r3
240038dc:	68bb      	ldr	r3, [r7, #8]
240038de:	401a      	ands	r2, r3
240038e0:	697b      	ldr	r3, [r7, #20]
240038e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
240038e4:	f04f 31ff 	mov.w	r1, #4294967295
240038e8:	697b      	ldr	r3, [r7, #20]
240038ea:	fa01 f303 	lsl.w	r3, r1, r3
240038ee:	43d9      	mvns	r1, r3
240038f0:	687b      	ldr	r3, [r7, #4]
240038f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
240038f4:	4313      	orrs	r3, r2
         );
}
240038f6:	4618      	mov	r0, r3
240038f8:	3724      	adds	r7, #36	@ 0x24
240038fa:	46bd      	mov	sp, r7
240038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
24003900:	4770      	bx	lr

24003902 <NVIC_DecodePriority>:
  \param [in]     PriorityGroup  Used priority group.
  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
  \param [out]     pSubPriority  Subpriority value (starting from 0).
 */
__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
24003902:	b480      	push	{r7}
24003904:	b089      	sub	sp, #36	@ 0x24
24003906:	af00      	add	r7, sp, #0
24003908:	60f8      	str	r0, [r7, #12]
2400390a:	60b9      	str	r1, [r7, #8]
2400390c:	607a      	str	r2, [r7, #4]
2400390e:	603b      	str	r3, [r7, #0]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
24003910:	68bb      	ldr	r3, [r7, #8]
24003912:	f003 0307 	and.w	r3, r3, #7
24003916:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
24003918:	69fb      	ldr	r3, [r7, #28]
2400391a:	f1c3 0307 	rsb	r3, r3, #7
2400391e:	2b04      	cmp	r3, #4
24003920:	bf28      	it	cs
24003922:	2304      	movcs	r3, #4
24003924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
24003926:	69fb      	ldr	r3, [r7, #28]
24003928:	3304      	adds	r3, #4
2400392a:	2b06      	cmp	r3, #6
2400392c:	d902      	bls.n	24003934 <NVIC_DecodePriority+0x32>
2400392e:	69fb      	ldr	r3, [r7, #28]
24003930:	3b03      	subs	r3, #3
24003932:	e000      	b.n	24003936 <NVIC_DecodePriority+0x34>
24003934:	2300      	movs	r3, #0
24003936:	617b      	str	r3, [r7, #20]

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
24003938:	68fa      	ldr	r2, [r7, #12]
2400393a:	697b      	ldr	r3, [r7, #20]
2400393c:	40da      	lsrs	r2, r3
2400393e:	f04f 31ff 	mov.w	r1, #4294967295
24003942:	69bb      	ldr	r3, [r7, #24]
24003944:	fa01 f303 	lsl.w	r3, r1, r3
24003948:	43db      	mvns	r3, r3
2400394a:	401a      	ands	r2, r3
2400394c:	687b      	ldr	r3, [r7, #4]
2400394e:	601a      	str	r2, [r3, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
24003950:	f04f 32ff 	mov.w	r2, #4294967295
24003954:	697b      	ldr	r3, [r7, #20]
24003956:	fa02 f303 	lsl.w	r3, r2, r3
2400395a:	43da      	mvns	r2, r3
2400395c:	68fb      	ldr	r3, [r7, #12]
2400395e:	401a      	ands	r2, r3
24003960:	683b      	ldr	r3, [r7, #0]
24003962:	601a      	str	r2, [r3, #0]
}
24003964:	bf00      	nop
24003966:	3724      	adds	r7, #36	@ 0x24
24003968:	46bd      	mov	sp, r7
2400396a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400396e:	4770      	bx	lr

24003970 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
24003970:	b480      	push	{r7}
24003972:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
24003974:	f3bf 8f4f 	dsb	sy
}
24003978:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
2400397a:	4b06      	ldr	r3, [pc, #24]	@ (24003994 <__NVIC_SystemReset+0x24>)
2400397c:	68db      	ldr	r3, [r3, #12]
2400397e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
24003982:	4904      	ldr	r1, [pc, #16]	@ (24003994 <__NVIC_SystemReset+0x24>)
24003984:	4b04      	ldr	r3, [pc, #16]	@ (24003998 <__NVIC_SystemReset+0x28>)
24003986:	4313      	orrs	r3, r2
24003988:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
2400398a:	f3bf 8f4f 	dsb	sy
}
2400398e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
24003990:	bf00      	nop
24003992:	e7fd      	b.n	24003990 <__NVIC_SystemReset+0x20>
24003994:	e000ed00 	.word	0xe000ed00
24003998:	05fa0004 	.word	0x05fa0004

2400399c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
2400399c:	b580      	push	{r7, lr}
2400399e:	b082      	sub	sp, #8
240039a0:	af00      	add	r7, sp, #0
240039a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
240039a4:	687b      	ldr	r3, [r7, #4]
240039a6:	3b01      	subs	r3, #1
240039a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
240039ac:	d301      	bcc.n	240039b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
240039ae:	2301      	movs	r3, #1
240039b0:	e00f      	b.n	240039d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
240039b2:	4a0a      	ldr	r2, [pc, #40]	@ (240039dc <SysTick_Config+0x40>)
240039b4:	687b      	ldr	r3, [r7, #4]
240039b6:	3b01      	subs	r3, #1
240039b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
240039ba:	210f      	movs	r1, #15
240039bc:	f04f 30ff 	mov.w	r0, #4294967295
240039c0:	f7ff ff1a 	bl	240037f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
240039c4:	4b05      	ldr	r3, [pc, #20]	@ (240039dc <SysTick_Config+0x40>)
240039c6:	2200      	movs	r2, #0
240039c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
240039ca:	4b04      	ldr	r3, [pc, #16]	@ (240039dc <SysTick_Config+0x40>)
240039cc:	2207      	movs	r2, #7
240039ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
240039d0:	2300      	movs	r3, #0
}
240039d2:	4618      	mov	r0, r3
240039d4:	3708      	adds	r7, #8
240039d6:	46bd      	mov	sp, r7
240039d8:	bd80      	pop	{r7, pc}
240039da:	bf00      	nop
240039dc:	e000e010 	.word	0xe000e010

240039e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
240039e0:	b580      	push	{r7, lr}
240039e2:	b082      	sub	sp, #8
240039e4:	af00      	add	r7, sp, #0
240039e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
240039e8:	6878      	ldr	r0, [r7, #4]
240039ea:	f7ff fe11 	bl	24003610 <__NVIC_SetPriorityGrouping>
}
240039ee:	bf00      	nop
240039f0:	3708      	adds	r7, #8
240039f2:	46bd      	mov	sp, r7
240039f4:	bd80      	pop	{r7, pc}

240039f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
240039f6:	b580      	push	{r7, lr}
240039f8:	b086      	sub	sp, #24
240039fa:	af00      	add	r7, sp, #0
240039fc:	4603      	mov	r3, r0
240039fe:	60b9      	str	r1, [r7, #8]
24003a00:	607a      	str	r2, [r7, #4]
24003a02:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
24003a04:	f7ff fe28 	bl	24003658 <__NVIC_GetPriorityGrouping>
24003a08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
24003a0a:	687a      	ldr	r2, [r7, #4]
24003a0c:	68b9      	ldr	r1, [r7, #8]
24003a0e:	6978      	ldr	r0, [r7, #20]
24003a10:	f7ff ff44 	bl	2400389c <NVIC_EncodePriority>
24003a14:	4602      	mov	r2, r0
24003a16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
24003a1a:	4611      	mov	r1, r2
24003a1c:	4618      	mov	r0, r3
24003a1e:	f7ff feeb 	bl	240037f8 <__NVIC_SetPriority>
}
24003a22:	bf00      	nop
24003a24:	3718      	adds	r7, #24
24003a26:	46bd      	mov	sp, r7
24003a28:	bd80      	pop	{r7, pc}

24003a2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
24003a2a:	b580      	push	{r7, lr}
24003a2c:	b082      	sub	sp, #8
24003a2e:	af00      	add	r7, sp, #0
24003a30:	4603      	mov	r3, r0
24003a32:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
24003a34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24003a38:	4618      	mov	r0, r3
24003a3a:	f7ff fe1b 	bl	24003674 <__NVIC_EnableIRQ>
}
24003a3e:	bf00      	nop
24003a40:	3708      	adds	r7, #8
24003a42:	46bd      	mov	sp, r7
24003a44:	bd80      	pop	{r7, pc}

24003a46 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
24003a46:	b580      	push	{r7, lr}
24003a48:	b082      	sub	sp, #8
24003a4a:	af00      	add	r7, sp, #0
24003a4c:	4603      	mov	r3, r0
24003a4e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
24003a50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24003a54:	4618      	mov	r0, r3
24003a56:	f7ff fe2b 	bl	240036b0 <__NVIC_DisableIRQ>
}
24003a5a:	bf00      	nop
24003a5c:	3708      	adds	r7, #8
24003a5e:	46bd      	mov	sp, r7
24003a60:	bd80      	pop	{r7, pc}

24003a62 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
24003a62:	b580      	push	{r7, lr}
24003a64:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
24003a66:	f7ff ff83 	bl	24003970 <__NVIC_SystemReset>

24003a6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
24003a6a:	b580      	push	{r7, lr}
24003a6c:	b082      	sub	sp, #8
24003a6e:	af00      	add	r7, sp, #0
24003a70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
24003a72:	6878      	ldr	r0, [r7, #4]
24003a74:	f7ff ff92 	bl	2400399c <SysTick_Config>
24003a78:	4603      	mov	r3, r0
}
24003a7a:	4618      	mov	r0, r3
24003a7c:	3708      	adds	r7, #8
24003a7e:	46bd      	mov	sp, r7
24003a80:	bd80      	pop	{r7, pc}
	...

24003a84 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
24003a84:	b480      	push	{r7}
24003a86:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
24003a88:	f3bf 8f5f 	dmb	sy
}
24003a8c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
24003a8e:	4b07      	ldr	r3, [pc, #28]	@ (24003aac <HAL_MPU_Disable+0x28>)
24003a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
24003a92:	4a06      	ldr	r2, [pc, #24]	@ (24003aac <HAL_MPU_Disable+0x28>)
24003a94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
24003a98:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
24003a9a:	4b05      	ldr	r3, [pc, #20]	@ (24003ab0 <HAL_MPU_Disable+0x2c>)
24003a9c:	2200      	movs	r2, #0
24003a9e:	605a      	str	r2, [r3, #4]
}
24003aa0:	bf00      	nop
24003aa2:	46bd      	mov	sp, r7
24003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
24003aa8:	4770      	bx	lr
24003aaa:	bf00      	nop
24003aac:	e000ed00 	.word	0xe000ed00
24003ab0:	e000ed90 	.word	0xe000ed90

24003ab4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
24003ab4:	b480      	push	{r7}
24003ab6:	b083      	sub	sp, #12
24003ab8:	af00      	add	r7, sp, #0
24003aba:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
24003abc:	4a0b      	ldr	r2, [pc, #44]	@ (24003aec <HAL_MPU_Enable+0x38>)
24003abe:	687b      	ldr	r3, [r7, #4]
24003ac0:	f043 0301 	orr.w	r3, r3, #1
24003ac4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
24003ac6:	4b0a      	ldr	r3, [pc, #40]	@ (24003af0 <HAL_MPU_Enable+0x3c>)
24003ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
24003aca:	4a09      	ldr	r2, [pc, #36]	@ (24003af0 <HAL_MPU_Enable+0x3c>)
24003acc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
24003ad0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
24003ad2:	f3bf 8f4f 	dsb	sy
}
24003ad6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
24003ad8:	f3bf 8f6f 	isb	sy
}
24003adc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
24003ade:	bf00      	nop
24003ae0:	370c      	adds	r7, #12
24003ae2:	46bd      	mov	sp, r7
24003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
24003ae8:	4770      	bx	lr
24003aea:	bf00      	nop
24003aec:	e000ed90 	.word	0xe000ed90
24003af0:	e000ed00 	.word	0xe000ed00

24003af4 <HAL_MPU_EnableRegion>:
/**
  * @brief  Enables the MPU Region.
  * @retval None
  */
void HAL_MPU_EnableRegion(uint32_t RegionNumber)
{
24003af4:	b480      	push	{r7}
24003af6:	b083      	sub	sp, #12
24003af8:	af00      	add	r7, sp, #0
24003afa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(RegionNumber));

  /* Set the Region number */
  MPU->RNR = RegionNumber;
24003afc:	4a07      	ldr	r2, [pc, #28]	@ (24003b1c <HAL_MPU_EnableRegion+0x28>)
24003afe:	687b      	ldr	r3, [r7, #4]
24003b00:	6093      	str	r3, [r2, #8]

  /* Enable the Region */
  SET_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
24003b02:	4b06      	ldr	r3, [pc, #24]	@ (24003b1c <HAL_MPU_EnableRegion+0x28>)
24003b04:	691b      	ldr	r3, [r3, #16]
24003b06:	4a05      	ldr	r2, [pc, #20]	@ (24003b1c <HAL_MPU_EnableRegion+0x28>)
24003b08:	f043 0301 	orr.w	r3, r3, #1
24003b0c:	6113      	str	r3, [r2, #16]
}
24003b0e:	bf00      	nop
24003b10:	370c      	adds	r7, #12
24003b12:	46bd      	mov	sp, r7
24003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
24003b18:	4770      	bx	lr
24003b1a:	bf00      	nop
24003b1c:	e000ed90 	.word	0xe000ed90

24003b20 <HAL_MPU_DisableRegion>:
/**
  * @brief  Disables the MPU Region.
  * @retval None
  */
void HAL_MPU_DisableRegion(uint32_t RegionNumber)
{
24003b20:	b480      	push	{r7}
24003b22:	b083      	sub	sp, #12
24003b24:	af00      	add	r7, sp, #0
24003b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(RegionNumber));

  /* Set the Region number */
  MPU->RNR = RegionNumber;
24003b28:	4a07      	ldr	r2, [pc, #28]	@ (24003b48 <HAL_MPU_DisableRegion+0x28>)
24003b2a:	687b      	ldr	r3, [r7, #4]
24003b2c:	6093      	str	r3, [r2, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
24003b2e:	4b06      	ldr	r3, [pc, #24]	@ (24003b48 <HAL_MPU_DisableRegion+0x28>)
24003b30:	691b      	ldr	r3, [r3, #16]
24003b32:	4a05      	ldr	r2, [pc, #20]	@ (24003b48 <HAL_MPU_DisableRegion+0x28>)
24003b34:	f023 0301 	bic.w	r3, r3, #1
24003b38:	6113      	str	r3, [r2, #16]
}
24003b3a:	bf00      	nop
24003b3c:	370c      	adds	r7, #12
24003b3e:	46bd      	mov	sp, r7
24003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
24003b44:	4770      	bx	lr
24003b46:	bf00      	nop
24003b48:	e000ed90 	.word	0xe000ed90

24003b4c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
24003b4c:	b480      	push	{r7}
24003b4e:	b083      	sub	sp, #12
24003b50:	af00      	add	r7, sp, #0
24003b52:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
24003b54:	687b      	ldr	r3, [r7, #4]
24003b56:	785a      	ldrb	r2, [r3, #1]
24003b58:	4b1b      	ldr	r3, [pc, #108]	@ (24003bc8 <HAL_MPU_ConfigRegion+0x7c>)
24003b5a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
24003b5c:	4b1a      	ldr	r3, [pc, #104]	@ (24003bc8 <HAL_MPU_ConfigRegion+0x7c>)
24003b5e:	691b      	ldr	r3, [r3, #16]
24003b60:	4a19      	ldr	r2, [pc, #100]	@ (24003bc8 <HAL_MPU_ConfigRegion+0x7c>)
24003b62:	f023 0301 	bic.w	r3, r3, #1
24003b66:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
24003b68:	4a17      	ldr	r2, [pc, #92]	@ (24003bc8 <HAL_MPU_ConfigRegion+0x7c>)
24003b6a:	687b      	ldr	r3, [r7, #4]
24003b6c:	685b      	ldr	r3, [r3, #4]
24003b6e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
24003b70:	687b      	ldr	r3, [r7, #4]
24003b72:	7b1b      	ldrb	r3, [r3, #12]
24003b74:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
24003b76:	687b      	ldr	r3, [r7, #4]
24003b78:	7adb      	ldrb	r3, [r3, #11]
24003b7a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
24003b7c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
24003b7e:	687b      	ldr	r3, [r7, #4]
24003b80:	7a9b      	ldrb	r3, [r3, #10]
24003b82:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
24003b84:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
24003b86:	687b      	ldr	r3, [r7, #4]
24003b88:	7b5b      	ldrb	r3, [r3, #13]
24003b8a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
24003b8c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
24003b8e:	687b      	ldr	r3, [r7, #4]
24003b90:	7b9b      	ldrb	r3, [r3, #14]
24003b92:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
24003b94:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
24003b96:	687b      	ldr	r3, [r7, #4]
24003b98:	7bdb      	ldrb	r3, [r3, #15]
24003b9a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
24003b9c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
24003b9e:	687b      	ldr	r3, [r7, #4]
24003ba0:	7a5b      	ldrb	r3, [r3, #9]
24003ba2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
24003ba4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
24003ba6:	687b      	ldr	r3, [r7, #4]
24003ba8:	7a1b      	ldrb	r3, [r3, #8]
24003baa:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
24003bac:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
24003bae:	687a      	ldr	r2, [r7, #4]
24003bb0:	7812      	ldrb	r2, [r2, #0]
24003bb2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
24003bb4:	4a04      	ldr	r2, [pc, #16]	@ (24003bc8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
24003bb6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
24003bb8:	6113      	str	r3, [r2, #16]
}
24003bba:	bf00      	nop
24003bbc:	370c      	adds	r7, #12
24003bbe:	46bd      	mov	sp, r7
24003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
24003bc4:	4770      	bx	lr
24003bc6:	bf00      	nop
24003bc8:	e000ed90 	.word	0xe000ed90

24003bcc <HAL_NVIC_GetPriorityGrouping>:
/**
  * @brief  Gets the priority grouping field from the NVIC Interrupt Controller.
  * @retval Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
24003bcc:	b580      	push	{r7, lr}
24003bce:	af00      	add	r7, sp, #0
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
24003bd0:	f7ff fd42 	bl	24003658 <__NVIC_GetPriorityGrouping>
24003bd4:	4603      	mov	r3, r0
}
24003bd6:	4618      	mov	r0, r3
24003bd8:	bd80      	pop	{r7, pc}

24003bda <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
24003bda:	b580      	push	{r7, lr}
24003bdc:	b084      	sub	sp, #16
24003bde:	af00      	add	r7, sp, #0
24003be0:	60b9      	str	r1, [r7, #8]
24003be2:	607a      	str	r2, [r7, #4]
24003be4:	603b      	str	r3, [r7, #0]
24003be6:	4603      	mov	r3, r0
24003be8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
24003bea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
24003bee:	4618      	mov	r0, r3
24003bf0:	f7ff fe2c 	bl	2400384c <__NVIC_GetPriority>
24003bf4:	683b      	ldr	r3, [r7, #0]
24003bf6:	687a      	ldr	r2, [r7, #4]
24003bf8:	68b9      	ldr	r1, [r7, #8]
24003bfa:	f7ff fe82 	bl	24003902 <NVIC_DecodePriority>
}
24003bfe:	bf00      	nop
24003c00:	3710      	adds	r7, #16
24003c02:	46bd      	mov	sp, r7
24003c04:	bd80      	pop	{r7, pc}

24003c06 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
24003c06:	b580      	push	{r7, lr}
24003c08:	b082      	sub	sp, #8
24003c0a:	af00      	add	r7, sp, #0
24003c0c:	4603      	mov	r3, r0
24003c0e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
24003c10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24003c14:	4618      	mov	r0, r3
24003c16:	f7ff fd91 	bl	2400373c <__NVIC_SetPendingIRQ>
}
24003c1a:	bf00      	nop
24003c1c:	3708      	adds	r7, #8
24003c1e:	46bd      	mov	sp, r7
24003c20:	bd80      	pop	{r7, pc}

24003c22 <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval status  - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
24003c22:	b580      	push	{r7, lr}
24003c24:	b082      	sub	sp, #8
24003c26:	af00      	add	r7, sp, #0
24003c28:	4603      	mov	r3, r0
24003c2a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
24003c2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24003c30:	4618      	mov	r0, r3
24003c32:	f7ff fd61 	bl	240036f8 <__NVIC_GetPendingIRQ>
24003c36:	4603      	mov	r3, r0
}
24003c38:	4618      	mov	r0, r3
24003c3a:	3708      	adds	r7, #8
24003c3c:	46bd      	mov	sp, r7
24003c3e:	bd80      	pop	{r7, pc}

24003c40 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
24003c40:	b580      	push	{r7, lr}
24003c42:	b082      	sub	sp, #8
24003c44:	af00      	add	r7, sp, #0
24003c46:	4603      	mov	r3, r0
24003c48:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
24003c4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24003c4e:	4618      	mov	r0, r3
24003c50:	f7ff fd92 	bl	24003778 <__NVIC_ClearPendingIRQ>
}
24003c54:	bf00      	nop
24003c56:	3708      	adds	r7, #8
24003c58:	46bd      	mov	sp, r7
24003c5a:	bd80      	pop	{r7, pc}

24003c5c <HAL_NVIC_GetActive>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval status  - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
{
24003c5c:	b580      	push	{r7, lr}
24003c5e:	b082      	sub	sp, #8
24003c60:	af00      	add	r7, sp, #0
24003c62:	4603      	mov	r3, r0
24003c64:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
24003c66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24003c6a:	4618      	mov	r0, r3
24003c6c:	f7ff fda2 	bl	240037b4 <__NVIC_GetActive>
24003c70:	4603      	mov	r3, r0
}
24003c72:	4618      	mov	r0, r3
24003c74:	3708      	adds	r7, #8
24003c76:	46bd      	mov	sp, r7
24003c78:	bd80      	pop	{r7, pc}
	...

24003c7c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
24003c7c:	b480      	push	{r7}
24003c7e:	b083      	sub	sp, #12
24003c80:	af00      	add	r7, sp, #0
24003c82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
24003c84:	687b      	ldr	r3, [r7, #4]
24003c86:	2b04      	cmp	r3, #4
24003c88:	d106      	bne.n	24003c98 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
24003c8a:	4b09      	ldr	r3, [pc, #36]	@ (24003cb0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
24003c8c:	681b      	ldr	r3, [r3, #0]
24003c8e:	4a08      	ldr	r2, [pc, #32]	@ (24003cb0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
24003c90:	f043 0304 	orr.w	r3, r3, #4
24003c94:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
24003c96:	e005      	b.n	24003ca4 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
24003c98:	4b05      	ldr	r3, [pc, #20]	@ (24003cb0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
24003c9a:	681b      	ldr	r3, [r3, #0]
24003c9c:	4a04      	ldr	r2, [pc, #16]	@ (24003cb0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
24003c9e:	f023 0304 	bic.w	r3, r3, #4
24003ca2:	6013      	str	r3, [r2, #0]
}
24003ca4:	bf00      	nop
24003ca6:	370c      	adds	r7, #12
24003ca8:	46bd      	mov	sp, r7
24003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
24003cae:	4770      	bx	lr
24003cb0:	e000e010 	.word	0xe000e010

24003cb4 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
24003cb4:	b580      	push	{r7, lr}
24003cb6:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
24003cb8:	f000 f802 	bl	24003cc0 <HAL_SYSTICK_Callback>
}
24003cbc:	bf00      	nop
24003cbe:	bd80      	pop	{r7, pc}

24003cc0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
24003cc0:	b480      	push	{r7}
24003cc2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
24003cc4:	bf00      	nop
24003cc6:	46bd      	mov	sp, r7
24003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
24003ccc:	4770      	bx	lr

24003cce <HAL_GetCurrentCPUID>:
/**
* @brief  Returns the current CPU ID.
* @retval CPU identifier
*/
uint32_t HAL_GetCurrentCPUID(void)
{
24003cce:	b480      	push	{r7}
24003cd0:	af00      	add	r7, sp, #0
  return  CM7_CPUID;
24003cd2:	2303      	movs	r3, #3
}
24003cd4:	4618      	mov	r0, r3
24003cd6:	46bd      	mov	sp, r7
24003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
24003cdc:	4770      	bx	lr
	...

24003ce0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
24003ce0:	b580      	push	{r7, lr}
24003ce2:	b086      	sub	sp, #24
24003ce4:	af00      	add	r7, sp, #0
24003ce6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
24003ce8:	f7ff f802 	bl	24002cf0 <HAL_GetTick>
24003cec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
24003cee:	687b      	ldr	r3, [r7, #4]
24003cf0:	2b00      	cmp	r3, #0
24003cf2:	d101      	bne.n	24003cf8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
24003cf4:	2301      	movs	r3, #1
24003cf6:	e312      	b.n	2400431e <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24003cf8:	687b      	ldr	r3, [r7, #4]
24003cfa:	681b      	ldr	r3, [r3, #0]
24003cfc:	4a66      	ldr	r2, [pc, #408]	@ (24003e98 <HAL_DMA_Init+0x1b8>)
24003cfe:	4293      	cmp	r3, r2
24003d00:	d04a      	beq.n	24003d98 <HAL_DMA_Init+0xb8>
24003d02:	687b      	ldr	r3, [r7, #4]
24003d04:	681b      	ldr	r3, [r3, #0]
24003d06:	4a65      	ldr	r2, [pc, #404]	@ (24003e9c <HAL_DMA_Init+0x1bc>)
24003d08:	4293      	cmp	r3, r2
24003d0a:	d045      	beq.n	24003d98 <HAL_DMA_Init+0xb8>
24003d0c:	687b      	ldr	r3, [r7, #4]
24003d0e:	681b      	ldr	r3, [r3, #0]
24003d10:	4a63      	ldr	r2, [pc, #396]	@ (24003ea0 <HAL_DMA_Init+0x1c0>)
24003d12:	4293      	cmp	r3, r2
24003d14:	d040      	beq.n	24003d98 <HAL_DMA_Init+0xb8>
24003d16:	687b      	ldr	r3, [r7, #4]
24003d18:	681b      	ldr	r3, [r3, #0]
24003d1a:	4a62      	ldr	r2, [pc, #392]	@ (24003ea4 <HAL_DMA_Init+0x1c4>)
24003d1c:	4293      	cmp	r3, r2
24003d1e:	d03b      	beq.n	24003d98 <HAL_DMA_Init+0xb8>
24003d20:	687b      	ldr	r3, [r7, #4]
24003d22:	681b      	ldr	r3, [r3, #0]
24003d24:	4a60      	ldr	r2, [pc, #384]	@ (24003ea8 <HAL_DMA_Init+0x1c8>)
24003d26:	4293      	cmp	r3, r2
24003d28:	d036      	beq.n	24003d98 <HAL_DMA_Init+0xb8>
24003d2a:	687b      	ldr	r3, [r7, #4]
24003d2c:	681b      	ldr	r3, [r3, #0]
24003d2e:	4a5f      	ldr	r2, [pc, #380]	@ (24003eac <HAL_DMA_Init+0x1cc>)
24003d30:	4293      	cmp	r3, r2
24003d32:	d031      	beq.n	24003d98 <HAL_DMA_Init+0xb8>
24003d34:	687b      	ldr	r3, [r7, #4]
24003d36:	681b      	ldr	r3, [r3, #0]
24003d38:	4a5d      	ldr	r2, [pc, #372]	@ (24003eb0 <HAL_DMA_Init+0x1d0>)
24003d3a:	4293      	cmp	r3, r2
24003d3c:	d02c      	beq.n	24003d98 <HAL_DMA_Init+0xb8>
24003d3e:	687b      	ldr	r3, [r7, #4]
24003d40:	681b      	ldr	r3, [r3, #0]
24003d42:	4a5c      	ldr	r2, [pc, #368]	@ (24003eb4 <HAL_DMA_Init+0x1d4>)
24003d44:	4293      	cmp	r3, r2
24003d46:	d027      	beq.n	24003d98 <HAL_DMA_Init+0xb8>
24003d48:	687b      	ldr	r3, [r7, #4]
24003d4a:	681b      	ldr	r3, [r3, #0]
24003d4c:	4a5a      	ldr	r2, [pc, #360]	@ (24003eb8 <HAL_DMA_Init+0x1d8>)
24003d4e:	4293      	cmp	r3, r2
24003d50:	d022      	beq.n	24003d98 <HAL_DMA_Init+0xb8>
24003d52:	687b      	ldr	r3, [r7, #4]
24003d54:	681b      	ldr	r3, [r3, #0]
24003d56:	4a59      	ldr	r2, [pc, #356]	@ (24003ebc <HAL_DMA_Init+0x1dc>)
24003d58:	4293      	cmp	r3, r2
24003d5a:	d01d      	beq.n	24003d98 <HAL_DMA_Init+0xb8>
24003d5c:	687b      	ldr	r3, [r7, #4]
24003d5e:	681b      	ldr	r3, [r3, #0]
24003d60:	4a57      	ldr	r2, [pc, #348]	@ (24003ec0 <HAL_DMA_Init+0x1e0>)
24003d62:	4293      	cmp	r3, r2
24003d64:	d018      	beq.n	24003d98 <HAL_DMA_Init+0xb8>
24003d66:	687b      	ldr	r3, [r7, #4]
24003d68:	681b      	ldr	r3, [r3, #0]
24003d6a:	4a56      	ldr	r2, [pc, #344]	@ (24003ec4 <HAL_DMA_Init+0x1e4>)
24003d6c:	4293      	cmp	r3, r2
24003d6e:	d013      	beq.n	24003d98 <HAL_DMA_Init+0xb8>
24003d70:	687b      	ldr	r3, [r7, #4]
24003d72:	681b      	ldr	r3, [r3, #0]
24003d74:	4a54      	ldr	r2, [pc, #336]	@ (24003ec8 <HAL_DMA_Init+0x1e8>)
24003d76:	4293      	cmp	r3, r2
24003d78:	d00e      	beq.n	24003d98 <HAL_DMA_Init+0xb8>
24003d7a:	687b      	ldr	r3, [r7, #4]
24003d7c:	681b      	ldr	r3, [r3, #0]
24003d7e:	4a53      	ldr	r2, [pc, #332]	@ (24003ecc <HAL_DMA_Init+0x1ec>)
24003d80:	4293      	cmp	r3, r2
24003d82:	d009      	beq.n	24003d98 <HAL_DMA_Init+0xb8>
24003d84:	687b      	ldr	r3, [r7, #4]
24003d86:	681b      	ldr	r3, [r3, #0]
24003d88:	4a51      	ldr	r2, [pc, #324]	@ (24003ed0 <HAL_DMA_Init+0x1f0>)
24003d8a:	4293      	cmp	r3, r2
24003d8c:	d004      	beq.n	24003d98 <HAL_DMA_Init+0xb8>
24003d8e:	687b      	ldr	r3, [r7, #4]
24003d90:	681b      	ldr	r3, [r3, #0]
24003d92:	4a50      	ldr	r2, [pc, #320]	@ (24003ed4 <HAL_DMA_Init+0x1f4>)
24003d94:	4293      	cmp	r3, r2
24003d96:	d101      	bne.n	24003d9c <HAL_DMA_Init+0xbc>
24003d98:	2301      	movs	r3, #1
24003d9a:	e000      	b.n	24003d9e <HAL_DMA_Init+0xbe>
24003d9c:	2300      	movs	r3, #0
24003d9e:	2b00      	cmp	r3, #0
24003da0:	f000 813c 	beq.w	2400401c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
24003da4:	687b      	ldr	r3, [r7, #4]
24003da6:	2202      	movs	r2, #2
24003da8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
24003dac:	687b      	ldr	r3, [r7, #4]
24003dae:	2200      	movs	r2, #0
24003db0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
24003db4:	687b      	ldr	r3, [r7, #4]
24003db6:	681b      	ldr	r3, [r3, #0]
24003db8:	4a37      	ldr	r2, [pc, #220]	@ (24003e98 <HAL_DMA_Init+0x1b8>)
24003dba:	4293      	cmp	r3, r2
24003dbc:	d04a      	beq.n	24003e54 <HAL_DMA_Init+0x174>
24003dbe:	687b      	ldr	r3, [r7, #4]
24003dc0:	681b      	ldr	r3, [r3, #0]
24003dc2:	4a36      	ldr	r2, [pc, #216]	@ (24003e9c <HAL_DMA_Init+0x1bc>)
24003dc4:	4293      	cmp	r3, r2
24003dc6:	d045      	beq.n	24003e54 <HAL_DMA_Init+0x174>
24003dc8:	687b      	ldr	r3, [r7, #4]
24003dca:	681b      	ldr	r3, [r3, #0]
24003dcc:	4a34      	ldr	r2, [pc, #208]	@ (24003ea0 <HAL_DMA_Init+0x1c0>)
24003dce:	4293      	cmp	r3, r2
24003dd0:	d040      	beq.n	24003e54 <HAL_DMA_Init+0x174>
24003dd2:	687b      	ldr	r3, [r7, #4]
24003dd4:	681b      	ldr	r3, [r3, #0]
24003dd6:	4a33      	ldr	r2, [pc, #204]	@ (24003ea4 <HAL_DMA_Init+0x1c4>)
24003dd8:	4293      	cmp	r3, r2
24003dda:	d03b      	beq.n	24003e54 <HAL_DMA_Init+0x174>
24003ddc:	687b      	ldr	r3, [r7, #4]
24003dde:	681b      	ldr	r3, [r3, #0]
24003de0:	4a31      	ldr	r2, [pc, #196]	@ (24003ea8 <HAL_DMA_Init+0x1c8>)
24003de2:	4293      	cmp	r3, r2
24003de4:	d036      	beq.n	24003e54 <HAL_DMA_Init+0x174>
24003de6:	687b      	ldr	r3, [r7, #4]
24003de8:	681b      	ldr	r3, [r3, #0]
24003dea:	4a30      	ldr	r2, [pc, #192]	@ (24003eac <HAL_DMA_Init+0x1cc>)
24003dec:	4293      	cmp	r3, r2
24003dee:	d031      	beq.n	24003e54 <HAL_DMA_Init+0x174>
24003df0:	687b      	ldr	r3, [r7, #4]
24003df2:	681b      	ldr	r3, [r3, #0]
24003df4:	4a2e      	ldr	r2, [pc, #184]	@ (24003eb0 <HAL_DMA_Init+0x1d0>)
24003df6:	4293      	cmp	r3, r2
24003df8:	d02c      	beq.n	24003e54 <HAL_DMA_Init+0x174>
24003dfa:	687b      	ldr	r3, [r7, #4]
24003dfc:	681b      	ldr	r3, [r3, #0]
24003dfe:	4a2d      	ldr	r2, [pc, #180]	@ (24003eb4 <HAL_DMA_Init+0x1d4>)
24003e00:	4293      	cmp	r3, r2
24003e02:	d027      	beq.n	24003e54 <HAL_DMA_Init+0x174>
24003e04:	687b      	ldr	r3, [r7, #4]
24003e06:	681b      	ldr	r3, [r3, #0]
24003e08:	4a2b      	ldr	r2, [pc, #172]	@ (24003eb8 <HAL_DMA_Init+0x1d8>)
24003e0a:	4293      	cmp	r3, r2
24003e0c:	d022      	beq.n	24003e54 <HAL_DMA_Init+0x174>
24003e0e:	687b      	ldr	r3, [r7, #4]
24003e10:	681b      	ldr	r3, [r3, #0]
24003e12:	4a2a      	ldr	r2, [pc, #168]	@ (24003ebc <HAL_DMA_Init+0x1dc>)
24003e14:	4293      	cmp	r3, r2
24003e16:	d01d      	beq.n	24003e54 <HAL_DMA_Init+0x174>
24003e18:	687b      	ldr	r3, [r7, #4]
24003e1a:	681b      	ldr	r3, [r3, #0]
24003e1c:	4a28      	ldr	r2, [pc, #160]	@ (24003ec0 <HAL_DMA_Init+0x1e0>)
24003e1e:	4293      	cmp	r3, r2
24003e20:	d018      	beq.n	24003e54 <HAL_DMA_Init+0x174>
24003e22:	687b      	ldr	r3, [r7, #4]
24003e24:	681b      	ldr	r3, [r3, #0]
24003e26:	4a27      	ldr	r2, [pc, #156]	@ (24003ec4 <HAL_DMA_Init+0x1e4>)
24003e28:	4293      	cmp	r3, r2
24003e2a:	d013      	beq.n	24003e54 <HAL_DMA_Init+0x174>
24003e2c:	687b      	ldr	r3, [r7, #4]
24003e2e:	681b      	ldr	r3, [r3, #0]
24003e30:	4a25      	ldr	r2, [pc, #148]	@ (24003ec8 <HAL_DMA_Init+0x1e8>)
24003e32:	4293      	cmp	r3, r2
24003e34:	d00e      	beq.n	24003e54 <HAL_DMA_Init+0x174>
24003e36:	687b      	ldr	r3, [r7, #4]
24003e38:	681b      	ldr	r3, [r3, #0]
24003e3a:	4a24      	ldr	r2, [pc, #144]	@ (24003ecc <HAL_DMA_Init+0x1ec>)
24003e3c:	4293      	cmp	r3, r2
24003e3e:	d009      	beq.n	24003e54 <HAL_DMA_Init+0x174>
24003e40:	687b      	ldr	r3, [r7, #4]
24003e42:	681b      	ldr	r3, [r3, #0]
24003e44:	4a22      	ldr	r2, [pc, #136]	@ (24003ed0 <HAL_DMA_Init+0x1f0>)
24003e46:	4293      	cmp	r3, r2
24003e48:	d004      	beq.n	24003e54 <HAL_DMA_Init+0x174>
24003e4a:	687b      	ldr	r3, [r7, #4]
24003e4c:	681b      	ldr	r3, [r3, #0]
24003e4e:	4a21      	ldr	r2, [pc, #132]	@ (24003ed4 <HAL_DMA_Init+0x1f4>)
24003e50:	4293      	cmp	r3, r2
24003e52:	d108      	bne.n	24003e66 <HAL_DMA_Init+0x186>
24003e54:	687b      	ldr	r3, [r7, #4]
24003e56:	681b      	ldr	r3, [r3, #0]
24003e58:	681a      	ldr	r2, [r3, #0]
24003e5a:	687b      	ldr	r3, [r7, #4]
24003e5c:	681b      	ldr	r3, [r3, #0]
24003e5e:	f022 0201 	bic.w	r2, r2, #1
24003e62:	601a      	str	r2, [r3, #0]
24003e64:	e007      	b.n	24003e76 <HAL_DMA_Init+0x196>
24003e66:	687b      	ldr	r3, [r7, #4]
24003e68:	681b      	ldr	r3, [r3, #0]
24003e6a:	681a      	ldr	r2, [r3, #0]
24003e6c:	687b      	ldr	r3, [r7, #4]
24003e6e:	681b      	ldr	r3, [r3, #0]
24003e70:	f022 0201 	bic.w	r2, r2, #1
24003e74:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
24003e76:	e02f      	b.n	24003ed8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
24003e78:	f7fe ff3a 	bl	24002cf0 <HAL_GetTick>
24003e7c:	4602      	mov	r2, r0
24003e7e:	693b      	ldr	r3, [r7, #16]
24003e80:	1ad3      	subs	r3, r2, r3
24003e82:	2b05      	cmp	r3, #5
24003e84:	d928      	bls.n	24003ed8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
24003e86:	687b      	ldr	r3, [r7, #4]
24003e88:	2220      	movs	r2, #32
24003e8a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
24003e8c:	687b      	ldr	r3, [r7, #4]
24003e8e:	2203      	movs	r2, #3
24003e90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
24003e94:	2301      	movs	r3, #1
24003e96:	e242      	b.n	2400431e <HAL_DMA_Init+0x63e>
24003e98:	40020010 	.word	0x40020010
24003e9c:	40020028 	.word	0x40020028
24003ea0:	40020040 	.word	0x40020040
24003ea4:	40020058 	.word	0x40020058
24003ea8:	40020070 	.word	0x40020070
24003eac:	40020088 	.word	0x40020088
24003eb0:	400200a0 	.word	0x400200a0
24003eb4:	400200b8 	.word	0x400200b8
24003eb8:	40020410 	.word	0x40020410
24003ebc:	40020428 	.word	0x40020428
24003ec0:	40020440 	.word	0x40020440
24003ec4:	40020458 	.word	0x40020458
24003ec8:	40020470 	.word	0x40020470
24003ecc:	40020488 	.word	0x40020488
24003ed0:	400204a0 	.word	0x400204a0
24003ed4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
24003ed8:	687b      	ldr	r3, [r7, #4]
24003eda:	681b      	ldr	r3, [r3, #0]
24003edc:	681b      	ldr	r3, [r3, #0]
24003ede:	f003 0301 	and.w	r3, r3, #1
24003ee2:	2b00      	cmp	r3, #0
24003ee4:	d1c8      	bne.n	24003e78 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
24003ee6:	687b      	ldr	r3, [r7, #4]
24003ee8:	681b      	ldr	r3, [r3, #0]
24003eea:	681b      	ldr	r3, [r3, #0]
24003eec:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
24003eee:	697a      	ldr	r2, [r7, #20]
24003ef0:	4b83      	ldr	r3, [pc, #524]	@ (24004100 <HAL_DMA_Init+0x420>)
24003ef2:	4013      	ands	r3, r2
24003ef4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
24003ef6:	687b      	ldr	r3, [r7, #4]
24003ef8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
24003efa:	687b      	ldr	r3, [r7, #4]
24003efc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
24003efe:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
24003f00:	687b      	ldr	r3, [r7, #4]
24003f02:	691b      	ldr	r3, [r3, #16]
24003f04:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
24003f06:	687b      	ldr	r3, [r7, #4]
24003f08:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
24003f0a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
24003f0c:	687b      	ldr	r3, [r7, #4]
24003f0e:	699b      	ldr	r3, [r3, #24]
24003f10:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
24003f12:	687b      	ldr	r3, [r7, #4]
24003f14:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
24003f16:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
24003f18:	687b      	ldr	r3, [r7, #4]
24003f1a:	6a1b      	ldr	r3, [r3, #32]
24003f1c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
24003f1e:	697a      	ldr	r2, [r7, #20]
24003f20:	4313      	orrs	r3, r2
24003f22:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
24003f24:	687b      	ldr	r3, [r7, #4]
24003f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
24003f28:	2b04      	cmp	r3, #4
24003f2a:	d107      	bne.n	24003f3c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
24003f2c:	687b      	ldr	r3, [r7, #4]
24003f2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
24003f30:	687b      	ldr	r3, [r7, #4]
24003f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
24003f34:	4313      	orrs	r3, r2
24003f36:	697a      	ldr	r2, [r7, #20]
24003f38:	4313      	orrs	r3, r2
24003f3a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
24003f3c:	687b      	ldr	r3, [r7, #4]
24003f3e:	685b      	ldr	r3, [r3, #4]
24003f40:	2b28      	cmp	r3, #40	@ 0x28
24003f42:	d903      	bls.n	24003f4c <HAL_DMA_Init+0x26c>
24003f44:	687b      	ldr	r3, [r7, #4]
24003f46:	685b      	ldr	r3, [r3, #4]
24003f48:	2b2e      	cmp	r3, #46	@ 0x2e
24003f4a:	d91f      	bls.n	24003f8c <HAL_DMA_Init+0x2ac>
24003f4c:	687b      	ldr	r3, [r7, #4]
24003f4e:	685b      	ldr	r3, [r3, #4]
24003f50:	2b3e      	cmp	r3, #62	@ 0x3e
24003f52:	d903      	bls.n	24003f5c <HAL_DMA_Init+0x27c>
24003f54:	687b      	ldr	r3, [r7, #4]
24003f56:	685b      	ldr	r3, [r3, #4]
24003f58:	2b42      	cmp	r3, #66	@ 0x42
24003f5a:	d917      	bls.n	24003f8c <HAL_DMA_Init+0x2ac>
24003f5c:	687b      	ldr	r3, [r7, #4]
24003f5e:	685b      	ldr	r3, [r3, #4]
24003f60:	2b46      	cmp	r3, #70	@ 0x46
24003f62:	d903      	bls.n	24003f6c <HAL_DMA_Init+0x28c>
24003f64:	687b      	ldr	r3, [r7, #4]
24003f66:	685b      	ldr	r3, [r3, #4]
24003f68:	2b48      	cmp	r3, #72	@ 0x48
24003f6a:	d90f      	bls.n	24003f8c <HAL_DMA_Init+0x2ac>
24003f6c:	687b      	ldr	r3, [r7, #4]
24003f6e:	685b      	ldr	r3, [r3, #4]
24003f70:	2b4e      	cmp	r3, #78	@ 0x4e
24003f72:	d903      	bls.n	24003f7c <HAL_DMA_Init+0x29c>
24003f74:	687b      	ldr	r3, [r7, #4]
24003f76:	685b      	ldr	r3, [r3, #4]
24003f78:	2b52      	cmp	r3, #82	@ 0x52
24003f7a:	d907      	bls.n	24003f8c <HAL_DMA_Init+0x2ac>
24003f7c:	687b      	ldr	r3, [r7, #4]
24003f7e:	685b      	ldr	r3, [r3, #4]
24003f80:	2b73      	cmp	r3, #115	@ 0x73
24003f82:	d905      	bls.n	24003f90 <HAL_DMA_Init+0x2b0>
24003f84:	687b      	ldr	r3, [r7, #4]
24003f86:	685b      	ldr	r3, [r3, #4]
24003f88:	2b77      	cmp	r3, #119	@ 0x77
24003f8a:	d801      	bhi.n	24003f90 <HAL_DMA_Init+0x2b0>
24003f8c:	2301      	movs	r3, #1
24003f8e:	e000      	b.n	24003f92 <HAL_DMA_Init+0x2b2>
24003f90:	2300      	movs	r3, #0
24003f92:	2b00      	cmp	r3, #0
24003f94:	d003      	beq.n	24003f9e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
24003f96:	697b      	ldr	r3, [r7, #20]
24003f98:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
24003f9c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
24003f9e:	687b      	ldr	r3, [r7, #4]
24003fa0:	681b      	ldr	r3, [r3, #0]
24003fa2:	697a      	ldr	r2, [r7, #20]
24003fa4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
24003fa6:	687b      	ldr	r3, [r7, #4]
24003fa8:	681b      	ldr	r3, [r3, #0]
24003faa:	695b      	ldr	r3, [r3, #20]
24003fac:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
24003fae:	697b      	ldr	r3, [r7, #20]
24003fb0:	f023 0307 	bic.w	r3, r3, #7
24003fb4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
24003fb6:	687b      	ldr	r3, [r7, #4]
24003fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
24003fba:	697a      	ldr	r2, [r7, #20]
24003fbc:	4313      	orrs	r3, r2
24003fbe:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
24003fc0:	687b      	ldr	r3, [r7, #4]
24003fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
24003fc4:	2b04      	cmp	r3, #4
24003fc6:	d117      	bne.n	24003ff8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
24003fc8:	687b      	ldr	r3, [r7, #4]
24003fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
24003fcc:	697a      	ldr	r2, [r7, #20]
24003fce:	4313      	orrs	r3, r2
24003fd0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
24003fd2:	687b      	ldr	r3, [r7, #4]
24003fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
24003fd6:	2b00      	cmp	r3, #0
24003fd8:	d00e      	beq.n	24003ff8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
24003fda:	6878      	ldr	r0, [r7, #4]
24003fdc:	f003 fa90 	bl	24007500 <DMA_CheckFifoParam>
24003fe0:	4603      	mov	r3, r0
24003fe2:	2b00      	cmp	r3, #0
24003fe4:	d008      	beq.n	24003ff8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
24003fe6:	687b      	ldr	r3, [r7, #4]
24003fe8:	2240      	movs	r2, #64	@ 0x40
24003fea:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
24003fec:	687b      	ldr	r3, [r7, #4]
24003fee:	2201      	movs	r2, #1
24003ff0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
24003ff4:	2301      	movs	r3, #1
24003ff6:	e192      	b.n	2400431e <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
24003ff8:	687b      	ldr	r3, [r7, #4]
24003ffa:	681b      	ldr	r3, [r3, #0]
24003ffc:	697a      	ldr	r2, [r7, #20]
24003ffe:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
24004000:	6878      	ldr	r0, [r7, #4]
24004002:	f003 f9cb 	bl	2400739c <DMA_CalcBaseAndBitshift>
24004006:	4603      	mov	r3, r0
24004008:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
2400400a:	687b      	ldr	r3, [r7, #4]
2400400c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
2400400e:	f003 031f 	and.w	r3, r3, #31
24004012:	223f      	movs	r2, #63	@ 0x3f
24004014:	409a      	lsls	r2, r3
24004016:	68bb      	ldr	r3, [r7, #8]
24004018:	609a      	str	r2, [r3, #8]
2400401a:	e0c8      	b.n	240041ae <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
2400401c:	687b      	ldr	r3, [r7, #4]
2400401e:	681b      	ldr	r3, [r3, #0]
24004020:	4a38      	ldr	r2, [pc, #224]	@ (24004104 <HAL_DMA_Init+0x424>)
24004022:	4293      	cmp	r3, r2
24004024:	d022      	beq.n	2400406c <HAL_DMA_Init+0x38c>
24004026:	687b      	ldr	r3, [r7, #4]
24004028:	681b      	ldr	r3, [r3, #0]
2400402a:	4a37      	ldr	r2, [pc, #220]	@ (24004108 <HAL_DMA_Init+0x428>)
2400402c:	4293      	cmp	r3, r2
2400402e:	d01d      	beq.n	2400406c <HAL_DMA_Init+0x38c>
24004030:	687b      	ldr	r3, [r7, #4]
24004032:	681b      	ldr	r3, [r3, #0]
24004034:	4a35      	ldr	r2, [pc, #212]	@ (2400410c <HAL_DMA_Init+0x42c>)
24004036:	4293      	cmp	r3, r2
24004038:	d018      	beq.n	2400406c <HAL_DMA_Init+0x38c>
2400403a:	687b      	ldr	r3, [r7, #4]
2400403c:	681b      	ldr	r3, [r3, #0]
2400403e:	4a34      	ldr	r2, [pc, #208]	@ (24004110 <HAL_DMA_Init+0x430>)
24004040:	4293      	cmp	r3, r2
24004042:	d013      	beq.n	2400406c <HAL_DMA_Init+0x38c>
24004044:	687b      	ldr	r3, [r7, #4]
24004046:	681b      	ldr	r3, [r3, #0]
24004048:	4a32      	ldr	r2, [pc, #200]	@ (24004114 <HAL_DMA_Init+0x434>)
2400404a:	4293      	cmp	r3, r2
2400404c:	d00e      	beq.n	2400406c <HAL_DMA_Init+0x38c>
2400404e:	687b      	ldr	r3, [r7, #4]
24004050:	681b      	ldr	r3, [r3, #0]
24004052:	4a31      	ldr	r2, [pc, #196]	@ (24004118 <HAL_DMA_Init+0x438>)
24004054:	4293      	cmp	r3, r2
24004056:	d009      	beq.n	2400406c <HAL_DMA_Init+0x38c>
24004058:	687b      	ldr	r3, [r7, #4]
2400405a:	681b      	ldr	r3, [r3, #0]
2400405c:	4a2f      	ldr	r2, [pc, #188]	@ (2400411c <HAL_DMA_Init+0x43c>)
2400405e:	4293      	cmp	r3, r2
24004060:	d004      	beq.n	2400406c <HAL_DMA_Init+0x38c>
24004062:	687b      	ldr	r3, [r7, #4]
24004064:	681b      	ldr	r3, [r3, #0]
24004066:	4a2e      	ldr	r2, [pc, #184]	@ (24004120 <HAL_DMA_Init+0x440>)
24004068:	4293      	cmp	r3, r2
2400406a:	d101      	bne.n	24004070 <HAL_DMA_Init+0x390>
2400406c:	2301      	movs	r3, #1
2400406e:	e000      	b.n	24004072 <HAL_DMA_Init+0x392>
24004070:	2300      	movs	r3, #0
24004072:	2b00      	cmp	r3, #0
24004074:	f000 8092 	beq.w	2400419c <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
24004078:	687b      	ldr	r3, [r7, #4]
2400407a:	681b      	ldr	r3, [r3, #0]
2400407c:	4a21      	ldr	r2, [pc, #132]	@ (24004104 <HAL_DMA_Init+0x424>)
2400407e:	4293      	cmp	r3, r2
24004080:	d021      	beq.n	240040c6 <HAL_DMA_Init+0x3e6>
24004082:	687b      	ldr	r3, [r7, #4]
24004084:	681b      	ldr	r3, [r3, #0]
24004086:	4a20      	ldr	r2, [pc, #128]	@ (24004108 <HAL_DMA_Init+0x428>)
24004088:	4293      	cmp	r3, r2
2400408a:	d01c      	beq.n	240040c6 <HAL_DMA_Init+0x3e6>
2400408c:	687b      	ldr	r3, [r7, #4]
2400408e:	681b      	ldr	r3, [r3, #0]
24004090:	4a1e      	ldr	r2, [pc, #120]	@ (2400410c <HAL_DMA_Init+0x42c>)
24004092:	4293      	cmp	r3, r2
24004094:	d017      	beq.n	240040c6 <HAL_DMA_Init+0x3e6>
24004096:	687b      	ldr	r3, [r7, #4]
24004098:	681b      	ldr	r3, [r3, #0]
2400409a:	4a1d      	ldr	r2, [pc, #116]	@ (24004110 <HAL_DMA_Init+0x430>)
2400409c:	4293      	cmp	r3, r2
2400409e:	d012      	beq.n	240040c6 <HAL_DMA_Init+0x3e6>
240040a0:	687b      	ldr	r3, [r7, #4]
240040a2:	681b      	ldr	r3, [r3, #0]
240040a4:	4a1b      	ldr	r2, [pc, #108]	@ (24004114 <HAL_DMA_Init+0x434>)
240040a6:	4293      	cmp	r3, r2
240040a8:	d00d      	beq.n	240040c6 <HAL_DMA_Init+0x3e6>
240040aa:	687b      	ldr	r3, [r7, #4]
240040ac:	681b      	ldr	r3, [r3, #0]
240040ae:	4a1a      	ldr	r2, [pc, #104]	@ (24004118 <HAL_DMA_Init+0x438>)
240040b0:	4293      	cmp	r3, r2
240040b2:	d008      	beq.n	240040c6 <HAL_DMA_Init+0x3e6>
240040b4:	687b      	ldr	r3, [r7, #4]
240040b6:	681b      	ldr	r3, [r3, #0]
240040b8:	4a18      	ldr	r2, [pc, #96]	@ (2400411c <HAL_DMA_Init+0x43c>)
240040ba:	4293      	cmp	r3, r2
240040bc:	d003      	beq.n	240040c6 <HAL_DMA_Init+0x3e6>
240040be:	687b      	ldr	r3, [r7, #4]
240040c0:	681b      	ldr	r3, [r3, #0]
240040c2:	4a17      	ldr	r2, [pc, #92]	@ (24004120 <HAL_DMA_Init+0x440>)
240040c4:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
240040c6:	687b      	ldr	r3, [r7, #4]
240040c8:	2202      	movs	r2, #2
240040ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
240040ce:	687b      	ldr	r3, [r7, #4]
240040d0:	2200      	movs	r2, #0
240040d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
240040d6:	687b      	ldr	r3, [r7, #4]
240040d8:	681b      	ldr	r3, [r3, #0]
240040da:	681b      	ldr	r3, [r3, #0]
240040dc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
240040de:	697a      	ldr	r2, [r7, #20]
240040e0:	4b10      	ldr	r3, [pc, #64]	@ (24004124 <HAL_DMA_Init+0x444>)
240040e2:	4013      	ands	r3, r2
240040e4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
240040e6:	687b      	ldr	r3, [r7, #4]
240040e8:	689b      	ldr	r3, [r3, #8]
240040ea:	2b40      	cmp	r3, #64	@ 0x40
240040ec:	d01c      	beq.n	24004128 <HAL_DMA_Init+0x448>
240040ee:	687b      	ldr	r3, [r7, #4]
240040f0:	689b      	ldr	r3, [r3, #8]
240040f2:	2b80      	cmp	r3, #128	@ 0x80
240040f4:	d102      	bne.n	240040fc <HAL_DMA_Init+0x41c>
240040f6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
240040fa:	e016      	b.n	2400412a <HAL_DMA_Init+0x44a>
240040fc:	2300      	movs	r3, #0
240040fe:	e014      	b.n	2400412a <HAL_DMA_Init+0x44a>
24004100:	fe10803f 	.word	0xfe10803f
24004104:	58025408 	.word	0x58025408
24004108:	5802541c 	.word	0x5802541c
2400410c:	58025430 	.word	0x58025430
24004110:	58025444 	.word	0x58025444
24004114:	58025458 	.word	0x58025458
24004118:	5802546c 	.word	0x5802546c
2400411c:	58025480 	.word	0x58025480
24004120:	58025494 	.word	0x58025494
24004124:	fffe000f 	.word	0xfffe000f
24004128:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
2400412a:	687a      	ldr	r2, [r7, #4]
2400412c:	68d2      	ldr	r2, [r2, #12]
2400412e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
24004130:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
24004132:	687b      	ldr	r3, [r7, #4]
24004134:	691b      	ldr	r3, [r3, #16]
24004136:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
24004138:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
2400413a:	687b      	ldr	r3, [r7, #4]
2400413c:	695b      	ldr	r3, [r3, #20]
2400413e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
24004140:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
24004142:	687b      	ldr	r3, [r7, #4]
24004144:	699b      	ldr	r3, [r3, #24]
24004146:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
24004148:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
2400414a:	687b      	ldr	r3, [r7, #4]
2400414c:	69db      	ldr	r3, [r3, #28]
2400414e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
24004150:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
24004152:	687b      	ldr	r3, [r7, #4]
24004154:	6a1b      	ldr	r3, [r3, #32]
24004156:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
24004158:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
2400415a:	697a      	ldr	r2, [r7, #20]
2400415c:	4313      	orrs	r3, r2
2400415e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
24004160:	687b      	ldr	r3, [r7, #4]
24004162:	681b      	ldr	r3, [r3, #0]
24004164:	697a      	ldr	r2, [r7, #20]
24004166:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
24004168:	687b      	ldr	r3, [r7, #4]
2400416a:	681b      	ldr	r3, [r3, #0]
2400416c:	461a      	mov	r2, r3
2400416e:	4b6e      	ldr	r3, [pc, #440]	@ (24004328 <HAL_DMA_Init+0x648>)
24004170:	4413      	add	r3, r2
24004172:	4a6e      	ldr	r2, [pc, #440]	@ (2400432c <HAL_DMA_Init+0x64c>)
24004174:	fba2 2303 	umull	r2, r3, r2, r3
24004178:	091b      	lsrs	r3, r3, #4
2400417a:	009a      	lsls	r2, r3, #2
2400417c:	687b      	ldr	r3, [r7, #4]
2400417e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
24004180:	6878      	ldr	r0, [r7, #4]
24004182:	f003 f90b 	bl	2400739c <DMA_CalcBaseAndBitshift>
24004186:	4603      	mov	r3, r0
24004188:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
2400418a:	687b      	ldr	r3, [r7, #4]
2400418c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
2400418e:	f003 031f 	and.w	r3, r3, #31
24004192:	2201      	movs	r2, #1
24004194:	409a      	lsls	r2, r3
24004196:	68fb      	ldr	r3, [r7, #12]
24004198:	605a      	str	r2, [r3, #4]
2400419a:	e008      	b.n	240041ae <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
2400419c:	687b      	ldr	r3, [r7, #4]
2400419e:	2240      	movs	r2, #64	@ 0x40
240041a0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
240041a2:	687b      	ldr	r3, [r7, #4]
240041a4:	2203      	movs	r2, #3
240041a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
240041aa:	2301      	movs	r3, #1
240041ac:	e0b7      	b.n	2400431e <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240041ae:	687b      	ldr	r3, [r7, #4]
240041b0:	681b      	ldr	r3, [r3, #0]
240041b2:	4a5f      	ldr	r2, [pc, #380]	@ (24004330 <HAL_DMA_Init+0x650>)
240041b4:	4293      	cmp	r3, r2
240041b6:	d072      	beq.n	2400429e <HAL_DMA_Init+0x5be>
240041b8:	687b      	ldr	r3, [r7, #4]
240041ba:	681b      	ldr	r3, [r3, #0]
240041bc:	4a5d      	ldr	r2, [pc, #372]	@ (24004334 <HAL_DMA_Init+0x654>)
240041be:	4293      	cmp	r3, r2
240041c0:	d06d      	beq.n	2400429e <HAL_DMA_Init+0x5be>
240041c2:	687b      	ldr	r3, [r7, #4]
240041c4:	681b      	ldr	r3, [r3, #0]
240041c6:	4a5c      	ldr	r2, [pc, #368]	@ (24004338 <HAL_DMA_Init+0x658>)
240041c8:	4293      	cmp	r3, r2
240041ca:	d068      	beq.n	2400429e <HAL_DMA_Init+0x5be>
240041cc:	687b      	ldr	r3, [r7, #4]
240041ce:	681b      	ldr	r3, [r3, #0]
240041d0:	4a5a      	ldr	r2, [pc, #360]	@ (2400433c <HAL_DMA_Init+0x65c>)
240041d2:	4293      	cmp	r3, r2
240041d4:	d063      	beq.n	2400429e <HAL_DMA_Init+0x5be>
240041d6:	687b      	ldr	r3, [r7, #4]
240041d8:	681b      	ldr	r3, [r3, #0]
240041da:	4a59      	ldr	r2, [pc, #356]	@ (24004340 <HAL_DMA_Init+0x660>)
240041dc:	4293      	cmp	r3, r2
240041de:	d05e      	beq.n	2400429e <HAL_DMA_Init+0x5be>
240041e0:	687b      	ldr	r3, [r7, #4]
240041e2:	681b      	ldr	r3, [r3, #0]
240041e4:	4a57      	ldr	r2, [pc, #348]	@ (24004344 <HAL_DMA_Init+0x664>)
240041e6:	4293      	cmp	r3, r2
240041e8:	d059      	beq.n	2400429e <HAL_DMA_Init+0x5be>
240041ea:	687b      	ldr	r3, [r7, #4]
240041ec:	681b      	ldr	r3, [r3, #0]
240041ee:	4a56      	ldr	r2, [pc, #344]	@ (24004348 <HAL_DMA_Init+0x668>)
240041f0:	4293      	cmp	r3, r2
240041f2:	d054      	beq.n	2400429e <HAL_DMA_Init+0x5be>
240041f4:	687b      	ldr	r3, [r7, #4]
240041f6:	681b      	ldr	r3, [r3, #0]
240041f8:	4a54      	ldr	r2, [pc, #336]	@ (2400434c <HAL_DMA_Init+0x66c>)
240041fa:	4293      	cmp	r3, r2
240041fc:	d04f      	beq.n	2400429e <HAL_DMA_Init+0x5be>
240041fe:	687b      	ldr	r3, [r7, #4]
24004200:	681b      	ldr	r3, [r3, #0]
24004202:	4a53      	ldr	r2, [pc, #332]	@ (24004350 <HAL_DMA_Init+0x670>)
24004204:	4293      	cmp	r3, r2
24004206:	d04a      	beq.n	2400429e <HAL_DMA_Init+0x5be>
24004208:	687b      	ldr	r3, [r7, #4]
2400420a:	681b      	ldr	r3, [r3, #0]
2400420c:	4a51      	ldr	r2, [pc, #324]	@ (24004354 <HAL_DMA_Init+0x674>)
2400420e:	4293      	cmp	r3, r2
24004210:	d045      	beq.n	2400429e <HAL_DMA_Init+0x5be>
24004212:	687b      	ldr	r3, [r7, #4]
24004214:	681b      	ldr	r3, [r3, #0]
24004216:	4a50      	ldr	r2, [pc, #320]	@ (24004358 <HAL_DMA_Init+0x678>)
24004218:	4293      	cmp	r3, r2
2400421a:	d040      	beq.n	2400429e <HAL_DMA_Init+0x5be>
2400421c:	687b      	ldr	r3, [r7, #4]
2400421e:	681b      	ldr	r3, [r3, #0]
24004220:	4a4e      	ldr	r2, [pc, #312]	@ (2400435c <HAL_DMA_Init+0x67c>)
24004222:	4293      	cmp	r3, r2
24004224:	d03b      	beq.n	2400429e <HAL_DMA_Init+0x5be>
24004226:	687b      	ldr	r3, [r7, #4]
24004228:	681b      	ldr	r3, [r3, #0]
2400422a:	4a4d      	ldr	r2, [pc, #308]	@ (24004360 <HAL_DMA_Init+0x680>)
2400422c:	4293      	cmp	r3, r2
2400422e:	d036      	beq.n	2400429e <HAL_DMA_Init+0x5be>
24004230:	687b      	ldr	r3, [r7, #4]
24004232:	681b      	ldr	r3, [r3, #0]
24004234:	4a4b      	ldr	r2, [pc, #300]	@ (24004364 <HAL_DMA_Init+0x684>)
24004236:	4293      	cmp	r3, r2
24004238:	d031      	beq.n	2400429e <HAL_DMA_Init+0x5be>
2400423a:	687b      	ldr	r3, [r7, #4]
2400423c:	681b      	ldr	r3, [r3, #0]
2400423e:	4a4a      	ldr	r2, [pc, #296]	@ (24004368 <HAL_DMA_Init+0x688>)
24004240:	4293      	cmp	r3, r2
24004242:	d02c      	beq.n	2400429e <HAL_DMA_Init+0x5be>
24004244:	687b      	ldr	r3, [r7, #4]
24004246:	681b      	ldr	r3, [r3, #0]
24004248:	4a48      	ldr	r2, [pc, #288]	@ (2400436c <HAL_DMA_Init+0x68c>)
2400424a:	4293      	cmp	r3, r2
2400424c:	d027      	beq.n	2400429e <HAL_DMA_Init+0x5be>
2400424e:	687b      	ldr	r3, [r7, #4]
24004250:	681b      	ldr	r3, [r3, #0]
24004252:	4a47      	ldr	r2, [pc, #284]	@ (24004370 <HAL_DMA_Init+0x690>)
24004254:	4293      	cmp	r3, r2
24004256:	d022      	beq.n	2400429e <HAL_DMA_Init+0x5be>
24004258:	687b      	ldr	r3, [r7, #4]
2400425a:	681b      	ldr	r3, [r3, #0]
2400425c:	4a45      	ldr	r2, [pc, #276]	@ (24004374 <HAL_DMA_Init+0x694>)
2400425e:	4293      	cmp	r3, r2
24004260:	d01d      	beq.n	2400429e <HAL_DMA_Init+0x5be>
24004262:	687b      	ldr	r3, [r7, #4]
24004264:	681b      	ldr	r3, [r3, #0]
24004266:	4a44      	ldr	r2, [pc, #272]	@ (24004378 <HAL_DMA_Init+0x698>)
24004268:	4293      	cmp	r3, r2
2400426a:	d018      	beq.n	2400429e <HAL_DMA_Init+0x5be>
2400426c:	687b      	ldr	r3, [r7, #4]
2400426e:	681b      	ldr	r3, [r3, #0]
24004270:	4a42      	ldr	r2, [pc, #264]	@ (2400437c <HAL_DMA_Init+0x69c>)
24004272:	4293      	cmp	r3, r2
24004274:	d013      	beq.n	2400429e <HAL_DMA_Init+0x5be>
24004276:	687b      	ldr	r3, [r7, #4]
24004278:	681b      	ldr	r3, [r3, #0]
2400427a:	4a41      	ldr	r2, [pc, #260]	@ (24004380 <HAL_DMA_Init+0x6a0>)
2400427c:	4293      	cmp	r3, r2
2400427e:	d00e      	beq.n	2400429e <HAL_DMA_Init+0x5be>
24004280:	687b      	ldr	r3, [r7, #4]
24004282:	681b      	ldr	r3, [r3, #0]
24004284:	4a3f      	ldr	r2, [pc, #252]	@ (24004384 <HAL_DMA_Init+0x6a4>)
24004286:	4293      	cmp	r3, r2
24004288:	d009      	beq.n	2400429e <HAL_DMA_Init+0x5be>
2400428a:	687b      	ldr	r3, [r7, #4]
2400428c:	681b      	ldr	r3, [r3, #0]
2400428e:	4a3e      	ldr	r2, [pc, #248]	@ (24004388 <HAL_DMA_Init+0x6a8>)
24004290:	4293      	cmp	r3, r2
24004292:	d004      	beq.n	2400429e <HAL_DMA_Init+0x5be>
24004294:	687b      	ldr	r3, [r7, #4]
24004296:	681b      	ldr	r3, [r3, #0]
24004298:	4a3c      	ldr	r2, [pc, #240]	@ (2400438c <HAL_DMA_Init+0x6ac>)
2400429a:	4293      	cmp	r3, r2
2400429c:	d101      	bne.n	240042a2 <HAL_DMA_Init+0x5c2>
2400429e:	2301      	movs	r3, #1
240042a0:	e000      	b.n	240042a4 <HAL_DMA_Init+0x5c4>
240042a2:	2300      	movs	r3, #0
240042a4:	2b00      	cmp	r3, #0
240042a6:	d032      	beq.n	2400430e <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
240042a8:	6878      	ldr	r0, [r7, #4]
240042aa:	f003 f9a5 	bl	240075f8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
240042ae:	687b      	ldr	r3, [r7, #4]
240042b0:	689b      	ldr	r3, [r3, #8]
240042b2:	2b80      	cmp	r3, #128	@ 0x80
240042b4:	d102      	bne.n	240042bc <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
240042b6:	687b      	ldr	r3, [r7, #4]
240042b8:	2200      	movs	r2, #0
240042ba:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
240042bc:	687b      	ldr	r3, [r7, #4]
240042be:	685a      	ldr	r2, [r3, #4]
240042c0:	687b      	ldr	r3, [r7, #4]
240042c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
240042c4:	b2d2      	uxtb	r2, r2
240042c6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
240042c8:	687b      	ldr	r3, [r7, #4]
240042ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
240042cc:	687a      	ldr	r2, [r7, #4]
240042ce:	6e92      	ldr	r2, [r2, #104]	@ 0x68
240042d0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
240042d2:	687b      	ldr	r3, [r7, #4]
240042d4:	685b      	ldr	r3, [r3, #4]
240042d6:	2b00      	cmp	r3, #0
240042d8:	d010      	beq.n	240042fc <HAL_DMA_Init+0x61c>
240042da:	687b      	ldr	r3, [r7, #4]
240042dc:	685b      	ldr	r3, [r3, #4]
240042de:	2b08      	cmp	r3, #8
240042e0:	d80c      	bhi.n	240042fc <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
240042e2:	6878      	ldr	r0, [r7, #4]
240042e4:	f003 fa22 	bl	2400772c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
240042e8:	687b      	ldr	r3, [r7, #4]
240042ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
240042ec:	2200      	movs	r2, #0
240042ee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
240042f0:	687b      	ldr	r3, [r7, #4]
240042f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
240042f4:	687a      	ldr	r2, [r7, #4]
240042f6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
240042f8:	605a      	str	r2, [r3, #4]
240042fa:	e008      	b.n	2400430e <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
240042fc:	687b      	ldr	r3, [r7, #4]
240042fe:	2200      	movs	r2, #0
24004300:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
24004302:	687b      	ldr	r3, [r7, #4]
24004304:	2200      	movs	r2, #0
24004306:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
24004308:	687b      	ldr	r3, [r7, #4]
2400430a:	2200      	movs	r2, #0
2400430c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
2400430e:	687b      	ldr	r3, [r7, #4]
24004310:	2200      	movs	r2, #0
24004312:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
24004314:	687b      	ldr	r3, [r7, #4]
24004316:	2201      	movs	r2, #1
24004318:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
2400431c:	2300      	movs	r3, #0
}
2400431e:	4618      	mov	r0, r3
24004320:	3718      	adds	r7, #24
24004322:	46bd      	mov	sp, r7
24004324:	bd80      	pop	{r7, pc}
24004326:	bf00      	nop
24004328:	a7fdabf8 	.word	0xa7fdabf8
2400432c:	cccccccd 	.word	0xcccccccd
24004330:	40020010 	.word	0x40020010
24004334:	40020028 	.word	0x40020028
24004338:	40020040 	.word	0x40020040
2400433c:	40020058 	.word	0x40020058
24004340:	40020070 	.word	0x40020070
24004344:	40020088 	.word	0x40020088
24004348:	400200a0 	.word	0x400200a0
2400434c:	400200b8 	.word	0x400200b8
24004350:	40020410 	.word	0x40020410
24004354:	40020428 	.word	0x40020428
24004358:	40020440 	.word	0x40020440
2400435c:	40020458 	.word	0x40020458
24004360:	40020470 	.word	0x40020470
24004364:	40020488 	.word	0x40020488
24004368:	400204a0 	.word	0x400204a0
2400436c:	400204b8 	.word	0x400204b8
24004370:	58025408 	.word	0x58025408
24004374:	5802541c 	.word	0x5802541c
24004378:	58025430 	.word	0x58025430
2400437c:	58025444 	.word	0x58025444
24004380:	58025458 	.word	0x58025458
24004384:	5802546c 	.word	0x5802546c
24004388:	58025480 	.word	0x58025480
2400438c:	58025494 	.word	0x58025494

24004390 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
24004390:	b580      	push	{r7, lr}
24004392:	b084      	sub	sp, #16
24004394:	af00      	add	r7, sp, #0
24004396:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
24004398:	687b      	ldr	r3, [r7, #4]
2400439a:	2b00      	cmp	r3, #0
2400439c:	d101      	bne.n	240043a2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
2400439e:	2301      	movs	r3, #1
240043a0:	e1a8      	b.n	240046f4 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
240043a2:	687b      	ldr	r3, [r7, #4]
240043a4:	681b      	ldr	r3, [r3, #0]
240043a6:	4a82      	ldr	r2, [pc, #520]	@ (240045b0 <HAL_DMA_DeInit+0x220>)
240043a8:	4293      	cmp	r3, r2
240043aa:	d04a      	beq.n	24004442 <HAL_DMA_DeInit+0xb2>
240043ac:	687b      	ldr	r3, [r7, #4]
240043ae:	681b      	ldr	r3, [r3, #0]
240043b0:	4a80      	ldr	r2, [pc, #512]	@ (240045b4 <HAL_DMA_DeInit+0x224>)
240043b2:	4293      	cmp	r3, r2
240043b4:	d045      	beq.n	24004442 <HAL_DMA_DeInit+0xb2>
240043b6:	687b      	ldr	r3, [r7, #4]
240043b8:	681b      	ldr	r3, [r3, #0]
240043ba:	4a7f      	ldr	r2, [pc, #508]	@ (240045b8 <HAL_DMA_DeInit+0x228>)
240043bc:	4293      	cmp	r3, r2
240043be:	d040      	beq.n	24004442 <HAL_DMA_DeInit+0xb2>
240043c0:	687b      	ldr	r3, [r7, #4]
240043c2:	681b      	ldr	r3, [r3, #0]
240043c4:	4a7d      	ldr	r2, [pc, #500]	@ (240045bc <HAL_DMA_DeInit+0x22c>)
240043c6:	4293      	cmp	r3, r2
240043c8:	d03b      	beq.n	24004442 <HAL_DMA_DeInit+0xb2>
240043ca:	687b      	ldr	r3, [r7, #4]
240043cc:	681b      	ldr	r3, [r3, #0]
240043ce:	4a7c      	ldr	r2, [pc, #496]	@ (240045c0 <HAL_DMA_DeInit+0x230>)
240043d0:	4293      	cmp	r3, r2
240043d2:	d036      	beq.n	24004442 <HAL_DMA_DeInit+0xb2>
240043d4:	687b      	ldr	r3, [r7, #4]
240043d6:	681b      	ldr	r3, [r3, #0]
240043d8:	4a7a      	ldr	r2, [pc, #488]	@ (240045c4 <HAL_DMA_DeInit+0x234>)
240043da:	4293      	cmp	r3, r2
240043dc:	d031      	beq.n	24004442 <HAL_DMA_DeInit+0xb2>
240043de:	687b      	ldr	r3, [r7, #4]
240043e0:	681b      	ldr	r3, [r3, #0]
240043e2:	4a79      	ldr	r2, [pc, #484]	@ (240045c8 <HAL_DMA_DeInit+0x238>)
240043e4:	4293      	cmp	r3, r2
240043e6:	d02c      	beq.n	24004442 <HAL_DMA_DeInit+0xb2>
240043e8:	687b      	ldr	r3, [r7, #4]
240043ea:	681b      	ldr	r3, [r3, #0]
240043ec:	4a77      	ldr	r2, [pc, #476]	@ (240045cc <HAL_DMA_DeInit+0x23c>)
240043ee:	4293      	cmp	r3, r2
240043f0:	d027      	beq.n	24004442 <HAL_DMA_DeInit+0xb2>
240043f2:	687b      	ldr	r3, [r7, #4]
240043f4:	681b      	ldr	r3, [r3, #0]
240043f6:	4a76      	ldr	r2, [pc, #472]	@ (240045d0 <HAL_DMA_DeInit+0x240>)
240043f8:	4293      	cmp	r3, r2
240043fa:	d022      	beq.n	24004442 <HAL_DMA_DeInit+0xb2>
240043fc:	687b      	ldr	r3, [r7, #4]
240043fe:	681b      	ldr	r3, [r3, #0]
24004400:	4a74      	ldr	r2, [pc, #464]	@ (240045d4 <HAL_DMA_DeInit+0x244>)
24004402:	4293      	cmp	r3, r2
24004404:	d01d      	beq.n	24004442 <HAL_DMA_DeInit+0xb2>
24004406:	687b      	ldr	r3, [r7, #4]
24004408:	681b      	ldr	r3, [r3, #0]
2400440a:	4a73      	ldr	r2, [pc, #460]	@ (240045d8 <HAL_DMA_DeInit+0x248>)
2400440c:	4293      	cmp	r3, r2
2400440e:	d018      	beq.n	24004442 <HAL_DMA_DeInit+0xb2>
24004410:	687b      	ldr	r3, [r7, #4]
24004412:	681b      	ldr	r3, [r3, #0]
24004414:	4a71      	ldr	r2, [pc, #452]	@ (240045dc <HAL_DMA_DeInit+0x24c>)
24004416:	4293      	cmp	r3, r2
24004418:	d013      	beq.n	24004442 <HAL_DMA_DeInit+0xb2>
2400441a:	687b      	ldr	r3, [r7, #4]
2400441c:	681b      	ldr	r3, [r3, #0]
2400441e:	4a70      	ldr	r2, [pc, #448]	@ (240045e0 <HAL_DMA_DeInit+0x250>)
24004420:	4293      	cmp	r3, r2
24004422:	d00e      	beq.n	24004442 <HAL_DMA_DeInit+0xb2>
24004424:	687b      	ldr	r3, [r7, #4]
24004426:	681b      	ldr	r3, [r3, #0]
24004428:	4a6e      	ldr	r2, [pc, #440]	@ (240045e4 <HAL_DMA_DeInit+0x254>)
2400442a:	4293      	cmp	r3, r2
2400442c:	d009      	beq.n	24004442 <HAL_DMA_DeInit+0xb2>
2400442e:	687b      	ldr	r3, [r7, #4]
24004430:	681b      	ldr	r3, [r3, #0]
24004432:	4a6d      	ldr	r2, [pc, #436]	@ (240045e8 <HAL_DMA_DeInit+0x258>)
24004434:	4293      	cmp	r3, r2
24004436:	d004      	beq.n	24004442 <HAL_DMA_DeInit+0xb2>
24004438:	687b      	ldr	r3, [r7, #4]
2400443a:	681b      	ldr	r3, [r3, #0]
2400443c:	4a6b      	ldr	r2, [pc, #428]	@ (240045ec <HAL_DMA_DeInit+0x25c>)
2400443e:	4293      	cmp	r3, r2
24004440:	d108      	bne.n	24004454 <HAL_DMA_DeInit+0xc4>
24004442:	687b      	ldr	r3, [r7, #4]
24004444:	681b      	ldr	r3, [r3, #0]
24004446:	681a      	ldr	r2, [r3, #0]
24004448:	687b      	ldr	r3, [r7, #4]
2400444a:	681b      	ldr	r3, [r3, #0]
2400444c:	f022 0201 	bic.w	r2, r2, #1
24004450:	601a      	str	r2, [r3, #0]
24004452:	e007      	b.n	24004464 <HAL_DMA_DeInit+0xd4>
24004454:	687b      	ldr	r3, [r7, #4]
24004456:	681b      	ldr	r3, [r3, #0]
24004458:	681a      	ldr	r2, [r3, #0]
2400445a:	687b      	ldr	r3, [r7, #4]
2400445c:	681b      	ldr	r3, [r3, #0]
2400445e:	f022 0201 	bic.w	r2, r2, #1
24004462:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24004464:	687b      	ldr	r3, [r7, #4]
24004466:	681b      	ldr	r3, [r3, #0]
24004468:	4a51      	ldr	r2, [pc, #324]	@ (240045b0 <HAL_DMA_DeInit+0x220>)
2400446a:	4293      	cmp	r3, r2
2400446c:	d04a      	beq.n	24004504 <HAL_DMA_DeInit+0x174>
2400446e:	687b      	ldr	r3, [r7, #4]
24004470:	681b      	ldr	r3, [r3, #0]
24004472:	4a50      	ldr	r2, [pc, #320]	@ (240045b4 <HAL_DMA_DeInit+0x224>)
24004474:	4293      	cmp	r3, r2
24004476:	d045      	beq.n	24004504 <HAL_DMA_DeInit+0x174>
24004478:	687b      	ldr	r3, [r7, #4]
2400447a:	681b      	ldr	r3, [r3, #0]
2400447c:	4a4e      	ldr	r2, [pc, #312]	@ (240045b8 <HAL_DMA_DeInit+0x228>)
2400447e:	4293      	cmp	r3, r2
24004480:	d040      	beq.n	24004504 <HAL_DMA_DeInit+0x174>
24004482:	687b      	ldr	r3, [r7, #4]
24004484:	681b      	ldr	r3, [r3, #0]
24004486:	4a4d      	ldr	r2, [pc, #308]	@ (240045bc <HAL_DMA_DeInit+0x22c>)
24004488:	4293      	cmp	r3, r2
2400448a:	d03b      	beq.n	24004504 <HAL_DMA_DeInit+0x174>
2400448c:	687b      	ldr	r3, [r7, #4]
2400448e:	681b      	ldr	r3, [r3, #0]
24004490:	4a4b      	ldr	r2, [pc, #300]	@ (240045c0 <HAL_DMA_DeInit+0x230>)
24004492:	4293      	cmp	r3, r2
24004494:	d036      	beq.n	24004504 <HAL_DMA_DeInit+0x174>
24004496:	687b      	ldr	r3, [r7, #4]
24004498:	681b      	ldr	r3, [r3, #0]
2400449a:	4a4a      	ldr	r2, [pc, #296]	@ (240045c4 <HAL_DMA_DeInit+0x234>)
2400449c:	4293      	cmp	r3, r2
2400449e:	d031      	beq.n	24004504 <HAL_DMA_DeInit+0x174>
240044a0:	687b      	ldr	r3, [r7, #4]
240044a2:	681b      	ldr	r3, [r3, #0]
240044a4:	4a48      	ldr	r2, [pc, #288]	@ (240045c8 <HAL_DMA_DeInit+0x238>)
240044a6:	4293      	cmp	r3, r2
240044a8:	d02c      	beq.n	24004504 <HAL_DMA_DeInit+0x174>
240044aa:	687b      	ldr	r3, [r7, #4]
240044ac:	681b      	ldr	r3, [r3, #0]
240044ae:	4a47      	ldr	r2, [pc, #284]	@ (240045cc <HAL_DMA_DeInit+0x23c>)
240044b0:	4293      	cmp	r3, r2
240044b2:	d027      	beq.n	24004504 <HAL_DMA_DeInit+0x174>
240044b4:	687b      	ldr	r3, [r7, #4]
240044b6:	681b      	ldr	r3, [r3, #0]
240044b8:	4a45      	ldr	r2, [pc, #276]	@ (240045d0 <HAL_DMA_DeInit+0x240>)
240044ba:	4293      	cmp	r3, r2
240044bc:	d022      	beq.n	24004504 <HAL_DMA_DeInit+0x174>
240044be:	687b      	ldr	r3, [r7, #4]
240044c0:	681b      	ldr	r3, [r3, #0]
240044c2:	4a44      	ldr	r2, [pc, #272]	@ (240045d4 <HAL_DMA_DeInit+0x244>)
240044c4:	4293      	cmp	r3, r2
240044c6:	d01d      	beq.n	24004504 <HAL_DMA_DeInit+0x174>
240044c8:	687b      	ldr	r3, [r7, #4]
240044ca:	681b      	ldr	r3, [r3, #0]
240044cc:	4a42      	ldr	r2, [pc, #264]	@ (240045d8 <HAL_DMA_DeInit+0x248>)
240044ce:	4293      	cmp	r3, r2
240044d0:	d018      	beq.n	24004504 <HAL_DMA_DeInit+0x174>
240044d2:	687b      	ldr	r3, [r7, #4]
240044d4:	681b      	ldr	r3, [r3, #0]
240044d6:	4a41      	ldr	r2, [pc, #260]	@ (240045dc <HAL_DMA_DeInit+0x24c>)
240044d8:	4293      	cmp	r3, r2
240044da:	d013      	beq.n	24004504 <HAL_DMA_DeInit+0x174>
240044dc:	687b      	ldr	r3, [r7, #4]
240044de:	681b      	ldr	r3, [r3, #0]
240044e0:	4a3f      	ldr	r2, [pc, #252]	@ (240045e0 <HAL_DMA_DeInit+0x250>)
240044e2:	4293      	cmp	r3, r2
240044e4:	d00e      	beq.n	24004504 <HAL_DMA_DeInit+0x174>
240044e6:	687b      	ldr	r3, [r7, #4]
240044e8:	681b      	ldr	r3, [r3, #0]
240044ea:	4a3e      	ldr	r2, [pc, #248]	@ (240045e4 <HAL_DMA_DeInit+0x254>)
240044ec:	4293      	cmp	r3, r2
240044ee:	d009      	beq.n	24004504 <HAL_DMA_DeInit+0x174>
240044f0:	687b      	ldr	r3, [r7, #4]
240044f2:	681b      	ldr	r3, [r3, #0]
240044f4:	4a3c      	ldr	r2, [pc, #240]	@ (240045e8 <HAL_DMA_DeInit+0x258>)
240044f6:	4293      	cmp	r3, r2
240044f8:	d004      	beq.n	24004504 <HAL_DMA_DeInit+0x174>
240044fa:	687b      	ldr	r3, [r7, #4]
240044fc:	681b      	ldr	r3, [r3, #0]
240044fe:	4a3b      	ldr	r2, [pc, #236]	@ (240045ec <HAL_DMA_DeInit+0x25c>)
24004500:	4293      	cmp	r3, r2
24004502:	d101      	bne.n	24004508 <HAL_DMA_DeInit+0x178>
24004504:	2301      	movs	r3, #1
24004506:	e000      	b.n	2400450a <HAL_DMA_DeInit+0x17a>
24004508:	2300      	movs	r3, #0
2400450a:	2b00      	cmp	r3, #0
2400450c:	d025      	beq.n	2400455a <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
2400450e:	687b      	ldr	r3, [r7, #4]
24004510:	681b      	ldr	r3, [r3, #0]
24004512:	2200      	movs	r2, #0
24004514:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
24004516:	687b      	ldr	r3, [r7, #4]
24004518:	681b      	ldr	r3, [r3, #0]
2400451a:	2200      	movs	r2, #0
2400451c:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
2400451e:	687b      	ldr	r3, [r7, #4]
24004520:	681b      	ldr	r3, [r3, #0]
24004522:	2200      	movs	r2, #0
24004524:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
24004526:	687b      	ldr	r3, [r7, #4]
24004528:	681b      	ldr	r3, [r3, #0]
2400452a:	2200      	movs	r2, #0
2400452c:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
2400452e:	687b      	ldr	r3, [r7, #4]
24004530:	681b      	ldr	r3, [r3, #0]
24004532:	2200      	movs	r2, #0
24004534:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
24004536:	687b      	ldr	r3, [r7, #4]
24004538:	681b      	ldr	r3, [r3, #0]
2400453a:	2221      	movs	r2, #33	@ 0x21
2400453c:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
2400453e:	6878      	ldr	r0, [r7, #4]
24004540:	f002 ff2c 	bl	2400739c <DMA_CalcBaseAndBitshift>
24004544:	4603      	mov	r3, r0
24004546:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24004548:	687b      	ldr	r3, [r7, #4]
2400454a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
2400454c:	f003 031f 	and.w	r3, r3, #31
24004550:	223f      	movs	r2, #63	@ 0x3f
24004552:	409a      	lsls	r2, r3
24004554:	68bb      	ldr	r3, [r7, #8]
24004556:	609a      	str	r2, [r3, #8]
24004558:	e081      	b.n	2400465e <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
2400455a:	687b      	ldr	r3, [r7, #4]
2400455c:	681b      	ldr	r3, [r3, #0]
2400455e:	4a24      	ldr	r2, [pc, #144]	@ (240045f0 <HAL_DMA_DeInit+0x260>)
24004560:	4293      	cmp	r3, r2
24004562:	d022      	beq.n	240045aa <HAL_DMA_DeInit+0x21a>
24004564:	687b      	ldr	r3, [r7, #4]
24004566:	681b      	ldr	r3, [r3, #0]
24004568:	4a22      	ldr	r2, [pc, #136]	@ (240045f4 <HAL_DMA_DeInit+0x264>)
2400456a:	4293      	cmp	r3, r2
2400456c:	d01d      	beq.n	240045aa <HAL_DMA_DeInit+0x21a>
2400456e:	687b      	ldr	r3, [r7, #4]
24004570:	681b      	ldr	r3, [r3, #0]
24004572:	4a21      	ldr	r2, [pc, #132]	@ (240045f8 <HAL_DMA_DeInit+0x268>)
24004574:	4293      	cmp	r3, r2
24004576:	d018      	beq.n	240045aa <HAL_DMA_DeInit+0x21a>
24004578:	687b      	ldr	r3, [r7, #4]
2400457a:	681b      	ldr	r3, [r3, #0]
2400457c:	4a1f      	ldr	r2, [pc, #124]	@ (240045fc <HAL_DMA_DeInit+0x26c>)
2400457e:	4293      	cmp	r3, r2
24004580:	d013      	beq.n	240045aa <HAL_DMA_DeInit+0x21a>
24004582:	687b      	ldr	r3, [r7, #4]
24004584:	681b      	ldr	r3, [r3, #0]
24004586:	4a1e      	ldr	r2, [pc, #120]	@ (24004600 <HAL_DMA_DeInit+0x270>)
24004588:	4293      	cmp	r3, r2
2400458a:	d00e      	beq.n	240045aa <HAL_DMA_DeInit+0x21a>
2400458c:	687b      	ldr	r3, [r7, #4]
2400458e:	681b      	ldr	r3, [r3, #0]
24004590:	4a1c      	ldr	r2, [pc, #112]	@ (24004604 <HAL_DMA_DeInit+0x274>)
24004592:	4293      	cmp	r3, r2
24004594:	d009      	beq.n	240045aa <HAL_DMA_DeInit+0x21a>
24004596:	687b      	ldr	r3, [r7, #4]
24004598:	681b      	ldr	r3, [r3, #0]
2400459a:	4a1b      	ldr	r2, [pc, #108]	@ (24004608 <HAL_DMA_DeInit+0x278>)
2400459c:	4293      	cmp	r3, r2
2400459e:	d004      	beq.n	240045aa <HAL_DMA_DeInit+0x21a>
240045a0:	687b      	ldr	r3, [r7, #4]
240045a2:	681b      	ldr	r3, [r3, #0]
240045a4:	4a19      	ldr	r2, [pc, #100]	@ (2400460c <HAL_DMA_DeInit+0x27c>)
240045a6:	4293      	cmp	r3, r2
240045a8:	d132      	bne.n	24004610 <HAL_DMA_DeInit+0x280>
240045aa:	2301      	movs	r3, #1
240045ac:	e031      	b.n	24004612 <HAL_DMA_DeInit+0x282>
240045ae:	bf00      	nop
240045b0:	40020010 	.word	0x40020010
240045b4:	40020028 	.word	0x40020028
240045b8:	40020040 	.word	0x40020040
240045bc:	40020058 	.word	0x40020058
240045c0:	40020070 	.word	0x40020070
240045c4:	40020088 	.word	0x40020088
240045c8:	400200a0 	.word	0x400200a0
240045cc:	400200b8 	.word	0x400200b8
240045d0:	40020410 	.word	0x40020410
240045d4:	40020428 	.word	0x40020428
240045d8:	40020440 	.word	0x40020440
240045dc:	40020458 	.word	0x40020458
240045e0:	40020470 	.word	0x40020470
240045e4:	40020488 	.word	0x40020488
240045e8:	400204a0 	.word	0x400204a0
240045ec:	400204b8 	.word	0x400204b8
240045f0:	58025408 	.word	0x58025408
240045f4:	5802541c 	.word	0x5802541c
240045f8:	58025430 	.word	0x58025430
240045fc:	58025444 	.word	0x58025444
24004600:	58025458 	.word	0x58025458
24004604:	5802546c 	.word	0x5802546c
24004608:	58025480 	.word	0x58025480
2400460c:	58025494 	.word	0x58025494
24004610:	2300      	movs	r3, #0
24004612:	2b00      	cmp	r3, #0
24004614:	d021      	beq.n	2400465a <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
24004616:	687b      	ldr	r3, [r7, #4]
24004618:	681b      	ldr	r3, [r3, #0]
2400461a:	2200      	movs	r2, #0
2400461c:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
2400461e:	687b      	ldr	r3, [r7, #4]
24004620:	681b      	ldr	r3, [r3, #0]
24004622:	2200      	movs	r2, #0
24004624:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
24004626:	687b      	ldr	r3, [r7, #4]
24004628:	681b      	ldr	r3, [r3, #0]
2400462a:	2200      	movs	r2, #0
2400462c:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
2400462e:	687b      	ldr	r3, [r7, #4]
24004630:	681b      	ldr	r3, [r3, #0]
24004632:	2200      	movs	r2, #0
24004634:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
24004636:	687b      	ldr	r3, [r7, #4]
24004638:	681b      	ldr	r3, [r3, #0]
2400463a:	2200      	movs	r2, #0
2400463c:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
2400463e:	6878      	ldr	r0, [r7, #4]
24004640:	f002 feac 	bl	2400739c <DMA_CalcBaseAndBitshift>
24004644:	4603      	mov	r3, r0
24004646:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
24004648:	687b      	ldr	r3, [r7, #4]
2400464a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
2400464c:	f003 031f 	and.w	r3, r3, #31
24004650:	2201      	movs	r2, #1
24004652:	409a      	lsls	r2, r3
24004654:	68fb      	ldr	r3, [r7, #12]
24004656:	605a      	str	r2, [r3, #4]
24004658:	e001      	b.n	2400465e <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
2400465a:	2301      	movs	r3, #1
2400465c:	e04a      	b.n	240046f4 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
2400465e:	6878      	ldr	r0, [r7, #4]
24004660:	f002 ffca 	bl	240075f8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
24004664:	687b      	ldr	r3, [r7, #4]
24004666:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
24004668:	2b00      	cmp	r3, #0
2400466a:	d008      	beq.n	2400467e <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
2400466c:	687b      	ldr	r3, [r7, #4]
2400466e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
24004670:	2200      	movs	r2, #0
24004672:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24004674:	687b      	ldr	r3, [r7, #4]
24004676:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
24004678:	687a      	ldr	r2, [r7, #4]
2400467a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
2400467c:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
2400467e:	687b      	ldr	r3, [r7, #4]
24004680:	685b      	ldr	r3, [r3, #4]
24004682:	2b00      	cmp	r3, #0
24004684:	d00f      	beq.n	240046a6 <HAL_DMA_DeInit+0x316>
24004686:	687b      	ldr	r3, [r7, #4]
24004688:	685b      	ldr	r3, [r3, #4]
2400468a:	2b08      	cmp	r3, #8
2400468c:	d80b      	bhi.n	240046a6 <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
2400468e:	6878      	ldr	r0, [r7, #4]
24004690:	f003 f84c 	bl	2400772c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
24004694:	687b      	ldr	r3, [r7, #4]
24004696:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
24004698:	2200      	movs	r2, #0
2400469a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
2400469c:	687b      	ldr	r3, [r7, #4]
2400469e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
240046a0:	687a      	ldr	r2, [r7, #4]
240046a2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
240046a4:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
240046a6:	687b      	ldr	r3, [r7, #4]
240046a8:	2200      	movs	r2, #0
240046aa:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
240046ac:	687b      	ldr	r3, [r7, #4]
240046ae:	2200      	movs	r2, #0
240046b0:	671a      	str	r2, [r3, #112]	@ 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
240046b2:	687b      	ldr	r3, [r7, #4]
240046b4:	2200      	movs	r2, #0
240046b6:	675a      	str	r2, [r3, #116]	@ 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
240046b8:	687b      	ldr	r3, [r7, #4]
240046ba:	2200      	movs	r2, #0
240046bc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback   = NULL;
240046be:	687b      	ldr	r3, [r7, #4]
240046c0:	2200      	movs	r2, #0
240046c2:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback     = NULL;
240046c4:	687b      	ldr	r3, [r7, #4]
240046c6:	2200      	movs	r2, #0
240046c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
240046ca:	687b      	ldr	r3, [r7, #4]
240046cc:	2200      	movs	r2, #0
240046ce:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback      = NULL;
240046d0:	687b      	ldr	r3, [r7, #4]
240046d2:	2200      	movs	r2, #0
240046d4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback      = NULL;
240046d6:	687b      	ldr	r3, [r7, #4]
240046d8:	2200      	movs	r2, #0
240046da:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
240046dc:	687b      	ldr	r3, [r7, #4]
240046de:	2200      	movs	r2, #0
240046e0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
240046e2:	687b      	ldr	r3, [r7, #4]
240046e4:	2200      	movs	r2, #0
240046e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
240046ea:	687b      	ldr	r3, [r7, #4]
240046ec:	2200      	movs	r2, #0
240046ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
240046f2:	2300      	movs	r3, #0
}
240046f4:	4618      	mov	r0, r3
240046f6:	3710      	adds	r7, #16
240046f8:	46bd      	mov	sp, r7
240046fa:	bd80      	pop	{r7, pc}

240046fc <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
240046fc:	b580      	push	{r7, lr}
240046fe:	b086      	sub	sp, #24
24004700:	af00      	add	r7, sp, #0
24004702:	60f8      	str	r0, [r7, #12]
24004704:	60b9      	str	r1, [r7, #8]
24004706:	607a      	str	r2, [r7, #4]
24004708:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
2400470a:	2300      	movs	r3, #0
2400470c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
2400470e:	68fb      	ldr	r3, [r7, #12]
24004710:	2b00      	cmp	r3, #0
24004712:	d101      	bne.n	24004718 <HAL_DMA_Start+0x1c>
  {
    return HAL_ERROR;
24004714:	2301      	movs	r3, #1
24004716:	e0ec      	b.n	240048f2 <HAL_DMA_Start+0x1f6>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
24004718:	68fb      	ldr	r3, [r7, #12]
2400471a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
2400471e:	2b01      	cmp	r3, #1
24004720:	d101      	bne.n	24004726 <HAL_DMA_Start+0x2a>
24004722:	2302      	movs	r3, #2
24004724:	e0e5      	b.n	240048f2 <HAL_DMA_Start+0x1f6>
24004726:	68fb      	ldr	r3, [r7, #12]
24004728:	2201      	movs	r2, #1
2400472a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
2400472e:	68fb      	ldr	r3, [r7, #12]
24004730:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
24004734:	b2db      	uxtb	r3, r3
24004736:	2b01      	cmp	r3, #1
24004738:	f040 80d0 	bne.w	240048dc <HAL_DMA_Start+0x1e0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
2400473c:	68fb      	ldr	r3, [r7, #12]
2400473e:	2202      	movs	r2, #2
24004740:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24004744:	68fb      	ldr	r3, [r7, #12]
24004746:	2200      	movs	r2, #0
24004748:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
2400474a:	68fb      	ldr	r3, [r7, #12]
2400474c:	681b      	ldr	r3, [r3, #0]
2400474e:	4a6b      	ldr	r2, [pc, #428]	@ (240048fc <HAL_DMA_Start+0x200>)
24004750:	4293      	cmp	r3, r2
24004752:	d04a      	beq.n	240047ea <HAL_DMA_Start+0xee>
24004754:	68fb      	ldr	r3, [r7, #12]
24004756:	681b      	ldr	r3, [r3, #0]
24004758:	4a69      	ldr	r2, [pc, #420]	@ (24004900 <HAL_DMA_Start+0x204>)
2400475a:	4293      	cmp	r3, r2
2400475c:	d045      	beq.n	240047ea <HAL_DMA_Start+0xee>
2400475e:	68fb      	ldr	r3, [r7, #12]
24004760:	681b      	ldr	r3, [r3, #0]
24004762:	4a68      	ldr	r2, [pc, #416]	@ (24004904 <HAL_DMA_Start+0x208>)
24004764:	4293      	cmp	r3, r2
24004766:	d040      	beq.n	240047ea <HAL_DMA_Start+0xee>
24004768:	68fb      	ldr	r3, [r7, #12]
2400476a:	681b      	ldr	r3, [r3, #0]
2400476c:	4a66      	ldr	r2, [pc, #408]	@ (24004908 <HAL_DMA_Start+0x20c>)
2400476e:	4293      	cmp	r3, r2
24004770:	d03b      	beq.n	240047ea <HAL_DMA_Start+0xee>
24004772:	68fb      	ldr	r3, [r7, #12]
24004774:	681b      	ldr	r3, [r3, #0]
24004776:	4a65      	ldr	r2, [pc, #404]	@ (2400490c <HAL_DMA_Start+0x210>)
24004778:	4293      	cmp	r3, r2
2400477a:	d036      	beq.n	240047ea <HAL_DMA_Start+0xee>
2400477c:	68fb      	ldr	r3, [r7, #12]
2400477e:	681b      	ldr	r3, [r3, #0]
24004780:	4a63      	ldr	r2, [pc, #396]	@ (24004910 <HAL_DMA_Start+0x214>)
24004782:	4293      	cmp	r3, r2
24004784:	d031      	beq.n	240047ea <HAL_DMA_Start+0xee>
24004786:	68fb      	ldr	r3, [r7, #12]
24004788:	681b      	ldr	r3, [r3, #0]
2400478a:	4a62      	ldr	r2, [pc, #392]	@ (24004914 <HAL_DMA_Start+0x218>)
2400478c:	4293      	cmp	r3, r2
2400478e:	d02c      	beq.n	240047ea <HAL_DMA_Start+0xee>
24004790:	68fb      	ldr	r3, [r7, #12]
24004792:	681b      	ldr	r3, [r3, #0]
24004794:	4a60      	ldr	r2, [pc, #384]	@ (24004918 <HAL_DMA_Start+0x21c>)
24004796:	4293      	cmp	r3, r2
24004798:	d027      	beq.n	240047ea <HAL_DMA_Start+0xee>
2400479a:	68fb      	ldr	r3, [r7, #12]
2400479c:	681b      	ldr	r3, [r3, #0]
2400479e:	4a5f      	ldr	r2, [pc, #380]	@ (2400491c <HAL_DMA_Start+0x220>)
240047a0:	4293      	cmp	r3, r2
240047a2:	d022      	beq.n	240047ea <HAL_DMA_Start+0xee>
240047a4:	68fb      	ldr	r3, [r7, #12]
240047a6:	681b      	ldr	r3, [r3, #0]
240047a8:	4a5d      	ldr	r2, [pc, #372]	@ (24004920 <HAL_DMA_Start+0x224>)
240047aa:	4293      	cmp	r3, r2
240047ac:	d01d      	beq.n	240047ea <HAL_DMA_Start+0xee>
240047ae:	68fb      	ldr	r3, [r7, #12]
240047b0:	681b      	ldr	r3, [r3, #0]
240047b2:	4a5c      	ldr	r2, [pc, #368]	@ (24004924 <HAL_DMA_Start+0x228>)
240047b4:	4293      	cmp	r3, r2
240047b6:	d018      	beq.n	240047ea <HAL_DMA_Start+0xee>
240047b8:	68fb      	ldr	r3, [r7, #12]
240047ba:	681b      	ldr	r3, [r3, #0]
240047bc:	4a5a      	ldr	r2, [pc, #360]	@ (24004928 <HAL_DMA_Start+0x22c>)
240047be:	4293      	cmp	r3, r2
240047c0:	d013      	beq.n	240047ea <HAL_DMA_Start+0xee>
240047c2:	68fb      	ldr	r3, [r7, #12]
240047c4:	681b      	ldr	r3, [r3, #0]
240047c6:	4a59      	ldr	r2, [pc, #356]	@ (2400492c <HAL_DMA_Start+0x230>)
240047c8:	4293      	cmp	r3, r2
240047ca:	d00e      	beq.n	240047ea <HAL_DMA_Start+0xee>
240047cc:	68fb      	ldr	r3, [r7, #12]
240047ce:	681b      	ldr	r3, [r3, #0]
240047d0:	4a57      	ldr	r2, [pc, #348]	@ (24004930 <HAL_DMA_Start+0x234>)
240047d2:	4293      	cmp	r3, r2
240047d4:	d009      	beq.n	240047ea <HAL_DMA_Start+0xee>
240047d6:	68fb      	ldr	r3, [r7, #12]
240047d8:	681b      	ldr	r3, [r3, #0]
240047da:	4a56      	ldr	r2, [pc, #344]	@ (24004934 <HAL_DMA_Start+0x238>)
240047dc:	4293      	cmp	r3, r2
240047de:	d004      	beq.n	240047ea <HAL_DMA_Start+0xee>
240047e0:	68fb      	ldr	r3, [r7, #12]
240047e2:	681b      	ldr	r3, [r3, #0]
240047e4:	4a54      	ldr	r2, [pc, #336]	@ (24004938 <HAL_DMA_Start+0x23c>)
240047e6:	4293      	cmp	r3, r2
240047e8:	d108      	bne.n	240047fc <HAL_DMA_Start+0x100>
240047ea:	68fb      	ldr	r3, [r7, #12]
240047ec:	681b      	ldr	r3, [r3, #0]
240047ee:	681a      	ldr	r2, [r3, #0]
240047f0:	68fb      	ldr	r3, [r7, #12]
240047f2:	681b      	ldr	r3, [r3, #0]
240047f4:	f022 0201 	bic.w	r2, r2, #1
240047f8:	601a      	str	r2, [r3, #0]
240047fa:	e007      	b.n	2400480c <HAL_DMA_Start+0x110>
240047fc:	68fb      	ldr	r3, [r7, #12]
240047fe:	681b      	ldr	r3, [r3, #0]
24004800:	681a      	ldr	r2, [r3, #0]
24004802:	68fb      	ldr	r3, [r7, #12]
24004804:	681b      	ldr	r3, [r3, #0]
24004806:	f022 0201 	bic.w	r2, r2, #1
2400480a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
2400480c:	683b      	ldr	r3, [r7, #0]
2400480e:	687a      	ldr	r2, [r7, #4]
24004810:	68b9      	ldr	r1, [r7, #8]
24004812:	68f8      	ldr	r0, [r7, #12]
24004814:	f002 fc16 	bl	24007044 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
24004818:	68fb      	ldr	r3, [r7, #12]
2400481a:	681b      	ldr	r3, [r3, #0]
2400481c:	4a37      	ldr	r2, [pc, #220]	@ (240048fc <HAL_DMA_Start+0x200>)
2400481e:	4293      	cmp	r3, r2
24004820:	d04a      	beq.n	240048b8 <HAL_DMA_Start+0x1bc>
24004822:	68fb      	ldr	r3, [r7, #12]
24004824:	681b      	ldr	r3, [r3, #0]
24004826:	4a36      	ldr	r2, [pc, #216]	@ (24004900 <HAL_DMA_Start+0x204>)
24004828:	4293      	cmp	r3, r2
2400482a:	d045      	beq.n	240048b8 <HAL_DMA_Start+0x1bc>
2400482c:	68fb      	ldr	r3, [r7, #12]
2400482e:	681b      	ldr	r3, [r3, #0]
24004830:	4a34      	ldr	r2, [pc, #208]	@ (24004904 <HAL_DMA_Start+0x208>)
24004832:	4293      	cmp	r3, r2
24004834:	d040      	beq.n	240048b8 <HAL_DMA_Start+0x1bc>
24004836:	68fb      	ldr	r3, [r7, #12]
24004838:	681b      	ldr	r3, [r3, #0]
2400483a:	4a33      	ldr	r2, [pc, #204]	@ (24004908 <HAL_DMA_Start+0x20c>)
2400483c:	4293      	cmp	r3, r2
2400483e:	d03b      	beq.n	240048b8 <HAL_DMA_Start+0x1bc>
24004840:	68fb      	ldr	r3, [r7, #12]
24004842:	681b      	ldr	r3, [r3, #0]
24004844:	4a31      	ldr	r2, [pc, #196]	@ (2400490c <HAL_DMA_Start+0x210>)
24004846:	4293      	cmp	r3, r2
24004848:	d036      	beq.n	240048b8 <HAL_DMA_Start+0x1bc>
2400484a:	68fb      	ldr	r3, [r7, #12]
2400484c:	681b      	ldr	r3, [r3, #0]
2400484e:	4a30      	ldr	r2, [pc, #192]	@ (24004910 <HAL_DMA_Start+0x214>)
24004850:	4293      	cmp	r3, r2
24004852:	d031      	beq.n	240048b8 <HAL_DMA_Start+0x1bc>
24004854:	68fb      	ldr	r3, [r7, #12]
24004856:	681b      	ldr	r3, [r3, #0]
24004858:	4a2e      	ldr	r2, [pc, #184]	@ (24004914 <HAL_DMA_Start+0x218>)
2400485a:	4293      	cmp	r3, r2
2400485c:	d02c      	beq.n	240048b8 <HAL_DMA_Start+0x1bc>
2400485e:	68fb      	ldr	r3, [r7, #12]
24004860:	681b      	ldr	r3, [r3, #0]
24004862:	4a2d      	ldr	r2, [pc, #180]	@ (24004918 <HAL_DMA_Start+0x21c>)
24004864:	4293      	cmp	r3, r2
24004866:	d027      	beq.n	240048b8 <HAL_DMA_Start+0x1bc>
24004868:	68fb      	ldr	r3, [r7, #12]
2400486a:	681b      	ldr	r3, [r3, #0]
2400486c:	4a2b      	ldr	r2, [pc, #172]	@ (2400491c <HAL_DMA_Start+0x220>)
2400486e:	4293      	cmp	r3, r2
24004870:	d022      	beq.n	240048b8 <HAL_DMA_Start+0x1bc>
24004872:	68fb      	ldr	r3, [r7, #12]
24004874:	681b      	ldr	r3, [r3, #0]
24004876:	4a2a      	ldr	r2, [pc, #168]	@ (24004920 <HAL_DMA_Start+0x224>)
24004878:	4293      	cmp	r3, r2
2400487a:	d01d      	beq.n	240048b8 <HAL_DMA_Start+0x1bc>
2400487c:	68fb      	ldr	r3, [r7, #12]
2400487e:	681b      	ldr	r3, [r3, #0]
24004880:	4a28      	ldr	r2, [pc, #160]	@ (24004924 <HAL_DMA_Start+0x228>)
24004882:	4293      	cmp	r3, r2
24004884:	d018      	beq.n	240048b8 <HAL_DMA_Start+0x1bc>
24004886:	68fb      	ldr	r3, [r7, #12]
24004888:	681b      	ldr	r3, [r3, #0]
2400488a:	4a27      	ldr	r2, [pc, #156]	@ (24004928 <HAL_DMA_Start+0x22c>)
2400488c:	4293      	cmp	r3, r2
2400488e:	d013      	beq.n	240048b8 <HAL_DMA_Start+0x1bc>
24004890:	68fb      	ldr	r3, [r7, #12]
24004892:	681b      	ldr	r3, [r3, #0]
24004894:	4a25      	ldr	r2, [pc, #148]	@ (2400492c <HAL_DMA_Start+0x230>)
24004896:	4293      	cmp	r3, r2
24004898:	d00e      	beq.n	240048b8 <HAL_DMA_Start+0x1bc>
2400489a:	68fb      	ldr	r3, [r7, #12]
2400489c:	681b      	ldr	r3, [r3, #0]
2400489e:	4a24      	ldr	r2, [pc, #144]	@ (24004930 <HAL_DMA_Start+0x234>)
240048a0:	4293      	cmp	r3, r2
240048a2:	d009      	beq.n	240048b8 <HAL_DMA_Start+0x1bc>
240048a4:	68fb      	ldr	r3, [r7, #12]
240048a6:	681b      	ldr	r3, [r3, #0]
240048a8:	4a22      	ldr	r2, [pc, #136]	@ (24004934 <HAL_DMA_Start+0x238>)
240048aa:	4293      	cmp	r3, r2
240048ac:	d004      	beq.n	240048b8 <HAL_DMA_Start+0x1bc>
240048ae:	68fb      	ldr	r3, [r7, #12]
240048b0:	681b      	ldr	r3, [r3, #0]
240048b2:	4a21      	ldr	r2, [pc, #132]	@ (24004938 <HAL_DMA_Start+0x23c>)
240048b4:	4293      	cmp	r3, r2
240048b6:	d108      	bne.n	240048ca <HAL_DMA_Start+0x1ce>
240048b8:	68fb      	ldr	r3, [r7, #12]
240048ba:	681b      	ldr	r3, [r3, #0]
240048bc:	681a      	ldr	r2, [r3, #0]
240048be:	68fb      	ldr	r3, [r7, #12]
240048c0:	681b      	ldr	r3, [r3, #0]
240048c2:	f042 0201 	orr.w	r2, r2, #1
240048c6:	601a      	str	r2, [r3, #0]
240048c8:	e012      	b.n	240048f0 <HAL_DMA_Start+0x1f4>
240048ca:	68fb      	ldr	r3, [r7, #12]
240048cc:	681b      	ldr	r3, [r3, #0]
240048ce:	681a      	ldr	r2, [r3, #0]
240048d0:	68fb      	ldr	r3, [r7, #12]
240048d2:	681b      	ldr	r3, [r3, #0]
240048d4:	f042 0201 	orr.w	r2, r2, #1
240048d8:	601a      	str	r2, [r3, #0]
240048da:	e009      	b.n	240048f0 <HAL_DMA_Start+0x1f4>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
240048dc:	68fb      	ldr	r3, [r7, #12]
240048de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
240048e2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
240048e4:	68fb      	ldr	r3, [r7, #12]
240048e6:	2200      	movs	r2, #0
240048e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
240048ec:	2301      	movs	r3, #1
240048ee:	75fb      	strb	r3, [r7, #23]
  }
  return status;
240048f0:	7dfb      	ldrb	r3, [r7, #23]
}
240048f2:	4618      	mov	r0, r3
240048f4:	3718      	adds	r7, #24
240048f6:	46bd      	mov	sp, r7
240048f8:	bd80      	pop	{r7, pc}
240048fa:	bf00      	nop
240048fc:	40020010 	.word	0x40020010
24004900:	40020028 	.word	0x40020028
24004904:	40020040 	.word	0x40020040
24004908:	40020058 	.word	0x40020058
2400490c:	40020070 	.word	0x40020070
24004910:	40020088 	.word	0x40020088
24004914:	400200a0 	.word	0x400200a0
24004918:	400200b8 	.word	0x400200b8
2400491c:	40020410 	.word	0x40020410
24004920:	40020428 	.word	0x40020428
24004924:	40020440 	.word	0x40020440
24004928:	40020458 	.word	0x40020458
2400492c:	40020470 	.word	0x40020470
24004930:	40020488 	.word	0x40020488
24004934:	400204a0 	.word	0x400204a0
24004938:	400204b8 	.word	0x400204b8

2400493c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
2400493c:	b580      	push	{r7, lr}
2400493e:	b086      	sub	sp, #24
24004940:	af00      	add	r7, sp, #0
24004942:	60f8      	str	r0, [r7, #12]
24004944:	60b9      	str	r1, [r7, #8]
24004946:	607a      	str	r2, [r7, #4]
24004948:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
2400494a:	2300      	movs	r3, #0
2400494c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
2400494e:	68fb      	ldr	r3, [r7, #12]
24004950:	2b00      	cmp	r3, #0
24004952:	d101      	bne.n	24004958 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
24004954:	2301      	movs	r3, #1
24004956:	e226      	b.n	24004da6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
24004958:	68fb      	ldr	r3, [r7, #12]
2400495a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
2400495e:	2b01      	cmp	r3, #1
24004960:	d101      	bne.n	24004966 <HAL_DMA_Start_IT+0x2a>
24004962:	2302      	movs	r3, #2
24004964:	e21f      	b.n	24004da6 <HAL_DMA_Start_IT+0x46a>
24004966:	68fb      	ldr	r3, [r7, #12]
24004968:	2201      	movs	r2, #1
2400496a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
2400496e:	68fb      	ldr	r3, [r7, #12]
24004970:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
24004974:	b2db      	uxtb	r3, r3
24004976:	2b01      	cmp	r3, #1
24004978:	f040 820a 	bne.w	24004d90 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
2400497c:	68fb      	ldr	r3, [r7, #12]
2400497e:	2202      	movs	r2, #2
24004980:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24004984:	68fb      	ldr	r3, [r7, #12]
24004986:	2200      	movs	r2, #0
24004988:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
2400498a:	68fb      	ldr	r3, [r7, #12]
2400498c:	681b      	ldr	r3, [r3, #0]
2400498e:	4a68      	ldr	r2, [pc, #416]	@ (24004b30 <HAL_DMA_Start_IT+0x1f4>)
24004990:	4293      	cmp	r3, r2
24004992:	d04a      	beq.n	24004a2a <HAL_DMA_Start_IT+0xee>
24004994:	68fb      	ldr	r3, [r7, #12]
24004996:	681b      	ldr	r3, [r3, #0]
24004998:	4a66      	ldr	r2, [pc, #408]	@ (24004b34 <HAL_DMA_Start_IT+0x1f8>)
2400499a:	4293      	cmp	r3, r2
2400499c:	d045      	beq.n	24004a2a <HAL_DMA_Start_IT+0xee>
2400499e:	68fb      	ldr	r3, [r7, #12]
240049a0:	681b      	ldr	r3, [r3, #0]
240049a2:	4a65      	ldr	r2, [pc, #404]	@ (24004b38 <HAL_DMA_Start_IT+0x1fc>)
240049a4:	4293      	cmp	r3, r2
240049a6:	d040      	beq.n	24004a2a <HAL_DMA_Start_IT+0xee>
240049a8:	68fb      	ldr	r3, [r7, #12]
240049aa:	681b      	ldr	r3, [r3, #0]
240049ac:	4a63      	ldr	r2, [pc, #396]	@ (24004b3c <HAL_DMA_Start_IT+0x200>)
240049ae:	4293      	cmp	r3, r2
240049b0:	d03b      	beq.n	24004a2a <HAL_DMA_Start_IT+0xee>
240049b2:	68fb      	ldr	r3, [r7, #12]
240049b4:	681b      	ldr	r3, [r3, #0]
240049b6:	4a62      	ldr	r2, [pc, #392]	@ (24004b40 <HAL_DMA_Start_IT+0x204>)
240049b8:	4293      	cmp	r3, r2
240049ba:	d036      	beq.n	24004a2a <HAL_DMA_Start_IT+0xee>
240049bc:	68fb      	ldr	r3, [r7, #12]
240049be:	681b      	ldr	r3, [r3, #0]
240049c0:	4a60      	ldr	r2, [pc, #384]	@ (24004b44 <HAL_DMA_Start_IT+0x208>)
240049c2:	4293      	cmp	r3, r2
240049c4:	d031      	beq.n	24004a2a <HAL_DMA_Start_IT+0xee>
240049c6:	68fb      	ldr	r3, [r7, #12]
240049c8:	681b      	ldr	r3, [r3, #0]
240049ca:	4a5f      	ldr	r2, [pc, #380]	@ (24004b48 <HAL_DMA_Start_IT+0x20c>)
240049cc:	4293      	cmp	r3, r2
240049ce:	d02c      	beq.n	24004a2a <HAL_DMA_Start_IT+0xee>
240049d0:	68fb      	ldr	r3, [r7, #12]
240049d2:	681b      	ldr	r3, [r3, #0]
240049d4:	4a5d      	ldr	r2, [pc, #372]	@ (24004b4c <HAL_DMA_Start_IT+0x210>)
240049d6:	4293      	cmp	r3, r2
240049d8:	d027      	beq.n	24004a2a <HAL_DMA_Start_IT+0xee>
240049da:	68fb      	ldr	r3, [r7, #12]
240049dc:	681b      	ldr	r3, [r3, #0]
240049de:	4a5c      	ldr	r2, [pc, #368]	@ (24004b50 <HAL_DMA_Start_IT+0x214>)
240049e0:	4293      	cmp	r3, r2
240049e2:	d022      	beq.n	24004a2a <HAL_DMA_Start_IT+0xee>
240049e4:	68fb      	ldr	r3, [r7, #12]
240049e6:	681b      	ldr	r3, [r3, #0]
240049e8:	4a5a      	ldr	r2, [pc, #360]	@ (24004b54 <HAL_DMA_Start_IT+0x218>)
240049ea:	4293      	cmp	r3, r2
240049ec:	d01d      	beq.n	24004a2a <HAL_DMA_Start_IT+0xee>
240049ee:	68fb      	ldr	r3, [r7, #12]
240049f0:	681b      	ldr	r3, [r3, #0]
240049f2:	4a59      	ldr	r2, [pc, #356]	@ (24004b58 <HAL_DMA_Start_IT+0x21c>)
240049f4:	4293      	cmp	r3, r2
240049f6:	d018      	beq.n	24004a2a <HAL_DMA_Start_IT+0xee>
240049f8:	68fb      	ldr	r3, [r7, #12]
240049fa:	681b      	ldr	r3, [r3, #0]
240049fc:	4a57      	ldr	r2, [pc, #348]	@ (24004b5c <HAL_DMA_Start_IT+0x220>)
240049fe:	4293      	cmp	r3, r2
24004a00:	d013      	beq.n	24004a2a <HAL_DMA_Start_IT+0xee>
24004a02:	68fb      	ldr	r3, [r7, #12]
24004a04:	681b      	ldr	r3, [r3, #0]
24004a06:	4a56      	ldr	r2, [pc, #344]	@ (24004b60 <HAL_DMA_Start_IT+0x224>)
24004a08:	4293      	cmp	r3, r2
24004a0a:	d00e      	beq.n	24004a2a <HAL_DMA_Start_IT+0xee>
24004a0c:	68fb      	ldr	r3, [r7, #12]
24004a0e:	681b      	ldr	r3, [r3, #0]
24004a10:	4a54      	ldr	r2, [pc, #336]	@ (24004b64 <HAL_DMA_Start_IT+0x228>)
24004a12:	4293      	cmp	r3, r2
24004a14:	d009      	beq.n	24004a2a <HAL_DMA_Start_IT+0xee>
24004a16:	68fb      	ldr	r3, [r7, #12]
24004a18:	681b      	ldr	r3, [r3, #0]
24004a1a:	4a53      	ldr	r2, [pc, #332]	@ (24004b68 <HAL_DMA_Start_IT+0x22c>)
24004a1c:	4293      	cmp	r3, r2
24004a1e:	d004      	beq.n	24004a2a <HAL_DMA_Start_IT+0xee>
24004a20:	68fb      	ldr	r3, [r7, #12]
24004a22:	681b      	ldr	r3, [r3, #0]
24004a24:	4a51      	ldr	r2, [pc, #324]	@ (24004b6c <HAL_DMA_Start_IT+0x230>)
24004a26:	4293      	cmp	r3, r2
24004a28:	d108      	bne.n	24004a3c <HAL_DMA_Start_IT+0x100>
24004a2a:	68fb      	ldr	r3, [r7, #12]
24004a2c:	681b      	ldr	r3, [r3, #0]
24004a2e:	681a      	ldr	r2, [r3, #0]
24004a30:	68fb      	ldr	r3, [r7, #12]
24004a32:	681b      	ldr	r3, [r3, #0]
24004a34:	f022 0201 	bic.w	r2, r2, #1
24004a38:	601a      	str	r2, [r3, #0]
24004a3a:	e007      	b.n	24004a4c <HAL_DMA_Start_IT+0x110>
24004a3c:	68fb      	ldr	r3, [r7, #12]
24004a3e:	681b      	ldr	r3, [r3, #0]
24004a40:	681a      	ldr	r2, [r3, #0]
24004a42:	68fb      	ldr	r3, [r7, #12]
24004a44:	681b      	ldr	r3, [r3, #0]
24004a46:	f022 0201 	bic.w	r2, r2, #1
24004a4a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
24004a4c:	683b      	ldr	r3, [r7, #0]
24004a4e:	687a      	ldr	r2, [r7, #4]
24004a50:	68b9      	ldr	r1, [r7, #8]
24004a52:	68f8      	ldr	r0, [r7, #12]
24004a54:	f002 faf6 	bl	24007044 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24004a58:	68fb      	ldr	r3, [r7, #12]
24004a5a:	681b      	ldr	r3, [r3, #0]
24004a5c:	4a34      	ldr	r2, [pc, #208]	@ (24004b30 <HAL_DMA_Start_IT+0x1f4>)
24004a5e:	4293      	cmp	r3, r2
24004a60:	d04a      	beq.n	24004af8 <HAL_DMA_Start_IT+0x1bc>
24004a62:	68fb      	ldr	r3, [r7, #12]
24004a64:	681b      	ldr	r3, [r3, #0]
24004a66:	4a33      	ldr	r2, [pc, #204]	@ (24004b34 <HAL_DMA_Start_IT+0x1f8>)
24004a68:	4293      	cmp	r3, r2
24004a6a:	d045      	beq.n	24004af8 <HAL_DMA_Start_IT+0x1bc>
24004a6c:	68fb      	ldr	r3, [r7, #12]
24004a6e:	681b      	ldr	r3, [r3, #0]
24004a70:	4a31      	ldr	r2, [pc, #196]	@ (24004b38 <HAL_DMA_Start_IT+0x1fc>)
24004a72:	4293      	cmp	r3, r2
24004a74:	d040      	beq.n	24004af8 <HAL_DMA_Start_IT+0x1bc>
24004a76:	68fb      	ldr	r3, [r7, #12]
24004a78:	681b      	ldr	r3, [r3, #0]
24004a7a:	4a30      	ldr	r2, [pc, #192]	@ (24004b3c <HAL_DMA_Start_IT+0x200>)
24004a7c:	4293      	cmp	r3, r2
24004a7e:	d03b      	beq.n	24004af8 <HAL_DMA_Start_IT+0x1bc>
24004a80:	68fb      	ldr	r3, [r7, #12]
24004a82:	681b      	ldr	r3, [r3, #0]
24004a84:	4a2e      	ldr	r2, [pc, #184]	@ (24004b40 <HAL_DMA_Start_IT+0x204>)
24004a86:	4293      	cmp	r3, r2
24004a88:	d036      	beq.n	24004af8 <HAL_DMA_Start_IT+0x1bc>
24004a8a:	68fb      	ldr	r3, [r7, #12]
24004a8c:	681b      	ldr	r3, [r3, #0]
24004a8e:	4a2d      	ldr	r2, [pc, #180]	@ (24004b44 <HAL_DMA_Start_IT+0x208>)
24004a90:	4293      	cmp	r3, r2
24004a92:	d031      	beq.n	24004af8 <HAL_DMA_Start_IT+0x1bc>
24004a94:	68fb      	ldr	r3, [r7, #12]
24004a96:	681b      	ldr	r3, [r3, #0]
24004a98:	4a2b      	ldr	r2, [pc, #172]	@ (24004b48 <HAL_DMA_Start_IT+0x20c>)
24004a9a:	4293      	cmp	r3, r2
24004a9c:	d02c      	beq.n	24004af8 <HAL_DMA_Start_IT+0x1bc>
24004a9e:	68fb      	ldr	r3, [r7, #12]
24004aa0:	681b      	ldr	r3, [r3, #0]
24004aa2:	4a2a      	ldr	r2, [pc, #168]	@ (24004b4c <HAL_DMA_Start_IT+0x210>)
24004aa4:	4293      	cmp	r3, r2
24004aa6:	d027      	beq.n	24004af8 <HAL_DMA_Start_IT+0x1bc>
24004aa8:	68fb      	ldr	r3, [r7, #12]
24004aaa:	681b      	ldr	r3, [r3, #0]
24004aac:	4a28      	ldr	r2, [pc, #160]	@ (24004b50 <HAL_DMA_Start_IT+0x214>)
24004aae:	4293      	cmp	r3, r2
24004ab0:	d022      	beq.n	24004af8 <HAL_DMA_Start_IT+0x1bc>
24004ab2:	68fb      	ldr	r3, [r7, #12]
24004ab4:	681b      	ldr	r3, [r3, #0]
24004ab6:	4a27      	ldr	r2, [pc, #156]	@ (24004b54 <HAL_DMA_Start_IT+0x218>)
24004ab8:	4293      	cmp	r3, r2
24004aba:	d01d      	beq.n	24004af8 <HAL_DMA_Start_IT+0x1bc>
24004abc:	68fb      	ldr	r3, [r7, #12]
24004abe:	681b      	ldr	r3, [r3, #0]
24004ac0:	4a25      	ldr	r2, [pc, #148]	@ (24004b58 <HAL_DMA_Start_IT+0x21c>)
24004ac2:	4293      	cmp	r3, r2
24004ac4:	d018      	beq.n	24004af8 <HAL_DMA_Start_IT+0x1bc>
24004ac6:	68fb      	ldr	r3, [r7, #12]
24004ac8:	681b      	ldr	r3, [r3, #0]
24004aca:	4a24      	ldr	r2, [pc, #144]	@ (24004b5c <HAL_DMA_Start_IT+0x220>)
24004acc:	4293      	cmp	r3, r2
24004ace:	d013      	beq.n	24004af8 <HAL_DMA_Start_IT+0x1bc>
24004ad0:	68fb      	ldr	r3, [r7, #12]
24004ad2:	681b      	ldr	r3, [r3, #0]
24004ad4:	4a22      	ldr	r2, [pc, #136]	@ (24004b60 <HAL_DMA_Start_IT+0x224>)
24004ad6:	4293      	cmp	r3, r2
24004ad8:	d00e      	beq.n	24004af8 <HAL_DMA_Start_IT+0x1bc>
24004ada:	68fb      	ldr	r3, [r7, #12]
24004adc:	681b      	ldr	r3, [r3, #0]
24004ade:	4a21      	ldr	r2, [pc, #132]	@ (24004b64 <HAL_DMA_Start_IT+0x228>)
24004ae0:	4293      	cmp	r3, r2
24004ae2:	d009      	beq.n	24004af8 <HAL_DMA_Start_IT+0x1bc>
24004ae4:	68fb      	ldr	r3, [r7, #12]
24004ae6:	681b      	ldr	r3, [r3, #0]
24004ae8:	4a1f      	ldr	r2, [pc, #124]	@ (24004b68 <HAL_DMA_Start_IT+0x22c>)
24004aea:	4293      	cmp	r3, r2
24004aec:	d004      	beq.n	24004af8 <HAL_DMA_Start_IT+0x1bc>
24004aee:	68fb      	ldr	r3, [r7, #12]
24004af0:	681b      	ldr	r3, [r3, #0]
24004af2:	4a1e      	ldr	r2, [pc, #120]	@ (24004b6c <HAL_DMA_Start_IT+0x230>)
24004af4:	4293      	cmp	r3, r2
24004af6:	d101      	bne.n	24004afc <HAL_DMA_Start_IT+0x1c0>
24004af8:	2301      	movs	r3, #1
24004afa:	e000      	b.n	24004afe <HAL_DMA_Start_IT+0x1c2>
24004afc:	2300      	movs	r3, #0
24004afe:	2b00      	cmp	r3, #0
24004b00:	d036      	beq.n	24004b70 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
24004b02:	68fb      	ldr	r3, [r7, #12]
24004b04:	681b      	ldr	r3, [r3, #0]
24004b06:	681b      	ldr	r3, [r3, #0]
24004b08:	f023 021e 	bic.w	r2, r3, #30
24004b0c:	68fb      	ldr	r3, [r7, #12]
24004b0e:	681b      	ldr	r3, [r3, #0]
24004b10:	f042 0216 	orr.w	r2, r2, #22
24004b14:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
24004b16:	68fb      	ldr	r3, [r7, #12]
24004b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
24004b1a:	2b00      	cmp	r3, #0
24004b1c:	d03e      	beq.n	24004b9c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
24004b1e:	68fb      	ldr	r3, [r7, #12]
24004b20:	681b      	ldr	r3, [r3, #0]
24004b22:	681a      	ldr	r2, [r3, #0]
24004b24:	68fb      	ldr	r3, [r7, #12]
24004b26:	681b      	ldr	r3, [r3, #0]
24004b28:	f042 0208 	orr.w	r2, r2, #8
24004b2c:	601a      	str	r2, [r3, #0]
24004b2e:	e035      	b.n	24004b9c <HAL_DMA_Start_IT+0x260>
24004b30:	40020010 	.word	0x40020010
24004b34:	40020028 	.word	0x40020028
24004b38:	40020040 	.word	0x40020040
24004b3c:	40020058 	.word	0x40020058
24004b40:	40020070 	.word	0x40020070
24004b44:	40020088 	.word	0x40020088
24004b48:	400200a0 	.word	0x400200a0
24004b4c:	400200b8 	.word	0x400200b8
24004b50:	40020410 	.word	0x40020410
24004b54:	40020428 	.word	0x40020428
24004b58:	40020440 	.word	0x40020440
24004b5c:	40020458 	.word	0x40020458
24004b60:	40020470 	.word	0x40020470
24004b64:	40020488 	.word	0x40020488
24004b68:	400204a0 	.word	0x400204a0
24004b6c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
24004b70:	68fb      	ldr	r3, [r7, #12]
24004b72:	681b      	ldr	r3, [r3, #0]
24004b74:	681b      	ldr	r3, [r3, #0]
24004b76:	f023 020e 	bic.w	r2, r3, #14
24004b7a:	68fb      	ldr	r3, [r7, #12]
24004b7c:	681b      	ldr	r3, [r3, #0]
24004b7e:	f042 020a 	orr.w	r2, r2, #10
24004b82:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
24004b84:	68fb      	ldr	r3, [r7, #12]
24004b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
24004b88:	2b00      	cmp	r3, #0
24004b8a:	d007      	beq.n	24004b9c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
24004b8c:	68fb      	ldr	r3, [r7, #12]
24004b8e:	681b      	ldr	r3, [r3, #0]
24004b90:	681a      	ldr	r2, [r3, #0]
24004b92:	68fb      	ldr	r3, [r7, #12]
24004b94:	681b      	ldr	r3, [r3, #0]
24004b96:	f042 0204 	orr.w	r2, r2, #4
24004b9a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24004b9c:	68fb      	ldr	r3, [r7, #12]
24004b9e:	681b      	ldr	r3, [r3, #0]
24004ba0:	4a83      	ldr	r2, [pc, #524]	@ (24004db0 <HAL_DMA_Start_IT+0x474>)
24004ba2:	4293      	cmp	r3, r2
24004ba4:	d072      	beq.n	24004c8c <HAL_DMA_Start_IT+0x350>
24004ba6:	68fb      	ldr	r3, [r7, #12]
24004ba8:	681b      	ldr	r3, [r3, #0]
24004baa:	4a82      	ldr	r2, [pc, #520]	@ (24004db4 <HAL_DMA_Start_IT+0x478>)
24004bac:	4293      	cmp	r3, r2
24004bae:	d06d      	beq.n	24004c8c <HAL_DMA_Start_IT+0x350>
24004bb0:	68fb      	ldr	r3, [r7, #12]
24004bb2:	681b      	ldr	r3, [r3, #0]
24004bb4:	4a80      	ldr	r2, [pc, #512]	@ (24004db8 <HAL_DMA_Start_IT+0x47c>)
24004bb6:	4293      	cmp	r3, r2
24004bb8:	d068      	beq.n	24004c8c <HAL_DMA_Start_IT+0x350>
24004bba:	68fb      	ldr	r3, [r7, #12]
24004bbc:	681b      	ldr	r3, [r3, #0]
24004bbe:	4a7f      	ldr	r2, [pc, #508]	@ (24004dbc <HAL_DMA_Start_IT+0x480>)
24004bc0:	4293      	cmp	r3, r2
24004bc2:	d063      	beq.n	24004c8c <HAL_DMA_Start_IT+0x350>
24004bc4:	68fb      	ldr	r3, [r7, #12]
24004bc6:	681b      	ldr	r3, [r3, #0]
24004bc8:	4a7d      	ldr	r2, [pc, #500]	@ (24004dc0 <HAL_DMA_Start_IT+0x484>)
24004bca:	4293      	cmp	r3, r2
24004bcc:	d05e      	beq.n	24004c8c <HAL_DMA_Start_IT+0x350>
24004bce:	68fb      	ldr	r3, [r7, #12]
24004bd0:	681b      	ldr	r3, [r3, #0]
24004bd2:	4a7c      	ldr	r2, [pc, #496]	@ (24004dc4 <HAL_DMA_Start_IT+0x488>)
24004bd4:	4293      	cmp	r3, r2
24004bd6:	d059      	beq.n	24004c8c <HAL_DMA_Start_IT+0x350>
24004bd8:	68fb      	ldr	r3, [r7, #12]
24004bda:	681b      	ldr	r3, [r3, #0]
24004bdc:	4a7a      	ldr	r2, [pc, #488]	@ (24004dc8 <HAL_DMA_Start_IT+0x48c>)
24004bde:	4293      	cmp	r3, r2
24004be0:	d054      	beq.n	24004c8c <HAL_DMA_Start_IT+0x350>
24004be2:	68fb      	ldr	r3, [r7, #12]
24004be4:	681b      	ldr	r3, [r3, #0]
24004be6:	4a79      	ldr	r2, [pc, #484]	@ (24004dcc <HAL_DMA_Start_IT+0x490>)
24004be8:	4293      	cmp	r3, r2
24004bea:	d04f      	beq.n	24004c8c <HAL_DMA_Start_IT+0x350>
24004bec:	68fb      	ldr	r3, [r7, #12]
24004bee:	681b      	ldr	r3, [r3, #0]
24004bf0:	4a77      	ldr	r2, [pc, #476]	@ (24004dd0 <HAL_DMA_Start_IT+0x494>)
24004bf2:	4293      	cmp	r3, r2
24004bf4:	d04a      	beq.n	24004c8c <HAL_DMA_Start_IT+0x350>
24004bf6:	68fb      	ldr	r3, [r7, #12]
24004bf8:	681b      	ldr	r3, [r3, #0]
24004bfa:	4a76      	ldr	r2, [pc, #472]	@ (24004dd4 <HAL_DMA_Start_IT+0x498>)
24004bfc:	4293      	cmp	r3, r2
24004bfe:	d045      	beq.n	24004c8c <HAL_DMA_Start_IT+0x350>
24004c00:	68fb      	ldr	r3, [r7, #12]
24004c02:	681b      	ldr	r3, [r3, #0]
24004c04:	4a74      	ldr	r2, [pc, #464]	@ (24004dd8 <HAL_DMA_Start_IT+0x49c>)
24004c06:	4293      	cmp	r3, r2
24004c08:	d040      	beq.n	24004c8c <HAL_DMA_Start_IT+0x350>
24004c0a:	68fb      	ldr	r3, [r7, #12]
24004c0c:	681b      	ldr	r3, [r3, #0]
24004c0e:	4a73      	ldr	r2, [pc, #460]	@ (24004ddc <HAL_DMA_Start_IT+0x4a0>)
24004c10:	4293      	cmp	r3, r2
24004c12:	d03b      	beq.n	24004c8c <HAL_DMA_Start_IT+0x350>
24004c14:	68fb      	ldr	r3, [r7, #12]
24004c16:	681b      	ldr	r3, [r3, #0]
24004c18:	4a71      	ldr	r2, [pc, #452]	@ (24004de0 <HAL_DMA_Start_IT+0x4a4>)
24004c1a:	4293      	cmp	r3, r2
24004c1c:	d036      	beq.n	24004c8c <HAL_DMA_Start_IT+0x350>
24004c1e:	68fb      	ldr	r3, [r7, #12]
24004c20:	681b      	ldr	r3, [r3, #0]
24004c22:	4a70      	ldr	r2, [pc, #448]	@ (24004de4 <HAL_DMA_Start_IT+0x4a8>)
24004c24:	4293      	cmp	r3, r2
24004c26:	d031      	beq.n	24004c8c <HAL_DMA_Start_IT+0x350>
24004c28:	68fb      	ldr	r3, [r7, #12]
24004c2a:	681b      	ldr	r3, [r3, #0]
24004c2c:	4a6e      	ldr	r2, [pc, #440]	@ (24004de8 <HAL_DMA_Start_IT+0x4ac>)
24004c2e:	4293      	cmp	r3, r2
24004c30:	d02c      	beq.n	24004c8c <HAL_DMA_Start_IT+0x350>
24004c32:	68fb      	ldr	r3, [r7, #12]
24004c34:	681b      	ldr	r3, [r3, #0]
24004c36:	4a6d      	ldr	r2, [pc, #436]	@ (24004dec <HAL_DMA_Start_IT+0x4b0>)
24004c38:	4293      	cmp	r3, r2
24004c3a:	d027      	beq.n	24004c8c <HAL_DMA_Start_IT+0x350>
24004c3c:	68fb      	ldr	r3, [r7, #12]
24004c3e:	681b      	ldr	r3, [r3, #0]
24004c40:	4a6b      	ldr	r2, [pc, #428]	@ (24004df0 <HAL_DMA_Start_IT+0x4b4>)
24004c42:	4293      	cmp	r3, r2
24004c44:	d022      	beq.n	24004c8c <HAL_DMA_Start_IT+0x350>
24004c46:	68fb      	ldr	r3, [r7, #12]
24004c48:	681b      	ldr	r3, [r3, #0]
24004c4a:	4a6a      	ldr	r2, [pc, #424]	@ (24004df4 <HAL_DMA_Start_IT+0x4b8>)
24004c4c:	4293      	cmp	r3, r2
24004c4e:	d01d      	beq.n	24004c8c <HAL_DMA_Start_IT+0x350>
24004c50:	68fb      	ldr	r3, [r7, #12]
24004c52:	681b      	ldr	r3, [r3, #0]
24004c54:	4a68      	ldr	r2, [pc, #416]	@ (24004df8 <HAL_DMA_Start_IT+0x4bc>)
24004c56:	4293      	cmp	r3, r2
24004c58:	d018      	beq.n	24004c8c <HAL_DMA_Start_IT+0x350>
24004c5a:	68fb      	ldr	r3, [r7, #12]
24004c5c:	681b      	ldr	r3, [r3, #0]
24004c5e:	4a67      	ldr	r2, [pc, #412]	@ (24004dfc <HAL_DMA_Start_IT+0x4c0>)
24004c60:	4293      	cmp	r3, r2
24004c62:	d013      	beq.n	24004c8c <HAL_DMA_Start_IT+0x350>
24004c64:	68fb      	ldr	r3, [r7, #12]
24004c66:	681b      	ldr	r3, [r3, #0]
24004c68:	4a65      	ldr	r2, [pc, #404]	@ (24004e00 <HAL_DMA_Start_IT+0x4c4>)
24004c6a:	4293      	cmp	r3, r2
24004c6c:	d00e      	beq.n	24004c8c <HAL_DMA_Start_IT+0x350>
24004c6e:	68fb      	ldr	r3, [r7, #12]
24004c70:	681b      	ldr	r3, [r3, #0]
24004c72:	4a64      	ldr	r2, [pc, #400]	@ (24004e04 <HAL_DMA_Start_IT+0x4c8>)
24004c74:	4293      	cmp	r3, r2
24004c76:	d009      	beq.n	24004c8c <HAL_DMA_Start_IT+0x350>
24004c78:	68fb      	ldr	r3, [r7, #12]
24004c7a:	681b      	ldr	r3, [r3, #0]
24004c7c:	4a62      	ldr	r2, [pc, #392]	@ (24004e08 <HAL_DMA_Start_IT+0x4cc>)
24004c7e:	4293      	cmp	r3, r2
24004c80:	d004      	beq.n	24004c8c <HAL_DMA_Start_IT+0x350>
24004c82:	68fb      	ldr	r3, [r7, #12]
24004c84:	681b      	ldr	r3, [r3, #0]
24004c86:	4a61      	ldr	r2, [pc, #388]	@ (24004e0c <HAL_DMA_Start_IT+0x4d0>)
24004c88:	4293      	cmp	r3, r2
24004c8a:	d101      	bne.n	24004c90 <HAL_DMA_Start_IT+0x354>
24004c8c:	2301      	movs	r3, #1
24004c8e:	e000      	b.n	24004c92 <HAL_DMA_Start_IT+0x356>
24004c90:	2300      	movs	r3, #0
24004c92:	2b00      	cmp	r3, #0
24004c94:	d01a      	beq.n	24004ccc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
24004c96:	68fb      	ldr	r3, [r7, #12]
24004c98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
24004c9a:	681b      	ldr	r3, [r3, #0]
24004c9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
24004ca0:	2b00      	cmp	r3, #0
24004ca2:	d007      	beq.n	24004cb4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
24004ca4:	68fb      	ldr	r3, [r7, #12]
24004ca6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
24004ca8:	681a      	ldr	r2, [r3, #0]
24004caa:	68fb      	ldr	r3, [r7, #12]
24004cac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
24004cae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
24004cb2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
24004cb4:	68fb      	ldr	r3, [r7, #12]
24004cb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
24004cb8:	2b00      	cmp	r3, #0
24004cba:	d007      	beq.n	24004ccc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
24004cbc:	68fb      	ldr	r3, [r7, #12]
24004cbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
24004cc0:	681a      	ldr	r2, [r3, #0]
24004cc2:	68fb      	ldr	r3, [r7, #12]
24004cc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
24004cc6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
24004cca:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
24004ccc:	68fb      	ldr	r3, [r7, #12]
24004cce:	681b      	ldr	r3, [r3, #0]
24004cd0:	4a37      	ldr	r2, [pc, #220]	@ (24004db0 <HAL_DMA_Start_IT+0x474>)
24004cd2:	4293      	cmp	r3, r2
24004cd4:	d04a      	beq.n	24004d6c <HAL_DMA_Start_IT+0x430>
24004cd6:	68fb      	ldr	r3, [r7, #12]
24004cd8:	681b      	ldr	r3, [r3, #0]
24004cda:	4a36      	ldr	r2, [pc, #216]	@ (24004db4 <HAL_DMA_Start_IT+0x478>)
24004cdc:	4293      	cmp	r3, r2
24004cde:	d045      	beq.n	24004d6c <HAL_DMA_Start_IT+0x430>
24004ce0:	68fb      	ldr	r3, [r7, #12]
24004ce2:	681b      	ldr	r3, [r3, #0]
24004ce4:	4a34      	ldr	r2, [pc, #208]	@ (24004db8 <HAL_DMA_Start_IT+0x47c>)
24004ce6:	4293      	cmp	r3, r2
24004ce8:	d040      	beq.n	24004d6c <HAL_DMA_Start_IT+0x430>
24004cea:	68fb      	ldr	r3, [r7, #12]
24004cec:	681b      	ldr	r3, [r3, #0]
24004cee:	4a33      	ldr	r2, [pc, #204]	@ (24004dbc <HAL_DMA_Start_IT+0x480>)
24004cf0:	4293      	cmp	r3, r2
24004cf2:	d03b      	beq.n	24004d6c <HAL_DMA_Start_IT+0x430>
24004cf4:	68fb      	ldr	r3, [r7, #12]
24004cf6:	681b      	ldr	r3, [r3, #0]
24004cf8:	4a31      	ldr	r2, [pc, #196]	@ (24004dc0 <HAL_DMA_Start_IT+0x484>)
24004cfa:	4293      	cmp	r3, r2
24004cfc:	d036      	beq.n	24004d6c <HAL_DMA_Start_IT+0x430>
24004cfe:	68fb      	ldr	r3, [r7, #12]
24004d00:	681b      	ldr	r3, [r3, #0]
24004d02:	4a30      	ldr	r2, [pc, #192]	@ (24004dc4 <HAL_DMA_Start_IT+0x488>)
24004d04:	4293      	cmp	r3, r2
24004d06:	d031      	beq.n	24004d6c <HAL_DMA_Start_IT+0x430>
24004d08:	68fb      	ldr	r3, [r7, #12]
24004d0a:	681b      	ldr	r3, [r3, #0]
24004d0c:	4a2e      	ldr	r2, [pc, #184]	@ (24004dc8 <HAL_DMA_Start_IT+0x48c>)
24004d0e:	4293      	cmp	r3, r2
24004d10:	d02c      	beq.n	24004d6c <HAL_DMA_Start_IT+0x430>
24004d12:	68fb      	ldr	r3, [r7, #12]
24004d14:	681b      	ldr	r3, [r3, #0]
24004d16:	4a2d      	ldr	r2, [pc, #180]	@ (24004dcc <HAL_DMA_Start_IT+0x490>)
24004d18:	4293      	cmp	r3, r2
24004d1a:	d027      	beq.n	24004d6c <HAL_DMA_Start_IT+0x430>
24004d1c:	68fb      	ldr	r3, [r7, #12]
24004d1e:	681b      	ldr	r3, [r3, #0]
24004d20:	4a2b      	ldr	r2, [pc, #172]	@ (24004dd0 <HAL_DMA_Start_IT+0x494>)
24004d22:	4293      	cmp	r3, r2
24004d24:	d022      	beq.n	24004d6c <HAL_DMA_Start_IT+0x430>
24004d26:	68fb      	ldr	r3, [r7, #12]
24004d28:	681b      	ldr	r3, [r3, #0]
24004d2a:	4a2a      	ldr	r2, [pc, #168]	@ (24004dd4 <HAL_DMA_Start_IT+0x498>)
24004d2c:	4293      	cmp	r3, r2
24004d2e:	d01d      	beq.n	24004d6c <HAL_DMA_Start_IT+0x430>
24004d30:	68fb      	ldr	r3, [r7, #12]
24004d32:	681b      	ldr	r3, [r3, #0]
24004d34:	4a28      	ldr	r2, [pc, #160]	@ (24004dd8 <HAL_DMA_Start_IT+0x49c>)
24004d36:	4293      	cmp	r3, r2
24004d38:	d018      	beq.n	24004d6c <HAL_DMA_Start_IT+0x430>
24004d3a:	68fb      	ldr	r3, [r7, #12]
24004d3c:	681b      	ldr	r3, [r3, #0]
24004d3e:	4a27      	ldr	r2, [pc, #156]	@ (24004ddc <HAL_DMA_Start_IT+0x4a0>)
24004d40:	4293      	cmp	r3, r2
24004d42:	d013      	beq.n	24004d6c <HAL_DMA_Start_IT+0x430>
24004d44:	68fb      	ldr	r3, [r7, #12]
24004d46:	681b      	ldr	r3, [r3, #0]
24004d48:	4a25      	ldr	r2, [pc, #148]	@ (24004de0 <HAL_DMA_Start_IT+0x4a4>)
24004d4a:	4293      	cmp	r3, r2
24004d4c:	d00e      	beq.n	24004d6c <HAL_DMA_Start_IT+0x430>
24004d4e:	68fb      	ldr	r3, [r7, #12]
24004d50:	681b      	ldr	r3, [r3, #0]
24004d52:	4a24      	ldr	r2, [pc, #144]	@ (24004de4 <HAL_DMA_Start_IT+0x4a8>)
24004d54:	4293      	cmp	r3, r2
24004d56:	d009      	beq.n	24004d6c <HAL_DMA_Start_IT+0x430>
24004d58:	68fb      	ldr	r3, [r7, #12]
24004d5a:	681b      	ldr	r3, [r3, #0]
24004d5c:	4a22      	ldr	r2, [pc, #136]	@ (24004de8 <HAL_DMA_Start_IT+0x4ac>)
24004d5e:	4293      	cmp	r3, r2
24004d60:	d004      	beq.n	24004d6c <HAL_DMA_Start_IT+0x430>
24004d62:	68fb      	ldr	r3, [r7, #12]
24004d64:	681b      	ldr	r3, [r3, #0]
24004d66:	4a21      	ldr	r2, [pc, #132]	@ (24004dec <HAL_DMA_Start_IT+0x4b0>)
24004d68:	4293      	cmp	r3, r2
24004d6a:	d108      	bne.n	24004d7e <HAL_DMA_Start_IT+0x442>
24004d6c:	68fb      	ldr	r3, [r7, #12]
24004d6e:	681b      	ldr	r3, [r3, #0]
24004d70:	681a      	ldr	r2, [r3, #0]
24004d72:	68fb      	ldr	r3, [r7, #12]
24004d74:	681b      	ldr	r3, [r3, #0]
24004d76:	f042 0201 	orr.w	r2, r2, #1
24004d7a:	601a      	str	r2, [r3, #0]
24004d7c:	e012      	b.n	24004da4 <HAL_DMA_Start_IT+0x468>
24004d7e:	68fb      	ldr	r3, [r7, #12]
24004d80:	681b      	ldr	r3, [r3, #0]
24004d82:	681a      	ldr	r2, [r3, #0]
24004d84:	68fb      	ldr	r3, [r7, #12]
24004d86:	681b      	ldr	r3, [r3, #0]
24004d88:	f042 0201 	orr.w	r2, r2, #1
24004d8c:	601a      	str	r2, [r3, #0]
24004d8e:	e009      	b.n	24004da4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
24004d90:	68fb      	ldr	r3, [r7, #12]
24004d92:	f44f 6200 	mov.w	r2, #2048	@ 0x800
24004d96:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
24004d98:	68fb      	ldr	r3, [r7, #12]
24004d9a:	2200      	movs	r2, #0
24004d9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
24004da0:	2301      	movs	r3, #1
24004da2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
24004da4:	7dfb      	ldrb	r3, [r7, #23]
}
24004da6:	4618      	mov	r0, r3
24004da8:	3718      	adds	r7, #24
24004daa:	46bd      	mov	sp, r7
24004dac:	bd80      	pop	{r7, pc}
24004dae:	bf00      	nop
24004db0:	40020010 	.word	0x40020010
24004db4:	40020028 	.word	0x40020028
24004db8:	40020040 	.word	0x40020040
24004dbc:	40020058 	.word	0x40020058
24004dc0:	40020070 	.word	0x40020070
24004dc4:	40020088 	.word	0x40020088
24004dc8:	400200a0 	.word	0x400200a0
24004dcc:	400200b8 	.word	0x400200b8
24004dd0:	40020410 	.word	0x40020410
24004dd4:	40020428 	.word	0x40020428
24004dd8:	40020440 	.word	0x40020440
24004ddc:	40020458 	.word	0x40020458
24004de0:	40020470 	.word	0x40020470
24004de4:	40020488 	.word	0x40020488
24004de8:	400204a0 	.word	0x400204a0
24004dec:	400204b8 	.word	0x400204b8
24004df0:	58025408 	.word	0x58025408
24004df4:	5802541c 	.word	0x5802541c
24004df8:	58025430 	.word	0x58025430
24004dfc:	58025444 	.word	0x58025444
24004e00:	58025458 	.word	0x58025458
24004e04:	5802546c 	.word	0x5802546c
24004e08:	58025480 	.word	0x58025480
24004e0c:	58025494 	.word	0x58025494

24004e10 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
24004e10:	b580      	push	{r7, lr}
24004e12:	b086      	sub	sp, #24
24004e14:	af00      	add	r7, sp, #0
24004e16:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
24004e18:	f7fd ff6a 	bl	24002cf0 <HAL_GetTick>
24004e1c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
24004e1e:	687b      	ldr	r3, [r7, #4]
24004e20:	2b00      	cmp	r3, #0
24004e22:	d101      	bne.n	24004e28 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
24004e24:	2301      	movs	r3, #1
24004e26:	e2dc      	b.n	240053e2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
24004e28:	687b      	ldr	r3, [r7, #4]
24004e2a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
24004e2e:	b2db      	uxtb	r3, r3
24004e30:	2b02      	cmp	r3, #2
24004e32:	d008      	beq.n	24004e46 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
24004e34:	687b      	ldr	r3, [r7, #4]
24004e36:	2280      	movs	r2, #128	@ 0x80
24004e38:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
24004e3a:	687b      	ldr	r3, [r7, #4]
24004e3c:	2200      	movs	r2, #0
24004e3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
24004e42:	2301      	movs	r3, #1
24004e44:	e2cd      	b.n	240053e2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24004e46:	687b      	ldr	r3, [r7, #4]
24004e48:	681b      	ldr	r3, [r3, #0]
24004e4a:	4a76      	ldr	r2, [pc, #472]	@ (24005024 <HAL_DMA_Abort+0x214>)
24004e4c:	4293      	cmp	r3, r2
24004e4e:	d04a      	beq.n	24004ee6 <HAL_DMA_Abort+0xd6>
24004e50:	687b      	ldr	r3, [r7, #4]
24004e52:	681b      	ldr	r3, [r3, #0]
24004e54:	4a74      	ldr	r2, [pc, #464]	@ (24005028 <HAL_DMA_Abort+0x218>)
24004e56:	4293      	cmp	r3, r2
24004e58:	d045      	beq.n	24004ee6 <HAL_DMA_Abort+0xd6>
24004e5a:	687b      	ldr	r3, [r7, #4]
24004e5c:	681b      	ldr	r3, [r3, #0]
24004e5e:	4a73      	ldr	r2, [pc, #460]	@ (2400502c <HAL_DMA_Abort+0x21c>)
24004e60:	4293      	cmp	r3, r2
24004e62:	d040      	beq.n	24004ee6 <HAL_DMA_Abort+0xd6>
24004e64:	687b      	ldr	r3, [r7, #4]
24004e66:	681b      	ldr	r3, [r3, #0]
24004e68:	4a71      	ldr	r2, [pc, #452]	@ (24005030 <HAL_DMA_Abort+0x220>)
24004e6a:	4293      	cmp	r3, r2
24004e6c:	d03b      	beq.n	24004ee6 <HAL_DMA_Abort+0xd6>
24004e6e:	687b      	ldr	r3, [r7, #4]
24004e70:	681b      	ldr	r3, [r3, #0]
24004e72:	4a70      	ldr	r2, [pc, #448]	@ (24005034 <HAL_DMA_Abort+0x224>)
24004e74:	4293      	cmp	r3, r2
24004e76:	d036      	beq.n	24004ee6 <HAL_DMA_Abort+0xd6>
24004e78:	687b      	ldr	r3, [r7, #4]
24004e7a:	681b      	ldr	r3, [r3, #0]
24004e7c:	4a6e      	ldr	r2, [pc, #440]	@ (24005038 <HAL_DMA_Abort+0x228>)
24004e7e:	4293      	cmp	r3, r2
24004e80:	d031      	beq.n	24004ee6 <HAL_DMA_Abort+0xd6>
24004e82:	687b      	ldr	r3, [r7, #4]
24004e84:	681b      	ldr	r3, [r3, #0]
24004e86:	4a6d      	ldr	r2, [pc, #436]	@ (2400503c <HAL_DMA_Abort+0x22c>)
24004e88:	4293      	cmp	r3, r2
24004e8a:	d02c      	beq.n	24004ee6 <HAL_DMA_Abort+0xd6>
24004e8c:	687b      	ldr	r3, [r7, #4]
24004e8e:	681b      	ldr	r3, [r3, #0]
24004e90:	4a6b      	ldr	r2, [pc, #428]	@ (24005040 <HAL_DMA_Abort+0x230>)
24004e92:	4293      	cmp	r3, r2
24004e94:	d027      	beq.n	24004ee6 <HAL_DMA_Abort+0xd6>
24004e96:	687b      	ldr	r3, [r7, #4]
24004e98:	681b      	ldr	r3, [r3, #0]
24004e9a:	4a6a      	ldr	r2, [pc, #424]	@ (24005044 <HAL_DMA_Abort+0x234>)
24004e9c:	4293      	cmp	r3, r2
24004e9e:	d022      	beq.n	24004ee6 <HAL_DMA_Abort+0xd6>
24004ea0:	687b      	ldr	r3, [r7, #4]
24004ea2:	681b      	ldr	r3, [r3, #0]
24004ea4:	4a68      	ldr	r2, [pc, #416]	@ (24005048 <HAL_DMA_Abort+0x238>)
24004ea6:	4293      	cmp	r3, r2
24004ea8:	d01d      	beq.n	24004ee6 <HAL_DMA_Abort+0xd6>
24004eaa:	687b      	ldr	r3, [r7, #4]
24004eac:	681b      	ldr	r3, [r3, #0]
24004eae:	4a67      	ldr	r2, [pc, #412]	@ (2400504c <HAL_DMA_Abort+0x23c>)
24004eb0:	4293      	cmp	r3, r2
24004eb2:	d018      	beq.n	24004ee6 <HAL_DMA_Abort+0xd6>
24004eb4:	687b      	ldr	r3, [r7, #4]
24004eb6:	681b      	ldr	r3, [r3, #0]
24004eb8:	4a65      	ldr	r2, [pc, #404]	@ (24005050 <HAL_DMA_Abort+0x240>)
24004eba:	4293      	cmp	r3, r2
24004ebc:	d013      	beq.n	24004ee6 <HAL_DMA_Abort+0xd6>
24004ebe:	687b      	ldr	r3, [r7, #4]
24004ec0:	681b      	ldr	r3, [r3, #0]
24004ec2:	4a64      	ldr	r2, [pc, #400]	@ (24005054 <HAL_DMA_Abort+0x244>)
24004ec4:	4293      	cmp	r3, r2
24004ec6:	d00e      	beq.n	24004ee6 <HAL_DMA_Abort+0xd6>
24004ec8:	687b      	ldr	r3, [r7, #4]
24004eca:	681b      	ldr	r3, [r3, #0]
24004ecc:	4a62      	ldr	r2, [pc, #392]	@ (24005058 <HAL_DMA_Abort+0x248>)
24004ece:	4293      	cmp	r3, r2
24004ed0:	d009      	beq.n	24004ee6 <HAL_DMA_Abort+0xd6>
24004ed2:	687b      	ldr	r3, [r7, #4]
24004ed4:	681b      	ldr	r3, [r3, #0]
24004ed6:	4a61      	ldr	r2, [pc, #388]	@ (2400505c <HAL_DMA_Abort+0x24c>)
24004ed8:	4293      	cmp	r3, r2
24004eda:	d004      	beq.n	24004ee6 <HAL_DMA_Abort+0xd6>
24004edc:	687b      	ldr	r3, [r7, #4]
24004ede:	681b      	ldr	r3, [r3, #0]
24004ee0:	4a5f      	ldr	r2, [pc, #380]	@ (24005060 <HAL_DMA_Abort+0x250>)
24004ee2:	4293      	cmp	r3, r2
24004ee4:	d101      	bne.n	24004eea <HAL_DMA_Abort+0xda>
24004ee6:	2301      	movs	r3, #1
24004ee8:	e000      	b.n	24004eec <HAL_DMA_Abort+0xdc>
24004eea:	2300      	movs	r3, #0
24004eec:	2b00      	cmp	r3, #0
24004eee:	d013      	beq.n	24004f18 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
24004ef0:	687b      	ldr	r3, [r7, #4]
24004ef2:	681b      	ldr	r3, [r3, #0]
24004ef4:	681a      	ldr	r2, [r3, #0]
24004ef6:	687b      	ldr	r3, [r7, #4]
24004ef8:	681b      	ldr	r3, [r3, #0]
24004efa:	f022 021e 	bic.w	r2, r2, #30
24004efe:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
24004f00:	687b      	ldr	r3, [r7, #4]
24004f02:	681b      	ldr	r3, [r3, #0]
24004f04:	695a      	ldr	r2, [r3, #20]
24004f06:	687b      	ldr	r3, [r7, #4]
24004f08:	681b      	ldr	r3, [r3, #0]
24004f0a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
24004f0e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
24004f10:	687b      	ldr	r3, [r7, #4]
24004f12:	681b      	ldr	r3, [r3, #0]
24004f14:	617b      	str	r3, [r7, #20]
24004f16:	e00a      	b.n	24004f2e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
24004f18:	687b      	ldr	r3, [r7, #4]
24004f1a:	681b      	ldr	r3, [r3, #0]
24004f1c:	681a      	ldr	r2, [r3, #0]
24004f1e:	687b      	ldr	r3, [r7, #4]
24004f20:	681b      	ldr	r3, [r3, #0]
24004f22:	f022 020e 	bic.w	r2, r2, #14
24004f26:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
24004f28:	687b      	ldr	r3, [r7, #4]
24004f2a:	681b      	ldr	r3, [r3, #0]
24004f2c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24004f2e:	687b      	ldr	r3, [r7, #4]
24004f30:	681b      	ldr	r3, [r3, #0]
24004f32:	4a3c      	ldr	r2, [pc, #240]	@ (24005024 <HAL_DMA_Abort+0x214>)
24004f34:	4293      	cmp	r3, r2
24004f36:	d072      	beq.n	2400501e <HAL_DMA_Abort+0x20e>
24004f38:	687b      	ldr	r3, [r7, #4]
24004f3a:	681b      	ldr	r3, [r3, #0]
24004f3c:	4a3a      	ldr	r2, [pc, #232]	@ (24005028 <HAL_DMA_Abort+0x218>)
24004f3e:	4293      	cmp	r3, r2
24004f40:	d06d      	beq.n	2400501e <HAL_DMA_Abort+0x20e>
24004f42:	687b      	ldr	r3, [r7, #4]
24004f44:	681b      	ldr	r3, [r3, #0]
24004f46:	4a39      	ldr	r2, [pc, #228]	@ (2400502c <HAL_DMA_Abort+0x21c>)
24004f48:	4293      	cmp	r3, r2
24004f4a:	d068      	beq.n	2400501e <HAL_DMA_Abort+0x20e>
24004f4c:	687b      	ldr	r3, [r7, #4]
24004f4e:	681b      	ldr	r3, [r3, #0]
24004f50:	4a37      	ldr	r2, [pc, #220]	@ (24005030 <HAL_DMA_Abort+0x220>)
24004f52:	4293      	cmp	r3, r2
24004f54:	d063      	beq.n	2400501e <HAL_DMA_Abort+0x20e>
24004f56:	687b      	ldr	r3, [r7, #4]
24004f58:	681b      	ldr	r3, [r3, #0]
24004f5a:	4a36      	ldr	r2, [pc, #216]	@ (24005034 <HAL_DMA_Abort+0x224>)
24004f5c:	4293      	cmp	r3, r2
24004f5e:	d05e      	beq.n	2400501e <HAL_DMA_Abort+0x20e>
24004f60:	687b      	ldr	r3, [r7, #4]
24004f62:	681b      	ldr	r3, [r3, #0]
24004f64:	4a34      	ldr	r2, [pc, #208]	@ (24005038 <HAL_DMA_Abort+0x228>)
24004f66:	4293      	cmp	r3, r2
24004f68:	d059      	beq.n	2400501e <HAL_DMA_Abort+0x20e>
24004f6a:	687b      	ldr	r3, [r7, #4]
24004f6c:	681b      	ldr	r3, [r3, #0]
24004f6e:	4a33      	ldr	r2, [pc, #204]	@ (2400503c <HAL_DMA_Abort+0x22c>)
24004f70:	4293      	cmp	r3, r2
24004f72:	d054      	beq.n	2400501e <HAL_DMA_Abort+0x20e>
24004f74:	687b      	ldr	r3, [r7, #4]
24004f76:	681b      	ldr	r3, [r3, #0]
24004f78:	4a31      	ldr	r2, [pc, #196]	@ (24005040 <HAL_DMA_Abort+0x230>)
24004f7a:	4293      	cmp	r3, r2
24004f7c:	d04f      	beq.n	2400501e <HAL_DMA_Abort+0x20e>
24004f7e:	687b      	ldr	r3, [r7, #4]
24004f80:	681b      	ldr	r3, [r3, #0]
24004f82:	4a30      	ldr	r2, [pc, #192]	@ (24005044 <HAL_DMA_Abort+0x234>)
24004f84:	4293      	cmp	r3, r2
24004f86:	d04a      	beq.n	2400501e <HAL_DMA_Abort+0x20e>
24004f88:	687b      	ldr	r3, [r7, #4]
24004f8a:	681b      	ldr	r3, [r3, #0]
24004f8c:	4a2e      	ldr	r2, [pc, #184]	@ (24005048 <HAL_DMA_Abort+0x238>)
24004f8e:	4293      	cmp	r3, r2
24004f90:	d045      	beq.n	2400501e <HAL_DMA_Abort+0x20e>
24004f92:	687b      	ldr	r3, [r7, #4]
24004f94:	681b      	ldr	r3, [r3, #0]
24004f96:	4a2d      	ldr	r2, [pc, #180]	@ (2400504c <HAL_DMA_Abort+0x23c>)
24004f98:	4293      	cmp	r3, r2
24004f9a:	d040      	beq.n	2400501e <HAL_DMA_Abort+0x20e>
24004f9c:	687b      	ldr	r3, [r7, #4]
24004f9e:	681b      	ldr	r3, [r3, #0]
24004fa0:	4a2b      	ldr	r2, [pc, #172]	@ (24005050 <HAL_DMA_Abort+0x240>)
24004fa2:	4293      	cmp	r3, r2
24004fa4:	d03b      	beq.n	2400501e <HAL_DMA_Abort+0x20e>
24004fa6:	687b      	ldr	r3, [r7, #4]
24004fa8:	681b      	ldr	r3, [r3, #0]
24004faa:	4a2a      	ldr	r2, [pc, #168]	@ (24005054 <HAL_DMA_Abort+0x244>)
24004fac:	4293      	cmp	r3, r2
24004fae:	d036      	beq.n	2400501e <HAL_DMA_Abort+0x20e>
24004fb0:	687b      	ldr	r3, [r7, #4]
24004fb2:	681b      	ldr	r3, [r3, #0]
24004fb4:	4a28      	ldr	r2, [pc, #160]	@ (24005058 <HAL_DMA_Abort+0x248>)
24004fb6:	4293      	cmp	r3, r2
24004fb8:	d031      	beq.n	2400501e <HAL_DMA_Abort+0x20e>
24004fba:	687b      	ldr	r3, [r7, #4]
24004fbc:	681b      	ldr	r3, [r3, #0]
24004fbe:	4a27      	ldr	r2, [pc, #156]	@ (2400505c <HAL_DMA_Abort+0x24c>)
24004fc0:	4293      	cmp	r3, r2
24004fc2:	d02c      	beq.n	2400501e <HAL_DMA_Abort+0x20e>
24004fc4:	687b      	ldr	r3, [r7, #4]
24004fc6:	681b      	ldr	r3, [r3, #0]
24004fc8:	4a25      	ldr	r2, [pc, #148]	@ (24005060 <HAL_DMA_Abort+0x250>)
24004fca:	4293      	cmp	r3, r2
24004fcc:	d027      	beq.n	2400501e <HAL_DMA_Abort+0x20e>
24004fce:	687b      	ldr	r3, [r7, #4]
24004fd0:	681b      	ldr	r3, [r3, #0]
24004fd2:	4a24      	ldr	r2, [pc, #144]	@ (24005064 <HAL_DMA_Abort+0x254>)
24004fd4:	4293      	cmp	r3, r2
24004fd6:	d022      	beq.n	2400501e <HAL_DMA_Abort+0x20e>
24004fd8:	687b      	ldr	r3, [r7, #4]
24004fda:	681b      	ldr	r3, [r3, #0]
24004fdc:	4a22      	ldr	r2, [pc, #136]	@ (24005068 <HAL_DMA_Abort+0x258>)
24004fde:	4293      	cmp	r3, r2
24004fe0:	d01d      	beq.n	2400501e <HAL_DMA_Abort+0x20e>
24004fe2:	687b      	ldr	r3, [r7, #4]
24004fe4:	681b      	ldr	r3, [r3, #0]
24004fe6:	4a21      	ldr	r2, [pc, #132]	@ (2400506c <HAL_DMA_Abort+0x25c>)
24004fe8:	4293      	cmp	r3, r2
24004fea:	d018      	beq.n	2400501e <HAL_DMA_Abort+0x20e>
24004fec:	687b      	ldr	r3, [r7, #4]
24004fee:	681b      	ldr	r3, [r3, #0]
24004ff0:	4a1f      	ldr	r2, [pc, #124]	@ (24005070 <HAL_DMA_Abort+0x260>)
24004ff2:	4293      	cmp	r3, r2
24004ff4:	d013      	beq.n	2400501e <HAL_DMA_Abort+0x20e>
24004ff6:	687b      	ldr	r3, [r7, #4]
24004ff8:	681b      	ldr	r3, [r3, #0]
24004ffa:	4a1e      	ldr	r2, [pc, #120]	@ (24005074 <HAL_DMA_Abort+0x264>)
24004ffc:	4293      	cmp	r3, r2
24004ffe:	d00e      	beq.n	2400501e <HAL_DMA_Abort+0x20e>
24005000:	687b      	ldr	r3, [r7, #4]
24005002:	681b      	ldr	r3, [r3, #0]
24005004:	4a1c      	ldr	r2, [pc, #112]	@ (24005078 <HAL_DMA_Abort+0x268>)
24005006:	4293      	cmp	r3, r2
24005008:	d009      	beq.n	2400501e <HAL_DMA_Abort+0x20e>
2400500a:	687b      	ldr	r3, [r7, #4]
2400500c:	681b      	ldr	r3, [r3, #0]
2400500e:	4a1b      	ldr	r2, [pc, #108]	@ (2400507c <HAL_DMA_Abort+0x26c>)
24005010:	4293      	cmp	r3, r2
24005012:	d004      	beq.n	2400501e <HAL_DMA_Abort+0x20e>
24005014:	687b      	ldr	r3, [r7, #4]
24005016:	681b      	ldr	r3, [r3, #0]
24005018:	4a19      	ldr	r2, [pc, #100]	@ (24005080 <HAL_DMA_Abort+0x270>)
2400501a:	4293      	cmp	r3, r2
2400501c:	d132      	bne.n	24005084 <HAL_DMA_Abort+0x274>
2400501e:	2301      	movs	r3, #1
24005020:	e031      	b.n	24005086 <HAL_DMA_Abort+0x276>
24005022:	bf00      	nop
24005024:	40020010 	.word	0x40020010
24005028:	40020028 	.word	0x40020028
2400502c:	40020040 	.word	0x40020040
24005030:	40020058 	.word	0x40020058
24005034:	40020070 	.word	0x40020070
24005038:	40020088 	.word	0x40020088
2400503c:	400200a0 	.word	0x400200a0
24005040:	400200b8 	.word	0x400200b8
24005044:	40020410 	.word	0x40020410
24005048:	40020428 	.word	0x40020428
2400504c:	40020440 	.word	0x40020440
24005050:	40020458 	.word	0x40020458
24005054:	40020470 	.word	0x40020470
24005058:	40020488 	.word	0x40020488
2400505c:	400204a0 	.word	0x400204a0
24005060:	400204b8 	.word	0x400204b8
24005064:	58025408 	.word	0x58025408
24005068:	5802541c 	.word	0x5802541c
2400506c:	58025430 	.word	0x58025430
24005070:	58025444 	.word	0x58025444
24005074:	58025458 	.word	0x58025458
24005078:	5802546c 	.word	0x5802546c
2400507c:	58025480 	.word	0x58025480
24005080:	58025494 	.word	0x58025494
24005084:	2300      	movs	r3, #0
24005086:	2b00      	cmp	r3, #0
24005088:	d007      	beq.n	2400509a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
2400508a:	687b      	ldr	r3, [r7, #4]
2400508c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
2400508e:	681a      	ldr	r2, [r3, #0]
24005090:	687b      	ldr	r3, [r7, #4]
24005092:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
24005094:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
24005098:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
2400509a:	687b      	ldr	r3, [r7, #4]
2400509c:	681b      	ldr	r3, [r3, #0]
2400509e:	4a6d      	ldr	r2, [pc, #436]	@ (24005254 <HAL_DMA_Abort+0x444>)
240050a0:	4293      	cmp	r3, r2
240050a2:	d04a      	beq.n	2400513a <HAL_DMA_Abort+0x32a>
240050a4:	687b      	ldr	r3, [r7, #4]
240050a6:	681b      	ldr	r3, [r3, #0]
240050a8:	4a6b      	ldr	r2, [pc, #428]	@ (24005258 <HAL_DMA_Abort+0x448>)
240050aa:	4293      	cmp	r3, r2
240050ac:	d045      	beq.n	2400513a <HAL_DMA_Abort+0x32a>
240050ae:	687b      	ldr	r3, [r7, #4]
240050b0:	681b      	ldr	r3, [r3, #0]
240050b2:	4a6a      	ldr	r2, [pc, #424]	@ (2400525c <HAL_DMA_Abort+0x44c>)
240050b4:	4293      	cmp	r3, r2
240050b6:	d040      	beq.n	2400513a <HAL_DMA_Abort+0x32a>
240050b8:	687b      	ldr	r3, [r7, #4]
240050ba:	681b      	ldr	r3, [r3, #0]
240050bc:	4a68      	ldr	r2, [pc, #416]	@ (24005260 <HAL_DMA_Abort+0x450>)
240050be:	4293      	cmp	r3, r2
240050c0:	d03b      	beq.n	2400513a <HAL_DMA_Abort+0x32a>
240050c2:	687b      	ldr	r3, [r7, #4]
240050c4:	681b      	ldr	r3, [r3, #0]
240050c6:	4a67      	ldr	r2, [pc, #412]	@ (24005264 <HAL_DMA_Abort+0x454>)
240050c8:	4293      	cmp	r3, r2
240050ca:	d036      	beq.n	2400513a <HAL_DMA_Abort+0x32a>
240050cc:	687b      	ldr	r3, [r7, #4]
240050ce:	681b      	ldr	r3, [r3, #0]
240050d0:	4a65      	ldr	r2, [pc, #404]	@ (24005268 <HAL_DMA_Abort+0x458>)
240050d2:	4293      	cmp	r3, r2
240050d4:	d031      	beq.n	2400513a <HAL_DMA_Abort+0x32a>
240050d6:	687b      	ldr	r3, [r7, #4]
240050d8:	681b      	ldr	r3, [r3, #0]
240050da:	4a64      	ldr	r2, [pc, #400]	@ (2400526c <HAL_DMA_Abort+0x45c>)
240050dc:	4293      	cmp	r3, r2
240050de:	d02c      	beq.n	2400513a <HAL_DMA_Abort+0x32a>
240050e0:	687b      	ldr	r3, [r7, #4]
240050e2:	681b      	ldr	r3, [r3, #0]
240050e4:	4a62      	ldr	r2, [pc, #392]	@ (24005270 <HAL_DMA_Abort+0x460>)
240050e6:	4293      	cmp	r3, r2
240050e8:	d027      	beq.n	2400513a <HAL_DMA_Abort+0x32a>
240050ea:	687b      	ldr	r3, [r7, #4]
240050ec:	681b      	ldr	r3, [r3, #0]
240050ee:	4a61      	ldr	r2, [pc, #388]	@ (24005274 <HAL_DMA_Abort+0x464>)
240050f0:	4293      	cmp	r3, r2
240050f2:	d022      	beq.n	2400513a <HAL_DMA_Abort+0x32a>
240050f4:	687b      	ldr	r3, [r7, #4]
240050f6:	681b      	ldr	r3, [r3, #0]
240050f8:	4a5f      	ldr	r2, [pc, #380]	@ (24005278 <HAL_DMA_Abort+0x468>)
240050fa:	4293      	cmp	r3, r2
240050fc:	d01d      	beq.n	2400513a <HAL_DMA_Abort+0x32a>
240050fe:	687b      	ldr	r3, [r7, #4]
24005100:	681b      	ldr	r3, [r3, #0]
24005102:	4a5e      	ldr	r2, [pc, #376]	@ (2400527c <HAL_DMA_Abort+0x46c>)
24005104:	4293      	cmp	r3, r2
24005106:	d018      	beq.n	2400513a <HAL_DMA_Abort+0x32a>
24005108:	687b      	ldr	r3, [r7, #4]
2400510a:	681b      	ldr	r3, [r3, #0]
2400510c:	4a5c      	ldr	r2, [pc, #368]	@ (24005280 <HAL_DMA_Abort+0x470>)
2400510e:	4293      	cmp	r3, r2
24005110:	d013      	beq.n	2400513a <HAL_DMA_Abort+0x32a>
24005112:	687b      	ldr	r3, [r7, #4]
24005114:	681b      	ldr	r3, [r3, #0]
24005116:	4a5b      	ldr	r2, [pc, #364]	@ (24005284 <HAL_DMA_Abort+0x474>)
24005118:	4293      	cmp	r3, r2
2400511a:	d00e      	beq.n	2400513a <HAL_DMA_Abort+0x32a>
2400511c:	687b      	ldr	r3, [r7, #4]
2400511e:	681b      	ldr	r3, [r3, #0]
24005120:	4a59      	ldr	r2, [pc, #356]	@ (24005288 <HAL_DMA_Abort+0x478>)
24005122:	4293      	cmp	r3, r2
24005124:	d009      	beq.n	2400513a <HAL_DMA_Abort+0x32a>
24005126:	687b      	ldr	r3, [r7, #4]
24005128:	681b      	ldr	r3, [r3, #0]
2400512a:	4a58      	ldr	r2, [pc, #352]	@ (2400528c <HAL_DMA_Abort+0x47c>)
2400512c:	4293      	cmp	r3, r2
2400512e:	d004      	beq.n	2400513a <HAL_DMA_Abort+0x32a>
24005130:	687b      	ldr	r3, [r7, #4]
24005132:	681b      	ldr	r3, [r3, #0]
24005134:	4a56      	ldr	r2, [pc, #344]	@ (24005290 <HAL_DMA_Abort+0x480>)
24005136:	4293      	cmp	r3, r2
24005138:	d108      	bne.n	2400514c <HAL_DMA_Abort+0x33c>
2400513a:	687b      	ldr	r3, [r7, #4]
2400513c:	681b      	ldr	r3, [r3, #0]
2400513e:	681a      	ldr	r2, [r3, #0]
24005140:	687b      	ldr	r3, [r7, #4]
24005142:	681b      	ldr	r3, [r3, #0]
24005144:	f022 0201 	bic.w	r2, r2, #1
24005148:	601a      	str	r2, [r3, #0]
2400514a:	e007      	b.n	2400515c <HAL_DMA_Abort+0x34c>
2400514c:	687b      	ldr	r3, [r7, #4]
2400514e:	681b      	ldr	r3, [r3, #0]
24005150:	681a      	ldr	r2, [r3, #0]
24005152:	687b      	ldr	r3, [r7, #4]
24005154:	681b      	ldr	r3, [r3, #0]
24005156:	f022 0201 	bic.w	r2, r2, #1
2400515a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
2400515c:	e013      	b.n	24005186 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
2400515e:	f7fd fdc7 	bl	24002cf0 <HAL_GetTick>
24005162:	4602      	mov	r2, r0
24005164:	693b      	ldr	r3, [r7, #16]
24005166:	1ad3      	subs	r3, r2, r3
24005168:	2b05      	cmp	r3, #5
2400516a:	d90c      	bls.n	24005186 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
2400516c:	687b      	ldr	r3, [r7, #4]
2400516e:	2220      	movs	r2, #32
24005170:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
24005172:	687b      	ldr	r3, [r7, #4]
24005174:	2203      	movs	r2, #3
24005176:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
2400517a:	687b      	ldr	r3, [r7, #4]
2400517c:	2200      	movs	r2, #0
2400517e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
24005182:	2301      	movs	r3, #1
24005184:	e12d      	b.n	240053e2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
24005186:	697b      	ldr	r3, [r7, #20]
24005188:	681b      	ldr	r3, [r3, #0]
2400518a:	f003 0301 	and.w	r3, r3, #1
2400518e:	2b00      	cmp	r3, #0
24005190:	d1e5      	bne.n	2400515e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24005192:	687b      	ldr	r3, [r7, #4]
24005194:	681b      	ldr	r3, [r3, #0]
24005196:	4a2f      	ldr	r2, [pc, #188]	@ (24005254 <HAL_DMA_Abort+0x444>)
24005198:	4293      	cmp	r3, r2
2400519a:	d04a      	beq.n	24005232 <HAL_DMA_Abort+0x422>
2400519c:	687b      	ldr	r3, [r7, #4]
2400519e:	681b      	ldr	r3, [r3, #0]
240051a0:	4a2d      	ldr	r2, [pc, #180]	@ (24005258 <HAL_DMA_Abort+0x448>)
240051a2:	4293      	cmp	r3, r2
240051a4:	d045      	beq.n	24005232 <HAL_DMA_Abort+0x422>
240051a6:	687b      	ldr	r3, [r7, #4]
240051a8:	681b      	ldr	r3, [r3, #0]
240051aa:	4a2c      	ldr	r2, [pc, #176]	@ (2400525c <HAL_DMA_Abort+0x44c>)
240051ac:	4293      	cmp	r3, r2
240051ae:	d040      	beq.n	24005232 <HAL_DMA_Abort+0x422>
240051b0:	687b      	ldr	r3, [r7, #4]
240051b2:	681b      	ldr	r3, [r3, #0]
240051b4:	4a2a      	ldr	r2, [pc, #168]	@ (24005260 <HAL_DMA_Abort+0x450>)
240051b6:	4293      	cmp	r3, r2
240051b8:	d03b      	beq.n	24005232 <HAL_DMA_Abort+0x422>
240051ba:	687b      	ldr	r3, [r7, #4]
240051bc:	681b      	ldr	r3, [r3, #0]
240051be:	4a29      	ldr	r2, [pc, #164]	@ (24005264 <HAL_DMA_Abort+0x454>)
240051c0:	4293      	cmp	r3, r2
240051c2:	d036      	beq.n	24005232 <HAL_DMA_Abort+0x422>
240051c4:	687b      	ldr	r3, [r7, #4]
240051c6:	681b      	ldr	r3, [r3, #0]
240051c8:	4a27      	ldr	r2, [pc, #156]	@ (24005268 <HAL_DMA_Abort+0x458>)
240051ca:	4293      	cmp	r3, r2
240051cc:	d031      	beq.n	24005232 <HAL_DMA_Abort+0x422>
240051ce:	687b      	ldr	r3, [r7, #4]
240051d0:	681b      	ldr	r3, [r3, #0]
240051d2:	4a26      	ldr	r2, [pc, #152]	@ (2400526c <HAL_DMA_Abort+0x45c>)
240051d4:	4293      	cmp	r3, r2
240051d6:	d02c      	beq.n	24005232 <HAL_DMA_Abort+0x422>
240051d8:	687b      	ldr	r3, [r7, #4]
240051da:	681b      	ldr	r3, [r3, #0]
240051dc:	4a24      	ldr	r2, [pc, #144]	@ (24005270 <HAL_DMA_Abort+0x460>)
240051de:	4293      	cmp	r3, r2
240051e0:	d027      	beq.n	24005232 <HAL_DMA_Abort+0x422>
240051e2:	687b      	ldr	r3, [r7, #4]
240051e4:	681b      	ldr	r3, [r3, #0]
240051e6:	4a23      	ldr	r2, [pc, #140]	@ (24005274 <HAL_DMA_Abort+0x464>)
240051e8:	4293      	cmp	r3, r2
240051ea:	d022      	beq.n	24005232 <HAL_DMA_Abort+0x422>
240051ec:	687b      	ldr	r3, [r7, #4]
240051ee:	681b      	ldr	r3, [r3, #0]
240051f0:	4a21      	ldr	r2, [pc, #132]	@ (24005278 <HAL_DMA_Abort+0x468>)
240051f2:	4293      	cmp	r3, r2
240051f4:	d01d      	beq.n	24005232 <HAL_DMA_Abort+0x422>
240051f6:	687b      	ldr	r3, [r7, #4]
240051f8:	681b      	ldr	r3, [r3, #0]
240051fa:	4a20      	ldr	r2, [pc, #128]	@ (2400527c <HAL_DMA_Abort+0x46c>)
240051fc:	4293      	cmp	r3, r2
240051fe:	d018      	beq.n	24005232 <HAL_DMA_Abort+0x422>
24005200:	687b      	ldr	r3, [r7, #4]
24005202:	681b      	ldr	r3, [r3, #0]
24005204:	4a1e      	ldr	r2, [pc, #120]	@ (24005280 <HAL_DMA_Abort+0x470>)
24005206:	4293      	cmp	r3, r2
24005208:	d013      	beq.n	24005232 <HAL_DMA_Abort+0x422>
2400520a:	687b      	ldr	r3, [r7, #4]
2400520c:	681b      	ldr	r3, [r3, #0]
2400520e:	4a1d      	ldr	r2, [pc, #116]	@ (24005284 <HAL_DMA_Abort+0x474>)
24005210:	4293      	cmp	r3, r2
24005212:	d00e      	beq.n	24005232 <HAL_DMA_Abort+0x422>
24005214:	687b      	ldr	r3, [r7, #4]
24005216:	681b      	ldr	r3, [r3, #0]
24005218:	4a1b      	ldr	r2, [pc, #108]	@ (24005288 <HAL_DMA_Abort+0x478>)
2400521a:	4293      	cmp	r3, r2
2400521c:	d009      	beq.n	24005232 <HAL_DMA_Abort+0x422>
2400521e:	687b      	ldr	r3, [r7, #4]
24005220:	681b      	ldr	r3, [r3, #0]
24005222:	4a1a      	ldr	r2, [pc, #104]	@ (2400528c <HAL_DMA_Abort+0x47c>)
24005224:	4293      	cmp	r3, r2
24005226:	d004      	beq.n	24005232 <HAL_DMA_Abort+0x422>
24005228:	687b      	ldr	r3, [r7, #4]
2400522a:	681b      	ldr	r3, [r3, #0]
2400522c:	4a18      	ldr	r2, [pc, #96]	@ (24005290 <HAL_DMA_Abort+0x480>)
2400522e:	4293      	cmp	r3, r2
24005230:	d101      	bne.n	24005236 <HAL_DMA_Abort+0x426>
24005232:	2301      	movs	r3, #1
24005234:	e000      	b.n	24005238 <HAL_DMA_Abort+0x428>
24005236:	2300      	movs	r3, #0
24005238:	2b00      	cmp	r3, #0
2400523a:	d02b      	beq.n	24005294 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
2400523c:	687b      	ldr	r3, [r7, #4]
2400523e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
24005240:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24005242:	687b      	ldr	r3, [r7, #4]
24005244:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
24005246:	f003 031f 	and.w	r3, r3, #31
2400524a:	223f      	movs	r2, #63	@ 0x3f
2400524c:	409a      	lsls	r2, r3
2400524e:	68bb      	ldr	r3, [r7, #8]
24005250:	609a      	str	r2, [r3, #8]
24005252:	e02a      	b.n	240052aa <HAL_DMA_Abort+0x49a>
24005254:	40020010 	.word	0x40020010
24005258:	40020028 	.word	0x40020028
2400525c:	40020040 	.word	0x40020040
24005260:	40020058 	.word	0x40020058
24005264:	40020070 	.word	0x40020070
24005268:	40020088 	.word	0x40020088
2400526c:	400200a0 	.word	0x400200a0
24005270:	400200b8 	.word	0x400200b8
24005274:	40020410 	.word	0x40020410
24005278:	40020428 	.word	0x40020428
2400527c:	40020440 	.word	0x40020440
24005280:	40020458 	.word	0x40020458
24005284:	40020470 	.word	0x40020470
24005288:	40020488 	.word	0x40020488
2400528c:	400204a0 	.word	0x400204a0
24005290:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
24005294:	687b      	ldr	r3, [r7, #4]
24005296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
24005298:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
2400529a:	687b      	ldr	r3, [r7, #4]
2400529c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
2400529e:	f003 031f 	and.w	r3, r3, #31
240052a2:	2201      	movs	r2, #1
240052a4:	409a      	lsls	r2, r3
240052a6:	68fb      	ldr	r3, [r7, #12]
240052a8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240052aa:	687b      	ldr	r3, [r7, #4]
240052ac:	681b      	ldr	r3, [r3, #0]
240052ae:	4a4f      	ldr	r2, [pc, #316]	@ (240053ec <HAL_DMA_Abort+0x5dc>)
240052b0:	4293      	cmp	r3, r2
240052b2:	d072      	beq.n	2400539a <HAL_DMA_Abort+0x58a>
240052b4:	687b      	ldr	r3, [r7, #4]
240052b6:	681b      	ldr	r3, [r3, #0]
240052b8:	4a4d      	ldr	r2, [pc, #308]	@ (240053f0 <HAL_DMA_Abort+0x5e0>)
240052ba:	4293      	cmp	r3, r2
240052bc:	d06d      	beq.n	2400539a <HAL_DMA_Abort+0x58a>
240052be:	687b      	ldr	r3, [r7, #4]
240052c0:	681b      	ldr	r3, [r3, #0]
240052c2:	4a4c      	ldr	r2, [pc, #304]	@ (240053f4 <HAL_DMA_Abort+0x5e4>)
240052c4:	4293      	cmp	r3, r2
240052c6:	d068      	beq.n	2400539a <HAL_DMA_Abort+0x58a>
240052c8:	687b      	ldr	r3, [r7, #4]
240052ca:	681b      	ldr	r3, [r3, #0]
240052cc:	4a4a      	ldr	r2, [pc, #296]	@ (240053f8 <HAL_DMA_Abort+0x5e8>)
240052ce:	4293      	cmp	r3, r2
240052d0:	d063      	beq.n	2400539a <HAL_DMA_Abort+0x58a>
240052d2:	687b      	ldr	r3, [r7, #4]
240052d4:	681b      	ldr	r3, [r3, #0]
240052d6:	4a49      	ldr	r2, [pc, #292]	@ (240053fc <HAL_DMA_Abort+0x5ec>)
240052d8:	4293      	cmp	r3, r2
240052da:	d05e      	beq.n	2400539a <HAL_DMA_Abort+0x58a>
240052dc:	687b      	ldr	r3, [r7, #4]
240052de:	681b      	ldr	r3, [r3, #0]
240052e0:	4a47      	ldr	r2, [pc, #284]	@ (24005400 <HAL_DMA_Abort+0x5f0>)
240052e2:	4293      	cmp	r3, r2
240052e4:	d059      	beq.n	2400539a <HAL_DMA_Abort+0x58a>
240052e6:	687b      	ldr	r3, [r7, #4]
240052e8:	681b      	ldr	r3, [r3, #0]
240052ea:	4a46      	ldr	r2, [pc, #280]	@ (24005404 <HAL_DMA_Abort+0x5f4>)
240052ec:	4293      	cmp	r3, r2
240052ee:	d054      	beq.n	2400539a <HAL_DMA_Abort+0x58a>
240052f0:	687b      	ldr	r3, [r7, #4]
240052f2:	681b      	ldr	r3, [r3, #0]
240052f4:	4a44      	ldr	r2, [pc, #272]	@ (24005408 <HAL_DMA_Abort+0x5f8>)
240052f6:	4293      	cmp	r3, r2
240052f8:	d04f      	beq.n	2400539a <HAL_DMA_Abort+0x58a>
240052fa:	687b      	ldr	r3, [r7, #4]
240052fc:	681b      	ldr	r3, [r3, #0]
240052fe:	4a43      	ldr	r2, [pc, #268]	@ (2400540c <HAL_DMA_Abort+0x5fc>)
24005300:	4293      	cmp	r3, r2
24005302:	d04a      	beq.n	2400539a <HAL_DMA_Abort+0x58a>
24005304:	687b      	ldr	r3, [r7, #4]
24005306:	681b      	ldr	r3, [r3, #0]
24005308:	4a41      	ldr	r2, [pc, #260]	@ (24005410 <HAL_DMA_Abort+0x600>)
2400530a:	4293      	cmp	r3, r2
2400530c:	d045      	beq.n	2400539a <HAL_DMA_Abort+0x58a>
2400530e:	687b      	ldr	r3, [r7, #4]
24005310:	681b      	ldr	r3, [r3, #0]
24005312:	4a40      	ldr	r2, [pc, #256]	@ (24005414 <HAL_DMA_Abort+0x604>)
24005314:	4293      	cmp	r3, r2
24005316:	d040      	beq.n	2400539a <HAL_DMA_Abort+0x58a>
24005318:	687b      	ldr	r3, [r7, #4]
2400531a:	681b      	ldr	r3, [r3, #0]
2400531c:	4a3e      	ldr	r2, [pc, #248]	@ (24005418 <HAL_DMA_Abort+0x608>)
2400531e:	4293      	cmp	r3, r2
24005320:	d03b      	beq.n	2400539a <HAL_DMA_Abort+0x58a>
24005322:	687b      	ldr	r3, [r7, #4]
24005324:	681b      	ldr	r3, [r3, #0]
24005326:	4a3d      	ldr	r2, [pc, #244]	@ (2400541c <HAL_DMA_Abort+0x60c>)
24005328:	4293      	cmp	r3, r2
2400532a:	d036      	beq.n	2400539a <HAL_DMA_Abort+0x58a>
2400532c:	687b      	ldr	r3, [r7, #4]
2400532e:	681b      	ldr	r3, [r3, #0]
24005330:	4a3b      	ldr	r2, [pc, #236]	@ (24005420 <HAL_DMA_Abort+0x610>)
24005332:	4293      	cmp	r3, r2
24005334:	d031      	beq.n	2400539a <HAL_DMA_Abort+0x58a>
24005336:	687b      	ldr	r3, [r7, #4]
24005338:	681b      	ldr	r3, [r3, #0]
2400533a:	4a3a      	ldr	r2, [pc, #232]	@ (24005424 <HAL_DMA_Abort+0x614>)
2400533c:	4293      	cmp	r3, r2
2400533e:	d02c      	beq.n	2400539a <HAL_DMA_Abort+0x58a>
24005340:	687b      	ldr	r3, [r7, #4]
24005342:	681b      	ldr	r3, [r3, #0]
24005344:	4a38      	ldr	r2, [pc, #224]	@ (24005428 <HAL_DMA_Abort+0x618>)
24005346:	4293      	cmp	r3, r2
24005348:	d027      	beq.n	2400539a <HAL_DMA_Abort+0x58a>
2400534a:	687b      	ldr	r3, [r7, #4]
2400534c:	681b      	ldr	r3, [r3, #0]
2400534e:	4a37      	ldr	r2, [pc, #220]	@ (2400542c <HAL_DMA_Abort+0x61c>)
24005350:	4293      	cmp	r3, r2
24005352:	d022      	beq.n	2400539a <HAL_DMA_Abort+0x58a>
24005354:	687b      	ldr	r3, [r7, #4]
24005356:	681b      	ldr	r3, [r3, #0]
24005358:	4a35      	ldr	r2, [pc, #212]	@ (24005430 <HAL_DMA_Abort+0x620>)
2400535a:	4293      	cmp	r3, r2
2400535c:	d01d      	beq.n	2400539a <HAL_DMA_Abort+0x58a>
2400535e:	687b      	ldr	r3, [r7, #4]
24005360:	681b      	ldr	r3, [r3, #0]
24005362:	4a34      	ldr	r2, [pc, #208]	@ (24005434 <HAL_DMA_Abort+0x624>)
24005364:	4293      	cmp	r3, r2
24005366:	d018      	beq.n	2400539a <HAL_DMA_Abort+0x58a>
24005368:	687b      	ldr	r3, [r7, #4]
2400536a:	681b      	ldr	r3, [r3, #0]
2400536c:	4a32      	ldr	r2, [pc, #200]	@ (24005438 <HAL_DMA_Abort+0x628>)
2400536e:	4293      	cmp	r3, r2
24005370:	d013      	beq.n	2400539a <HAL_DMA_Abort+0x58a>
24005372:	687b      	ldr	r3, [r7, #4]
24005374:	681b      	ldr	r3, [r3, #0]
24005376:	4a31      	ldr	r2, [pc, #196]	@ (2400543c <HAL_DMA_Abort+0x62c>)
24005378:	4293      	cmp	r3, r2
2400537a:	d00e      	beq.n	2400539a <HAL_DMA_Abort+0x58a>
2400537c:	687b      	ldr	r3, [r7, #4]
2400537e:	681b      	ldr	r3, [r3, #0]
24005380:	4a2f      	ldr	r2, [pc, #188]	@ (24005440 <HAL_DMA_Abort+0x630>)
24005382:	4293      	cmp	r3, r2
24005384:	d009      	beq.n	2400539a <HAL_DMA_Abort+0x58a>
24005386:	687b      	ldr	r3, [r7, #4]
24005388:	681b      	ldr	r3, [r3, #0]
2400538a:	4a2e      	ldr	r2, [pc, #184]	@ (24005444 <HAL_DMA_Abort+0x634>)
2400538c:	4293      	cmp	r3, r2
2400538e:	d004      	beq.n	2400539a <HAL_DMA_Abort+0x58a>
24005390:	687b      	ldr	r3, [r7, #4]
24005392:	681b      	ldr	r3, [r3, #0]
24005394:	4a2c      	ldr	r2, [pc, #176]	@ (24005448 <HAL_DMA_Abort+0x638>)
24005396:	4293      	cmp	r3, r2
24005398:	d101      	bne.n	2400539e <HAL_DMA_Abort+0x58e>
2400539a:	2301      	movs	r3, #1
2400539c:	e000      	b.n	240053a0 <HAL_DMA_Abort+0x590>
2400539e:	2300      	movs	r3, #0
240053a0:	2b00      	cmp	r3, #0
240053a2:	d015      	beq.n	240053d0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
240053a4:	687b      	ldr	r3, [r7, #4]
240053a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
240053a8:	687a      	ldr	r2, [r7, #4]
240053aa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
240053ac:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
240053ae:	687b      	ldr	r3, [r7, #4]
240053b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
240053b2:	2b00      	cmp	r3, #0
240053b4:	d00c      	beq.n	240053d0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
240053b6:	687b      	ldr	r3, [r7, #4]
240053b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
240053ba:	681a      	ldr	r2, [r3, #0]
240053bc:	687b      	ldr	r3, [r7, #4]
240053be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
240053c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
240053c4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
240053c6:	687b      	ldr	r3, [r7, #4]
240053c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
240053ca:	687a      	ldr	r2, [r7, #4]
240053cc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
240053ce:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
240053d0:	687b      	ldr	r3, [r7, #4]
240053d2:	2201      	movs	r2, #1
240053d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
240053d8:	687b      	ldr	r3, [r7, #4]
240053da:	2200      	movs	r2, #0
240053dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
240053e0:	2300      	movs	r3, #0
}
240053e2:	4618      	mov	r0, r3
240053e4:	3718      	adds	r7, #24
240053e6:	46bd      	mov	sp, r7
240053e8:	bd80      	pop	{r7, pc}
240053ea:	bf00      	nop
240053ec:	40020010 	.word	0x40020010
240053f0:	40020028 	.word	0x40020028
240053f4:	40020040 	.word	0x40020040
240053f8:	40020058 	.word	0x40020058
240053fc:	40020070 	.word	0x40020070
24005400:	40020088 	.word	0x40020088
24005404:	400200a0 	.word	0x400200a0
24005408:	400200b8 	.word	0x400200b8
2400540c:	40020410 	.word	0x40020410
24005410:	40020428 	.word	0x40020428
24005414:	40020440 	.word	0x40020440
24005418:	40020458 	.word	0x40020458
2400541c:	40020470 	.word	0x40020470
24005420:	40020488 	.word	0x40020488
24005424:	400204a0 	.word	0x400204a0
24005428:	400204b8 	.word	0x400204b8
2400542c:	58025408 	.word	0x58025408
24005430:	5802541c 	.word	0x5802541c
24005434:	58025430 	.word	0x58025430
24005438:	58025444 	.word	0x58025444
2400543c:	58025458 	.word	0x58025458
24005440:	5802546c 	.word	0x5802546c
24005444:	58025480 	.word	0x58025480
24005448:	58025494 	.word	0x58025494

2400544c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
2400544c:	b580      	push	{r7, lr}
2400544e:	b084      	sub	sp, #16
24005450:	af00      	add	r7, sp, #0
24005452:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
24005454:	687b      	ldr	r3, [r7, #4]
24005456:	2b00      	cmp	r3, #0
24005458:	d101      	bne.n	2400545e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
2400545a:	2301      	movs	r3, #1
2400545c:	e237      	b.n	240058ce <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
2400545e:	687b      	ldr	r3, [r7, #4]
24005460:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
24005464:	b2db      	uxtb	r3, r3
24005466:	2b02      	cmp	r3, #2
24005468:	d004      	beq.n	24005474 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
2400546a:	687b      	ldr	r3, [r7, #4]
2400546c:	2280      	movs	r2, #128	@ 0x80
2400546e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
24005470:	2301      	movs	r3, #1
24005472:	e22c      	b.n	240058ce <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24005474:	687b      	ldr	r3, [r7, #4]
24005476:	681b      	ldr	r3, [r3, #0]
24005478:	4a5c      	ldr	r2, [pc, #368]	@ (240055ec <HAL_DMA_Abort_IT+0x1a0>)
2400547a:	4293      	cmp	r3, r2
2400547c:	d04a      	beq.n	24005514 <HAL_DMA_Abort_IT+0xc8>
2400547e:	687b      	ldr	r3, [r7, #4]
24005480:	681b      	ldr	r3, [r3, #0]
24005482:	4a5b      	ldr	r2, [pc, #364]	@ (240055f0 <HAL_DMA_Abort_IT+0x1a4>)
24005484:	4293      	cmp	r3, r2
24005486:	d045      	beq.n	24005514 <HAL_DMA_Abort_IT+0xc8>
24005488:	687b      	ldr	r3, [r7, #4]
2400548a:	681b      	ldr	r3, [r3, #0]
2400548c:	4a59      	ldr	r2, [pc, #356]	@ (240055f4 <HAL_DMA_Abort_IT+0x1a8>)
2400548e:	4293      	cmp	r3, r2
24005490:	d040      	beq.n	24005514 <HAL_DMA_Abort_IT+0xc8>
24005492:	687b      	ldr	r3, [r7, #4]
24005494:	681b      	ldr	r3, [r3, #0]
24005496:	4a58      	ldr	r2, [pc, #352]	@ (240055f8 <HAL_DMA_Abort_IT+0x1ac>)
24005498:	4293      	cmp	r3, r2
2400549a:	d03b      	beq.n	24005514 <HAL_DMA_Abort_IT+0xc8>
2400549c:	687b      	ldr	r3, [r7, #4]
2400549e:	681b      	ldr	r3, [r3, #0]
240054a0:	4a56      	ldr	r2, [pc, #344]	@ (240055fc <HAL_DMA_Abort_IT+0x1b0>)
240054a2:	4293      	cmp	r3, r2
240054a4:	d036      	beq.n	24005514 <HAL_DMA_Abort_IT+0xc8>
240054a6:	687b      	ldr	r3, [r7, #4]
240054a8:	681b      	ldr	r3, [r3, #0]
240054aa:	4a55      	ldr	r2, [pc, #340]	@ (24005600 <HAL_DMA_Abort_IT+0x1b4>)
240054ac:	4293      	cmp	r3, r2
240054ae:	d031      	beq.n	24005514 <HAL_DMA_Abort_IT+0xc8>
240054b0:	687b      	ldr	r3, [r7, #4]
240054b2:	681b      	ldr	r3, [r3, #0]
240054b4:	4a53      	ldr	r2, [pc, #332]	@ (24005604 <HAL_DMA_Abort_IT+0x1b8>)
240054b6:	4293      	cmp	r3, r2
240054b8:	d02c      	beq.n	24005514 <HAL_DMA_Abort_IT+0xc8>
240054ba:	687b      	ldr	r3, [r7, #4]
240054bc:	681b      	ldr	r3, [r3, #0]
240054be:	4a52      	ldr	r2, [pc, #328]	@ (24005608 <HAL_DMA_Abort_IT+0x1bc>)
240054c0:	4293      	cmp	r3, r2
240054c2:	d027      	beq.n	24005514 <HAL_DMA_Abort_IT+0xc8>
240054c4:	687b      	ldr	r3, [r7, #4]
240054c6:	681b      	ldr	r3, [r3, #0]
240054c8:	4a50      	ldr	r2, [pc, #320]	@ (2400560c <HAL_DMA_Abort_IT+0x1c0>)
240054ca:	4293      	cmp	r3, r2
240054cc:	d022      	beq.n	24005514 <HAL_DMA_Abort_IT+0xc8>
240054ce:	687b      	ldr	r3, [r7, #4]
240054d0:	681b      	ldr	r3, [r3, #0]
240054d2:	4a4f      	ldr	r2, [pc, #316]	@ (24005610 <HAL_DMA_Abort_IT+0x1c4>)
240054d4:	4293      	cmp	r3, r2
240054d6:	d01d      	beq.n	24005514 <HAL_DMA_Abort_IT+0xc8>
240054d8:	687b      	ldr	r3, [r7, #4]
240054da:	681b      	ldr	r3, [r3, #0]
240054dc:	4a4d      	ldr	r2, [pc, #308]	@ (24005614 <HAL_DMA_Abort_IT+0x1c8>)
240054de:	4293      	cmp	r3, r2
240054e0:	d018      	beq.n	24005514 <HAL_DMA_Abort_IT+0xc8>
240054e2:	687b      	ldr	r3, [r7, #4]
240054e4:	681b      	ldr	r3, [r3, #0]
240054e6:	4a4c      	ldr	r2, [pc, #304]	@ (24005618 <HAL_DMA_Abort_IT+0x1cc>)
240054e8:	4293      	cmp	r3, r2
240054ea:	d013      	beq.n	24005514 <HAL_DMA_Abort_IT+0xc8>
240054ec:	687b      	ldr	r3, [r7, #4]
240054ee:	681b      	ldr	r3, [r3, #0]
240054f0:	4a4a      	ldr	r2, [pc, #296]	@ (2400561c <HAL_DMA_Abort_IT+0x1d0>)
240054f2:	4293      	cmp	r3, r2
240054f4:	d00e      	beq.n	24005514 <HAL_DMA_Abort_IT+0xc8>
240054f6:	687b      	ldr	r3, [r7, #4]
240054f8:	681b      	ldr	r3, [r3, #0]
240054fa:	4a49      	ldr	r2, [pc, #292]	@ (24005620 <HAL_DMA_Abort_IT+0x1d4>)
240054fc:	4293      	cmp	r3, r2
240054fe:	d009      	beq.n	24005514 <HAL_DMA_Abort_IT+0xc8>
24005500:	687b      	ldr	r3, [r7, #4]
24005502:	681b      	ldr	r3, [r3, #0]
24005504:	4a47      	ldr	r2, [pc, #284]	@ (24005624 <HAL_DMA_Abort_IT+0x1d8>)
24005506:	4293      	cmp	r3, r2
24005508:	d004      	beq.n	24005514 <HAL_DMA_Abort_IT+0xc8>
2400550a:	687b      	ldr	r3, [r7, #4]
2400550c:	681b      	ldr	r3, [r3, #0]
2400550e:	4a46      	ldr	r2, [pc, #280]	@ (24005628 <HAL_DMA_Abort_IT+0x1dc>)
24005510:	4293      	cmp	r3, r2
24005512:	d101      	bne.n	24005518 <HAL_DMA_Abort_IT+0xcc>
24005514:	2301      	movs	r3, #1
24005516:	e000      	b.n	2400551a <HAL_DMA_Abort_IT+0xce>
24005518:	2300      	movs	r3, #0
2400551a:	2b00      	cmp	r3, #0
2400551c:	f000 8086 	beq.w	2400562c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
24005520:	687b      	ldr	r3, [r7, #4]
24005522:	2204      	movs	r2, #4
24005524:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
24005528:	687b      	ldr	r3, [r7, #4]
2400552a:	681b      	ldr	r3, [r3, #0]
2400552c:	4a2f      	ldr	r2, [pc, #188]	@ (240055ec <HAL_DMA_Abort_IT+0x1a0>)
2400552e:	4293      	cmp	r3, r2
24005530:	d04a      	beq.n	240055c8 <HAL_DMA_Abort_IT+0x17c>
24005532:	687b      	ldr	r3, [r7, #4]
24005534:	681b      	ldr	r3, [r3, #0]
24005536:	4a2e      	ldr	r2, [pc, #184]	@ (240055f0 <HAL_DMA_Abort_IT+0x1a4>)
24005538:	4293      	cmp	r3, r2
2400553a:	d045      	beq.n	240055c8 <HAL_DMA_Abort_IT+0x17c>
2400553c:	687b      	ldr	r3, [r7, #4]
2400553e:	681b      	ldr	r3, [r3, #0]
24005540:	4a2c      	ldr	r2, [pc, #176]	@ (240055f4 <HAL_DMA_Abort_IT+0x1a8>)
24005542:	4293      	cmp	r3, r2
24005544:	d040      	beq.n	240055c8 <HAL_DMA_Abort_IT+0x17c>
24005546:	687b      	ldr	r3, [r7, #4]
24005548:	681b      	ldr	r3, [r3, #0]
2400554a:	4a2b      	ldr	r2, [pc, #172]	@ (240055f8 <HAL_DMA_Abort_IT+0x1ac>)
2400554c:	4293      	cmp	r3, r2
2400554e:	d03b      	beq.n	240055c8 <HAL_DMA_Abort_IT+0x17c>
24005550:	687b      	ldr	r3, [r7, #4]
24005552:	681b      	ldr	r3, [r3, #0]
24005554:	4a29      	ldr	r2, [pc, #164]	@ (240055fc <HAL_DMA_Abort_IT+0x1b0>)
24005556:	4293      	cmp	r3, r2
24005558:	d036      	beq.n	240055c8 <HAL_DMA_Abort_IT+0x17c>
2400555a:	687b      	ldr	r3, [r7, #4]
2400555c:	681b      	ldr	r3, [r3, #0]
2400555e:	4a28      	ldr	r2, [pc, #160]	@ (24005600 <HAL_DMA_Abort_IT+0x1b4>)
24005560:	4293      	cmp	r3, r2
24005562:	d031      	beq.n	240055c8 <HAL_DMA_Abort_IT+0x17c>
24005564:	687b      	ldr	r3, [r7, #4]
24005566:	681b      	ldr	r3, [r3, #0]
24005568:	4a26      	ldr	r2, [pc, #152]	@ (24005604 <HAL_DMA_Abort_IT+0x1b8>)
2400556a:	4293      	cmp	r3, r2
2400556c:	d02c      	beq.n	240055c8 <HAL_DMA_Abort_IT+0x17c>
2400556e:	687b      	ldr	r3, [r7, #4]
24005570:	681b      	ldr	r3, [r3, #0]
24005572:	4a25      	ldr	r2, [pc, #148]	@ (24005608 <HAL_DMA_Abort_IT+0x1bc>)
24005574:	4293      	cmp	r3, r2
24005576:	d027      	beq.n	240055c8 <HAL_DMA_Abort_IT+0x17c>
24005578:	687b      	ldr	r3, [r7, #4]
2400557a:	681b      	ldr	r3, [r3, #0]
2400557c:	4a23      	ldr	r2, [pc, #140]	@ (2400560c <HAL_DMA_Abort_IT+0x1c0>)
2400557e:	4293      	cmp	r3, r2
24005580:	d022      	beq.n	240055c8 <HAL_DMA_Abort_IT+0x17c>
24005582:	687b      	ldr	r3, [r7, #4]
24005584:	681b      	ldr	r3, [r3, #0]
24005586:	4a22      	ldr	r2, [pc, #136]	@ (24005610 <HAL_DMA_Abort_IT+0x1c4>)
24005588:	4293      	cmp	r3, r2
2400558a:	d01d      	beq.n	240055c8 <HAL_DMA_Abort_IT+0x17c>
2400558c:	687b      	ldr	r3, [r7, #4]
2400558e:	681b      	ldr	r3, [r3, #0]
24005590:	4a20      	ldr	r2, [pc, #128]	@ (24005614 <HAL_DMA_Abort_IT+0x1c8>)
24005592:	4293      	cmp	r3, r2
24005594:	d018      	beq.n	240055c8 <HAL_DMA_Abort_IT+0x17c>
24005596:	687b      	ldr	r3, [r7, #4]
24005598:	681b      	ldr	r3, [r3, #0]
2400559a:	4a1f      	ldr	r2, [pc, #124]	@ (24005618 <HAL_DMA_Abort_IT+0x1cc>)
2400559c:	4293      	cmp	r3, r2
2400559e:	d013      	beq.n	240055c8 <HAL_DMA_Abort_IT+0x17c>
240055a0:	687b      	ldr	r3, [r7, #4]
240055a2:	681b      	ldr	r3, [r3, #0]
240055a4:	4a1d      	ldr	r2, [pc, #116]	@ (2400561c <HAL_DMA_Abort_IT+0x1d0>)
240055a6:	4293      	cmp	r3, r2
240055a8:	d00e      	beq.n	240055c8 <HAL_DMA_Abort_IT+0x17c>
240055aa:	687b      	ldr	r3, [r7, #4]
240055ac:	681b      	ldr	r3, [r3, #0]
240055ae:	4a1c      	ldr	r2, [pc, #112]	@ (24005620 <HAL_DMA_Abort_IT+0x1d4>)
240055b0:	4293      	cmp	r3, r2
240055b2:	d009      	beq.n	240055c8 <HAL_DMA_Abort_IT+0x17c>
240055b4:	687b      	ldr	r3, [r7, #4]
240055b6:	681b      	ldr	r3, [r3, #0]
240055b8:	4a1a      	ldr	r2, [pc, #104]	@ (24005624 <HAL_DMA_Abort_IT+0x1d8>)
240055ba:	4293      	cmp	r3, r2
240055bc:	d004      	beq.n	240055c8 <HAL_DMA_Abort_IT+0x17c>
240055be:	687b      	ldr	r3, [r7, #4]
240055c0:	681b      	ldr	r3, [r3, #0]
240055c2:	4a19      	ldr	r2, [pc, #100]	@ (24005628 <HAL_DMA_Abort_IT+0x1dc>)
240055c4:	4293      	cmp	r3, r2
240055c6:	d108      	bne.n	240055da <HAL_DMA_Abort_IT+0x18e>
240055c8:	687b      	ldr	r3, [r7, #4]
240055ca:	681b      	ldr	r3, [r3, #0]
240055cc:	681a      	ldr	r2, [r3, #0]
240055ce:	687b      	ldr	r3, [r7, #4]
240055d0:	681b      	ldr	r3, [r3, #0]
240055d2:	f022 0201 	bic.w	r2, r2, #1
240055d6:	601a      	str	r2, [r3, #0]
240055d8:	e178      	b.n	240058cc <HAL_DMA_Abort_IT+0x480>
240055da:	687b      	ldr	r3, [r7, #4]
240055dc:	681b      	ldr	r3, [r3, #0]
240055de:	681a      	ldr	r2, [r3, #0]
240055e0:	687b      	ldr	r3, [r7, #4]
240055e2:	681b      	ldr	r3, [r3, #0]
240055e4:	f022 0201 	bic.w	r2, r2, #1
240055e8:	601a      	str	r2, [r3, #0]
240055ea:	e16f      	b.n	240058cc <HAL_DMA_Abort_IT+0x480>
240055ec:	40020010 	.word	0x40020010
240055f0:	40020028 	.word	0x40020028
240055f4:	40020040 	.word	0x40020040
240055f8:	40020058 	.word	0x40020058
240055fc:	40020070 	.word	0x40020070
24005600:	40020088 	.word	0x40020088
24005604:	400200a0 	.word	0x400200a0
24005608:	400200b8 	.word	0x400200b8
2400560c:	40020410 	.word	0x40020410
24005610:	40020428 	.word	0x40020428
24005614:	40020440 	.word	0x40020440
24005618:	40020458 	.word	0x40020458
2400561c:	40020470 	.word	0x40020470
24005620:	40020488 	.word	0x40020488
24005624:	400204a0 	.word	0x400204a0
24005628:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
2400562c:	687b      	ldr	r3, [r7, #4]
2400562e:	681b      	ldr	r3, [r3, #0]
24005630:	681a      	ldr	r2, [r3, #0]
24005632:	687b      	ldr	r3, [r7, #4]
24005634:	681b      	ldr	r3, [r3, #0]
24005636:	f022 020e 	bic.w	r2, r2, #14
2400563a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
2400563c:	687b      	ldr	r3, [r7, #4]
2400563e:	681b      	ldr	r3, [r3, #0]
24005640:	4a6c      	ldr	r2, [pc, #432]	@ (240057f4 <HAL_DMA_Abort_IT+0x3a8>)
24005642:	4293      	cmp	r3, r2
24005644:	d04a      	beq.n	240056dc <HAL_DMA_Abort_IT+0x290>
24005646:	687b      	ldr	r3, [r7, #4]
24005648:	681b      	ldr	r3, [r3, #0]
2400564a:	4a6b      	ldr	r2, [pc, #428]	@ (240057f8 <HAL_DMA_Abort_IT+0x3ac>)
2400564c:	4293      	cmp	r3, r2
2400564e:	d045      	beq.n	240056dc <HAL_DMA_Abort_IT+0x290>
24005650:	687b      	ldr	r3, [r7, #4]
24005652:	681b      	ldr	r3, [r3, #0]
24005654:	4a69      	ldr	r2, [pc, #420]	@ (240057fc <HAL_DMA_Abort_IT+0x3b0>)
24005656:	4293      	cmp	r3, r2
24005658:	d040      	beq.n	240056dc <HAL_DMA_Abort_IT+0x290>
2400565a:	687b      	ldr	r3, [r7, #4]
2400565c:	681b      	ldr	r3, [r3, #0]
2400565e:	4a68      	ldr	r2, [pc, #416]	@ (24005800 <HAL_DMA_Abort_IT+0x3b4>)
24005660:	4293      	cmp	r3, r2
24005662:	d03b      	beq.n	240056dc <HAL_DMA_Abort_IT+0x290>
24005664:	687b      	ldr	r3, [r7, #4]
24005666:	681b      	ldr	r3, [r3, #0]
24005668:	4a66      	ldr	r2, [pc, #408]	@ (24005804 <HAL_DMA_Abort_IT+0x3b8>)
2400566a:	4293      	cmp	r3, r2
2400566c:	d036      	beq.n	240056dc <HAL_DMA_Abort_IT+0x290>
2400566e:	687b      	ldr	r3, [r7, #4]
24005670:	681b      	ldr	r3, [r3, #0]
24005672:	4a65      	ldr	r2, [pc, #404]	@ (24005808 <HAL_DMA_Abort_IT+0x3bc>)
24005674:	4293      	cmp	r3, r2
24005676:	d031      	beq.n	240056dc <HAL_DMA_Abort_IT+0x290>
24005678:	687b      	ldr	r3, [r7, #4]
2400567a:	681b      	ldr	r3, [r3, #0]
2400567c:	4a63      	ldr	r2, [pc, #396]	@ (2400580c <HAL_DMA_Abort_IT+0x3c0>)
2400567e:	4293      	cmp	r3, r2
24005680:	d02c      	beq.n	240056dc <HAL_DMA_Abort_IT+0x290>
24005682:	687b      	ldr	r3, [r7, #4]
24005684:	681b      	ldr	r3, [r3, #0]
24005686:	4a62      	ldr	r2, [pc, #392]	@ (24005810 <HAL_DMA_Abort_IT+0x3c4>)
24005688:	4293      	cmp	r3, r2
2400568a:	d027      	beq.n	240056dc <HAL_DMA_Abort_IT+0x290>
2400568c:	687b      	ldr	r3, [r7, #4]
2400568e:	681b      	ldr	r3, [r3, #0]
24005690:	4a60      	ldr	r2, [pc, #384]	@ (24005814 <HAL_DMA_Abort_IT+0x3c8>)
24005692:	4293      	cmp	r3, r2
24005694:	d022      	beq.n	240056dc <HAL_DMA_Abort_IT+0x290>
24005696:	687b      	ldr	r3, [r7, #4]
24005698:	681b      	ldr	r3, [r3, #0]
2400569a:	4a5f      	ldr	r2, [pc, #380]	@ (24005818 <HAL_DMA_Abort_IT+0x3cc>)
2400569c:	4293      	cmp	r3, r2
2400569e:	d01d      	beq.n	240056dc <HAL_DMA_Abort_IT+0x290>
240056a0:	687b      	ldr	r3, [r7, #4]
240056a2:	681b      	ldr	r3, [r3, #0]
240056a4:	4a5d      	ldr	r2, [pc, #372]	@ (2400581c <HAL_DMA_Abort_IT+0x3d0>)
240056a6:	4293      	cmp	r3, r2
240056a8:	d018      	beq.n	240056dc <HAL_DMA_Abort_IT+0x290>
240056aa:	687b      	ldr	r3, [r7, #4]
240056ac:	681b      	ldr	r3, [r3, #0]
240056ae:	4a5c      	ldr	r2, [pc, #368]	@ (24005820 <HAL_DMA_Abort_IT+0x3d4>)
240056b0:	4293      	cmp	r3, r2
240056b2:	d013      	beq.n	240056dc <HAL_DMA_Abort_IT+0x290>
240056b4:	687b      	ldr	r3, [r7, #4]
240056b6:	681b      	ldr	r3, [r3, #0]
240056b8:	4a5a      	ldr	r2, [pc, #360]	@ (24005824 <HAL_DMA_Abort_IT+0x3d8>)
240056ba:	4293      	cmp	r3, r2
240056bc:	d00e      	beq.n	240056dc <HAL_DMA_Abort_IT+0x290>
240056be:	687b      	ldr	r3, [r7, #4]
240056c0:	681b      	ldr	r3, [r3, #0]
240056c2:	4a59      	ldr	r2, [pc, #356]	@ (24005828 <HAL_DMA_Abort_IT+0x3dc>)
240056c4:	4293      	cmp	r3, r2
240056c6:	d009      	beq.n	240056dc <HAL_DMA_Abort_IT+0x290>
240056c8:	687b      	ldr	r3, [r7, #4]
240056ca:	681b      	ldr	r3, [r3, #0]
240056cc:	4a57      	ldr	r2, [pc, #348]	@ (2400582c <HAL_DMA_Abort_IT+0x3e0>)
240056ce:	4293      	cmp	r3, r2
240056d0:	d004      	beq.n	240056dc <HAL_DMA_Abort_IT+0x290>
240056d2:	687b      	ldr	r3, [r7, #4]
240056d4:	681b      	ldr	r3, [r3, #0]
240056d6:	4a56      	ldr	r2, [pc, #344]	@ (24005830 <HAL_DMA_Abort_IT+0x3e4>)
240056d8:	4293      	cmp	r3, r2
240056da:	d108      	bne.n	240056ee <HAL_DMA_Abort_IT+0x2a2>
240056dc:	687b      	ldr	r3, [r7, #4]
240056de:	681b      	ldr	r3, [r3, #0]
240056e0:	681a      	ldr	r2, [r3, #0]
240056e2:	687b      	ldr	r3, [r7, #4]
240056e4:	681b      	ldr	r3, [r3, #0]
240056e6:	f022 0201 	bic.w	r2, r2, #1
240056ea:	601a      	str	r2, [r3, #0]
240056ec:	e007      	b.n	240056fe <HAL_DMA_Abort_IT+0x2b2>
240056ee:	687b      	ldr	r3, [r7, #4]
240056f0:	681b      	ldr	r3, [r3, #0]
240056f2:	681a      	ldr	r2, [r3, #0]
240056f4:	687b      	ldr	r3, [r7, #4]
240056f6:	681b      	ldr	r3, [r3, #0]
240056f8:	f022 0201 	bic.w	r2, r2, #1
240056fc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240056fe:	687b      	ldr	r3, [r7, #4]
24005700:	681b      	ldr	r3, [r3, #0]
24005702:	4a3c      	ldr	r2, [pc, #240]	@ (240057f4 <HAL_DMA_Abort_IT+0x3a8>)
24005704:	4293      	cmp	r3, r2
24005706:	d072      	beq.n	240057ee <HAL_DMA_Abort_IT+0x3a2>
24005708:	687b      	ldr	r3, [r7, #4]
2400570a:	681b      	ldr	r3, [r3, #0]
2400570c:	4a3a      	ldr	r2, [pc, #232]	@ (240057f8 <HAL_DMA_Abort_IT+0x3ac>)
2400570e:	4293      	cmp	r3, r2
24005710:	d06d      	beq.n	240057ee <HAL_DMA_Abort_IT+0x3a2>
24005712:	687b      	ldr	r3, [r7, #4]
24005714:	681b      	ldr	r3, [r3, #0]
24005716:	4a39      	ldr	r2, [pc, #228]	@ (240057fc <HAL_DMA_Abort_IT+0x3b0>)
24005718:	4293      	cmp	r3, r2
2400571a:	d068      	beq.n	240057ee <HAL_DMA_Abort_IT+0x3a2>
2400571c:	687b      	ldr	r3, [r7, #4]
2400571e:	681b      	ldr	r3, [r3, #0]
24005720:	4a37      	ldr	r2, [pc, #220]	@ (24005800 <HAL_DMA_Abort_IT+0x3b4>)
24005722:	4293      	cmp	r3, r2
24005724:	d063      	beq.n	240057ee <HAL_DMA_Abort_IT+0x3a2>
24005726:	687b      	ldr	r3, [r7, #4]
24005728:	681b      	ldr	r3, [r3, #0]
2400572a:	4a36      	ldr	r2, [pc, #216]	@ (24005804 <HAL_DMA_Abort_IT+0x3b8>)
2400572c:	4293      	cmp	r3, r2
2400572e:	d05e      	beq.n	240057ee <HAL_DMA_Abort_IT+0x3a2>
24005730:	687b      	ldr	r3, [r7, #4]
24005732:	681b      	ldr	r3, [r3, #0]
24005734:	4a34      	ldr	r2, [pc, #208]	@ (24005808 <HAL_DMA_Abort_IT+0x3bc>)
24005736:	4293      	cmp	r3, r2
24005738:	d059      	beq.n	240057ee <HAL_DMA_Abort_IT+0x3a2>
2400573a:	687b      	ldr	r3, [r7, #4]
2400573c:	681b      	ldr	r3, [r3, #0]
2400573e:	4a33      	ldr	r2, [pc, #204]	@ (2400580c <HAL_DMA_Abort_IT+0x3c0>)
24005740:	4293      	cmp	r3, r2
24005742:	d054      	beq.n	240057ee <HAL_DMA_Abort_IT+0x3a2>
24005744:	687b      	ldr	r3, [r7, #4]
24005746:	681b      	ldr	r3, [r3, #0]
24005748:	4a31      	ldr	r2, [pc, #196]	@ (24005810 <HAL_DMA_Abort_IT+0x3c4>)
2400574a:	4293      	cmp	r3, r2
2400574c:	d04f      	beq.n	240057ee <HAL_DMA_Abort_IT+0x3a2>
2400574e:	687b      	ldr	r3, [r7, #4]
24005750:	681b      	ldr	r3, [r3, #0]
24005752:	4a30      	ldr	r2, [pc, #192]	@ (24005814 <HAL_DMA_Abort_IT+0x3c8>)
24005754:	4293      	cmp	r3, r2
24005756:	d04a      	beq.n	240057ee <HAL_DMA_Abort_IT+0x3a2>
24005758:	687b      	ldr	r3, [r7, #4]
2400575a:	681b      	ldr	r3, [r3, #0]
2400575c:	4a2e      	ldr	r2, [pc, #184]	@ (24005818 <HAL_DMA_Abort_IT+0x3cc>)
2400575e:	4293      	cmp	r3, r2
24005760:	d045      	beq.n	240057ee <HAL_DMA_Abort_IT+0x3a2>
24005762:	687b      	ldr	r3, [r7, #4]
24005764:	681b      	ldr	r3, [r3, #0]
24005766:	4a2d      	ldr	r2, [pc, #180]	@ (2400581c <HAL_DMA_Abort_IT+0x3d0>)
24005768:	4293      	cmp	r3, r2
2400576a:	d040      	beq.n	240057ee <HAL_DMA_Abort_IT+0x3a2>
2400576c:	687b      	ldr	r3, [r7, #4]
2400576e:	681b      	ldr	r3, [r3, #0]
24005770:	4a2b      	ldr	r2, [pc, #172]	@ (24005820 <HAL_DMA_Abort_IT+0x3d4>)
24005772:	4293      	cmp	r3, r2
24005774:	d03b      	beq.n	240057ee <HAL_DMA_Abort_IT+0x3a2>
24005776:	687b      	ldr	r3, [r7, #4]
24005778:	681b      	ldr	r3, [r3, #0]
2400577a:	4a2a      	ldr	r2, [pc, #168]	@ (24005824 <HAL_DMA_Abort_IT+0x3d8>)
2400577c:	4293      	cmp	r3, r2
2400577e:	d036      	beq.n	240057ee <HAL_DMA_Abort_IT+0x3a2>
24005780:	687b      	ldr	r3, [r7, #4]
24005782:	681b      	ldr	r3, [r3, #0]
24005784:	4a28      	ldr	r2, [pc, #160]	@ (24005828 <HAL_DMA_Abort_IT+0x3dc>)
24005786:	4293      	cmp	r3, r2
24005788:	d031      	beq.n	240057ee <HAL_DMA_Abort_IT+0x3a2>
2400578a:	687b      	ldr	r3, [r7, #4]
2400578c:	681b      	ldr	r3, [r3, #0]
2400578e:	4a27      	ldr	r2, [pc, #156]	@ (2400582c <HAL_DMA_Abort_IT+0x3e0>)
24005790:	4293      	cmp	r3, r2
24005792:	d02c      	beq.n	240057ee <HAL_DMA_Abort_IT+0x3a2>
24005794:	687b      	ldr	r3, [r7, #4]
24005796:	681b      	ldr	r3, [r3, #0]
24005798:	4a25      	ldr	r2, [pc, #148]	@ (24005830 <HAL_DMA_Abort_IT+0x3e4>)
2400579a:	4293      	cmp	r3, r2
2400579c:	d027      	beq.n	240057ee <HAL_DMA_Abort_IT+0x3a2>
2400579e:	687b      	ldr	r3, [r7, #4]
240057a0:	681b      	ldr	r3, [r3, #0]
240057a2:	4a24      	ldr	r2, [pc, #144]	@ (24005834 <HAL_DMA_Abort_IT+0x3e8>)
240057a4:	4293      	cmp	r3, r2
240057a6:	d022      	beq.n	240057ee <HAL_DMA_Abort_IT+0x3a2>
240057a8:	687b      	ldr	r3, [r7, #4]
240057aa:	681b      	ldr	r3, [r3, #0]
240057ac:	4a22      	ldr	r2, [pc, #136]	@ (24005838 <HAL_DMA_Abort_IT+0x3ec>)
240057ae:	4293      	cmp	r3, r2
240057b0:	d01d      	beq.n	240057ee <HAL_DMA_Abort_IT+0x3a2>
240057b2:	687b      	ldr	r3, [r7, #4]
240057b4:	681b      	ldr	r3, [r3, #0]
240057b6:	4a21      	ldr	r2, [pc, #132]	@ (2400583c <HAL_DMA_Abort_IT+0x3f0>)
240057b8:	4293      	cmp	r3, r2
240057ba:	d018      	beq.n	240057ee <HAL_DMA_Abort_IT+0x3a2>
240057bc:	687b      	ldr	r3, [r7, #4]
240057be:	681b      	ldr	r3, [r3, #0]
240057c0:	4a1f      	ldr	r2, [pc, #124]	@ (24005840 <HAL_DMA_Abort_IT+0x3f4>)
240057c2:	4293      	cmp	r3, r2
240057c4:	d013      	beq.n	240057ee <HAL_DMA_Abort_IT+0x3a2>
240057c6:	687b      	ldr	r3, [r7, #4]
240057c8:	681b      	ldr	r3, [r3, #0]
240057ca:	4a1e      	ldr	r2, [pc, #120]	@ (24005844 <HAL_DMA_Abort_IT+0x3f8>)
240057cc:	4293      	cmp	r3, r2
240057ce:	d00e      	beq.n	240057ee <HAL_DMA_Abort_IT+0x3a2>
240057d0:	687b      	ldr	r3, [r7, #4]
240057d2:	681b      	ldr	r3, [r3, #0]
240057d4:	4a1c      	ldr	r2, [pc, #112]	@ (24005848 <HAL_DMA_Abort_IT+0x3fc>)
240057d6:	4293      	cmp	r3, r2
240057d8:	d009      	beq.n	240057ee <HAL_DMA_Abort_IT+0x3a2>
240057da:	687b      	ldr	r3, [r7, #4]
240057dc:	681b      	ldr	r3, [r3, #0]
240057de:	4a1b      	ldr	r2, [pc, #108]	@ (2400584c <HAL_DMA_Abort_IT+0x400>)
240057e0:	4293      	cmp	r3, r2
240057e2:	d004      	beq.n	240057ee <HAL_DMA_Abort_IT+0x3a2>
240057e4:	687b      	ldr	r3, [r7, #4]
240057e6:	681b      	ldr	r3, [r3, #0]
240057e8:	4a19      	ldr	r2, [pc, #100]	@ (24005850 <HAL_DMA_Abort_IT+0x404>)
240057ea:	4293      	cmp	r3, r2
240057ec:	d132      	bne.n	24005854 <HAL_DMA_Abort_IT+0x408>
240057ee:	2301      	movs	r3, #1
240057f0:	e031      	b.n	24005856 <HAL_DMA_Abort_IT+0x40a>
240057f2:	bf00      	nop
240057f4:	40020010 	.word	0x40020010
240057f8:	40020028 	.word	0x40020028
240057fc:	40020040 	.word	0x40020040
24005800:	40020058 	.word	0x40020058
24005804:	40020070 	.word	0x40020070
24005808:	40020088 	.word	0x40020088
2400580c:	400200a0 	.word	0x400200a0
24005810:	400200b8 	.word	0x400200b8
24005814:	40020410 	.word	0x40020410
24005818:	40020428 	.word	0x40020428
2400581c:	40020440 	.word	0x40020440
24005820:	40020458 	.word	0x40020458
24005824:	40020470 	.word	0x40020470
24005828:	40020488 	.word	0x40020488
2400582c:	400204a0 	.word	0x400204a0
24005830:	400204b8 	.word	0x400204b8
24005834:	58025408 	.word	0x58025408
24005838:	5802541c 	.word	0x5802541c
2400583c:	58025430 	.word	0x58025430
24005840:	58025444 	.word	0x58025444
24005844:	58025458 	.word	0x58025458
24005848:	5802546c 	.word	0x5802546c
2400584c:	58025480 	.word	0x58025480
24005850:	58025494 	.word	0x58025494
24005854:	2300      	movs	r3, #0
24005856:	2b00      	cmp	r3, #0
24005858:	d028      	beq.n	240058ac <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
2400585a:	687b      	ldr	r3, [r7, #4]
2400585c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
2400585e:	681a      	ldr	r2, [r3, #0]
24005860:	687b      	ldr	r3, [r7, #4]
24005862:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
24005864:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
24005868:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
2400586a:	687b      	ldr	r3, [r7, #4]
2400586c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
2400586e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
24005870:	687b      	ldr	r3, [r7, #4]
24005872:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
24005874:	f003 031f 	and.w	r3, r3, #31
24005878:	2201      	movs	r2, #1
2400587a:	409a      	lsls	r2, r3
2400587c:	68fb      	ldr	r3, [r7, #12]
2400587e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24005880:	687b      	ldr	r3, [r7, #4]
24005882:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
24005884:	687a      	ldr	r2, [r7, #4]
24005886:	6e92      	ldr	r2, [r2, #104]	@ 0x68
24005888:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
2400588a:	687b      	ldr	r3, [r7, #4]
2400588c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
2400588e:	2b00      	cmp	r3, #0
24005890:	d00c      	beq.n	240058ac <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
24005892:	687b      	ldr	r3, [r7, #4]
24005894:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
24005896:	681a      	ldr	r2, [r3, #0]
24005898:	687b      	ldr	r3, [r7, #4]
2400589a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
2400589c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
240058a0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
240058a2:	687b      	ldr	r3, [r7, #4]
240058a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
240058a6:	687a      	ldr	r2, [r7, #4]
240058a8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
240058aa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
240058ac:	687b      	ldr	r3, [r7, #4]
240058ae:	2201      	movs	r2, #1
240058b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
240058b4:	687b      	ldr	r3, [r7, #4]
240058b6:	2200      	movs	r2, #0
240058b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
240058bc:	687b      	ldr	r3, [r7, #4]
240058be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
240058c0:	2b00      	cmp	r3, #0
240058c2:	d003      	beq.n	240058cc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
240058c4:	687b      	ldr	r3, [r7, #4]
240058c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
240058c8:	6878      	ldr	r0, [r7, #4]
240058ca:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
240058cc:	2300      	movs	r3, #0
}
240058ce:	4618      	mov	r0, r3
240058d0:	3710      	adds	r7, #16
240058d2:	46bd      	mov	sp, r7
240058d4:	bd80      	pop	{r7, pc}
240058d6:	bf00      	nop

240058d8 <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode).
  * @param  Timeout:       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
240058d8:	b580      	push	{r7, lr}
240058da:	b08a      	sub	sp, #40	@ 0x28
240058dc:	af00      	add	r7, sp, #0
240058de:	60f8      	str	r0, [r7, #12]
240058e0:	460b      	mov	r3, r1
240058e2:	607a      	str	r2, [r7, #4]
240058e4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
240058e6:	2300      	movs	r3, #0
240058e8:	76fb      	strb	r3, [r7, #27]
  uint32_t cpltlevel_mask;
  uint32_t tickstart = HAL_GetTick();
240058ea:	f7fd fa01 	bl	24002cf0 <HAL_GetTick>
240058ee:	6178      	str	r0, [r7, #20]
  __IO uint32_t *isr_reg;
  /* IT clear flag register */
  __IO uint32_t *ifcr_reg;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
240058f0:	68fb      	ldr	r3, [r7, #12]
240058f2:	2b00      	cmp	r3, #0
240058f4:	d101      	bne.n	240058fa <HAL_DMA_PollForTransfer+0x22>
  {
    return HAL_ERROR;
240058f6:	2301      	movs	r3, #1
240058f8:	e374      	b.n	24005fe4 <HAL_DMA_PollForTransfer+0x70c>
  }

  if(HAL_DMA_STATE_BUSY != hdma->State)
240058fa:	68fb      	ldr	r3, [r7, #12]
240058fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
24005900:	b2db      	uxtb	r3, r3
24005902:	2b02      	cmp	r3, #2
24005904:	d008      	beq.n	24005918 <HAL_DMA_PollForTransfer+0x40>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
24005906:	68fb      	ldr	r3, [r7, #12]
24005908:	2280      	movs	r2, #128	@ 0x80
2400590a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
2400590c:	68fb      	ldr	r3, [r7, #12]
2400590e:	2200      	movs	r2, #0
24005910:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
24005914:	2301      	movs	r3, #1
24005916:	e365      	b.n	24005fe4 <HAL_DMA_PollForTransfer+0x70c>
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24005918:	68fb      	ldr	r3, [r7, #12]
2400591a:	681b      	ldr	r3, [r3, #0]
2400591c:	4a7b      	ldr	r2, [pc, #492]	@ (24005b0c <HAL_DMA_PollForTransfer+0x234>)
2400591e:	4293      	cmp	r3, r2
24005920:	d04a      	beq.n	240059b8 <HAL_DMA_PollForTransfer+0xe0>
24005922:	68fb      	ldr	r3, [r7, #12]
24005924:	681b      	ldr	r3, [r3, #0]
24005926:	4a7a      	ldr	r2, [pc, #488]	@ (24005b10 <HAL_DMA_PollForTransfer+0x238>)
24005928:	4293      	cmp	r3, r2
2400592a:	d045      	beq.n	240059b8 <HAL_DMA_PollForTransfer+0xe0>
2400592c:	68fb      	ldr	r3, [r7, #12]
2400592e:	681b      	ldr	r3, [r3, #0]
24005930:	4a78      	ldr	r2, [pc, #480]	@ (24005b14 <HAL_DMA_PollForTransfer+0x23c>)
24005932:	4293      	cmp	r3, r2
24005934:	d040      	beq.n	240059b8 <HAL_DMA_PollForTransfer+0xe0>
24005936:	68fb      	ldr	r3, [r7, #12]
24005938:	681b      	ldr	r3, [r3, #0]
2400593a:	4a77      	ldr	r2, [pc, #476]	@ (24005b18 <HAL_DMA_PollForTransfer+0x240>)
2400593c:	4293      	cmp	r3, r2
2400593e:	d03b      	beq.n	240059b8 <HAL_DMA_PollForTransfer+0xe0>
24005940:	68fb      	ldr	r3, [r7, #12]
24005942:	681b      	ldr	r3, [r3, #0]
24005944:	4a75      	ldr	r2, [pc, #468]	@ (24005b1c <HAL_DMA_PollForTransfer+0x244>)
24005946:	4293      	cmp	r3, r2
24005948:	d036      	beq.n	240059b8 <HAL_DMA_PollForTransfer+0xe0>
2400594a:	68fb      	ldr	r3, [r7, #12]
2400594c:	681b      	ldr	r3, [r3, #0]
2400594e:	4a74      	ldr	r2, [pc, #464]	@ (24005b20 <HAL_DMA_PollForTransfer+0x248>)
24005950:	4293      	cmp	r3, r2
24005952:	d031      	beq.n	240059b8 <HAL_DMA_PollForTransfer+0xe0>
24005954:	68fb      	ldr	r3, [r7, #12]
24005956:	681b      	ldr	r3, [r3, #0]
24005958:	4a72      	ldr	r2, [pc, #456]	@ (24005b24 <HAL_DMA_PollForTransfer+0x24c>)
2400595a:	4293      	cmp	r3, r2
2400595c:	d02c      	beq.n	240059b8 <HAL_DMA_PollForTransfer+0xe0>
2400595e:	68fb      	ldr	r3, [r7, #12]
24005960:	681b      	ldr	r3, [r3, #0]
24005962:	4a71      	ldr	r2, [pc, #452]	@ (24005b28 <HAL_DMA_PollForTransfer+0x250>)
24005964:	4293      	cmp	r3, r2
24005966:	d027      	beq.n	240059b8 <HAL_DMA_PollForTransfer+0xe0>
24005968:	68fb      	ldr	r3, [r7, #12]
2400596a:	681b      	ldr	r3, [r3, #0]
2400596c:	4a6f      	ldr	r2, [pc, #444]	@ (24005b2c <HAL_DMA_PollForTransfer+0x254>)
2400596e:	4293      	cmp	r3, r2
24005970:	d022      	beq.n	240059b8 <HAL_DMA_PollForTransfer+0xe0>
24005972:	68fb      	ldr	r3, [r7, #12]
24005974:	681b      	ldr	r3, [r3, #0]
24005976:	4a6e      	ldr	r2, [pc, #440]	@ (24005b30 <HAL_DMA_PollForTransfer+0x258>)
24005978:	4293      	cmp	r3, r2
2400597a:	d01d      	beq.n	240059b8 <HAL_DMA_PollForTransfer+0xe0>
2400597c:	68fb      	ldr	r3, [r7, #12]
2400597e:	681b      	ldr	r3, [r3, #0]
24005980:	4a6c      	ldr	r2, [pc, #432]	@ (24005b34 <HAL_DMA_PollForTransfer+0x25c>)
24005982:	4293      	cmp	r3, r2
24005984:	d018      	beq.n	240059b8 <HAL_DMA_PollForTransfer+0xe0>
24005986:	68fb      	ldr	r3, [r7, #12]
24005988:	681b      	ldr	r3, [r3, #0]
2400598a:	4a6b      	ldr	r2, [pc, #428]	@ (24005b38 <HAL_DMA_PollForTransfer+0x260>)
2400598c:	4293      	cmp	r3, r2
2400598e:	d013      	beq.n	240059b8 <HAL_DMA_PollForTransfer+0xe0>
24005990:	68fb      	ldr	r3, [r7, #12]
24005992:	681b      	ldr	r3, [r3, #0]
24005994:	4a69      	ldr	r2, [pc, #420]	@ (24005b3c <HAL_DMA_PollForTransfer+0x264>)
24005996:	4293      	cmp	r3, r2
24005998:	d00e      	beq.n	240059b8 <HAL_DMA_PollForTransfer+0xe0>
2400599a:	68fb      	ldr	r3, [r7, #12]
2400599c:	681b      	ldr	r3, [r3, #0]
2400599e:	4a68      	ldr	r2, [pc, #416]	@ (24005b40 <HAL_DMA_PollForTransfer+0x268>)
240059a0:	4293      	cmp	r3, r2
240059a2:	d009      	beq.n	240059b8 <HAL_DMA_PollForTransfer+0xe0>
240059a4:	68fb      	ldr	r3, [r7, #12]
240059a6:	681b      	ldr	r3, [r3, #0]
240059a8:	4a66      	ldr	r2, [pc, #408]	@ (24005b44 <HAL_DMA_PollForTransfer+0x26c>)
240059aa:	4293      	cmp	r3, r2
240059ac:	d004      	beq.n	240059b8 <HAL_DMA_PollForTransfer+0xe0>
240059ae:	68fb      	ldr	r3, [r7, #12]
240059b0:	681b      	ldr	r3, [r3, #0]
240059b2:	4a65      	ldr	r2, [pc, #404]	@ (24005b48 <HAL_DMA_PollForTransfer+0x270>)
240059b4:	4293      	cmp	r3, r2
240059b6:	d101      	bne.n	240059bc <HAL_DMA_PollForTransfer+0xe4>
240059b8:	2301      	movs	r3, #1
240059ba:	e000      	b.n	240059be <HAL_DMA_PollForTransfer+0xe6>
240059bc:	2300      	movs	r3, #0
240059be:	2b00      	cmp	r3, #0
240059c0:	d028      	beq.n	24005a14 <HAL_DMA_PollForTransfer+0x13c>
  {
    /* Polling mode not supported in circular mode and double buffering mode */
    if ((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) != 0U)
240059c2:	68fb      	ldr	r3, [r7, #12]
240059c4:	681b      	ldr	r3, [r3, #0]
240059c6:	681b      	ldr	r3, [r3, #0]
240059c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
240059cc:	2b00      	cmp	r3, #0
240059ce:	d005      	beq.n	240059dc <HAL_DMA_PollForTransfer+0x104>
    {
      hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
240059d0:	68fb      	ldr	r3, [r7, #12]
240059d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
240059d6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
240059d8:	2301      	movs	r3, #1
240059da:	e303      	b.n	24005fe4 <HAL_DMA_PollForTransfer+0x70c>
    }

    /* Get the level transfer complete flag */
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
240059dc:	7afb      	ldrb	r3, [r7, #11]
240059de:	2b00      	cmp	r3, #0
240059e0:	d108      	bne.n	240059f4 <HAL_DMA_PollForTransfer+0x11c>
    {
      /* Transfer Complete flag */
      cpltlevel_mask = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
240059e2:	68fb      	ldr	r3, [r7, #12]
240059e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
240059e6:	f003 031f 	and.w	r3, r3, #31
240059ea:	2220      	movs	r2, #32
240059ec:	fa02 f303 	lsl.w	r3, r2, r3
240059f0:	627b      	str	r3, [r7, #36]	@ 0x24
240059f2:	e007      	b.n	24005a04 <HAL_DMA_PollForTransfer+0x12c>
    }
    else
    {
      /* Half Transfer Complete flag */
      cpltlevel_mask = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
240059f4:	68fb      	ldr	r3, [r7, #12]
240059f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
240059f8:	f003 031f 	and.w	r3, r3, #31
240059fc:	2210      	movs	r2, #16
240059fe:	fa02 f303 	lsl.w	r3, r2, r3
24005a02:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    isr_reg  = &(((DMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
24005a04:	68fb      	ldr	r3, [r7, #12]
24005a06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
24005a08:	623b      	str	r3, [r7, #32]
    ifcr_reg = &(((DMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
24005a0a:	68fb      	ldr	r3, [r7, #12]
24005a0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
24005a0e:	3308      	adds	r3, #8
24005a10:	61fb      	str	r3, [r7, #28]
24005a12:	e1d5      	b.n	24005dc0 <HAL_DMA_PollForTransfer+0x4e8>
  }
  else /* BDMA channel */
  {
    /* Polling mode not supported in circular mode */
    if ((((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR & BDMA_CCR_CIRC) != 0U)
24005a14:	68fb      	ldr	r3, [r7, #12]
24005a16:	681b      	ldr	r3, [r3, #0]
24005a18:	681b      	ldr	r3, [r3, #0]
24005a1a:	f003 0320 	and.w	r3, r3, #32
24005a1e:	2b00      	cmp	r3, #0
24005a20:	d005      	beq.n	24005a2e <HAL_DMA_PollForTransfer+0x156>
    {
      hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
24005a22:	68fb      	ldr	r3, [r7, #12]
24005a24:	f44f 7280 	mov.w	r2, #256	@ 0x100
24005a28:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
24005a2a:	2301      	movs	r3, #1
24005a2c:	e2da      	b.n	24005fe4 <HAL_DMA_PollForTransfer+0x70c>
    }

    /* Get the level transfer complete flag */
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
24005a2e:	7afb      	ldrb	r3, [r7, #11]
24005a30:	2b00      	cmp	r3, #0
24005a32:	d108      	bne.n	24005a46 <HAL_DMA_PollForTransfer+0x16e>
    {
      /* Transfer Complete flag */
      cpltlevel_mask = BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU);
24005a34:	68fb      	ldr	r3, [r7, #12]
24005a36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
24005a38:	f003 031f 	and.w	r3, r3, #31
24005a3c:	2202      	movs	r2, #2
24005a3e:	fa02 f303 	lsl.w	r3, r2, r3
24005a42:	627b      	str	r3, [r7, #36]	@ 0x24
24005a44:	e007      	b.n	24005a56 <HAL_DMA_PollForTransfer+0x17e>
    }
    else
    {
      /* Half Transfer Complete flag */
      cpltlevel_mask = BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU);
24005a46:	68fb      	ldr	r3, [r7, #12]
24005a48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
24005a4a:	f003 031f 	and.w	r3, r3, #31
24005a4e:	2204      	movs	r2, #4
24005a50:	fa02 f303 	lsl.w	r3, r2, r3
24005a54:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    isr_reg  = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
24005a56:	68fb      	ldr	r3, [r7, #12]
24005a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
24005a5a:	623b      	str	r3, [r7, #32]
    ifcr_reg = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
24005a5c:	68fb      	ldr	r3, [r7, #12]
24005a5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
24005a60:	3304      	adds	r3, #4
24005a62:	61fb      	str	r3, [r7, #28]
  }

  while(((*isr_reg) & cpltlevel_mask) == 0U)
24005a64:	e1ac      	b.n	24005dc0 <HAL_DMA_PollForTransfer+0x4e8>
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24005a66:	68fb      	ldr	r3, [r7, #12]
24005a68:	681b      	ldr	r3, [r3, #0]
24005a6a:	4a28      	ldr	r2, [pc, #160]	@ (24005b0c <HAL_DMA_PollForTransfer+0x234>)
24005a6c:	4293      	cmp	r3, r2
24005a6e:	d04a      	beq.n	24005b06 <HAL_DMA_PollForTransfer+0x22e>
24005a70:	68fb      	ldr	r3, [r7, #12]
24005a72:	681b      	ldr	r3, [r3, #0]
24005a74:	4a26      	ldr	r2, [pc, #152]	@ (24005b10 <HAL_DMA_PollForTransfer+0x238>)
24005a76:	4293      	cmp	r3, r2
24005a78:	d045      	beq.n	24005b06 <HAL_DMA_PollForTransfer+0x22e>
24005a7a:	68fb      	ldr	r3, [r7, #12]
24005a7c:	681b      	ldr	r3, [r3, #0]
24005a7e:	4a25      	ldr	r2, [pc, #148]	@ (24005b14 <HAL_DMA_PollForTransfer+0x23c>)
24005a80:	4293      	cmp	r3, r2
24005a82:	d040      	beq.n	24005b06 <HAL_DMA_PollForTransfer+0x22e>
24005a84:	68fb      	ldr	r3, [r7, #12]
24005a86:	681b      	ldr	r3, [r3, #0]
24005a88:	4a23      	ldr	r2, [pc, #140]	@ (24005b18 <HAL_DMA_PollForTransfer+0x240>)
24005a8a:	4293      	cmp	r3, r2
24005a8c:	d03b      	beq.n	24005b06 <HAL_DMA_PollForTransfer+0x22e>
24005a8e:	68fb      	ldr	r3, [r7, #12]
24005a90:	681b      	ldr	r3, [r3, #0]
24005a92:	4a22      	ldr	r2, [pc, #136]	@ (24005b1c <HAL_DMA_PollForTransfer+0x244>)
24005a94:	4293      	cmp	r3, r2
24005a96:	d036      	beq.n	24005b06 <HAL_DMA_PollForTransfer+0x22e>
24005a98:	68fb      	ldr	r3, [r7, #12]
24005a9a:	681b      	ldr	r3, [r3, #0]
24005a9c:	4a20      	ldr	r2, [pc, #128]	@ (24005b20 <HAL_DMA_PollForTransfer+0x248>)
24005a9e:	4293      	cmp	r3, r2
24005aa0:	d031      	beq.n	24005b06 <HAL_DMA_PollForTransfer+0x22e>
24005aa2:	68fb      	ldr	r3, [r7, #12]
24005aa4:	681b      	ldr	r3, [r3, #0]
24005aa6:	4a1f      	ldr	r2, [pc, #124]	@ (24005b24 <HAL_DMA_PollForTransfer+0x24c>)
24005aa8:	4293      	cmp	r3, r2
24005aaa:	d02c      	beq.n	24005b06 <HAL_DMA_PollForTransfer+0x22e>
24005aac:	68fb      	ldr	r3, [r7, #12]
24005aae:	681b      	ldr	r3, [r3, #0]
24005ab0:	4a1d      	ldr	r2, [pc, #116]	@ (24005b28 <HAL_DMA_PollForTransfer+0x250>)
24005ab2:	4293      	cmp	r3, r2
24005ab4:	d027      	beq.n	24005b06 <HAL_DMA_PollForTransfer+0x22e>
24005ab6:	68fb      	ldr	r3, [r7, #12]
24005ab8:	681b      	ldr	r3, [r3, #0]
24005aba:	4a1c      	ldr	r2, [pc, #112]	@ (24005b2c <HAL_DMA_PollForTransfer+0x254>)
24005abc:	4293      	cmp	r3, r2
24005abe:	d022      	beq.n	24005b06 <HAL_DMA_PollForTransfer+0x22e>
24005ac0:	68fb      	ldr	r3, [r7, #12]
24005ac2:	681b      	ldr	r3, [r3, #0]
24005ac4:	4a1a      	ldr	r2, [pc, #104]	@ (24005b30 <HAL_DMA_PollForTransfer+0x258>)
24005ac6:	4293      	cmp	r3, r2
24005ac8:	d01d      	beq.n	24005b06 <HAL_DMA_PollForTransfer+0x22e>
24005aca:	68fb      	ldr	r3, [r7, #12]
24005acc:	681b      	ldr	r3, [r3, #0]
24005ace:	4a19      	ldr	r2, [pc, #100]	@ (24005b34 <HAL_DMA_PollForTransfer+0x25c>)
24005ad0:	4293      	cmp	r3, r2
24005ad2:	d018      	beq.n	24005b06 <HAL_DMA_PollForTransfer+0x22e>
24005ad4:	68fb      	ldr	r3, [r7, #12]
24005ad6:	681b      	ldr	r3, [r3, #0]
24005ad8:	4a17      	ldr	r2, [pc, #92]	@ (24005b38 <HAL_DMA_PollForTransfer+0x260>)
24005ada:	4293      	cmp	r3, r2
24005adc:	d013      	beq.n	24005b06 <HAL_DMA_PollForTransfer+0x22e>
24005ade:	68fb      	ldr	r3, [r7, #12]
24005ae0:	681b      	ldr	r3, [r3, #0]
24005ae2:	4a16      	ldr	r2, [pc, #88]	@ (24005b3c <HAL_DMA_PollForTransfer+0x264>)
24005ae4:	4293      	cmp	r3, r2
24005ae6:	d00e      	beq.n	24005b06 <HAL_DMA_PollForTransfer+0x22e>
24005ae8:	68fb      	ldr	r3, [r7, #12]
24005aea:	681b      	ldr	r3, [r3, #0]
24005aec:	4a14      	ldr	r2, [pc, #80]	@ (24005b40 <HAL_DMA_PollForTransfer+0x268>)
24005aee:	4293      	cmp	r3, r2
24005af0:	d009      	beq.n	24005b06 <HAL_DMA_PollForTransfer+0x22e>
24005af2:	68fb      	ldr	r3, [r7, #12]
24005af4:	681b      	ldr	r3, [r3, #0]
24005af6:	4a13      	ldr	r2, [pc, #76]	@ (24005b44 <HAL_DMA_PollForTransfer+0x26c>)
24005af8:	4293      	cmp	r3, r2
24005afa:	d004      	beq.n	24005b06 <HAL_DMA_PollForTransfer+0x22e>
24005afc:	68fb      	ldr	r3, [r7, #12]
24005afe:	681b      	ldr	r3, [r3, #0]
24005b00:	4a11      	ldr	r2, [pc, #68]	@ (24005b48 <HAL_DMA_PollForTransfer+0x270>)
24005b02:	4293      	cmp	r3, r2
24005b04:	d122      	bne.n	24005b4c <HAL_DMA_PollForTransfer+0x274>
24005b06:	2301      	movs	r3, #1
24005b08:	e021      	b.n	24005b4e <HAL_DMA_PollForTransfer+0x276>
24005b0a:	bf00      	nop
24005b0c:	40020010 	.word	0x40020010
24005b10:	40020028 	.word	0x40020028
24005b14:	40020040 	.word	0x40020040
24005b18:	40020058 	.word	0x40020058
24005b1c:	40020070 	.word	0x40020070
24005b20:	40020088 	.word	0x40020088
24005b24:	400200a0 	.word	0x400200a0
24005b28:	400200b8 	.word	0x400200b8
24005b2c:	40020410 	.word	0x40020410
24005b30:	40020428 	.word	0x40020428
24005b34:	40020440 	.word	0x40020440
24005b38:	40020458 	.word	0x40020458
24005b3c:	40020470 	.word	0x40020470
24005b40:	40020488 	.word	0x40020488
24005b44:	400204a0 	.word	0x400204a0
24005b48:	400204b8 	.word	0x400204b8
24005b4c:	2300      	movs	r3, #0
24005b4e:	2b00      	cmp	r3, #0
24005b50:	d057      	beq.n	24005c02 <HAL_DMA_PollForTransfer+0x32a>
    {
      if(((*isr_reg) & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005b52:	6a3b      	ldr	r3, [r7, #32]
24005b54:	681a      	ldr	r2, [r3, #0]
24005b56:	68fb      	ldr	r3, [r7, #12]
24005b58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
24005b5a:	f003 031f 	and.w	r3, r3, #31
24005b5e:	fa22 f303 	lsr.w	r3, r2, r3
24005b62:	f003 0301 	and.w	r3, r3, #1
24005b66:	2b00      	cmp	r3, #0
24005b68:	d00d      	beq.n	24005b86 <HAL_DMA_PollForTransfer+0x2ae>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
24005b6a:	68fb      	ldr	r3, [r7, #12]
24005b6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
24005b6e:	f043 0202 	orr.w	r2, r3, #2
24005b72:	68fb      	ldr	r3, [r7, #12]
24005b74:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear the FIFO error flag */
        (*ifcr_reg) = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
24005b76:	68fb      	ldr	r3, [r7, #12]
24005b78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
24005b7a:	f003 031f 	and.w	r3, r3, #31
24005b7e:	2201      	movs	r2, #1
24005b80:	409a      	lsls	r2, r3
24005b82:	69fb      	ldr	r3, [r7, #28]
24005b84:	601a      	str	r2, [r3, #0]
      }

      if(((*isr_reg) & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005b86:	6a3b      	ldr	r3, [r7, #32]
24005b88:	681a      	ldr	r2, [r3, #0]
24005b8a:	68fb      	ldr	r3, [r7, #12]
24005b8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
24005b8e:	f003 031f 	and.w	r3, r3, #31
24005b92:	2104      	movs	r1, #4
24005b94:	fa01 f303 	lsl.w	r3, r1, r3
24005b98:	4013      	ands	r3, r2
24005b9a:	2b00      	cmp	r3, #0
24005b9c:	d00d      	beq.n	24005bba <HAL_DMA_PollForTransfer+0x2e2>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
24005b9e:	68fb      	ldr	r3, [r7, #12]
24005ba0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
24005ba2:	f043 0204 	orr.w	r2, r3, #4
24005ba6:	68fb      	ldr	r3, [r7, #12]
24005ba8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear the Direct Mode error flag */
        (*ifcr_reg) = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
24005baa:	68fb      	ldr	r3, [r7, #12]
24005bac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
24005bae:	f003 031f 	and.w	r3, r3, #31
24005bb2:	2204      	movs	r2, #4
24005bb4:	409a      	lsls	r2, r3
24005bb6:	69fb      	ldr	r3, [r7, #28]
24005bb8:	601a      	str	r2, [r3, #0]
      }

      if(((*isr_reg) & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005bba:	6a3b      	ldr	r3, [r7, #32]
24005bbc:	681a      	ldr	r2, [r3, #0]
24005bbe:	68fb      	ldr	r3, [r7, #12]
24005bc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
24005bc2:	f003 031f 	and.w	r3, r3, #31
24005bc6:	2108      	movs	r1, #8
24005bc8:	fa01 f303 	lsl.w	r3, r1, r3
24005bcc:	4013      	ands	r3, r2
24005bce:	2b00      	cmp	r3, #0
24005bd0:	d038      	beq.n	24005c44 <HAL_DMA_PollForTransfer+0x36c>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
24005bd2:	68fb      	ldr	r3, [r7, #12]
24005bd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
24005bd6:	f043 0201 	orr.w	r2, r3, #1
24005bda:	68fb      	ldr	r3, [r7, #12]
24005bdc:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear the transfer error flag */
        (*ifcr_reg) = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
24005bde:	68fb      	ldr	r3, [r7, #12]
24005be0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
24005be2:	f003 031f 	and.w	r3, r3, #31
24005be6:	2208      	movs	r2, #8
24005be8:	409a      	lsls	r2, r3
24005bea:	69fb      	ldr	r3, [r7, #28]
24005bec:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
24005bee:	68fb      	ldr	r3, [r7, #12]
24005bf0:	2201      	movs	r2, #1
24005bf2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
24005bf6:	68fb      	ldr	r3, [r7, #12]
24005bf8:	2200      	movs	r2, #0
24005bfa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
24005bfe:	2301      	movs	r3, #1
24005c00:	e1f0      	b.n	24005fe4 <HAL_DMA_PollForTransfer+0x70c>
      }
    }
    else /* BDMA channel */
    {
      if(((*isr_reg) & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005c02:	6a3b      	ldr	r3, [r7, #32]
24005c04:	681a      	ldr	r2, [r3, #0]
24005c06:	68fb      	ldr	r3, [r7, #12]
24005c08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
24005c0a:	f003 031f 	and.w	r3, r3, #31
24005c0e:	2108      	movs	r1, #8
24005c10:	fa01 f303 	lsl.w	r3, r1, r3
24005c14:	4013      	ands	r3, r2
24005c16:	2b00      	cmp	r3, #0
24005c18:	d014      	beq.n	24005c44 <HAL_DMA_PollForTransfer+0x36c>
      {
        /* When a DMA transfer error occurs */
        /* A hardware clear of its EN bits is performed */
        /* Clear all flags */
        (*isr_reg) = ((BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU));
24005c1a:	68fb      	ldr	r3, [r7, #12]
24005c1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
24005c1e:	f003 031f 	and.w	r3, r3, #31
24005c22:	2201      	movs	r2, #1
24005c24:	409a      	lsls	r2, r3
24005c26:	6a3b      	ldr	r3, [r7, #32]
24005c28:	601a      	str	r2, [r3, #0]

        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TE;
24005c2a:	68fb      	ldr	r3, [r7, #12]
24005c2c:	2201      	movs	r2, #1
24005c2e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
24005c30:	68fb      	ldr	r3, [r7, #12]
24005c32:	2201      	movs	r2, #1
24005c34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
24005c38:	68fb      	ldr	r3, [r7, #12]
24005c3a:	2200      	movs	r2, #0
24005c3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
24005c40:	2301      	movs	r3, #1
24005c42:	e1cf      	b.n	24005fe4 <HAL_DMA_PollForTransfer+0x70c>
      }
    }

    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
24005c44:	687b      	ldr	r3, [r7, #4]
24005c46:	f1b3 3fff 	cmp.w	r3, #4294967295
24005c4a:	d012      	beq.n	24005c72 <HAL_DMA_PollForTransfer+0x39a>
    {
      if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
24005c4c:	f7fd f850 	bl	24002cf0 <HAL_GetTick>
24005c50:	4602      	mov	r2, r0
24005c52:	697b      	ldr	r3, [r7, #20]
24005c54:	1ad3      	subs	r3, r2, r3
24005c56:	687a      	ldr	r2, [r7, #4]
24005c58:	429a      	cmp	r2, r3
24005c5a:	d302      	bcc.n	24005c62 <HAL_DMA_PollForTransfer+0x38a>
24005c5c:	687b      	ldr	r3, [r7, #4]
24005c5e:	2b00      	cmp	r3, #0
24005c60:	d107      	bne.n	24005c72 <HAL_DMA_PollForTransfer+0x39a>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
24005c62:	68fb      	ldr	r3, [r7, #12]
24005c64:	2220      	movs	r2, #32
24005c66:	655a      	str	r2, [r3, #84]	@ 0x54

        /* if timeout then abort the current transfer */
        /* No need to check return value: as in this case we will return HAL_ERROR with HAL_DMA_ERROR_TIMEOUT error code  */
        (void) HAL_DMA_Abort(hdma);
24005c68:	68f8      	ldr	r0, [r7, #12]
24005c6a:	f7ff f8d1 	bl	24004e10 <HAL_DMA_Abort>
              - Clear the transfer error flags
              - Unlock
              - Set the State
          */

        return HAL_ERROR;
24005c6e:	2301      	movs	r3, #1
24005c70:	e1b8      	b.n	24005fe4 <HAL_DMA_PollForTransfer+0x70c>
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24005c72:	68fb      	ldr	r3, [r7, #12]
24005c74:	681b      	ldr	r3, [r3, #0]
24005c76:	4a81      	ldr	r2, [pc, #516]	@ (24005e7c <HAL_DMA_PollForTransfer+0x5a4>)
24005c78:	4293      	cmp	r3, r2
24005c7a:	d072      	beq.n	24005d62 <HAL_DMA_PollForTransfer+0x48a>
24005c7c:	68fb      	ldr	r3, [r7, #12]
24005c7e:	681b      	ldr	r3, [r3, #0]
24005c80:	4a7f      	ldr	r2, [pc, #508]	@ (24005e80 <HAL_DMA_PollForTransfer+0x5a8>)
24005c82:	4293      	cmp	r3, r2
24005c84:	d06d      	beq.n	24005d62 <HAL_DMA_PollForTransfer+0x48a>
24005c86:	68fb      	ldr	r3, [r7, #12]
24005c88:	681b      	ldr	r3, [r3, #0]
24005c8a:	4a7e      	ldr	r2, [pc, #504]	@ (24005e84 <HAL_DMA_PollForTransfer+0x5ac>)
24005c8c:	4293      	cmp	r3, r2
24005c8e:	d068      	beq.n	24005d62 <HAL_DMA_PollForTransfer+0x48a>
24005c90:	68fb      	ldr	r3, [r7, #12]
24005c92:	681b      	ldr	r3, [r3, #0]
24005c94:	4a7c      	ldr	r2, [pc, #496]	@ (24005e88 <HAL_DMA_PollForTransfer+0x5b0>)
24005c96:	4293      	cmp	r3, r2
24005c98:	d063      	beq.n	24005d62 <HAL_DMA_PollForTransfer+0x48a>
24005c9a:	68fb      	ldr	r3, [r7, #12]
24005c9c:	681b      	ldr	r3, [r3, #0]
24005c9e:	4a7b      	ldr	r2, [pc, #492]	@ (24005e8c <HAL_DMA_PollForTransfer+0x5b4>)
24005ca0:	4293      	cmp	r3, r2
24005ca2:	d05e      	beq.n	24005d62 <HAL_DMA_PollForTransfer+0x48a>
24005ca4:	68fb      	ldr	r3, [r7, #12]
24005ca6:	681b      	ldr	r3, [r3, #0]
24005ca8:	4a79      	ldr	r2, [pc, #484]	@ (24005e90 <HAL_DMA_PollForTransfer+0x5b8>)
24005caa:	4293      	cmp	r3, r2
24005cac:	d059      	beq.n	24005d62 <HAL_DMA_PollForTransfer+0x48a>
24005cae:	68fb      	ldr	r3, [r7, #12]
24005cb0:	681b      	ldr	r3, [r3, #0]
24005cb2:	4a78      	ldr	r2, [pc, #480]	@ (24005e94 <HAL_DMA_PollForTransfer+0x5bc>)
24005cb4:	4293      	cmp	r3, r2
24005cb6:	d054      	beq.n	24005d62 <HAL_DMA_PollForTransfer+0x48a>
24005cb8:	68fb      	ldr	r3, [r7, #12]
24005cba:	681b      	ldr	r3, [r3, #0]
24005cbc:	4a76      	ldr	r2, [pc, #472]	@ (24005e98 <HAL_DMA_PollForTransfer+0x5c0>)
24005cbe:	4293      	cmp	r3, r2
24005cc0:	d04f      	beq.n	24005d62 <HAL_DMA_PollForTransfer+0x48a>
24005cc2:	68fb      	ldr	r3, [r7, #12]
24005cc4:	681b      	ldr	r3, [r3, #0]
24005cc6:	4a75      	ldr	r2, [pc, #468]	@ (24005e9c <HAL_DMA_PollForTransfer+0x5c4>)
24005cc8:	4293      	cmp	r3, r2
24005cca:	d04a      	beq.n	24005d62 <HAL_DMA_PollForTransfer+0x48a>
24005ccc:	68fb      	ldr	r3, [r7, #12]
24005cce:	681b      	ldr	r3, [r3, #0]
24005cd0:	4a73      	ldr	r2, [pc, #460]	@ (24005ea0 <HAL_DMA_PollForTransfer+0x5c8>)
24005cd2:	4293      	cmp	r3, r2
24005cd4:	d045      	beq.n	24005d62 <HAL_DMA_PollForTransfer+0x48a>
24005cd6:	68fb      	ldr	r3, [r7, #12]
24005cd8:	681b      	ldr	r3, [r3, #0]
24005cda:	4a72      	ldr	r2, [pc, #456]	@ (24005ea4 <HAL_DMA_PollForTransfer+0x5cc>)
24005cdc:	4293      	cmp	r3, r2
24005cde:	d040      	beq.n	24005d62 <HAL_DMA_PollForTransfer+0x48a>
24005ce0:	68fb      	ldr	r3, [r7, #12]
24005ce2:	681b      	ldr	r3, [r3, #0]
24005ce4:	4a70      	ldr	r2, [pc, #448]	@ (24005ea8 <HAL_DMA_PollForTransfer+0x5d0>)
24005ce6:	4293      	cmp	r3, r2
24005ce8:	d03b      	beq.n	24005d62 <HAL_DMA_PollForTransfer+0x48a>
24005cea:	68fb      	ldr	r3, [r7, #12]
24005cec:	681b      	ldr	r3, [r3, #0]
24005cee:	4a6f      	ldr	r2, [pc, #444]	@ (24005eac <HAL_DMA_PollForTransfer+0x5d4>)
24005cf0:	4293      	cmp	r3, r2
24005cf2:	d036      	beq.n	24005d62 <HAL_DMA_PollForTransfer+0x48a>
24005cf4:	68fb      	ldr	r3, [r7, #12]
24005cf6:	681b      	ldr	r3, [r3, #0]
24005cf8:	4a6d      	ldr	r2, [pc, #436]	@ (24005eb0 <HAL_DMA_PollForTransfer+0x5d8>)
24005cfa:	4293      	cmp	r3, r2
24005cfc:	d031      	beq.n	24005d62 <HAL_DMA_PollForTransfer+0x48a>
24005cfe:	68fb      	ldr	r3, [r7, #12]
24005d00:	681b      	ldr	r3, [r3, #0]
24005d02:	4a6c      	ldr	r2, [pc, #432]	@ (24005eb4 <HAL_DMA_PollForTransfer+0x5dc>)
24005d04:	4293      	cmp	r3, r2
24005d06:	d02c      	beq.n	24005d62 <HAL_DMA_PollForTransfer+0x48a>
24005d08:	68fb      	ldr	r3, [r7, #12]
24005d0a:	681b      	ldr	r3, [r3, #0]
24005d0c:	4a6a      	ldr	r2, [pc, #424]	@ (24005eb8 <HAL_DMA_PollForTransfer+0x5e0>)
24005d0e:	4293      	cmp	r3, r2
24005d10:	d027      	beq.n	24005d62 <HAL_DMA_PollForTransfer+0x48a>
24005d12:	68fb      	ldr	r3, [r7, #12]
24005d14:	681b      	ldr	r3, [r3, #0]
24005d16:	4a69      	ldr	r2, [pc, #420]	@ (24005ebc <HAL_DMA_PollForTransfer+0x5e4>)
24005d18:	4293      	cmp	r3, r2
24005d1a:	d022      	beq.n	24005d62 <HAL_DMA_PollForTransfer+0x48a>
24005d1c:	68fb      	ldr	r3, [r7, #12]
24005d1e:	681b      	ldr	r3, [r3, #0]
24005d20:	4a67      	ldr	r2, [pc, #412]	@ (24005ec0 <HAL_DMA_PollForTransfer+0x5e8>)
24005d22:	4293      	cmp	r3, r2
24005d24:	d01d      	beq.n	24005d62 <HAL_DMA_PollForTransfer+0x48a>
24005d26:	68fb      	ldr	r3, [r7, #12]
24005d28:	681b      	ldr	r3, [r3, #0]
24005d2a:	4a66      	ldr	r2, [pc, #408]	@ (24005ec4 <HAL_DMA_PollForTransfer+0x5ec>)
24005d2c:	4293      	cmp	r3, r2
24005d2e:	d018      	beq.n	24005d62 <HAL_DMA_PollForTransfer+0x48a>
24005d30:	68fb      	ldr	r3, [r7, #12]
24005d32:	681b      	ldr	r3, [r3, #0]
24005d34:	4a64      	ldr	r2, [pc, #400]	@ (24005ec8 <HAL_DMA_PollForTransfer+0x5f0>)
24005d36:	4293      	cmp	r3, r2
24005d38:	d013      	beq.n	24005d62 <HAL_DMA_PollForTransfer+0x48a>
24005d3a:	68fb      	ldr	r3, [r7, #12]
24005d3c:	681b      	ldr	r3, [r3, #0]
24005d3e:	4a63      	ldr	r2, [pc, #396]	@ (24005ecc <HAL_DMA_PollForTransfer+0x5f4>)
24005d40:	4293      	cmp	r3, r2
24005d42:	d00e      	beq.n	24005d62 <HAL_DMA_PollForTransfer+0x48a>
24005d44:	68fb      	ldr	r3, [r7, #12]
24005d46:	681b      	ldr	r3, [r3, #0]
24005d48:	4a61      	ldr	r2, [pc, #388]	@ (24005ed0 <HAL_DMA_PollForTransfer+0x5f8>)
24005d4a:	4293      	cmp	r3, r2
24005d4c:	d009      	beq.n	24005d62 <HAL_DMA_PollForTransfer+0x48a>
24005d4e:	68fb      	ldr	r3, [r7, #12]
24005d50:	681b      	ldr	r3, [r3, #0]
24005d52:	4a60      	ldr	r2, [pc, #384]	@ (24005ed4 <HAL_DMA_PollForTransfer+0x5fc>)
24005d54:	4293      	cmp	r3, r2
24005d56:	d004      	beq.n	24005d62 <HAL_DMA_PollForTransfer+0x48a>
24005d58:	68fb      	ldr	r3, [r7, #12]
24005d5a:	681b      	ldr	r3, [r3, #0]
24005d5c:	4a5e      	ldr	r2, [pc, #376]	@ (24005ed8 <HAL_DMA_PollForTransfer+0x600>)
24005d5e:	4293      	cmp	r3, r2
24005d60:	d101      	bne.n	24005d66 <HAL_DMA_PollForTransfer+0x48e>
24005d62:	2301      	movs	r3, #1
24005d64:	e000      	b.n	24005d68 <HAL_DMA_PollForTransfer+0x490>
24005d66:	2300      	movs	r3, #0
24005d68:	2b00      	cmp	r3, #0
24005d6a:	d029      	beq.n	24005dc0 <HAL_DMA_PollForTransfer+0x4e8>
    {
      /* Check for DMAMUX Request generator (if used) overrun status */
      if(hdma->DMAmuxRequestGen != 0U)
24005d6c:	68fb      	ldr	r3, [r7, #12]
24005d6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
24005d70:	2b00      	cmp	r3, #0
24005d72:	d012      	beq.n	24005d9a <HAL_DMA_PollForTransfer+0x4c2>
      {
        /* if using DMAMUX request generator Check for DMAMUX request generator overrun */
        if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
24005d74:	68fb      	ldr	r3, [r7, #12]
24005d76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
24005d78:	681a      	ldr	r2, [r3, #0]
24005d7a:	68fb      	ldr	r3, [r7, #12]
24005d7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
24005d7e:	4013      	ands	r3, r2
24005d80:	2b00      	cmp	r3, #0
24005d82:	d00a      	beq.n	24005d9a <HAL_DMA_PollForTransfer+0x4c2>
        {
          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24005d84:	68fb      	ldr	r3, [r7, #12]
24005d86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
24005d88:	68fa      	ldr	r2, [r7, #12]
24005d8a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
24005d8c:	605a      	str	r2, [r3, #4]

          /* Update error code */
          hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
24005d8e:	68fb      	ldr	r3, [r7, #12]
24005d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
24005d92:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
24005d96:	68fb      	ldr	r3, [r7, #12]
24005d98:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }

      /* Check for DMAMUX Synchronization overrun */
      if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
24005d9a:	68fb      	ldr	r3, [r7, #12]
24005d9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
24005d9e:	681a      	ldr	r2, [r3, #0]
24005da0:	68fb      	ldr	r3, [r7, #12]
24005da2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
24005da4:	4013      	ands	r3, r2
24005da6:	2b00      	cmp	r3, #0
24005da8:	d00a      	beq.n	24005dc0 <HAL_DMA_PollForTransfer+0x4e8>
      {
        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24005daa:	68fb      	ldr	r3, [r7, #12]
24005dac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
24005dae:	68fa      	ldr	r2, [r7, #12]
24005db0:	6e92      	ldr	r2, [r2, #104]	@ 0x68
24005db2:	605a      	str	r2, [r3, #4]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
24005db4:	68fb      	ldr	r3, [r7, #12]
24005db6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
24005db8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
24005dbc:	68fb      	ldr	r3, [r7, #12]
24005dbe:	655a      	str	r2, [r3, #84]	@ 0x54
  while(((*isr_reg) & cpltlevel_mask) == 0U)
24005dc0:	6a3b      	ldr	r3, [r7, #32]
24005dc2:	681a      	ldr	r2, [r3, #0]
24005dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
24005dc6:	4013      	ands	r3, r2
24005dc8:	2b00      	cmp	r3, #0
24005dca:	f43f ae4c 	beq.w	24005a66 <HAL_DMA_PollForTransfer+0x18e>
    }
  }


  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
24005dce:	7afb      	ldrb	r3, [r7, #11]
24005dd0:	2b00      	cmp	r3, #0
24005dd2:	f040 80a0 	bne.w	24005f16 <HAL_DMA_PollForTransfer+0x63e>
  {
    /* Clear the half transfer and transfer complete flags */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24005dd6:	68fb      	ldr	r3, [r7, #12]
24005dd8:	681b      	ldr	r3, [r3, #0]
24005dda:	4a28      	ldr	r2, [pc, #160]	@ (24005e7c <HAL_DMA_PollForTransfer+0x5a4>)
24005ddc:	4293      	cmp	r3, r2
24005dde:	d04a      	beq.n	24005e76 <HAL_DMA_PollForTransfer+0x59e>
24005de0:	68fb      	ldr	r3, [r7, #12]
24005de2:	681b      	ldr	r3, [r3, #0]
24005de4:	4a26      	ldr	r2, [pc, #152]	@ (24005e80 <HAL_DMA_PollForTransfer+0x5a8>)
24005de6:	4293      	cmp	r3, r2
24005de8:	d045      	beq.n	24005e76 <HAL_DMA_PollForTransfer+0x59e>
24005dea:	68fb      	ldr	r3, [r7, #12]
24005dec:	681b      	ldr	r3, [r3, #0]
24005dee:	4a25      	ldr	r2, [pc, #148]	@ (24005e84 <HAL_DMA_PollForTransfer+0x5ac>)
24005df0:	4293      	cmp	r3, r2
24005df2:	d040      	beq.n	24005e76 <HAL_DMA_PollForTransfer+0x59e>
24005df4:	68fb      	ldr	r3, [r7, #12]
24005df6:	681b      	ldr	r3, [r3, #0]
24005df8:	4a23      	ldr	r2, [pc, #140]	@ (24005e88 <HAL_DMA_PollForTransfer+0x5b0>)
24005dfa:	4293      	cmp	r3, r2
24005dfc:	d03b      	beq.n	24005e76 <HAL_DMA_PollForTransfer+0x59e>
24005dfe:	68fb      	ldr	r3, [r7, #12]
24005e00:	681b      	ldr	r3, [r3, #0]
24005e02:	4a22      	ldr	r2, [pc, #136]	@ (24005e8c <HAL_DMA_PollForTransfer+0x5b4>)
24005e04:	4293      	cmp	r3, r2
24005e06:	d036      	beq.n	24005e76 <HAL_DMA_PollForTransfer+0x59e>
24005e08:	68fb      	ldr	r3, [r7, #12]
24005e0a:	681b      	ldr	r3, [r3, #0]
24005e0c:	4a20      	ldr	r2, [pc, #128]	@ (24005e90 <HAL_DMA_PollForTransfer+0x5b8>)
24005e0e:	4293      	cmp	r3, r2
24005e10:	d031      	beq.n	24005e76 <HAL_DMA_PollForTransfer+0x59e>
24005e12:	68fb      	ldr	r3, [r7, #12]
24005e14:	681b      	ldr	r3, [r3, #0]
24005e16:	4a1f      	ldr	r2, [pc, #124]	@ (24005e94 <HAL_DMA_PollForTransfer+0x5bc>)
24005e18:	4293      	cmp	r3, r2
24005e1a:	d02c      	beq.n	24005e76 <HAL_DMA_PollForTransfer+0x59e>
24005e1c:	68fb      	ldr	r3, [r7, #12]
24005e1e:	681b      	ldr	r3, [r3, #0]
24005e20:	4a1d      	ldr	r2, [pc, #116]	@ (24005e98 <HAL_DMA_PollForTransfer+0x5c0>)
24005e22:	4293      	cmp	r3, r2
24005e24:	d027      	beq.n	24005e76 <HAL_DMA_PollForTransfer+0x59e>
24005e26:	68fb      	ldr	r3, [r7, #12]
24005e28:	681b      	ldr	r3, [r3, #0]
24005e2a:	4a1c      	ldr	r2, [pc, #112]	@ (24005e9c <HAL_DMA_PollForTransfer+0x5c4>)
24005e2c:	4293      	cmp	r3, r2
24005e2e:	d022      	beq.n	24005e76 <HAL_DMA_PollForTransfer+0x59e>
24005e30:	68fb      	ldr	r3, [r7, #12]
24005e32:	681b      	ldr	r3, [r3, #0]
24005e34:	4a1a      	ldr	r2, [pc, #104]	@ (24005ea0 <HAL_DMA_PollForTransfer+0x5c8>)
24005e36:	4293      	cmp	r3, r2
24005e38:	d01d      	beq.n	24005e76 <HAL_DMA_PollForTransfer+0x59e>
24005e3a:	68fb      	ldr	r3, [r7, #12]
24005e3c:	681b      	ldr	r3, [r3, #0]
24005e3e:	4a19      	ldr	r2, [pc, #100]	@ (24005ea4 <HAL_DMA_PollForTransfer+0x5cc>)
24005e40:	4293      	cmp	r3, r2
24005e42:	d018      	beq.n	24005e76 <HAL_DMA_PollForTransfer+0x59e>
24005e44:	68fb      	ldr	r3, [r7, #12]
24005e46:	681b      	ldr	r3, [r3, #0]
24005e48:	4a17      	ldr	r2, [pc, #92]	@ (24005ea8 <HAL_DMA_PollForTransfer+0x5d0>)
24005e4a:	4293      	cmp	r3, r2
24005e4c:	d013      	beq.n	24005e76 <HAL_DMA_PollForTransfer+0x59e>
24005e4e:	68fb      	ldr	r3, [r7, #12]
24005e50:	681b      	ldr	r3, [r3, #0]
24005e52:	4a16      	ldr	r2, [pc, #88]	@ (24005eac <HAL_DMA_PollForTransfer+0x5d4>)
24005e54:	4293      	cmp	r3, r2
24005e56:	d00e      	beq.n	24005e76 <HAL_DMA_PollForTransfer+0x59e>
24005e58:	68fb      	ldr	r3, [r7, #12]
24005e5a:	681b      	ldr	r3, [r3, #0]
24005e5c:	4a14      	ldr	r2, [pc, #80]	@ (24005eb0 <HAL_DMA_PollForTransfer+0x5d8>)
24005e5e:	4293      	cmp	r3, r2
24005e60:	d009      	beq.n	24005e76 <HAL_DMA_PollForTransfer+0x59e>
24005e62:	68fb      	ldr	r3, [r7, #12]
24005e64:	681b      	ldr	r3, [r3, #0]
24005e66:	4a13      	ldr	r2, [pc, #76]	@ (24005eb4 <HAL_DMA_PollForTransfer+0x5dc>)
24005e68:	4293      	cmp	r3, r2
24005e6a:	d004      	beq.n	24005e76 <HAL_DMA_PollForTransfer+0x59e>
24005e6c:	68fb      	ldr	r3, [r7, #12]
24005e6e:	681b      	ldr	r3, [r3, #0]
24005e70:	4a11      	ldr	r2, [pc, #68]	@ (24005eb8 <HAL_DMA_PollForTransfer+0x5e0>)
24005e72:	4293      	cmp	r3, r2
24005e74:	d132      	bne.n	24005edc <HAL_DMA_PollForTransfer+0x604>
24005e76:	2301      	movs	r3, #1
24005e78:	e031      	b.n	24005ede <HAL_DMA_PollForTransfer+0x606>
24005e7a:	bf00      	nop
24005e7c:	40020010 	.word	0x40020010
24005e80:	40020028 	.word	0x40020028
24005e84:	40020040 	.word	0x40020040
24005e88:	40020058 	.word	0x40020058
24005e8c:	40020070 	.word	0x40020070
24005e90:	40020088 	.word	0x40020088
24005e94:	400200a0 	.word	0x400200a0
24005e98:	400200b8 	.word	0x400200b8
24005e9c:	40020410 	.word	0x40020410
24005ea0:	40020428 	.word	0x40020428
24005ea4:	40020440 	.word	0x40020440
24005ea8:	40020458 	.word	0x40020458
24005eac:	40020470 	.word	0x40020470
24005eb0:	40020488 	.word	0x40020488
24005eb4:	400204a0 	.word	0x400204a0
24005eb8:	400204b8 	.word	0x400204b8
24005ebc:	58025408 	.word	0x58025408
24005ec0:	5802541c 	.word	0x5802541c
24005ec4:	58025430 	.word	0x58025430
24005ec8:	58025444 	.word	0x58025444
24005ecc:	58025458 	.word	0x58025458
24005ed0:	5802546c 	.word	0x5802546c
24005ed4:	58025480 	.word	0x58025480
24005ed8:	58025494 	.word	0x58025494
24005edc:	2300      	movs	r3, #0
24005ede:	2b00      	cmp	r3, #0
24005ee0:	d008      	beq.n	24005ef4 <HAL_DMA_PollForTransfer+0x61c>
    {
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << (hdma->StreamIndex & 0x1FU);
24005ee2:	68fb      	ldr	r3, [r7, #12]
24005ee4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
24005ee6:	f003 031f 	and.w	r3, r3, #31
24005eea:	2230      	movs	r2, #48	@ 0x30
24005eec:	409a      	lsls	r2, r3
24005eee:	69fb      	ldr	r3, [r7, #28]
24005ef0:	601a      	str	r2, [r3, #0]
24005ef2:	e007      	b.n	24005f04 <HAL_DMA_PollForTransfer+0x62c>
    }
    else /* BDMA channel */
    {
      (*ifcr_reg) = (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU));
24005ef4:	68fb      	ldr	r3, [r7, #12]
24005ef6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
24005ef8:	f003 031f 	and.w	r3, r3, #31
24005efc:	2202      	movs	r2, #2
24005efe:	409a      	lsls	r2, r3
24005f00:	69fb      	ldr	r3, [r7, #28]
24005f02:	601a      	str	r2, [r3, #0]
    }

    hdma->State = HAL_DMA_STATE_READY;
24005f04:	68fb      	ldr	r3, [r7, #12]
24005f06:	2201      	movs	r2, #1
24005f08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
24005f0c:	68fb      	ldr	r3, [r7, #12]
24005f0e:	2200      	movs	r2, #0
24005f10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
24005f14:	e065      	b.n	24005fe2 <HAL_DMA_PollForTransfer+0x70a>
  }
  else /*CompleteLevel = HAL_DMA_HALF_TRANSFER*/
  {
    /* Clear the half transfer and transfer complete flags */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24005f16:	68fb      	ldr	r3, [r7, #12]
24005f18:	681b      	ldr	r3, [r3, #0]
24005f1a:	4a34      	ldr	r2, [pc, #208]	@ (24005fec <HAL_DMA_PollForTransfer+0x714>)
24005f1c:	4293      	cmp	r3, r2
24005f1e:	d04a      	beq.n	24005fb6 <HAL_DMA_PollForTransfer+0x6de>
24005f20:	68fb      	ldr	r3, [r7, #12]
24005f22:	681b      	ldr	r3, [r3, #0]
24005f24:	4a32      	ldr	r2, [pc, #200]	@ (24005ff0 <HAL_DMA_PollForTransfer+0x718>)
24005f26:	4293      	cmp	r3, r2
24005f28:	d045      	beq.n	24005fb6 <HAL_DMA_PollForTransfer+0x6de>
24005f2a:	68fb      	ldr	r3, [r7, #12]
24005f2c:	681b      	ldr	r3, [r3, #0]
24005f2e:	4a31      	ldr	r2, [pc, #196]	@ (24005ff4 <HAL_DMA_PollForTransfer+0x71c>)
24005f30:	4293      	cmp	r3, r2
24005f32:	d040      	beq.n	24005fb6 <HAL_DMA_PollForTransfer+0x6de>
24005f34:	68fb      	ldr	r3, [r7, #12]
24005f36:	681b      	ldr	r3, [r3, #0]
24005f38:	4a2f      	ldr	r2, [pc, #188]	@ (24005ff8 <HAL_DMA_PollForTransfer+0x720>)
24005f3a:	4293      	cmp	r3, r2
24005f3c:	d03b      	beq.n	24005fb6 <HAL_DMA_PollForTransfer+0x6de>
24005f3e:	68fb      	ldr	r3, [r7, #12]
24005f40:	681b      	ldr	r3, [r3, #0]
24005f42:	4a2e      	ldr	r2, [pc, #184]	@ (24005ffc <HAL_DMA_PollForTransfer+0x724>)
24005f44:	4293      	cmp	r3, r2
24005f46:	d036      	beq.n	24005fb6 <HAL_DMA_PollForTransfer+0x6de>
24005f48:	68fb      	ldr	r3, [r7, #12]
24005f4a:	681b      	ldr	r3, [r3, #0]
24005f4c:	4a2c      	ldr	r2, [pc, #176]	@ (24006000 <HAL_DMA_PollForTransfer+0x728>)
24005f4e:	4293      	cmp	r3, r2
24005f50:	d031      	beq.n	24005fb6 <HAL_DMA_PollForTransfer+0x6de>
24005f52:	68fb      	ldr	r3, [r7, #12]
24005f54:	681b      	ldr	r3, [r3, #0]
24005f56:	4a2b      	ldr	r2, [pc, #172]	@ (24006004 <HAL_DMA_PollForTransfer+0x72c>)
24005f58:	4293      	cmp	r3, r2
24005f5a:	d02c      	beq.n	24005fb6 <HAL_DMA_PollForTransfer+0x6de>
24005f5c:	68fb      	ldr	r3, [r7, #12]
24005f5e:	681b      	ldr	r3, [r3, #0]
24005f60:	4a29      	ldr	r2, [pc, #164]	@ (24006008 <HAL_DMA_PollForTransfer+0x730>)
24005f62:	4293      	cmp	r3, r2
24005f64:	d027      	beq.n	24005fb6 <HAL_DMA_PollForTransfer+0x6de>
24005f66:	68fb      	ldr	r3, [r7, #12]
24005f68:	681b      	ldr	r3, [r3, #0]
24005f6a:	4a28      	ldr	r2, [pc, #160]	@ (2400600c <HAL_DMA_PollForTransfer+0x734>)
24005f6c:	4293      	cmp	r3, r2
24005f6e:	d022      	beq.n	24005fb6 <HAL_DMA_PollForTransfer+0x6de>
24005f70:	68fb      	ldr	r3, [r7, #12]
24005f72:	681b      	ldr	r3, [r3, #0]
24005f74:	4a26      	ldr	r2, [pc, #152]	@ (24006010 <HAL_DMA_PollForTransfer+0x738>)
24005f76:	4293      	cmp	r3, r2
24005f78:	d01d      	beq.n	24005fb6 <HAL_DMA_PollForTransfer+0x6de>
24005f7a:	68fb      	ldr	r3, [r7, #12]
24005f7c:	681b      	ldr	r3, [r3, #0]
24005f7e:	4a25      	ldr	r2, [pc, #148]	@ (24006014 <HAL_DMA_PollForTransfer+0x73c>)
24005f80:	4293      	cmp	r3, r2
24005f82:	d018      	beq.n	24005fb6 <HAL_DMA_PollForTransfer+0x6de>
24005f84:	68fb      	ldr	r3, [r7, #12]
24005f86:	681b      	ldr	r3, [r3, #0]
24005f88:	4a23      	ldr	r2, [pc, #140]	@ (24006018 <HAL_DMA_PollForTransfer+0x740>)
24005f8a:	4293      	cmp	r3, r2
24005f8c:	d013      	beq.n	24005fb6 <HAL_DMA_PollForTransfer+0x6de>
24005f8e:	68fb      	ldr	r3, [r7, #12]
24005f90:	681b      	ldr	r3, [r3, #0]
24005f92:	4a22      	ldr	r2, [pc, #136]	@ (2400601c <HAL_DMA_PollForTransfer+0x744>)
24005f94:	4293      	cmp	r3, r2
24005f96:	d00e      	beq.n	24005fb6 <HAL_DMA_PollForTransfer+0x6de>
24005f98:	68fb      	ldr	r3, [r7, #12]
24005f9a:	681b      	ldr	r3, [r3, #0]
24005f9c:	4a20      	ldr	r2, [pc, #128]	@ (24006020 <HAL_DMA_PollForTransfer+0x748>)
24005f9e:	4293      	cmp	r3, r2
24005fa0:	d009      	beq.n	24005fb6 <HAL_DMA_PollForTransfer+0x6de>
24005fa2:	68fb      	ldr	r3, [r7, #12]
24005fa4:	681b      	ldr	r3, [r3, #0]
24005fa6:	4a1f      	ldr	r2, [pc, #124]	@ (24006024 <HAL_DMA_PollForTransfer+0x74c>)
24005fa8:	4293      	cmp	r3, r2
24005faa:	d004      	beq.n	24005fb6 <HAL_DMA_PollForTransfer+0x6de>
24005fac:	68fb      	ldr	r3, [r7, #12]
24005fae:	681b      	ldr	r3, [r3, #0]
24005fb0:	4a1d      	ldr	r2, [pc, #116]	@ (24006028 <HAL_DMA_PollForTransfer+0x750>)
24005fb2:	4293      	cmp	r3, r2
24005fb4:	d101      	bne.n	24005fba <HAL_DMA_PollForTransfer+0x6e2>
24005fb6:	2301      	movs	r3, #1
24005fb8:	e000      	b.n	24005fbc <HAL_DMA_PollForTransfer+0x6e4>
24005fba:	2300      	movs	r3, #0
24005fbc:	2b00      	cmp	r3, #0
24005fbe:	d008      	beq.n	24005fd2 <HAL_DMA_PollForTransfer+0x6fa>
    {
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4) << (hdma->StreamIndex & 0x1FU);
24005fc0:	68fb      	ldr	r3, [r7, #12]
24005fc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
24005fc4:	f003 031f 	and.w	r3, r3, #31
24005fc8:	2210      	movs	r2, #16
24005fca:	409a      	lsls	r2, r3
24005fcc:	69fb      	ldr	r3, [r7, #28]
24005fce:	601a      	str	r2, [r3, #0]
24005fd0:	e007      	b.n	24005fe2 <HAL_DMA_PollForTransfer+0x70a>
    }
    else /* BDMA channel */
    {
      (*ifcr_reg) = (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU));
24005fd2:	68fb      	ldr	r3, [r7, #12]
24005fd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
24005fd6:	f003 031f 	and.w	r3, r3, #31
24005fda:	2204      	movs	r2, #4
24005fdc:	409a      	lsls	r2, r3
24005fde:	69fb      	ldr	r3, [r7, #28]
24005fe0:	601a      	str	r2, [r3, #0]
    }
  }

  return status;
24005fe2:	7efb      	ldrb	r3, [r7, #27]
}
24005fe4:	4618      	mov	r0, r3
24005fe6:	3728      	adds	r7, #40	@ 0x28
24005fe8:	46bd      	mov	sp, r7
24005fea:	bd80      	pop	{r7, pc}
24005fec:	40020010 	.word	0x40020010
24005ff0:	40020028 	.word	0x40020028
24005ff4:	40020040 	.word	0x40020040
24005ff8:	40020058 	.word	0x40020058
24005ffc:	40020070 	.word	0x40020070
24006000:	40020088 	.word	0x40020088
24006004:	400200a0 	.word	0x400200a0
24006008:	400200b8 	.word	0x400200b8
2400600c:	40020410 	.word	0x40020410
24006010:	40020428 	.word	0x40020428
24006014:	40020440 	.word	0x40020440
24006018:	40020458 	.word	0x40020458
2400601c:	40020470 	.word	0x40020470
24006020:	40020488 	.word	0x40020488
24006024:	400204a0 	.word	0x400204a0
24006028:	400204b8 	.word	0x400204b8

2400602c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
2400602c:	b580      	push	{r7, lr}
2400602e:	b08a      	sub	sp, #40	@ 0x28
24006030:	af00      	add	r7, sp, #0
24006032:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
24006034:	2300      	movs	r3, #0
24006036:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
24006038:	4b67      	ldr	r3, [pc, #412]	@ (240061d8 <HAL_DMA_IRQHandler+0x1ac>)
2400603a:	681b      	ldr	r3, [r3, #0]
2400603c:	4a67      	ldr	r2, [pc, #412]	@ (240061dc <HAL_DMA_IRQHandler+0x1b0>)
2400603e:	fba2 2303 	umull	r2, r3, r2, r3
24006042:	0a9b      	lsrs	r3, r3, #10
24006044:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
24006046:	687b      	ldr	r3, [r7, #4]
24006048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
2400604a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
2400604c:	687b      	ldr	r3, [r7, #4]
2400604e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
24006050:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
24006052:	6a3b      	ldr	r3, [r7, #32]
24006054:	681b      	ldr	r3, [r3, #0]
24006056:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
24006058:	69fb      	ldr	r3, [r7, #28]
2400605a:	681b      	ldr	r3, [r3, #0]
2400605c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
2400605e:	687b      	ldr	r3, [r7, #4]
24006060:	681b      	ldr	r3, [r3, #0]
24006062:	4a5f      	ldr	r2, [pc, #380]	@ (240061e0 <HAL_DMA_IRQHandler+0x1b4>)
24006064:	4293      	cmp	r3, r2
24006066:	d04a      	beq.n	240060fe <HAL_DMA_IRQHandler+0xd2>
24006068:	687b      	ldr	r3, [r7, #4]
2400606a:	681b      	ldr	r3, [r3, #0]
2400606c:	4a5d      	ldr	r2, [pc, #372]	@ (240061e4 <HAL_DMA_IRQHandler+0x1b8>)
2400606e:	4293      	cmp	r3, r2
24006070:	d045      	beq.n	240060fe <HAL_DMA_IRQHandler+0xd2>
24006072:	687b      	ldr	r3, [r7, #4]
24006074:	681b      	ldr	r3, [r3, #0]
24006076:	4a5c      	ldr	r2, [pc, #368]	@ (240061e8 <HAL_DMA_IRQHandler+0x1bc>)
24006078:	4293      	cmp	r3, r2
2400607a:	d040      	beq.n	240060fe <HAL_DMA_IRQHandler+0xd2>
2400607c:	687b      	ldr	r3, [r7, #4]
2400607e:	681b      	ldr	r3, [r3, #0]
24006080:	4a5a      	ldr	r2, [pc, #360]	@ (240061ec <HAL_DMA_IRQHandler+0x1c0>)
24006082:	4293      	cmp	r3, r2
24006084:	d03b      	beq.n	240060fe <HAL_DMA_IRQHandler+0xd2>
24006086:	687b      	ldr	r3, [r7, #4]
24006088:	681b      	ldr	r3, [r3, #0]
2400608a:	4a59      	ldr	r2, [pc, #356]	@ (240061f0 <HAL_DMA_IRQHandler+0x1c4>)
2400608c:	4293      	cmp	r3, r2
2400608e:	d036      	beq.n	240060fe <HAL_DMA_IRQHandler+0xd2>
24006090:	687b      	ldr	r3, [r7, #4]
24006092:	681b      	ldr	r3, [r3, #0]
24006094:	4a57      	ldr	r2, [pc, #348]	@ (240061f4 <HAL_DMA_IRQHandler+0x1c8>)
24006096:	4293      	cmp	r3, r2
24006098:	d031      	beq.n	240060fe <HAL_DMA_IRQHandler+0xd2>
2400609a:	687b      	ldr	r3, [r7, #4]
2400609c:	681b      	ldr	r3, [r3, #0]
2400609e:	4a56      	ldr	r2, [pc, #344]	@ (240061f8 <HAL_DMA_IRQHandler+0x1cc>)
240060a0:	4293      	cmp	r3, r2
240060a2:	d02c      	beq.n	240060fe <HAL_DMA_IRQHandler+0xd2>
240060a4:	687b      	ldr	r3, [r7, #4]
240060a6:	681b      	ldr	r3, [r3, #0]
240060a8:	4a54      	ldr	r2, [pc, #336]	@ (240061fc <HAL_DMA_IRQHandler+0x1d0>)
240060aa:	4293      	cmp	r3, r2
240060ac:	d027      	beq.n	240060fe <HAL_DMA_IRQHandler+0xd2>
240060ae:	687b      	ldr	r3, [r7, #4]
240060b0:	681b      	ldr	r3, [r3, #0]
240060b2:	4a53      	ldr	r2, [pc, #332]	@ (24006200 <HAL_DMA_IRQHandler+0x1d4>)
240060b4:	4293      	cmp	r3, r2
240060b6:	d022      	beq.n	240060fe <HAL_DMA_IRQHandler+0xd2>
240060b8:	687b      	ldr	r3, [r7, #4]
240060ba:	681b      	ldr	r3, [r3, #0]
240060bc:	4a51      	ldr	r2, [pc, #324]	@ (24006204 <HAL_DMA_IRQHandler+0x1d8>)
240060be:	4293      	cmp	r3, r2
240060c0:	d01d      	beq.n	240060fe <HAL_DMA_IRQHandler+0xd2>
240060c2:	687b      	ldr	r3, [r7, #4]
240060c4:	681b      	ldr	r3, [r3, #0]
240060c6:	4a50      	ldr	r2, [pc, #320]	@ (24006208 <HAL_DMA_IRQHandler+0x1dc>)
240060c8:	4293      	cmp	r3, r2
240060ca:	d018      	beq.n	240060fe <HAL_DMA_IRQHandler+0xd2>
240060cc:	687b      	ldr	r3, [r7, #4]
240060ce:	681b      	ldr	r3, [r3, #0]
240060d0:	4a4e      	ldr	r2, [pc, #312]	@ (2400620c <HAL_DMA_IRQHandler+0x1e0>)
240060d2:	4293      	cmp	r3, r2
240060d4:	d013      	beq.n	240060fe <HAL_DMA_IRQHandler+0xd2>
240060d6:	687b      	ldr	r3, [r7, #4]
240060d8:	681b      	ldr	r3, [r3, #0]
240060da:	4a4d      	ldr	r2, [pc, #308]	@ (24006210 <HAL_DMA_IRQHandler+0x1e4>)
240060dc:	4293      	cmp	r3, r2
240060de:	d00e      	beq.n	240060fe <HAL_DMA_IRQHandler+0xd2>
240060e0:	687b      	ldr	r3, [r7, #4]
240060e2:	681b      	ldr	r3, [r3, #0]
240060e4:	4a4b      	ldr	r2, [pc, #300]	@ (24006214 <HAL_DMA_IRQHandler+0x1e8>)
240060e6:	4293      	cmp	r3, r2
240060e8:	d009      	beq.n	240060fe <HAL_DMA_IRQHandler+0xd2>
240060ea:	687b      	ldr	r3, [r7, #4]
240060ec:	681b      	ldr	r3, [r3, #0]
240060ee:	4a4a      	ldr	r2, [pc, #296]	@ (24006218 <HAL_DMA_IRQHandler+0x1ec>)
240060f0:	4293      	cmp	r3, r2
240060f2:	d004      	beq.n	240060fe <HAL_DMA_IRQHandler+0xd2>
240060f4:	687b      	ldr	r3, [r7, #4]
240060f6:	681b      	ldr	r3, [r3, #0]
240060f8:	4a48      	ldr	r2, [pc, #288]	@ (2400621c <HAL_DMA_IRQHandler+0x1f0>)
240060fa:	4293      	cmp	r3, r2
240060fc:	d101      	bne.n	24006102 <HAL_DMA_IRQHandler+0xd6>
240060fe:	2301      	movs	r3, #1
24006100:	e000      	b.n	24006104 <HAL_DMA_IRQHandler+0xd8>
24006102:	2300      	movs	r3, #0
24006104:	2b00      	cmp	r3, #0
24006106:	f000 842b 	beq.w	24006960 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
2400610a:	687b      	ldr	r3, [r7, #4]
2400610c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
2400610e:	f003 031f 	and.w	r3, r3, #31
24006112:	2208      	movs	r2, #8
24006114:	409a      	lsls	r2, r3
24006116:	69bb      	ldr	r3, [r7, #24]
24006118:	4013      	ands	r3, r2
2400611a:	2b00      	cmp	r3, #0
2400611c:	f000 80a2 	beq.w	24006264 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
24006120:	687b      	ldr	r3, [r7, #4]
24006122:	681b      	ldr	r3, [r3, #0]
24006124:	4a2e      	ldr	r2, [pc, #184]	@ (240061e0 <HAL_DMA_IRQHandler+0x1b4>)
24006126:	4293      	cmp	r3, r2
24006128:	d04a      	beq.n	240061c0 <HAL_DMA_IRQHandler+0x194>
2400612a:	687b      	ldr	r3, [r7, #4]
2400612c:	681b      	ldr	r3, [r3, #0]
2400612e:	4a2d      	ldr	r2, [pc, #180]	@ (240061e4 <HAL_DMA_IRQHandler+0x1b8>)
24006130:	4293      	cmp	r3, r2
24006132:	d045      	beq.n	240061c0 <HAL_DMA_IRQHandler+0x194>
24006134:	687b      	ldr	r3, [r7, #4]
24006136:	681b      	ldr	r3, [r3, #0]
24006138:	4a2b      	ldr	r2, [pc, #172]	@ (240061e8 <HAL_DMA_IRQHandler+0x1bc>)
2400613a:	4293      	cmp	r3, r2
2400613c:	d040      	beq.n	240061c0 <HAL_DMA_IRQHandler+0x194>
2400613e:	687b      	ldr	r3, [r7, #4]
24006140:	681b      	ldr	r3, [r3, #0]
24006142:	4a2a      	ldr	r2, [pc, #168]	@ (240061ec <HAL_DMA_IRQHandler+0x1c0>)
24006144:	4293      	cmp	r3, r2
24006146:	d03b      	beq.n	240061c0 <HAL_DMA_IRQHandler+0x194>
24006148:	687b      	ldr	r3, [r7, #4]
2400614a:	681b      	ldr	r3, [r3, #0]
2400614c:	4a28      	ldr	r2, [pc, #160]	@ (240061f0 <HAL_DMA_IRQHandler+0x1c4>)
2400614e:	4293      	cmp	r3, r2
24006150:	d036      	beq.n	240061c0 <HAL_DMA_IRQHandler+0x194>
24006152:	687b      	ldr	r3, [r7, #4]
24006154:	681b      	ldr	r3, [r3, #0]
24006156:	4a27      	ldr	r2, [pc, #156]	@ (240061f4 <HAL_DMA_IRQHandler+0x1c8>)
24006158:	4293      	cmp	r3, r2
2400615a:	d031      	beq.n	240061c0 <HAL_DMA_IRQHandler+0x194>
2400615c:	687b      	ldr	r3, [r7, #4]
2400615e:	681b      	ldr	r3, [r3, #0]
24006160:	4a25      	ldr	r2, [pc, #148]	@ (240061f8 <HAL_DMA_IRQHandler+0x1cc>)
24006162:	4293      	cmp	r3, r2
24006164:	d02c      	beq.n	240061c0 <HAL_DMA_IRQHandler+0x194>
24006166:	687b      	ldr	r3, [r7, #4]
24006168:	681b      	ldr	r3, [r3, #0]
2400616a:	4a24      	ldr	r2, [pc, #144]	@ (240061fc <HAL_DMA_IRQHandler+0x1d0>)
2400616c:	4293      	cmp	r3, r2
2400616e:	d027      	beq.n	240061c0 <HAL_DMA_IRQHandler+0x194>
24006170:	687b      	ldr	r3, [r7, #4]
24006172:	681b      	ldr	r3, [r3, #0]
24006174:	4a22      	ldr	r2, [pc, #136]	@ (24006200 <HAL_DMA_IRQHandler+0x1d4>)
24006176:	4293      	cmp	r3, r2
24006178:	d022      	beq.n	240061c0 <HAL_DMA_IRQHandler+0x194>
2400617a:	687b      	ldr	r3, [r7, #4]
2400617c:	681b      	ldr	r3, [r3, #0]
2400617e:	4a21      	ldr	r2, [pc, #132]	@ (24006204 <HAL_DMA_IRQHandler+0x1d8>)
24006180:	4293      	cmp	r3, r2
24006182:	d01d      	beq.n	240061c0 <HAL_DMA_IRQHandler+0x194>
24006184:	687b      	ldr	r3, [r7, #4]
24006186:	681b      	ldr	r3, [r3, #0]
24006188:	4a1f      	ldr	r2, [pc, #124]	@ (24006208 <HAL_DMA_IRQHandler+0x1dc>)
2400618a:	4293      	cmp	r3, r2
2400618c:	d018      	beq.n	240061c0 <HAL_DMA_IRQHandler+0x194>
2400618e:	687b      	ldr	r3, [r7, #4]
24006190:	681b      	ldr	r3, [r3, #0]
24006192:	4a1e      	ldr	r2, [pc, #120]	@ (2400620c <HAL_DMA_IRQHandler+0x1e0>)
24006194:	4293      	cmp	r3, r2
24006196:	d013      	beq.n	240061c0 <HAL_DMA_IRQHandler+0x194>
24006198:	687b      	ldr	r3, [r7, #4]
2400619a:	681b      	ldr	r3, [r3, #0]
2400619c:	4a1c      	ldr	r2, [pc, #112]	@ (24006210 <HAL_DMA_IRQHandler+0x1e4>)
2400619e:	4293      	cmp	r3, r2
240061a0:	d00e      	beq.n	240061c0 <HAL_DMA_IRQHandler+0x194>
240061a2:	687b      	ldr	r3, [r7, #4]
240061a4:	681b      	ldr	r3, [r3, #0]
240061a6:	4a1b      	ldr	r2, [pc, #108]	@ (24006214 <HAL_DMA_IRQHandler+0x1e8>)
240061a8:	4293      	cmp	r3, r2
240061aa:	d009      	beq.n	240061c0 <HAL_DMA_IRQHandler+0x194>
240061ac:	687b      	ldr	r3, [r7, #4]
240061ae:	681b      	ldr	r3, [r3, #0]
240061b0:	4a19      	ldr	r2, [pc, #100]	@ (24006218 <HAL_DMA_IRQHandler+0x1ec>)
240061b2:	4293      	cmp	r3, r2
240061b4:	d004      	beq.n	240061c0 <HAL_DMA_IRQHandler+0x194>
240061b6:	687b      	ldr	r3, [r7, #4]
240061b8:	681b      	ldr	r3, [r3, #0]
240061ba:	4a18      	ldr	r2, [pc, #96]	@ (2400621c <HAL_DMA_IRQHandler+0x1f0>)
240061bc:	4293      	cmp	r3, r2
240061be:	d12f      	bne.n	24006220 <HAL_DMA_IRQHandler+0x1f4>
240061c0:	687b      	ldr	r3, [r7, #4]
240061c2:	681b      	ldr	r3, [r3, #0]
240061c4:	681b      	ldr	r3, [r3, #0]
240061c6:	f003 0304 	and.w	r3, r3, #4
240061ca:	2b00      	cmp	r3, #0
240061cc:	bf14      	ite	ne
240061ce:	2301      	movne	r3, #1
240061d0:	2300      	moveq	r3, #0
240061d2:	b2db      	uxtb	r3, r3
240061d4:	e02e      	b.n	24006234 <HAL_DMA_IRQHandler+0x208>
240061d6:	bf00      	nop
240061d8:	240004b8 	.word	0x240004b8
240061dc:	1b4e81b5 	.word	0x1b4e81b5
240061e0:	40020010 	.word	0x40020010
240061e4:	40020028 	.word	0x40020028
240061e8:	40020040 	.word	0x40020040
240061ec:	40020058 	.word	0x40020058
240061f0:	40020070 	.word	0x40020070
240061f4:	40020088 	.word	0x40020088
240061f8:	400200a0 	.word	0x400200a0
240061fc:	400200b8 	.word	0x400200b8
24006200:	40020410 	.word	0x40020410
24006204:	40020428 	.word	0x40020428
24006208:	40020440 	.word	0x40020440
2400620c:	40020458 	.word	0x40020458
24006210:	40020470 	.word	0x40020470
24006214:	40020488 	.word	0x40020488
24006218:	400204a0 	.word	0x400204a0
2400621c:	400204b8 	.word	0x400204b8
24006220:	687b      	ldr	r3, [r7, #4]
24006222:	681b      	ldr	r3, [r3, #0]
24006224:	681b      	ldr	r3, [r3, #0]
24006226:	f003 0308 	and.w	r3, r3, #8
2400622a:	2b00      	cmp	r3, #0
2400622c:	bf14      	ite	ne
2400622e:	2301      	movne	r3, #1
24006230:	2300      	moveq	r3, #0
24006232:	b2db      	uxtb	r3, r3
24006234:	2b00      	cmp	r3, #0
24006236:	d015      	beq.n	24006264 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
24006238:	687b      	ldr	r3, [r7, #4]
2400623a:	681b      	ldr	r3, [r3, #0]
2400623c:	681a      	ldr	r2, [r3, #0]
2400623e:	687b      	ldr	r3, [r7, #4]
24006240:	681b      	ldr	r3, [r3, #0]
24006242:	f022 0204 	bic.w	r2, r2, #4
24006246:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
24006248:	687b      	ldr	r3, [r7, #4]
2400624a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
2400624c:	f003 031f 	and.w	r3, r3, #31
24006250:	2208      	movs	r2, #8
24006252:	409a      	lsls	r2, r3
24006254:	6a3b      	ldr	r3, [r7, #32]
24006256:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
24006258:	687b      	ldr	r3, [r7, #4]
2400625a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
2400625c:	f043 0201 	orr.w	r2, r3, #1
24006260:	687b      	ldr	r3, [r7, #4]
24006262:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24006264:	687b      	ldr	r3, [r7, #4]
24006266:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
24006268:	f003 031f 	and.w	r3, r3, #31
2400626c:	69ba      	ldr	r2, [r7, #24]
2400626e:	fa22 f303 	lsr.w	r3, r2, r3
24006272:	f003 0301 	and.w	r3, r3, #1
24006276:	2b00      	cmp	r3, #0
24006278:	d06e      	beq.n	24006358 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
2400627a:	687b      	ldr	r3, [r7, #4]
2400627c:	681b      	ldr	r3, [r3, #0]
2400627e:	4a69      	ldr	r2, [pc, #420]	@ (24006424 <HAL_DMA_IRQHandler+0x3f8>)
24006280:	4293      	cmp	r3, r2
24006282:	d04a      	beq.n	2400631a <HAL_DMA_IRQHandler+0x2ee>
24006284:	687b      	ldr	r3, [r7, #4]
24006286:	681b      	ldr	r3, [r3, #0]
24006288:	4a67      	ldr	r2, [pc, #412]	@ (24006428 <HAL_DMA_IRQHandler+0x3fc>)
2400628a:	4293      	cmp	r3, r2
2400628c:	d045      	beq.n	2400631a <HAL_DMA_IRQHandler+0x2ee>
2400628e:	687b      	ldr	r3, [r7, #4]
24006290:	681b      	ldr	r3, [r3, #0]
24006292:	4a66      	ldr	r2, [pc, #408]	@ (2400642c <HAL_DMA_IRQHandler+0x400>)
24006294:	4293      	cmp	r3, r2
24006296:	d040      	beq.n	2400631a <HAL_DMA_IRQHandler+0x2ee>
24006298:	687b      	ldr	r3, [r7, #4]
2400629a:	681b      	ldr	r3, [r3, #0]
2400629c:	4a64      	ldr	r2, [pc, #400]	@ (24006430 <HAL_DMA_IRQHandler+0x404>)
2400629e:	4293      	cmp	r3, r2
240062a0:	d03b      	beq.n	2400631a <HAL_DMA_IRQHandler+0x2ee>
240062a2:	687b      	ldr	r3, [r7, #4]
240062a4:	681b      	ldr	r3, [r3, #0]
240062a6:	4a63      	ldr	r2, [pc, #396]	@ (24006434 <HAL_DMA_IRQHandler+0x408>)
240062a8:	4293      	cmp	r3, r2
240062aa:	d036      	beq.n	2400631a <HAL_DMA_IRQHandler+0x2ee>
240062ac:	687b      	ldr	r3, [r7, #4]
240062ae:	681b      	ldr	r3, [r3, #0]
240062b0:	4a61      	ldr	r2, [pc, #388]	@ (24006438 <HAL_DMA_IRQHandler+0x40c>)
240062b2:	4293      	cmp	r3, r2
240062b4:	d031      	beq.n	2400631a <HAL_DMA_IRQHandler+0x2ee>
240062b6:	687b      	ldr	r3, [r7, #4]
240062b8:	681b      	ldr	r3, [r3, #0]
240062ba:	4a60      	ldr	r2, [pc, #384]	@ (2400643c <HAL_DMA_IRQHandler+0x410>)
240062bc:	4293      	cmp	r3, r2
240062be:	d02c      	beq.n	2400631a <HAL_DMA_IRQHandler+0x2ee>
240062c0:	687b      	ldr	r3, [r7, #4]
240062c2:	681b      	ldr	r3, [r3, #0]
240062c4:	4a5e      	ldr	r2, [pc, #376]	@ (24006440 <HAL_DMA_IRQHandler+0x414>)
240062c6:	4293      	cmp	r3, r2
240062c8:	d027      	beq.n	2400631a <HAL_DMA_IRQHandler+0x2ee>
240062ca:	687b      	ldr	r3, [r7, #4]
240062cc:	681b      	ldr	r3, [r3, #0]
240062ce:	4a5d      	ldr	r2, [pc, #372]	@ (24006444 <HAL_DMA_IRQHandler+0x418>)
240062d0:	4293      	cmp	r3, r2
240062d2:	d022      	beq.n	2400631a <HAL_DMA_IRQHandler+0x2ee>
240062d4:	687b      	ldr	r3, [r7, #4]
240062d6:	681b      	ldr	r3, [r3, #0]
240062d8:	4a5b      	ldr	r2, [pc, #364]	@ (24006448 <HAL_DMA_IRQHandler+0x41c>)
240062da:	4293      	cmp	r3, r2
240062dc:	d01d      	beq.n	2400631a <HAL_DMA_IRQHandler+0x2ee>
240062de:	687b      	ldr	r3, [r7, #4]
240062e0:	681b      	ldr	r3, [r3, #0]
240062e2:	4a5a      	ldr	r2, [pc, #360]	@ (2400644c <HAL_DMA_IRQHandler+0x420>)
240062e4:	4293      	cmp	r3, r2
240062e6:	d018      	beq.n	2400631a <HAL_DMA_IRQHandler+0x2ee>
240062e8:	687b      	ldr	r3, [r7, #4]
240062ea:	681b      	ldr	r3, [r3, #0]
240062ec:	4a58      	ldr	r2, [pc, #352]	@ (24006450 <HAL_DMA_IRQHandler+0x424>)
240062ee:	4293      	cmp	r3, r2
240062f0:	d013      	beq.n	2400631a <HAL_DMA_IRQHandler+0x2ee>
240062f2:	687b      	ldr	r3, [r7, #4]
240062f4:	681b      	ldr	r3, [r3, #0]
240062f6:	4a57      	ldr	r2, [pc, #348]	@ (24006454 <HAL_DMA_IRQHandler+0x428>)
240062f8:	4293      	cmp	r3, r2
240062fa:	d00e      	beq.n	2400631a <HAL_DMA_IRQHandler+0x2ee>
240062fc:	687b      	ldr	r3, [r7, #4]
240062fe:	681b      	ldr	r3, [r3, #0]
24006300:	4a55      	ldr	r2, [pc, #340]	@ (24006458 <HAL_DMA_IRQHandler+0x42c>)
24006302:	4293      	cmp	r3, r2
24006304:	d009      	beq.n	2400631a <HAL_DMA_IRQHandler+0x2ee>
24006306:	687b      	ldr	r3, [r7, #4]
24006308:	681b      	ldr	r3, [r3, #0]
2400630a:	4a54      	ldr	r2, [pc, #336]	@ (2400645c <HAL_DMA_IRQHandler+0x430>)
2400630c:	4293      	cmp	r3, r2
2400630e:	d004      	beq.n	2400631a <HAL_DMA_IRQHandler+0x2ee>
24006310:	687b      	ldr	r3, [r7, #4]
24006312:	681b      	ldr	r3, [r3, #0]
24006314:	4a52      	ldr	r2, [pc, #328]	@ (24006460 <HAL_DMA_IRQHandler+0x434>)
24006316:	4293      	cmp	r3, r2
24006318:	d10a      	bne.n	24006330 <HAL_DMA_IRQHandler+0x304>
2400631a:	687b      	ldr	r3, [r7, #4]
2400631c:	681b      	ldr	r3, [r3, #0]
2400631e:	695b      	ldr	r3, [r3, #20]
24006320:	f003 0380 	and.w	r3, r3, #128	@ 0x80
24006324:	2b00      	cmp	r3, #0
24006326:	bf14      	ite	ne
24006328:	2301      	movne	r3, #1
2400632a:	2300      	moveq	r3, #0
2400632c:	b2db      	uxtb	r3, r3
2400632e:	e003      	b.n	24006338 <HAL_DMA_IRQHandler+0x30c>
24006330:	687b      	ldr	r3, [r7, #4]
24006332:	681b      	ldr	r3, [r3, #0]
24006334:	681b      	ldr	r3, [r3, #0]
24006336:	2300      	movs	r3, #0
24006338:	2b00      	cmp	r3, #0
2400633a:	d00d      	beq.n	24006358 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
2400633c:	687b      	ldr	r3, [r7, #4]
2400633e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
24006340:	f003 031f 	and.w	r3, r3, #31
24006344:	2201      	movs	r2, #1
24006346:	409a      	lsls	r2, r3
24006348:	6a3b      	ldr	r3, [r7, #32]
2400634a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
2400634c:	687b      	ldr	r3, [r7, #4]
2400634e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
24006350:	f043 0202 	orr.w	r2, r3, #2
24006354:	687b      	ldr	r3, [r7, #4]
24006356:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24006358:	687b      	ldr	r3, [r7, #4]
2400635a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
2400635c:	f003 031f 	and.w	r3, r3, #31
24006360:	2204      	movs	r2, #4
24006362:	409a      	lsls	r2, r3
24006364:	69bb      	ldr	r3, [r7, #24]
24006366:	4013      	ands	r3, r2
24006368:	2b00      	cmp	r3, #0
2400636a:	f000 808f 	beq.w	2400648c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
2400636e:	687b      	ldr	r3, [r7, #4]
24006370:	681b      	ldr	r3, [r3, #0]
24006372:	4a2c      	ldr	r2, [pc, #176]	@ (24006424 <HAL_DMA_IRQHandler+0x3f8>)
24006374:	4293      	cmp	r3, r2
24006376:	d04a      	beq.n	2400640e <HAL_DMA_IRQHandler+0x3e2>
24006378:	687b      	ldr	r3, [r7, #4]
2400637a:	681b      	ldr	r3, [r3, #0]
2400637c:	4a2a      	ldr	r2, [pc, #168]	@ (24006428 <HAL_DMA_IRQHandler+0x3fc>)
2400637e:	4293      	cmp	r3, r2
24006380:	d045      	beq.n	2400640e <HAL_DMA_IRQHandler+0x3e2>
24006382:	687b      	ldr	r3, [r7, #4]
24006384:	681b      	ldr	r3, [r3, #0]
24006386:	4a29      	ldr	r2, [pc, #164]	@ (2400642c <HAL_DMA_IRQHandler+0x400>)
24006388:	4293      	cmp	r3, r2
2400638a:	d040      	beq.n	2400640e <HAL_DMA_IRQHandler+0x3e2>
2400638c:	687b      	ldr	r3, [r7, #4]
2400638e:	681b      	ldr	r3, [r3, #0]
24006390:	4a27      	ldr	r2, [pc, #156]	@ (24006430 <HAL_DMA_IRQHandler+0x404>)
24006392:	4293      	cmp	r3, r2
24006394:	d03b      	beq.n	2400640e <HAL_DMA_IRQHandler+0x3e2>
24006396:	687b      	ldr	r3, [r7, #4]
24006398:	681b      	ldr	r3, [r3, #0]
2400639a:	4a26      	ldr	r2, [pc, #152]	@ (24006434 <HAL_DMA_IRQHandler+0x408>)
2400639c:	4293      	cmp	r3, r2
2400639e:	d036      	beq.n	2400640e <HAL_DMA_IRQHandler+0x3e2>
240063a0:	687b      	ldr	r3, [r7, #4]
240063a2:	681b      	ldr	r3, [r3, #0]
240063a4:	4a24      	ldr	r2, [pc, #144]	@ (24006438 <HAL_DMA_IRQHandler+0x40c>)
240063a6:	4293      	cmp	r3, r2
240063a8:	d031      	beq.n	2400640e <HAL_DMA_IRQHandler+0x3e2>
240063aa:	687b      	ldr	r3, [r7, #4]
240063ac:	681b      	ldr	r3, [r3, #0]
240063ae:	4a23      	ldr	r2, [pc, #140]	@ (2400643c <HAL_DMA_IRQHandler+0x410>)
240063b0:	4293      	cmp	r3, r2
240063b2:	d02c      	beq.n	2400640e <HAL_DMA_IRQHandler+0x3e2>
240063b4:	687b      	ldr	r3, [r7, #4]
240063b6:	681b      	ldr	r3, [r3, #0]
240063b8:	4a21      	ldr	r2, [pc, #132]	@ (24006440 <HAL_DMA_IRQHandler+0x414>)
240063ba:	4293      	cmp	r3, r2
240063bc:	d027      	beq.n	2400640e <HAL_DMA_IRQHandler+0x3e2>
240063be:	687b      	ldr	r3, [r7, #4]
240063c0:	681b      	ldr	r3, [r3, #0]
240063c2:	4a20      	ldr	r2, [pc, #128]	@ (24006444 <HAL_DMA_IRQHandler+0x418>)
240063c4:	4293      	cmp	r3, r2
240063c6:	d022      	beq.n	2400640e <HAL_DMA_IRQHandler+0x3e2>
240063c8:	687b      	ldr	r3, [r7, #4]
240063ca:	681b      	ldr	r3, [r3, #0]
240063cc:	4a1e      	ldr	r2, [pc, #120]	@ (24006448 <HAL_DMA_IRQHandler+0x41c>)
240063ce:	4293      	cmp	r3, r2
240063d0:	d01d      	beq.n	2400640e <HAL_DMA_IRQHandler+0x3e2>
240063d2:	687b      	ldr	r3, [r7, #4]
240063d4:	681b      	ldr	r3, [r3, #0]
240063d6:	4a1d      	ldr	r2, [pc, #116]	@ (2400644c <HAL_DMA_IRQHandler+0x420>)
240063d8:	4293      	cmp	r3, r2
240063da:	d018      	beq.n	2400640e <HAL_DMA_IRQHandler+0x3e2>
240063dc:	687b      	ldr	r3, [r7, #4]
240063de:	681b      	ldr	r3, [r3, #0]
240063e0:	4a1b      	ldr	r2, [pc, #108]	@ (24006450 <HAL_DMA_IRQHandler+0x424>)
240063e2:	4293      	cmp	r3, r2
240063e4:	d013      	beq.n	2400640e <HAL_DMA_IRQHandler+0x3e2>
240063e6:	687b      	ldr	r3, [r7, #4]
240063e8:	681b      	ldr	r3, [r3, #0]
240063ea:	4a1a      	ldr	r2, [pc, #104]	@ (24006454 <HAL_DMA_IRQHandler+0x428>)
240063ec:	4293      	cmp	r3, r2
240063ee:	d00e      	beq.n	2400640e <HAL_DMA_IRQHandler+0x3e2>
240063f0:	687b      	ldr	r3, [r7, #4]
240063f2:	681b      	ldr	r3, [r3, #0]
240063f4:	4a18      	ldr	r2, [pc, #96]	@ (24006458 <HAL_DMA_IRQHandler+0x42c>)
240063f6:	4293      	cmp	r3, r2
240063f8:	d009      	beq.n	2400640e <HAL_DMA_IRQHandler+0x3e2>
240063fa:	687b      	ldr	r3, [r7, #4]
240063fc:	681b      	ldr	r3, [r3, #0]
240063fe:	4a17      	ldr	r2, [pc, #92]	@ (2400645c <HAL_DMA_IRQHandler+0x430>)
24006400:	4293      	cmp	r3, r2
24006402:	d004      	beq.n	2400640e <HAL_DMA_IRQHandler+0x3e2>
24006404:	687b      	ldr	r3, [r7, #4]
24006406:	681b      	ldr	r3, [r3, #0]
24006408:	4a15      	ldr	r2, [pc, #84]	@ (24006460 <HAL_DMA_IRQHandler+0x434>)
2400640a:	4293      	cmp	r3, r2
2400640c:	d12a      	bne.n	24006464 <HAL_DMA_IRQHandler+0x438>
2400640e:	687b      	ldr	r3, [r7, #4]
24006410:	681b      	ldr	r3, [r3, #0]
24006412:	681b      	ldr	r3, [r3, #0]
24006414:	f003 0302 	and.w	r3, r3, #2
24006418:	2b00      	cmp	r3, #0
2400641a:	bf14      	ite	ne
2400641c:	2301      	movne	r3, #1
2400641e:	2300      	moveq	r3, #0
24006420:	b2db      	uxtb	r3, r3
24006422:	e023      	b.n	2400646c <HAL_DMA_IRQHandler+0x440>
24006424:	40020010 	.word	0x40020010
24006428:	40020028 	.word	0x40020028
2400642c:	40020040 	.word	0x40020040
24006430:	40020058 	.word	0x40020058
24006434:	40020070 	.word	0x40020070
24006438:	40020088 	.word	0x40020088
2400643c:	400200a0 	.word	0x400200a0
24006440:	400200b8 	.word	0x400200b8
24006444:	40020410 	.word	0x40020410
24006448:	40020428 	.word	0x40020428
2400644c:	40020440 	.word	0x40020440
24006450:	40020458 	.word	0x40020458
24006454:	40020470 	.word	0x40020470
24006458:	40020488 	.word	0x40020488
2400645c:	400204a0 	.word	0x400204a0
24006460:	400204b8 	.word	0x400204b8
24006464:	687b      	ldr	r3, [r7, #4]
24006466:	681b      	ldr	r3, [r3, #0]
24006468:	681b      	ldr	r3, [r3, #0]
2400646a:	2300      	movs	r3, #0
2400646c:	2b00      	cmp	r3, #0
2400646e:	d00d      	beq.n	2400648c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
24006470:	687b      	ldr	r3, [r7, #4]
24006472:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
24006474:	f003 031f 	and.w	r3, r3, #31
24006478:	2204      	movs	r2, #4
2400647a:	409a      	lsls	r2, r3
2400647c:	6a3b      	ldr	r3, [r7, #32]
2400647e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
24006480:	687b      	ldr	r3, [r7, #4]
24006482:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
24006484:	f043 0204 	orr.w	r2, r3, #4
24006488:	687b      	ldr	r3, [r7, #4]
2400648a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
2400648c:	687b      	ldr	r3, [r7, #4]
2400648e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
24006490:	f003 031f 	and.w	r3, r3, #31
24006494:	2210      	movs	r2, #16
24006496:	409a      	lsls	r2, r3
24006498:	69bb      	ldr	r3, [r7, #24]
2400649a:	4013      	ands	r3, r2
2400649c:	2b00      	cmp	r3, #0
2400649e:	f000 80a6 	beq.w	240065ee <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
240064a2:	687b      	ldr	r3, [r7, #4]
240064a4:	681b      	ldr	r3, [r3, #0]
240064a6:	4a85      	ldr	r2, [pc, #532]	@ (240066bc <HAL_DMA_IRQHandler+0x690>)
240064a8:	4293      	cmp	r3, r2
240064aa:	d04a      	beq.n	24006542 <HAL_DMA_IRQHandler+0x516>
240064ac:	687b      	ldr	r3, [r7, #4]
240064ae:	681b      	ldr	r3, [r3, #0]
240064b0:	4a83      	ldr	r2, [pc, #524]	@ (240066c0 <HAL_DMA_IRQHandler+0x694>)
240064b2:	4293      	cmp	r3, r2
240064b4:	d045      	beq.n	24006542 <HAL_DMA_IRQHandler+0x516>
240064b6:	687b      	ldr	r3, [r7, #4]
240064b8:	681b      	ldr	r3, [r3, #0]
240064ba:	4a82      	ldr	r2, [pc, #520]	@ (240066c4 <HAL_DMA_IRQHandler+0x698>)
240064bc:	4293      	cmp	r3, r2
240064be:	d040      	beq.n	24006542 <HAL_DMA_IRQHandler+0x516>
240064c0:	687b      	ldr	r3, [r7, #4]
240064c2:	681b      	ldr	r3, [r3, #0]
240064c4:	4a80      	ldr	r2, [pc, #512]	@ (240066c8 <HAL_DMA_IRQHandler+0x69c>)
240064c6:	4293      	cmp	r3, r2
240064c8:	d03b      	beq.n	24006542 <HAL_DMA_IRQHandler+0x516>
240064ca:	687b      	ldr	r3, [r7, #4]
240064cc:	681b      	ldr	r3, [r3, #0]
240064ce:	4a7f      	ldr	r2, [pc, #508]	@ (240066cc <HAL_DMA_IRQHandler+0x6a0>)
240064d0:	4293      	cmp	r3, r2
240064d2:	d036      	beq.n	24006542 <HAL_DMA_IRQHandler+0x516>
240064d4:	687b      	ldr	r3, [r7, #4]
240064d6:	681b      	ldr	r3, [r3, #0]
240064d8:	4a7d      	ldr	r2, [pc, #500]	@ (240066d0 <HAL_DMA_IRQHandler+0x6a4>)
240064da:	4293      	cmp	r3, r2
240064dc:	d031      	beq.n	24006542 <HAL_DMA_IRQHandler+0x516>
240064de:	687b      	ldr	r3, [r7, #4]
240064e0:	681b      	ldr	r3, [r3, #0]
240064e2:	4a7c      	ldr	r2, [pc, #496]	@ (240066d4 <HAL_DMA_IRQHandler+0x6a8>)
240064e4:	4293      	cmp	r3, r2
240064e6:	d02c      	beq.n	24006542 <HAL_DMA_IRQHandler+0x516>
240064e8:	687b      	ldr	r3, [r7, #4]
240064ea:	681b      	ldr	r3, [r3, #0]
240064ec:	4a7a      	ldr	r2, [pc, #488]	@ (240066d8 <HAL_DMA_IRQHandler+0x6ac>)
240064ee:	4293      	cmp	r3, r2
240064f0:	d027      	beq.n	24006542 <HAL_DMA_IRQHandler+0x516>
240064f2:	687b      	ldr	r3, [r7, #4]
240064f4:	681b      	ldr	r3, [r3, #0]
240064f6:	4a79      	ldr	r2, [pc, #484]	@ (240066dc <HAL_DMA_IRQHandler+0x6b0>)
240064f8:	4293      	cmp	r3, r2
240064fa:	d022      	beq.n	24006542 <HAL_DMA_IRQHandler+0x516>
240064fc:	687b      	ldr	r3, [r7, #4]
240064fe:	681b      	ldr	r3, [r3, #0]
24006500:	4a77      	ldr	r2, [pc, #476]	@ (240066e0 <HAL_DMA_IRQHandler+0x6b4>)
24006502:	4293      	cmp	r3, r2
24006504:	d01d      	beq.n	24006542 <HAL_DMA_IRQHandler+0x516>
24006506:	687b      	ldr	r3, [r7, #4]
24006508:	681b      	ldr	r3, [r3, #0]
2400650a:	4a76      	ldr	r2, [pc, #472]	@ (240066e4 <HAL_DMA_IRQHandler+0x6b8>)
2400650c:	4293      	cmp	r3, r2
2400650e:	d018      	beq.n	24006542 <HAL_DMA_IRQHandler+0x516>
24006510:	687b      	ldr	r3, [r7, #4]
24006512:	681b      	ldr	r3, [r3, #0]
24006514:	4a74      	ldr	r2, [pc, #464]	@ (240066e8 <HAL_DMA_IRQHandler+0x6bc>)
24006516:	4293      	cmp	r3, r2
24006518:	d013      	beq.n	24006542 <HAL_DMA_IRQHandler+0x516>
2400651a:	687b      	ldr	r3, [r7, #4]
2400651c:	681b      	ldr	r3, [r3, #0]
2400651e:	4a73      	ldr	r2, [pc, #460]	@ (240066ec <HAL_DMA_IRQHandler+0x6c0>)
24006520:	4293      	cmp	r3, r2
24006522:	d00e      	beq.n	24006542 <HAL_DMA_IRQHandler+0x516>
24006524:	687b      	ldr	r3, [r7, #4]
24006526:	681b      	ldr	r3, [r3, #0]
24006528:	4a71      	ldr	r2, [pc, #452]	@ (240066f0 <HAL_DMA_IRQHandler+0x6c4>)
2400652a:	4293      	cmp	r3, r2
2400652c:	d009      	beq.n	24006542 <HAL_DMA_IRQHandler+0x516>
2400652e:	687b      	ldr	r3, [r7, #4]
24006530:	681b      	ldr	r3, [r3, #0]
24006532:	4a70      	ldr	r2, [pc, #448]	@ (240066f4 <HAL_DMA_IRQHandler+0x6c8>)
24006534:	4293      	cmp	r3, r2
24006536:	d004      	beq.n	24006542 <HAL_DMA_IRQHandler+0x516>
24006538:	687b      	ldr	r3, [r7, #4]
2400653a:	681b      	ldr	r3, [r3, #0]
2400653c:	4a6e      	ldr	r2, [pc, #440]	@ (240066f8 <HAL_DMA_IRQHandler+0x6cc>)
2400653e:	4293      	cmp	r3, r2
24006540:	d10a      	bne.n	24006558 <HAL_DMA_IRQHandler+0x52c>
24006542:	687b      	ldr	r3, [r7, #4]
24006544:	681b      	ldr	r3, [r3, #0]
24006546:	681b      	ldr	r3, [r3, #0]
24006548:	f003 0308 	and.w	r3, r3, #8
2400654c:	2b00      	cmp	r3, #0
2400654e:	bf14      	ite	ne
24006550:	2301      	movne	r3, #1
24006552:	2300      	moveq	r3, #0
24006554:	b2db      	uxtb	r3, r3
24006556:	e009      	b.n	2400656c <HAL_DMA_IRQHandler+0x540>
24006558:	687b      	ldr	r3, [r7, #4]
2400655a:	681b      	ldr	r3, [r3, #0]
2400655c:	681b      	ldr	r3, [r3, #0]
2400655e:	f003 0304 	and.w	r3, r3, #4
24006562:	2b00      	cmp	r3, #0
24006564:	bf14      	ite	ne
24006566:	2301      	movne	r3, #1
24006568:	2300      	moveq	r3, #0
2400656a:	b2db      	uxtb	r3, r3
2400656c:	2b00      	cmp	r3, #0
2400656e:	d03e      	beq.n	240065ee <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
24006570:	687b      	ldr	r3, [r7, #4]
24006572:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
24006574:	f003 031f 	and.w	r3, r3, #31
24006578:	2210      	movs	r2, #16
2400657a:	409a      	lsls	r2, r3
2400657c:	6a3b      	ldr	r3, [r7, #32]
2400657e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
24006580:	687b      	ldr	r3, [r7, #4]
24006582:	681b      	ldr	r3, [r3, #0]
24006584:	681b      	ldr	r3, [r3, #0]
24006586:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
2400658a:	2b00      	cmp	r3, #0
2400658c:	d018      	beq.n	240065c0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
2400658e:	687b      	ldr	r3, [r7, #4]
24006590:	681b      	ldr	r3, [r3, #0]
24006592:	681b      	ldr	r3, [r3, #0]
24006594:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
24006598:	2b00      	cmp	r3, #0
2400659a:	d108      	bne.n	240065ae <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
2400659c:	687b      	ldr	r3, [r7, #4]
2400659e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
240065a0:	2b00      	cmp	r3, #0
240065a2:	d024      	beq.n	240065ee <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
240065a4:	687b      	ldr	r3, [r7, #4]
240065a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
240065a8:	6878      	ldr	r0, [r7, #4]
240065aa:	4798      	blx	r3
240065ac:	e01f      	b.n	240065ee <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
240065ae:	687b      	ldr	r3, [r7, #4]
240065b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
240065b2:	2b00      	cmp	r3, #0
240065b4:	d01b      	beq.n	240065ee <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
240065b6:	687b      	ldr	r3, [r7, #4]
240065b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
240065ba:	6878      	ldr	r0, [r7, #4]
240065bc:	4798      	blx	r3
240065be:	e016      	b.n	240065ee <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
240065c0:	687b      	ldr	r3, [r7, #4]
240065c2:	681b      	ldr	r3, [r3, #0]
240065c4:	681b      	ldr	r3, [r3, #0]
240065c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
240065ca:	2b00      	cmp	r3, #0
240065cc:	d107      	bne.n	240065de <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
240065ce:	687b      	ldr	r3, [r7, #4]
240065d0:	681b      	ldr	r3, [r3, #0]
240065d2:	681a      	ldr	r2, [r3, #0]
240065d4:	687b      	ldr	r3, [r7, #4]
240065d6:	681b      	ldr	r3, [r3, #0]
240065d8:	f022 0208 	bic.w	r2, r2, #8
240065dc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
240065de:	687b      	ldr	r3, [r7, #4]
240065e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
240065e2:	2b00      	cmp	r3, #0
240065e4:	d003      	beq.n	240065ee <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
240065e6:	687b      	ldr	r3, [r7, #4]
240065e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
240065ea:	6878      	ldr	r0, [r7, #4]
240065ec:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240065ee:	687b      	ldr	r3, [r7, #4]
240065f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
240065f2:	f003 031f 	and.w	r3, r3, #31
240065f6:	2220      	movs	r2, #32
240065f8:	409a      	lsls	r2, r3
240065fa:	69bb      	ldr	r3, [r7, #24]
240065fc:	4013      	ands	r3, r2
240065fe:	2b00      	cmp	r3, #0
24006600:	f000 8110 	beq.w	24006824 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
24006604:	687b      	ldr	r3, [r7, #4]
24006606:	681b      	ldr	r3, [r3, #0]
24006608:	4a2c      	ldr	r2, [pc, #176]	@ (240066bc <HAL_DMA_IRQHandler+0x690>)
2400660a:	4293      	cmp	r3, r2
2400660c:	d04a      	beq.n	240066a4 <HAL_DMA_IRQHandler+0x678>
2400660e:	687b      	ldr	r3, [r7, #4]
24006610:	681b      	ldr	r3, [r3, #0]
24006612:	4a2b      	ldr	r2, [pc, #172]	@ (240066c0 <HAL_DMA_IRQHandler+0x694>)
24006614:	4293      	cmp	r3, r2
24006616:	d045      	beq.n	240066a4 <HAL_DMA_IRQHandler+0x678>
24006618:	687b      	ldr	r3, [r7, #4]
2400661a:	681b      	ldr	r3, [r3, #0]
2400661c:	4a29      	ldr	r2, [pc, #164]	@ (240066c4 <HAL_DMA_IRQHandler+0x698>)
2400661e:	4293      	cmp	r3, r2
24006620:	d040      	beq.n	240066a4 <HAL_DMA_IRQHandler+0x678>
24006622:	687b      	ldr	r3, [r7, #4]
24006624:	681b      	ldr	r3, [r3, #0]
24006626:	4a28      	ldr	r2, [pc, #160]	@ (240066c8 <HAL_DMA_IRQHandler+0x69c>)
24006628:	4293      	cmp	r3, r2
2400662a:	d03b      	beq.n	240066a4 <HAL_DMA_IRQHandler+0x678>
2400662c:	687b      	ldr	r3, [r7, #4]
2400662e:	681b      	ldr	r3, [r3, #0]
24006630:	4a26      	ldr	r2, [pc, #152]	@ (240066cc <HAL_DMA_IRQHandler+0x6a0>)
24006632:	4293      	cmp	r3, r2
24006634:	d036      	beq.n	240066a4 <HAL_DMA_IRQHandler+0x678>
24006636:	687b      	ldr	r3, [r7, #4]
24006638:	681b      	ldr	r3, [r3, #0]
2400663a:	4a25      	ldr	r2, [pc, #148]	@ (240066d0 <HAL_DMA_IRQHandler+0x6a4>)
2400663c:	4293      	cmp	r3, r2
2400663e:	d031      	beq.n	240066a4 <HAL_DMA_IRQHandler+0x678>
24006640:	687b      	ldr	r3, [r7, #4]
24006642:	681b      	ldr	r3, [r3, #0]
24006644:	4a23      	ldr	r2, [pc, #140]	@ (240066d4 <HAL_DMA_IRQHandler+0x6a8>)
24006646:	4293      	cmp	r3, r2
24006648:	d02c      	beq.n	240066a4 <HAL_DMA_IRQHandler+0x678>
2400664a:	687b      	ldr	r3, [r7, #4]
2400664c:	681b      	ldr	r3, [r3, #0]
2400664e:	4a22      	ldr	r2, [pc, #136]	@ (240066d8 <HAL_DMA_IRQHandler+0x6ac>)
24006650:	4293      	cmp	r3, r2
24006652:	d027      	beq.n	240066a4 <HAL_DMA_IRQHandler+0x678>
24006654:	687b      	ldr	r3, [r7, #4]
24006656:	681b      	ldr	r3, [r3, #0]
24006658:	4a20      	ldr	r2, [pc, #128]	@ (240066dc <HAL_DMA_IRQHandler+0x6b0>)
2400665a:	4293      	cmp	r3, r2
2400665c:	d022      	beq.n	240066a4 <HAL_DMA_IRQHandler+0x678>
2400665e:	687b      	ldr	r3, [r7, #4]
24006660:	681b      	ldr	r3, [r3, #0]
24006662:	4a1f      	ldr	r2, [pc, #124]	@ (240066e0 <HAL_DMA_IRQHandler+0x6b4>)
24006664:	4293      	cmp	r3, r2
24006666:	d01d      	beq.n	240066a4 <HAL_DMA_IRQHandler+0x678>
24006668:	687b      	ldr	r3, [r7, #4]
2400666a:	681b      	ldr	r3, [r3, #0]
2400666c:	4a1d      	ldr	r2, [pc, #116]	@ (240066e4 <HAL_DMA_IRQHandler+0x6b8>)
2400666e:	4293      	cmp	r3, r2
24006670:	d018      	beq.n	240066a4 <HAL_DMA_IRQHandler+0x678>
24006672:	687b      	ldr	r3, [r7, #4]
24006674:	681b      	ldr	r3, [r3, #0]
24006676:	4a1c      	ldr	r2, [pc, #112]	@ (240066e8 <HAL_DMA_IRQHandler+0x6bc>)
24006678:	4293      	cmp	r3, r2
2400667a:	d013      	beq.n	240066a4 <HAL_DMA_IRQHandler+0x678>
2400667c:	687b      	ldr	r3, [r7, #4]
2400667e:	681b      	ldr	r3, [r3, #0]
24006680:	4a1a      	ldr	r2, [pc, #104]	@ (240066ec <HAL_DMA_IRQHandler+0x6c0>)
24006682:	4293      	cmp	r3, r2
24006684:	d00e      	beq.n	240066a4 <HAL_DMA_IRQHandler+0x678>
24006686:	687b      	ldr	r3, [r7, #4]
24006688:	681b      	ldr	r3, [r3, #0]
2400668a:	4a19      	ldr	r2, [pc, #100]	@ (240066f0 <HAL_DMA_IRQHandler+0x6c4>)
2400668c:	4293      	cmp	r3, r2
2400668e:	d009      	beq.n	240066a4 <HAL_DMA_IRQHandler+0x678>
24006690:	687b      	ldr	r3, [r7, #4]
24006692:	681b      	ldr	r3, [r3, #0]
24006694:	4a17      	ldr	r2, [pc, #92]	@ (240066f4 <HAL_DMA_IRQHandler+0x6c8>)
24006696:	4293      	cmp	r3, r2
24006698:	d004      	beq.n	240066a4 <HAL_DMA_IRQHandler+0x678>
2400669a:	687b      	ldr	r3, [r7, #4]
2400669c:	681b      	ldr	r3, [r3, #0]
2400669e:	4a16      	ldr	r2, [pc, #88]	@ (240066f8 <HAL_DMA_IRQHandler+0x6cc>)
240066a0:	4293      	cmp	r3, r2
240066a2:	d12b      	bne.n	240066fc <HAL_DMA_IRQHandler+0x6d0>
240066a4:	687b      	ldr	r3, [r7, #4]
240066a6:	681b      	ldr	r3, [r3, #0]
240066a8:	681b      	ldr	r3, [r3, #0]
240066aa:	f003 0310 	and.w	r3, r3, #16
240066ae:	2b00      	cmp	r3, #0
240066b0:	bf14      	ite	ne
240066b2:	2301      	movne	r3, #1
240066b4:	2300      	moveq	r3, #0
240066b6:	b2db      	uxtb	r3, r3
240066b8:	e02a      	b.n	24006710 <HAL_DMA_IRQHandler+0x6e4>
240066ba:	bf00      	nop
240066bc:	40020010 	.word	0x40020010
240066c0:	40020028 	.word	0x40020028
240066c4:	40020040 	.word	0x40020040
240066c8:	40020058 	.word	0x40020058
240066cc:	40020070 	.word	0x40020070
240066d0:	40020088 	.word	0x40020088
240066d4:	400200a0 	.word	0x400200a0
240066d8:	400200b8 	.word	0x400200b8
240066dc:	40020410 	.word	0x40020410
240066e0:	40020428 	.word	0x40020428
240066e4:	40020440 	.word	0x40020440
240066e8:	40020458 	.word	0x40020458
240066ec:	40020470 	.word	0x40020470
240066f0:	40020488 	.word	0x40020488
240066f4:	400204a0 	.word	0x400204a0
240066f8:	400204b8 	.word	0x400204b8
240066fc:	687b      	ldr	r3, [r7, #4]
240066fe:	681b      	ldr	r3, [r3, #0]
24006700:	681b      	ldr	r3, [r3, #0]
24006702:	f003 0302 	and.w	r3, r3, #2
24006706:	2b00      	cmp	r3, #0
24006708:	bf14      	ite	ne
2400670a:	2301      	movne	r3, #1
2400670c:	2300      	moveq	r3, #0
2400670e:	b2db      	uxtb	r3, r3
24006710:	2b00      	cmp	r3, #0
24006712:	f000 8087 	beq.w	24006824 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
24006716:	687b      	ldr	r3, [r7, #4]
24006718:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
2400671a:	f003 031f 	and.w	r3, r3, #31
2400671e:	2220      	movs	r2, #32
24006720:	409a      	lsls	r2, r3
24006722:	6a3b      	ldr	r3, [r7, #32]
24006724:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
24006726:	687b      	ldr	r3, [r7, #4]
24006728:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
2400672c:	b2db      	uxtb	r3, r3
2400672e:	2b04      	cmp	r3, #4
24006730:	d139      	bne.n	240067a6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
24006732:	687b      	ldr	r3, [r7, #4]
24006734:	681b      	ldr	r3, [r3, #0]
24006736:	681a      	ldr	r2, [r3, #0]
24006738:	687b      	ldr	r3, [r7, #4]
2400673a:	681b      	ldr	r3, [r3, #0]
2400673c:	f022 0216 	bic.w	r2, r2, #22
24006740:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
24006742:	687b      	ldr	r3, [r7, #4]
24006744:	681b      	ldr	r3, [r3, #0]
24006746:	695a      	ldr	r2, [r3, #20]
24006748:	687b      	ldr	r3, [r7, #4]
2400674a:	681b      	ldr	r3, [r3, #0]
2400674c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
24006750:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
24006752:	687b      	ldr	r3, [r7, #4]
24006754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
24006756:	2b00      	cmp	r3, #0
24006758:	d103      	bne.n	24006762 <HAL_DMA_IRQHandler+0x736>
2400675a:	687b      	ldr	r3, [r7, #4]
2400675c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
2400675e:	2b00      	cmp	r3, #0
24006760:	d007      	beq.n	24006772 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
24006762:	687b      	ldr	r3, [r7, #4]
24006764:	681b      	ldr	r3, [r3, #0]
24006766:	681a      	ldr	r2, [r3, #0]
24006768:	687b      	ldr	r3, [r7, #4]
2400676a:	681b      	ldr	r3, [r3, #0]
2400676c:	f022 0208 	bic.w	r2, r2, #8
24006770:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24006772:	687b      	ldr	r3, [r7, #4]
24006774:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
24006776:	f003 031f 	and.w	r3, r3, #31
2400677a:	223f      	movs	r2, #63	@ 0x3f
2400677c:	409a      	lsls	r2, r3
2400677e:	6a3b      	ldr	r3, [r7, #32]
24006780:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
24006782:	687b      	ldr	r3, [r7, #4]
24006784:	2201      	movs	r2, #1
24006786:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
2400678a:	687b      	ldr	r3, [r7, #4]
2400678c:	2200      	movs	r2, #0
2400678e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
24006792:	687b      	ldr	r3, [r7, #4]
24006794:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
24006796:	2b00      	cmp	r3, #0
24006798:	f000 834a 	beq.w	24006e30 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
2400679c:	687b      	ldr	r3, [r7, #4]
2400679e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
240067a0:	6878      	ldr	r0, [r7, #4]
240067a2:	4798      	blx	r3
          }
          return;
240067a4:	e344      	b.n	24006e30 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
240067a6:	687b      	ldr	r3, [r7, #4]
240067a8:	681b      	ldr	r3, [r3, #0]
240067aa:	681b      	ldr	r3, [r3, #0]
240067ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
240067b0:	2b00      	cmp	r3, #0
240067b2:	d018      	beq.n	240067e6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
240067b4:	687b      	ldr	r3, [r7, #4]
240067b6:	681b      	ldr	r3, [r3, #0]
240067b8:	681b      	ldr	r3, [r3, #0]
240067ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
240067be:	2b00      	cmp	r3, #0
240067c0:	d108      	bne.n	240067d4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
240067c2:	687b      	ldr	r3, [r7, #4]
240067c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
240067c6:	2b00      	cmp	r3, #0
240067c8:	d02c      	beq.n	24006824 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
240067ca:	687b      	ldr	r3, [r7, #4]
240067cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
240067ce:	6878      	ldr	r0, [r7, #4]
240067d0:	4798      	blx	r3
240067d2:	e027      	b.n	24006824 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
240067d4:	687b      	ldr	r3, [r7, #4]
240067d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
240067d8:	2b00      	cmp	r3, #0
240067da:	d023      	beq.n	24006824 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
240067dc:	687b      	ldr	r3, [r7, #4]
240067de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
240067e0:	6878      	ldr	r0, [r7, #4]
240067e2:	4798      	blx	r3
240067e4:	e01e      	b.n	24006824 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
240067e6:	687b      	ldr	r3, [r7, #4]
240067e8:	681b      	ldr	r3, [r3, #0]
240067ea:	681b      	ldr	r3, [r3, #0]
240067ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
240067f0:	2b00      	cmp	r3, #0
240067f2:	d10f      	bne.n	24006814 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
240067f4:	687b      	ldr	r3, [r7, #4]
240067f6:	681b      	ldr	r3, [r3, #0]
240067f8:	681a      	ldr	r2, [r3, #0]
240067fa:	687b      	ldr	r3, [r7, #4]
240067fc:	681b      	ldr	r3, [r3, #0]
240067fe:	f022 0210 	bic.w	r2, r2, #16
24006802:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
24006804:	687b      	ldr	r3, [r7, #4]
24006806:	2201      	movs	r2, #1
24006808:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
2400680c:	687b      	ldr	r3, [r7, #4]
2400680e:	2200      	movs	r2, #0
24006810:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
24006814:	687b      	ldr	r3, [r7, #4]
24006816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
24006818:	2b00      	cmp	r3, #0
2400681a:	d003      	beq.n	24006824 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
2400681c:	687b      	ldr	r3, [r7, #4]
2400681e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
24006820:	6878      	ldr	r0, [r7, #4]
24006822:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
24006824:	687b      	ldr	r3, [r7, #4]
24006826:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
24006828:	2b00      	cmp	r3, #0
2400682a:	f000 8306 	beq.w	24006e3a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
2400682e:	687b      	ldr	r3, [r7, #4]
24006830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
24006832:	f003 0301 	and.w	r3, r3, #1
24006836:	2b00      	cmp	r3, #0
24006838:	f000 8088 	beq.w	2400694c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
2400683c:	687b      	ldr	r3, [r7, #4]
2400683e:	2204      	movs	r2, #4
24006840:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
24006844:	687b      	ldr	r3, [r7, #4]
24006846:	681b      	ldr	r3, [r3, #0]
24006848:	4a7a      	ldr	r2, [pc, #488]	@ (24006a34 <HAL_DMA_IRQHandler+0xa08>)
2400684a:	4293      	cmp	r3, r2
2400684c:	d04a      	beq.n	240068e4 <HAL_DMA_IRQHandler+0x8b8>
2400684e:	687b      	ldr	r3, [r7, #4]
24006850:	681b      	ldr	r3, [r3, #0]
24006852:	4a79      	ldr	r2, [pc, #484]	@ (24006a38 <HAL_DMA_IRQHandler+0xa0c>)
24006854:	4293      	cmp	r3, r2
24006856:	d045      	beq.n	240068e4 <HAL_DMA_IRQHandler+0x8b8>
24006858:	687b      	ldr	r3, [r7, #4]
2400685a:	681b      	ldr	r3, [r3, #0]
2400685c:	4a77      	ldr	r2, [pc, #476]	@ (24006a3c <HAL_DMA_IRQHandler+0xa10>)
2400685e:	4293      	cmp	r3, r2
24006860:	d040      	beq.n	240068e4 <HAL_DMA_IRQHandler+0x8b8>
24006862:	687b      	ldr	r3, [r7, #4]
24006864:	681b      	ldr	r3, [r3, #0]
24006866:	4a76      	ldr	r2, [pc, #472]	@ (24006a40 <HAL_DMA_IRQHandler+0xa14>)
24006868:	4293      	cmp	r3, r2
2400686a:	d03b      	beq.n	240068e4 <HAL_DMA_IRQHandler+0x8b8>
2400686c:	687b      	ldr	r3, [r7, #4]
2400686e:	681b      	ldr	r3, [r3, #0]
24006870:	4a74      	ldr	r2, [pc, #464]	@ (24006a44 <HAL_DMA_IRQHandler+0xa18>)
24006872:	4293      	cmp	r3, r2
24006874:	d036      	beq.n	240068e4 <HAL_DMA_IRQHandler+0x8b8>
24006876:	687b      	ldr	r3, [r7, #4]
24006878:	681b      	ldr	r3, [r3, #0]
2400687a:	4a73      	ldr	r2, [pc, #460]	@ (24006a48 <HAL_DMA_IRQHandler+0xa1c>)
2400687c:	4293      	cmp	r3, r2
2400687e:	d031      	beq.n	240068e4 <HAL_DMA_IRQHandler+0x8b8>
24006880:	687b      	ldr	r3, [r7, #4]
24006882:	681b      	ldr	r3, [r3, #0]
24006884:	4a71      	ldr	r2, [pc, #452]	@ (24006a4c <HAL_DMA_IRQHandler+0xa20>)
24006886:	4293      	cmp	r3, r2
24006888:	d02c      	beq.n	240068e4 <HAL_DMA_IRQHandler+0x8b8>
2400688a:	687b      	ldr	r3, [r7, #4]
2400688c:	681b      	ldr	r3, [r3, #0]
2400688e:	4a70      	ldr	r2, [pc, #448]	@ (24006a50 <HAL_DMA_IRQHandler+0xa24>)
24006890:	4293      	cmp	r3, r2
24006892:	d027      	beq.n	240068e4 <HAL_DMA_IRQHandler+0x8b8>
24006894:	687b      	ldr	r3, [r7, #4]
24006896:	681b      	ldr	r3, [r3, #0]
24006898:	4a6e      	ldr	r2, [pc, #440]	@ (24006a54 <HAL_DMA_IRQHandler+0xa28>)
2400689a:	4293      	cmp	r3, r2
2400689c:	d022      	beq.n	240068e4 <HAL_DMA_IRQHandler+0x8b8>
2400689e:	687b      	ldr	r3, [r7, #4]
240068a0:	681b      	ldr	r3, [r3, #0]
240068a2:	4a6d      	ldr	r2, [pc, #436]	@ (24006a58 <HAL_DMA_IRQHandler+0xa2c>)
240068a4:	4293      	cmp	r3, r2
240068a6:	d01d      	beq.n	240068e4 <HAL_DMA_IRQHandler+0x8b8>
240068a8:	687b      	ldr	r3, [r7, #4]
240068aa:	681b      	ldr	r3, [r3, #0]
240068ac:	4a6b      	ldr	r2, [pc, #428]	@ (24006a5c <HAL_DMA_IRQHandler+0xa30>)
240068ae:	4293      	cmp	r3, r2
240068b0:	d018      	beq.n	240068e4 <HAL_DMA_IRQHandler+0x8b8>
240068b2:	687b      	ldr	r3, [r7, #4]
240068b4:	681b      	ldr	r3, [r3, #0]
240068b6:	4a6a      	ldr	r2, [pc, #424]	@ (24006a60 <HAL_DMA_IRQHandler+0xa34>)
240068b8:	4293      	cmp	r3, r2
240068ba:	d013      	beq.n	240068e4 <HAL_DMA_IRQHandler+0x8b8>
240068bc:	687b      	ldr	r3, [r7, #4]
240068be:	681b      	ldr	r3, [r3, #0]
240068c0:	4a68      	ldr	r2, [pc, #416]	@ (24006a64 <HAL_DMA_IRQHandler+0xa38>)
240068c2:	4293      	cmp	r3, r2
240068c4:	d00e      	beq.n	240068e4 <HAL_DMA_IRQHandler+0x8b8>
240068c6:	687b      	ldr	r3, [r7, #4]
240068c8:	681b      	ldr	r3, [r3, #0]
240068ca:	4a67      	ldr	r2, [pc, #412]	@ (24006a68 <HAL_DMA_IRQHandler+0xa3c>)
240068cc:	4293      	cmp	r3, r2
240068ce:	d009      	beq.n	240068e4 <HAL_DMA_IRQHandler+0x8b8>
240068d0:	687b      	ldr	r3, [r7, #4]
240068d2:	681b      	ldr	r3, [r3, #0]
240068d4:	4a65      	ldr	r2, [pc, #404]	@ (24006a6c <HAL_DMA_IRQHandler+0xa40>)
240068d6:	4293      	cmp	r3, r2
240068d8:	d004      	beq.n	240068e4 <HAL_DMA_IRQHandler+0x8b8>
240068da:	687b      	ldr	r3, [r7, #4]
240068dc:	681b      	ldr	r3, [r3, #0]
240068de:	4a64      	ldr	r2, [pc, #400]	@ (24006a70 <HAL_DMA_IRQHandler+0xa44>)
240068e0:	4293      	cmp	r3, r2
240068e2:	d108      	bne.n	240068f6 <HAL_DMA_IRQHandler+0x8ca>
240068e4:	687b      	ldr	r3, [r7, #4]
240068e6:	681b      	ldr	r3, [r3, #0]
240068e8:	681a      	ldr	r2, [r3, #0]
240068ea:	687b      	ldr	r3, [r7, #4]
240068ec:	681b      	ldr	r3, [r3, #0]
240068ee:	f022 0201 	bic.w	r2, r2, #1
240068f2:	601a      	str	r2, [r3, #0]
240068f4:	e007      	b.n	24006906 <HAL_DMA_IRQHandler+0x8da>
240068f6:	687b      	ldr	r3, [r7, #4]
240068f8:	681b      	ldr	r3, [r3, #0]
240068fa:	681a      	ldr	r2, [r3, #0]
240068fc:	687b      	ldr	r3, [r7, #4]
240068fe:	681b      	ldr	r3, [r3, #0]
24006900:	f022 0201 	bic.w	r2, r2, #1
24006904:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
24006906:	68fb      	ldr	r3, [r7, #12]
24006908:	3301      	adds	r3, #1
2400690a:	60fb      	str	r3, [r7, #12]
2400690c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
2400690e:	429a      	cmp	r2, r3
24006910:	d307      	bcc.n	24006922 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
24006912:	687b      	ldr	r3, [r7, #4]
24006914:	681b      	ldr	r3, [r3, #0]
24006916:	681b      	ldr	r3, [r3, #0]
24006918:	f003 0301 	and.w	r3, r3, #1
2400691c:	2b00      	cmp	r3, #0
2400691e:	d1f2      	bne.n	24006906 <HAL_DMA_IRQHandler+0x8da>
24006920:	e000      	b.n	24006924 <HAL_DMA_IRQHandler+0x8f8>
            break;
24006922:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
24006924:	687b      	ldr	r3, [r7, #4]
24006926:	681b      	ldr	r3, [r3, #0]
24006928:	681b      	ldr	r3, [r3, #0]
2400692a:	f003 0301 	and.w	r3, r3, #1
2400692e:	2b00      	cmp	r3, #0
24006930:	d004      	beq.n	2400693c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
24006932:	687b      	ldr	r3, [r7, #4]
24006934:	2203      	movs	r2, #3
24006936:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
2400693a:	e003      	b.n	24006944 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
2400693c:	687b      	ldr	r3, [r7, #4]
2400693e:	2201      	movs	r2, #1
24006940:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
24006944:	687b      	ldr	r3, [r7, #4]
24006946:	2200      	movs	r2, #0
24006948:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
2400694c:	687b      	ldr	r3, [r7, #4]
2400694e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
24006950:	2b00      	cmp	r3, #0
24006952:	f000 8272 	beq.w	24006e3a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
24006956:	687b      	ldr	r3, [r7, #4]
24006958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
2400695a:	6878      	ldr	r0, [r7, #4]
2400695c:	4798      	blx	r3
2400695e:	e26c      	b.n	24006e3a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
24006960:	687b      	ldr	r3, [r7, #4]
24006962:	681b      	ldr	r3, [r3, #0]
24006964:	4a43      	ldr	r2, [pc, #268]	@ (24006a74 <HAL_DMA_IRQHandler+0xa48>)
24006966:	4293      	cmp	r3, r2
24006968:	d022      	beq.n	240069b0 <HAL_DMA_IRQHandler+0x984>
2400696a:	687b      	ldr	r3, [r7, #4]
2400696c:	681b      	ldr	r3, [r3, #0]
2400696e:	4a42      	ldr	r2, [pc, #264]	@ (24006a78 <HAL_DMA_IRQHandler+0xa4c>)
24006970:	4293      	cmp	r3, r2
24006972:	d01d      	beq.n	240069b0 <HAL_DMA_IRQHandler+0x984>
24006974:	687b      	ldr	r3, [r7, #4]
24006976:	681b      	ldr	r3, [r3, #0]
24006978:	4a40      	ldr	r2, [pc, #256]	@ (24006a7c <HAL_DMA_IRQHandler+0xa50>)
2400697a:	4293      	cmp	r3, r2
2400697c:	d018      	beq.n	240069b0 <HAL_DMA_IRQHandler+0x984>
2400697e:	687b      	ldr	r3, [r7, #4]
24006980:	681b      	ldr	r3, [r3, #0]
24006982:	4a3f      	ldr	r2, [pc, #252]	@ (24006a80 <HAL_DMA_IRQHandler+0xa54>)
24006984:	4293      	cmp	r3, r2
24006986:	d013      	beq.n	240069b0 <HAL_DMA_IRQHandler+0x984>
24006988:	687b      	ldr	r3, [r7, #4]
2400698a:	681b      	ldr	r3, [r3, #0]
2400698c:	4a3d      	ldr	r2, [pc, #244]	@ (24006a84 <HAL_DMA_IRQHandler+0xa58>)
2400698e:	4293      	cmp	r3, r2
24006990:	d00e      	beq.n	240069b0 <HAL_DMA_IRQHandler+0x984>
24006992:	687b      	ldr	r3, [r7, #4]
24006994:	681b      	ldr	r3, [r3, #0]
24006996:	4a3c      	ldr	r2, [pc, #240]	@ (24006a88 <HAL_DMA_IRQHandler+0xa5c>)
24006998:	4293      	cmp	r3, r2
2400699a:	d009      	beq.n	240069b0 <HAL_DMA_IRQHandler+0x984>
2400699c:	687b      	ldr	r3, [r7, #4]
2400699e:	681b      	ldr	r3, [r3, #0]
240069a0:	4a3a      	ldr	r2, [pc, #232]	@ (24006a8c <HAL_DMA_IRQHandler+0xa60>)
240069a2:	4293      	cmp	r3, r2
240069a4:	d004      	beq.n	240069b0 <HAL_DMA_IRQHandler+0x984>
240069a6:	687b      	ldr	r3, [r7, #4]
240069a8:	681b      	ldr	r3, [r3, #0]
240069aa:	4a39      	ldr	r2, [pc, #228]	@ (24006a90 <HAL_DMA_IRQHandler+0xa64>)
240069ac:	4293      	cmp	r3, r2
240069ae:	d101      	bne.n	240069b4 <HAL_DMA_IRQHandler+0x988>
240069b0:	2301      	movs	r3, #1
240069b2:	e000      	b.n	240069b6 <HAL_DMA_IRQHandler+0x98a>
240069b4:	2300      	movs	r3, #0
240069b6:	2b00      	cmp	r3, #0
240069b8:	f000 823f 	beq.w	24006e3a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
240069bc:	687b      	ldr	r3, [r7, #4]
240069be:	681b      	ldr	r3, [r3, #0]
240069c0:	681b      	ldr	r3, [r3, #0]
240069c2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
240069c4:	687b      	ldr	r3, [r7, #4]
240069c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
240069c8:	f003 031f 	and.w	r3, r3, #31
240069cc:	2204      	movs	r2, #4
240069ce:	409a      	lsls	r2, r3
240069d0:	697b      	ldr	r3, [r7, #20]
240069d2:	4013      	ands	r3, r2
240069d4:	2b00      	cmp	r3, #0
240069d6:	f000 80cd 	beq.w	24006b74 <HAL_DMA_IRQHandler+0xb48>
240069da:	693b      	ldr	r3, [r7, #16]
240069dc:	f003 0304 	and.w	r3, r3, #4
240069e0:	2b00      	cmp	r3, #0
240069e2:	f000 80c7 	beq.w	24006b74 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
240069e6:	687b      	ldr	r3, [r7, #4]
240069e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
240069ea:	f003 031f 	and.w	r3, r3, #31
240069ee:	2204      	movs	r2, #4
240069f0:	409a      	lsls	r2, r3
240069f2:	69fb      	ldr	r3, [r7, #28]
240069f4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
240069f6:	693b      	ldr	r3, [r7, #16]
240069f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
240069fc:	2b00      	cmp	r3, #0
240069fe:	d049      	beq.n	24006a94 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
24006a00:	693b      	ldr	r3, [r7, #16]
24006a02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
24006a06:	2b00      	cmp	r3, #0
24006a08:	d109      	bne.n	24006a1e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
24006a0a:	687b      	ldr	r3, [r7, #4]
24006a0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
24006a0e:	2b00      	cmp	r3, #0
24006a10:	f000 8210 	beq.w	24006e34 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
24006a14:	687b      	ldr	r3, [r7, #4]
24006a16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
24006a18:	6878      	ldr	r0, [r7, #4]
24006a1a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24006a1c:	e20a      	b.n	24006e34 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
24006a1e:	687b      	ldr	r3, [r7, #4]
24006a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
24006a22:	2b00      	cmp	r3, #0
24006a24:	f000 8206 	beq.w	24006e34 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
24006a28:	687b      	ldr	r3, [r7, #4]
24006a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
24006a2c:	6878      	ldr	r0, [r7, #4]
24006a2e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24006a30:	e200      	b.n	24006e34 <HAL_DMA_IRQHandler+0xe08>
24006a32:	bf00      	nop
24006a34:	40020010 	.word	0x40020010
24006a38:	40020028 	.word	0x40020028
24006a3c:	40020040 	.word	0x40020040
24006a40:	40020058 	.word	0x40020058
24006a44:	40020070 	.word	0x40020070
24006a48:	40020088 	.word	0x40020088
24006a4c:	400200a0 	.word	0x400200a0
24006a50:	400200b8 	.word	0x400200b8
24006a54:	40020410 	.word	0x40020410
24006a58:	40020428 	.word	0x40020428
24006a5c:	40020440 	.word	0x40020440
24006a60:	40020458 	.word	0x40020458
24006a64:	40020470 	.word	0x40020470
24006a68:	40020488 	.word	0x40020488
24006a6c:	400204a0 	.word	0x400204a0
24006a70:	400204b8 	.word	0x400204b8
24006a74:	58025408 	.word	0x58025408
24006a78:	5802541c 	.word	0x5802541c
24006a7c:	58025430 	.word	0x58025430
24006a80:	58025444 	.word	0x58025444
24006a84:	58025458 	.word	0x58025458
24006a88:	5802546c 	.word	0x5802546c
24006a8c:	58025480 	.word	0x58025480
24006a90:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
24006a94:	693b      	ldr	r3, [r7, #16]
24006a96:	f003 0320 	and.w	r3, r3, #32
24006a9a:	2b00      	cmp	r3, #0
24006a9c:	d160      	bne.n	24006b60 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
24006a9e:	687b      	ldr	r3, [r7, #4]
24006aa0:	681b      	ldr	r3, [r3, #0]
24006aa2:	4a7f      	ldr	r2, [pc, #508]	@ (24006ca0 <HAL_DMA_IRQHandler+0xc74>)
24006aa4:	4293      	cmp	r3, r2
24006aa6:	d04a      	beq.n	24006b3e <HAL_DMA_IRQHandler+0xb12>
24006aa8:	687b      	ldr	r3, [r7, #4]
24006aaa:	681b      	ldr	r3, [r3, #0]
24006aac:	4a7d      	ldr	r2, [pc, #500]	@ (24006ca4 <HAL_DMA_IRQHandler+0xc78>)
24006aae:	4293      	cmp	r3, r2
24006ab0:	d045      	beq.n	24006b3e <HAL_DMA_IRQHandler+0xb12>
24006ab2:	687b      	ldr	r3, [r7, #4]
24006ab4:	681b      	ldr	r3, [r3, #0]
24006ab6:	4a7c      	ldr	r2, [pc, #496]	@ (24006ca8 <HAL_DMA_IRQHandler+0xc7c>)
24006ab8:	4293      	cmp	r3, r2
24006aba:	d040      	beq.n	24006b3e <HAL_DMA_IRQHandler+0xb12>
24006abc:	687b      	ldr	r3, [r7, #4]
24006abe:	681b      	ldr	r3, [r3, #0]
24006ac0:	4a7a      	ldr	r2, [pc, #488]	@ (24006cac <HAL_DMA_IRQHandler+0xc80>)
24006ac2:	4293      	cmp	r3, r2
24006ac4:	d03b      	beq.n	24006b3e <HAL_DMA_IRQHandler+0xb12>
24006ac6:	687b      	ldr	r3, [r7, #4]
24006ac8:	681b      	ldr	r3, [r3, #0]
24006aca:	4a79      	ldr	r2, [pc, #484]	@ (24006cb0 <HAL_DMA_IRQHandler+0xc84>)
24006acc:	4293      	cmp	r3, r2
24006ace:	d036      	beq.n	24006b3e <HAL_DMA_IRQHandler+0xb12>
24006ad0:	687b      	ldr	r3, [r7, #4]
24006ad2:	681b      	ldr	r3, [r3, #0]
24006ad4:	4a77      	ldr	r2, [pc, #476]	@ (24006cb4 <HAL_DMA_IRQHandler+0xc88>)
24006ad6:	4293      	cmp	r3, r2
24006ad8:	d031      	beq.n	24006b3e <HAL_DMA_IRQHandler+0xb12>
24006ada:	687b      	ldr	r3, [r7, #4]
24006adc:	681b      	ldr	r3, [r3, #0]
24006ade:	4a76      	ldr	r2, [pc, #472]	@ (24006cb8 <HAL_DMA_IRQHandler+0xc8c>)
24006ae0:	4293      	cmp	r3, r2
24006ae2:	d02c      	beq.n	24006b3e <HAL_DMA_IRQHandler+0xb12>
24006ae4:	687b      	ldr	r3, [r7, #4]
24006ae6:	681b      	ldr	r3, [r3, #0]
24006ae8:	4a74      	ldr	r2, [pc, #464]	@ (24006cbc <HAL_DMA_IRQHandler+0xc90>)
24006aea:	4293      	cmp	r3, r2
24006aec:	d027      	beq.n	24006b3e <HAL_DMA_IRQHandler+0xb12>
24006aee:	687b      	ldr	r3, [r7, #4]
24006af0:	681b      	ldr	r3, [r3, #0]
24006af2:	4a73      	ldr	r2, [pc, #460]	@ (24006cc0 <HAL_DMA_IRQHandler+0xc94>)
24006af4:	4293      	cmp	r3, r2
24006af6:	d022      	beq.n	24006b3e <HAL_DMA_IRQHandler+0xb12>
24006af8:	687b      	ldr	r3, [r7, #4]
24006afa:	681b      	ldr	r3, [r3, #0]
24006afc:	4a71      	ldr	r2, [pc, #452]	@ (24006cc4 <HAL_DMA_IRQHandler+0xc98>)
24006afe:	4293      	cmp	r3, r2
24006b00:	d01d      	beq.n	24006b3e <HAL_DMA_IRQHandler+0xb12>
24006b02:	687b      	ldr	r3, [r7, #4]
24006b04:	681b      	ldr	r3, [r3, #0]
24006b06:	4a70      	ldr	r2, [pc, #448]	@ (24006cc8 <HAL_DMA_IRQHandler+0xc9c>)
24006b08:	4293      	cmp	r3, r2
24006b0a:	d018      	beq.n	24006b3e <HAL_DMA_IRQHandler+0xb12>
24006b0c:	687b      	ldr	r3, [r7, #4]
24006b0e:	681b      	ldr	r3, [r3, #0]
24006b10:	4a6e      	ldr	r2, [pc, #440]	@ (24006ccc <HAL_DMA_IRQHandler+0xca0>)
24006b12:	4293      	cmp	r3, r2
24006b14:	d013      	beq.n	24006b3e <HAL_DMA_IRQHandler+0xb12>
24006b16:	687b      	ldr	r3, [r7, #4]
24006b18:	681b      	ldr	r3, [r3, #0]
24006b1a:	4a6d      	ldr	r2, [pc, #436]	@ (24006cd0 <HAL_DMA_IRQHandler+0xca4>)
24006b1c:	4293      	cmp	r3, r2
24006b1e:	d00e      	beq.n	24006b3e <HAL_DMA_IRQHandler+0xb12>
24006b20:	687b      	ldr	r3, [r7, #4]
24006b22:	681b      	ldr	r3, [r3, #0]
24006b24:	4a6b      	ldr	r2, [pc, #428]	@ (24006cd4 <HAL_DMA_IRQHandler+0xca8>)
24006b26:	4293      	cmp	r3, r2
24006b28:	d009      	beq.n	24006b3e <HAL_DMA_IRQHandler+0xb12>
24006b2a:	687b      	ldr	r3, [r7, #4]
24006b2c:	681b      	ldr	r3, [r3, #0]
24006b2e:	4a6a      	ldr	r2, [pc, #424]	@ (24006cd8 <HAL_DMA_IRQHandler+0xcac>)
24006b30:	4293      	cmp	r3, r2
24006b32:	d004      	beq.n	24006b3e <HAL_DMA_IRQHandler+0xb12>
24006b34:	687b      	ldr	r3, [r7, #4]
24006b36:	681b      	ldr	r3, [r3, #0]
24006b38:	4a68      	ldr	r2, [pc, #416]	@ (24006cdc <HAL_DMA_IRQHandler+0xcb0>)
24006b3a:	4293      	cmp	r3, r2
24006b3c:	d108      	bne.n	24006b50 <HAL_DMA_IRQHandler+0xb24>
24006b3e:	687b      	ldr	r3, [r7, #4]
24006b40:	681b      	ldr	r3, [r3, #0]
24006b42:	681a      	ldr	r2, [r3, #0]
24006b44:	687b      	ldr	r3, [r7, #4]
24006b46:	681b      	ldr	r3, [r3, #0]
24006b48:	f022 0208 	bic.w	r2, r2, #8
24006b4c:	601a      	str	r2, [r3, #0]
24006b4e:	e007      	b.n	24006b60 <HAL_DMA_IRQHandler+0xb34>
24006b50:	687b      	ldr	r3, [r7, #4]
24006b52:	681b      	ldr	r3, [r3, #0]
24006b54:	681a      	ldr	r2, [r3, #0]
24006b56:	687b      	ldr	r3, [r7, #4]
24006b58:	681b      	ldr	r3, [r3, #0]
24006b5a:	f022 0204 	bic.w	r2, r2, #4
24006b5e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
24006b60:	687b      	ldr	r3, [r7, #4]
24006b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
24006b64:	2b00      	cmp	r3, #0
24006b66:	f000 8165 	beq.w	24006e34 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
24006b6a:	687b      	ldr	r3, [r7, #4]
24006b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
24006b6e:	6878      	ldr	r0, [r7, #4]
24006b70:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24006b72:	e15f      	b.n	24006e34 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
24006b74:	687b      	ldr	r3, [r7, #4]
24006b76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
24006b78:	f003 031f 	and.w	r3, r3, #31
24006b7c:	2202      	movs	r2, #2
24006b7e:	409a      	lsls	r2, r3
24006b80:	697b      	ldr	r3, [r7, #20]
24006b82:	4013      	ands	r3, r2
24006b84:	2b00      	cmp	r3, #0
24006b86:	f000 80c5 	beq.w	24006d14 <HAL_DMA_IRQHandler+0xce8>
24006b8a:	693b      	ldr	r3, [r7, #16]
24006b8c:	f003 0302 	and.w	r3, r3, #2
24006b90:	2b00      	cmp	r3, #0
24006b92:	f000 80bf 	beq.w	24006d14 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
24006b96:	687b      	ldr	r3, [r7, #4]
24006b98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
24006b9a:	f003 031f 	and.w	r3, r3, #31
24006b9e:	2202      	movs	r2, #2
24006ba0:	409a      	lsls	r2, r3
24006ba2:	69fb      	ldr	r3, [r7, #28]
24006ba4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24006ba6:	693b      	ldr	r3, [r7, #16]
24006ba8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
24006bac:	2b00      	cmp	r3, #0
24006bae:	d018      	beq.n	24006be2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
24006bb0:	693b      	ldr	r3, [r7, #16]
24006bb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
24006bb6:	2b00      	cmp	r3, #0
24006bb8:	d109      	bne.n	24006bce <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
24006bba:	687b      	ldr	r3, [r7, #4]
24006bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
24006bbe:	2b00      	cmp	r3, #0
24006bc0:	f000 813a 	beq.w	24006e38 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
24006bc4:	687b      	ldr	r3, [r7, #4]
24006bc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
24006bc8:	6878      	ldr	r0, [r7, #4]
24006bca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24006bcc:	e134      	b.n	24006e38 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
24006bce:	687b      	ldr	r3, [r7, #4]
24006bd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
24006bd2:	2b00      	cmp	r3, #0
24006bd4:	f000 8130 	beq.w	24006e38 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
24006bd8:	687b      	ldr	r3, [r7, #4]
24006bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
24006bdc:	6878      	ldr	r0, [r7, #4]
24006bde:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24006be0:	e12a      	b.n	24006e38 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
24006be2:	693b      	ldr	r3, [r7, #16]
24006be4:	f003 0320 	and.w	r3, r3, #32
24006be8:	2b00      	cmp	r3, #0
24006bea:	f040 8089 	bne.w	24006d00 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
24006bee:	687b      	ldr	r3, [r7, #4]
24006bf0:	681b      	ldr	r3, [r3, #0]
24006bf2:	4a2b      	ldr	r2, [pc, #172]	@ (24006ca0 <HAL_DMA_IRQHandler+0xc74>)
24006bf4:	4293      	cmp	r3, r2
24006bf6:	d04a      	beq.n	24006c8e <HAL_DMA_IRQHandler+0xc62>
24006bf8:	687b      	ldr	r3, [r7, #4]
24006bfa:	681b      	ldr	r3, [r3, #0]
24006bfc:	4a29      	ldr	r2, [pc, #164]	@ (24006ca4 <HAL_DMA_IRQHandler+0xc78>)
24006bfe:	4293      	cmp	r3, r2
24006c00:	d045      	beq.n	24006c8e <HAL_DMA_IRQHandler+0xc62>
24006c02:	687b      	ldr	r3, [r7, #4]
24006c04:	681b      	ldr	r3, [r3, #0]
24006c06:	4a28      	ldr	r2, [pc, #160]	@ (24006ca8 <HAL_DMA_IRQHandler+0xc7c>)
24006c08:	4293      	cmp	r3, r2
24006c0a:	d040      	beq.n	24006c8e <HAL_DMA_IRQHandler+0xc62>
24006c0c:	687b      	ldr	r3, [r7, #4]
24006c0e:	681b      	ldr	r3, [r3, #0]
24006c10:	4a26      	ldr	r2, [pc, #152]	@ (24006cac <HAL_DMA_IRQHandler+0xc80>)
24006c12:	4293      	cmp	r3, r2
24006c14:	d03b      	beq.n	24006c8e <HAL_DMA_IRQHandler+0xc62>
24006c16:	687b      	ldr	r3, [r7, #4]
24006c18:	681b      	ldr	r3, [r3, #0]
24006c1a:	4a25      	ldr	r2, [pc, #148]	@ (24006cb0 <HAL_DMA_IRQHandler+0xc84>)
24006c1c:	4293      	cmp	r3, r2
24006c1e:	d036      	beq.n	24006c8e <HAL_DMA_IRQHandler+0xc62>
24006c20:	687b      	ldr	r3, [r7, #4]
24006c22:	681b      	ldr	r3, [r3, #0]
24006c24:	4a23      	ldr	r2, [pc, #140]	@ (24006cb4 <HAL_DMA_IRQHandler+0xc88>)
24006c26:	4293      	cmp	r3, r2
24006c28:	d031      	beq.n	24006c8e <HAL_DMA_IRQHandler+0xc62>
24006c2a:	687b      	ldr	r3, [r7, #4]
24006c2c:	681b      	ldr	r3, [r3, #0]
24006c2e:	4a22      	ldr	r2, [pc, #136]	@ (24006cb8 <HAL_DMA_IRQHandler+0xc8c>)
24006c30:	4293      	cmp	r3, r2
24006c32:	d02c      	beq.n	24006c8e <HAL_DMA_IRQHandler+0xc62>
24006c34:	687b      	ldr	r3, [r7, #4]
24006c36:	681b      	ldr	r3, [r3, #0]
24006c38:	4a20      	ldr	r2, [pc, #128]	@ (24006cbc <HAL_DMA_IRQHandler+0xc90>)
24006c3a:	4293      	cmp	r3, r2
24006c3c:	d027      	beq.n	24006c8e <HAL_DMA_IRQHandler+0xc62>
24006c3e:	687b      	ldr	r3, [r7, #4]
24006c40:	681b      	ldr	r3, [r3, #0]
24006c42:	4a1f      	ldr	r2, [pc, #124]	@ (24006cc0 <HAL_DMA_IRQHandler+0xc94>)
24006c44:	4293      	cmp	r3, r2
24006c46:	d022      	beq.n	24006c8e <HAL_DMA_IRQHandler+0xc62>
24006c48:	687b      	ldr	r3, [r7, #4]
24006c4a:	681b      	ldr	r3, [r3, #0]
24006c4c:	4a1d      	ldr	r2, [pc, #116]	@ (24006cc4 <HAL_DMA_IRQHandler+0xc98>)
24006c4e:	4293      	cmp	r3, r2
24006c50:	d01d      	beq.n	24006c8e <HAL_DMA_IRQHandler+0xc62>
24006c52:	687b      	ldr	r3, [r7, #4]
24006c54:	681b      	ldr	r3, [r3, #0]
24006c56:	4a1c      	ldr	r2, [pc, #112]	@ (24006cc8 <HAL_DMA_IRQHandler+0xc9c>)
24006c58:	4293      	cmp	r3, r2
24006c5a:	d018      	beq.n	24006c8e <HAL_DMA_IRQHandler+0xc62>
24006c5c:	687b      	ldr	r3, [r7, #4]
24006c5e:	681b      	ldr	r3, [r3, #0]
24006c60:	4a1a      	ldr	r2, [pc, #104]	@ (24006ccc <HAL_DMA_IRQHandler+0xca0>)
24006c62:	4293      	cmp	r3, r2
24006c64:	d013      	beq.n	24006c8e <HAL_DMA_IRQHandler+0xc62>
24006c66:	687b      	ldr	r3, [r7, #4]
24006c68:	681b      	ldr	r3, [r3, #0]
24006c6a:	4a19      	ldr	r2, [pc, #100]	@ (24006cd0 <HAL_DMA_IRQHandler+0xca4>)
24006c6c:	4293      	cmp	r3, r2
24006c6e:	d00e      	beq.n	24006c8e <HAL_DMA_IRQHandler+0xc62>
24006c70:	687b      	ldr	r3, [r7, #4]
24006c72:	681b      	ldr	r3, [r3, #0]
24006c74:	4a17      	ldr	r2, [pc, #92]	@ (24006cd4 <HAL_DMA_IRQHandler+0xca8>)
24006c76:	4293      	cmp	r3, r2
24006c78:	d009      	beq.n	24006c8e <HAL_DMA_IRQHandler+0xc62>
24006c7a:	687b      	ldr	r3, [r7, #4]
24006c7c:	681b      	ldr	r3, [r3, #0]
24006c7e:	4a16      	ldr	r2, [pc, #88]	@ (24006cd8 <HAL_DMA_IRQHandler+0xcac>)
24006c80:	4293      	cmp	r3, r2
24006c82:	d004      	beq.n	24006c8e <HAL_DMA_IRQHandler+0xc62>
24006c84:	687b      	ldr	r3, [r7, #4]
24006c86:	681b      	ldr	r3, [r3, #0]
24006c88:	4a14      	ldr	r2, [pc, #80]	@ (24006cdc <HAL_DMA_IRQHandler+0xcb0>)
24006c8a:	4293      	cmp	r3, r2
24006c8c:	d128      	bne.n	24006ce0 <HAL_DMA_IRQHandler+0xcb4>
24006c8e:	687b      	ldr	r3, [r7, #4]
24006c90:	681b      	ldr	r3, [r3, #0]
24006c92:	681a      	ldr	r2, [r3, #0]
24006c94:	687b      	ldr	r3, [r7, #4]
24006c96:	681b      	ldr	r3, [r3, #0]
24006c98:	f022 0214 	bic.w	r2, r2, #20
24006c9c:	601a      	str	r2, [r3, #0]
24006c9e:	e027      	b.n	24006cf0 <HAL_DMA_IRQHandler+0xcc4>
24006ca0:	40020010 	.word	0x40020010
24006ca4:	40020028 	.word	0x40020028
24006ca8:	40020040 	.word	0x40020040
24006cac:	40020058 	.word	0x40020058
24006cb0:	40020070 	.word	0x40020070
24006cb4:	40020088 	.word	0x40020088
24006cb8:	400200a0 	.word	0x400200a0
24006cbc:	400200b8 	.word	0x400200b8
24006cc0:	40020410 	.word	0x40020410
24006cc4:	40020428 	.word	0x40020428
24006cc8:	40020440 	.word	0x40020440
24006ccc:	40020458 	.word	0x40020458
24006cd0:	40020470 	.word	0x40020470
24006cd4:	40020488 	.word	0x40020488
24006cd8:	400204a0 	.word	0x400204a0
24006cdc:	400204b8 	.word	0x400204b8
24006ce0:	687b      	ldr	r3, [r7, #4]
24006ce2:	681b      	ldr	r3, [r3, #0]
24006ce4:	681a      	ldr	r2, [r3, #0]
24006ce6:	687b      	ldr	r3, [r7, #4]
24006ce8:	681b      	ldr	r3, [r3, #0]
24006cea:	f022 020a 	bic.w	r2, r2, #10
24006cee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
24006cf0:	687b      	ldr	r3, [r7, #4]
24006cf2:	2201      	movs	r2, #1
24006cf4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
24006cf8:	687b      	ldr	r3, [r7, #4]
24006cfa:	2200      	movs	r2, #0
24006cfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
24006d00:	687b      	ldr	r3, [r7, #4]
24006d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
24006d04:	2b00      	cmp	r3, #0
24006d06:	f000 8097 	beq.w	24006e38 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
24006d0a:	687b      	ldr	r3, [r7, #4]
24006d0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
24006d0e:	6878      	ldr	r0, [r7, #4]
24006d10:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24006d12:	e091      	b.n	24006e38 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
24006d14:	687b      	ldr	r3, [r7, #4]
24006d16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
24006d18:	f003 031f 	and.w	r3, r3, #31
24006d1c:	2208      	movs	r2, #8
24006d1e:	409a      	lsls	r2, r3
24006d20:	697b      	ldr	r3, [r7, #20]
24006d22:	4013      	ands	r3, r2
24006d24:	2b00      	cmp	r3, #0
24006d26:	f000 8088 	beq.w	24006e3a <HAL_DMA_IRQHandler+0xe0e>
24006d2a:	693b      	ldr	r3, [r7, #16]
24006d2c:	f003 0308 	and.w	r3, r3, #8
24006d30:	2b00      	cmp	r3, #0
24006d32:	f000 8082 	beq.w	24006e3a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
24006d36:	687b      	ldr	r3, [r7, #4]
24006d38:	681b      	ldr	r3, [r3, #0]
24006d3a:	4a41      	ldr	r2, [pc, #260]	@ (24006e40 <HAL_DMA_IRQHandler+0xe14>)
24006d3c:	4293      	cmp	r3, r2
24006d3e:	d04a      	beq.n	24006dd6 <HAL_DMA_IRQHandler+0xdaa>
24006d40:	687b      	ldr	r3, [r7, #4]
24006d42:	681b      	ldr	r3, [r3, #0]
24006d44:	4a3f      	ldr	r2, [pc, #252]	@ (24006e44 <HAL_DMA_IRQHandler+0xe18>)
24006d46:	4293      	cmp	r3, r2
24006d48:	d045      	beq.n	24006dd6 <HAL_DMA_IRQHandler+0xdaa>
24006d4a:	687b      	ldr	r3, [r7, #4]
24006d4c:	681b      	ldr	r3, [r3, #0]
24006d4e:	4a3e      	ldr	r2, [pc, #248]	@ (24006e48 <HAL_DMA_IRQHandler+0xe1c>)
24006d50:	4293      	cmp	r3, r2
24006d52:	d040      	beq.n	24006dd6 <HAL_DMA_IRQHandler+0xdaa>
24006d54:	687b      	ldr	r3, [r7, #4]
24006d56:	681b      	ldr	r3, [r3, #0]
24006d58:	4a3c      	ldr	r2, [pc, #240]	@ (24006e4c <HAL_DMA_IRQHandler+0xe20>)
24006d5a:	4293      	cmp	r3, r2
24006d5c:	d03b      	beq.n	24006dd6 <HAL_DMA_IRQHandler+0xdaa>
24006d5e:	687b      	ldr	r3, [r7, #4]
24006d60:	681b      	ldr	r3, [r3, #0]
24006d62:	4a3b      	ldr	r2, [pc, #236]	@ (24006e50 <HAL_DMA_IRQHandler+0xe24>)
24006d64:	4293      	cmp	r3, r2
24006d66:	d036      	beq.n	24006dd6 <HAL_DMA_IRQHandler+0xdaa>
24006d68:	687b      	ldr	r3, [r7, #4]
24006d6a:	681b      	ldr	r3, [r3, #0]
24006d6c:	4a39      	ldr	r2, [pc, #228]	@ (24006e54 <HAL_DMA_IRQHandler+0xe28>)
24006d6e:	4293      	cmp	r3, r2
24006d70:	d031      	beq.n	24006dd6 <HAL_DMA_IRQHandler+0xdaa>
24006d72:	687b      	ldr	r3, [r7, #4]
24006d74:	681b      	ldr	r3, [r3, #0]
24006d76:	4a38      	ldr	r2, [pc, #224]	@ (24006e58 <HAL_DMA_IRQHandler+0xe2c>)
24006d78:	4293      	cmp	r3, r2
24006d7a:	d02c      	beq.n	24006dd6 <HAL_DMA_IRQHandler+0xdaa>
24006d7c:	687b      	ldr	r3, [r7, #4]
24006d7e:	681b      	ldr	r3, [r3, #0]
24006d80:	4a36      	ldr	r2, [pc, #216]	@ (24006e5c <HAL_DMA_IRQHandler+0xe30>)
24006d82:	4293      	cmp	r3, r2
24006d84:	d027      	beq.n	24006dd6 <HAL_DMA_IRQHandler+0xdaa>
24006d86:	687b      	ldr	r3, [r7, #4]
24006d88:	681b      	ldr	r3, [r3, #0]
24006d8a:	4a35      	ldr	r2, [pc, #212]	@ (24006e60 <HAL_DMA_IRQHandler+0xe34>)
24006d8c:	4293      	cmp	r3, r2
24006d8e:	d022      	beq.n	24006dd6 <HAL_DMA_IRQHandler+0xdaa>
24006d90:	687b      	ldr	r3, [r7, #4]
24006d92:	681b      	ldr	r3, [r3, #0]
24006d94:	4a33      	ldr	r2, [pc, #204]	@ (24006e64 <HAL_DMA_IRQHandler+0xe38>)
24006d96:	4293      	cmp	r3, r2
24006d98:	d01d      	beq.n	24006dd6 <HAL_DMA_IRQHandler+0xdaa>
24006d9a:	687b      	ldr	r3, [r7, #4]
24006d9c:	681b      	ldr	r3, [r3, #0]
24006d9e:	4a32      	ldr	r2, [pc, #200]	@ (24006e68 <HAL_DMA_IRQHandler+0xe3c>)
24006da0:	4293      	cmp	r3, r2
24006da2:	d018      	beq.n	24006dd6 <HAL_DMA_IRQHandler+0xdaa>
24006da4:	687b      	ldr	r3, [r7, #4]
24006da6:	681b      	ldr	r3, [r3, #0]
24006da8:	4a30      	ldr	r2, [pc, #192]	@ (24006e6c <HAL_DMA_IRQHandler+0xe40>)
24006daa:	4293      	cmp	r3, r2
24006dac:	d013      	beq.n	24006dd6 <HAL_DMA_IRQHandler+0xdaa>
24006dae:	687b      	ldr	r3, [r7, #4]
24006db0:	681b      	ldr	r3, [r3, #0]
24006db2:	4a2f      	ldr	r2, [pc, #188]	@ (24006e70 <HAL_DMA_IRQHandler+0xe44>)
24006db4:	4293      	cmp	r3, r2
24006db6:	d00e      	beq.n	24006dd6 <HAL_DMA_IRQHandler+0xdaa>
24006db8:	687b      	ldr	r3, [r7, #4]
24006dba:	681b      	ldr	r3, [r3, #0]
24006dbc:	4a2d      	ldr	r2, [pc, #180]	@ (24006e74 <HAL_DMA_IRQHandler+0xe48>)
24006dbe:	4293      	cmp	r3, r2
24006dc0:	d009      	beq.n	24006dd6 <HAL_DMA_IRQHandler+0xdaa>
24006dc2:	687b      	ldr	r3, [r7, #4]
24006dc4:	681b      	ldr	r3, [r3, #0]
24006dc6:	4a2c      	ldr	r2, [pc, #176]	@ (24006e78 <HAL_DMA_IRQHandler+0xe4c>)
24006dc8:	4293      	cmp	r3, r2
24006dca:	d004      	beq.n	24006dd6 <HAL_DMA_IRQHandler+0xdaa>
24006dcc:	687b      	ldr	r3, [r7, #4]
24006dce:	681b      	ldr	r3, [r3, #0]
24006dd0:	4a2a      	ldr	r2, [pc, #168]	@ (24006e7c <HAL_DMA_IRQHandler+0xe50>)
24006dd2:	4293      	cmp	r3, r2
24006dd4:	d108      	bne.n	24006de8 <HAL_DMA_IRQHandler+0xdbc>
24006dd6:	687b      	ldr	r3, [r7, #4]
24006dd8:	681b      	ldr	r3, [r3, #0]
24006dda:	681a      	ldr	r2, [r3, #0]
24006ddc:	687b      	ldr	r3, [r7, #4]
24006dde:	681b      	ldr	r3, [r3, #0]
24006de0:	f022 021c 	bic.w	r2, r2, #28
24006de4:	601a      	str	r2, [r3, #0]
24006de6:	e007      	b.n	24006df8 <HAL_DMA_IRQHandler+0xdcc>
24006de8:	687b      	ldr	r3, [r7, #4]
24006dea:	681b      	ldr	r3, [r3, #0]
24006dec:	681a      	ldr	r2, [r3, #0]
24006dee:	687b      	ldr	r3, [r7, #4]
24006df0:	681b      	ldr	r3, [r3, #0]
24006df2:	f022 020e 	bic.w	r2, r2, #14
24006df6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
24006df8:	687b      	ldr	r3, [r7, #4]
24006dfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
24006dfc:	f003 031f 	and.w	r3, r3, #31
24006e00:	2201      	movs	r2, #1
24006e02:	409a      	lsls	r2, r3
24006e04:	69fb      	ldr	r3, [r7, #28]
24006e06:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
24006e08:	687b      	ldr	r3, [r7, #4]
24006e0a:	2201      	movs	r2, #1
24006e0c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
24006e0e:	687b      	ldr	r3, [r7, #4]
24006e10:	2201      	movs	r2, #1
24006e12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
24006e16:	687b      	ldr	r3, [r7, #4]
24006e18:	2200      	movs	r2, #0
24006e1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
24006e1e:	687b      	ldr	r3, [r7, #4]
24006e20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
24006e22:	2b00      	cmp	r3, #0
24006e24:	d009      	beq.n	24006e3a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
24006e26:	687b      	ldr	r3, [r7, #4]
24006e28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
24006e2a:	6878      	ldr	r0, [r7, #4]
24006e2c:	4798      	blx	r3
24006e2e:	e004      	b.n	24006e3a <HAL_DMA_IRQHandler+0xe0e>
          return;
24006e30:	bf00      	nop
24006e32:	e002      	b.n	24006e3a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24006e34:	bf00      	nop
24006e36:	e000      	b.n	24006e3a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24006e38:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
24006e3a:	3728      	adds	r7, #40	@ 0x28
24006e3c:	46bd      	mov	sp, r7
24006e3e:	bd80      	pop	{r7, pc}
24006e40:	40020010 	.word	0x40020010
24006e44:	40020028 	.word	0x40020028
24006e48:	40020040 	.word	0x40020040
24006e4c:	40020058 	.word	0x40020058
24006e50:	40020070 	.word	0x40020070
24006e54:	40020088 	.word	0x40020088
24006e58:	400200a0 	.word	0x400200a0
24006e5c:	400200b8 	.word	0x400200b8
24006e60:	40020410 	.word	0x40020410
24006e64:	40020428 	.word	0x40020428
24006e68:	40020440 	.word	0x40020440
24006e6c:	40020458 	.word	0x40020458
24006e70:	40020470 	.word	0x40020470
24006e74:	40020488 	.word	0x40020488
24006e78:	400204a0 	.word	0x400204a0
24006e7c:	400204b8 	.word	0x400204b8

24006e80 <HAL_DMA_RegisterCallback>:
  * @param  pCallback:            pointer to private callback function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
24006e80:	b480      	push	{r7}
24006e82:	b087      	sub	sp, #28
24006e84:	af00      	add	r7, sp, #0
24006e86:	60f8      	str	r0, [r7, #12]
24006e88:	460b      	mov	r3, r1
24006e8a:	607a      	str	r2, [r7, #4]
24006e8c:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
24006e8e:	2300      	movs	r3, #0
24006e90:	75fb      	strb	r3, [r7, #23]

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
24006e92:	68fb      	ldr	r3, [r7, #12]
24006e94:	2b00      	cmp	r3, #0
24006e96:	d101      	bne.n	24006e9c <HAL_DMA_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
24006e98:	2301      	movs	r3, #1
24006e9a:	e045      	b.n	24006f28 <HAL_DMA_RegisterCallback+0xa8>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
24006e9c:	68fb      	ldr	r3, [r7, #12]
24006e9e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
24006ea2:	2b01      	cmp	r3, #1
24006ea4:	d101      	bne.n	24006eaa <HAL_DMA_RegisterCallback+0x2a>
24006ea6:	2302      	movs	r3, #2
24006ea8:	e03e      	b.n	24006f28 <HAL_DMA_RegisterCallback+0xa8>
24006eaa:	68fb      	ldr	r3, [r7, #12]
24006eac:	2201      	movs	r2, #1
24006eae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
24006eb2:	68fb      	ldr	r3, [r7, #12]
24006eb4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
24006eb8:	b2db      	uxtb	r3, r3
24006eba:	2b01      	cmp	r3, #1
24006ebc:	d12d      	bne.n	24006f1a <HAL_DMA_RegisterCallback+0x9a>
  {
    switch (CallbackID)
24006ebe:	7afb      	ldrb	r3, [r7, #11]
24006ec0:	2b05      	cmp	r3, #5
24006ec2:	d827      	bhi.n	24006f14 <HAL_DMA_RegisterCallback+0x94>
24006ec4:	a201      	add	r2, pc, #4	@ (adr r2, 24006ecc <HAL_DMA_RegisterCallback+0x4c>)
24006ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24006eca:	bf00      	nop
24006ecc:	24006ee5 	.word	0x24006ee5
24006ed0:	24006eed 	.word	0x24006eed
24006ed4:	24006ef5 	.word	0x24006ef5
24006ed8:	24006efd 	.word	0x24006efd
24006edc:	24006f05 	.word	0x24006f05
24006ee0:	24006f0d 	.word	0x24006f0d
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
24006ee4:	68fb      	ldr	r3, [r7, #12]
24006ee6:	687a      	ldr	r2, [r7, #4]
24006ee8:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
24006eea:	e018      	b.n	24006f1e <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
24006eec:	68fb      	ldr	r3, [r7, #12]
24006eee:	687a      	ldr	r2, [r7, #4]
24006ef0:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
24006ef2:	e014      	b.n	24006f1e <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
24006ef4:	68fb      	ldr	r3, [r7, #12]
24006ef6:	687a      	ldr	r2, [r7, #4]
24006ef8:	645a      	str	r2, [r3, #68]	@ 0x44
      break;
24006efa:	e010      	b.n	24006f1e <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
24006efc:	68fb      	ldr	r3, [r7, #12]
24006efe:	687a      	ldr	r2, [r7, #4]
24006f00:	649a      	str	r2, [r3, #72]	@ 0x48
      break;
24006f02:	e00c      	b.n	24006f1e <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
24006f04:	68fb      	ldr	r3, [r7, #12]
24006f06:	687a      	ldr	r2, [r7, #4]
24006f08:	64da      	str	r2, [r3, #76]	@ 0x4c
      break;
24006f0a:	e008      	b.n	24006f1e <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
24006f0c:	68fb      	ldr	r3, [r7, #12]
24006f0e:	687a      	ldr	r2, [r7, #4]
24006f10:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
24006f12:	e004      	b.n	24006f1e <HAL_DMA_RegisterCallback+0x9e>

    default:
      status =  HAL_ERROR;
24006f14:	2301      	movs	r3, #1
24006f16:	75fb      	strb	r3, [r7, #23]
      break;
24006f18:	e001      	b.n	24006f1e <HAL_DMA_RegisterCallback+0x9e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
24006f1a:	2301      	movs	r3, #1
24006f1c:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
24006f1e:	68fb      	ldr	r3, [r7, #12]
24006f20:	2200      	movs	r2, #0
24006f22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
24006f26:	7dfb      	ldrb	r3, [r7, #23]
}
24006f28:	4618      	mov	r0, r3
24006f2a:	371c      	adds	r7, #28
24006f2c:	46bd      	mov	sp, r7
24006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
24006f32:	4770      	bx	lr

24006f34 <HAL_DMA_UnRegisterCallback>:
  * @param  CallbackID:           User Callback identifier
  *                               a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
24006f34:	b480      	push	{r7}
24006f36:	b085      	sub	sp, #20
24006f38:	af00      	add	r7, sp, #0
24006f3a:	6078      	str	r0, [r7, #4]
24006f3c:	460b      	mov	r3, r1
24006f3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
24006f40:	2300      	movs	r3, #0
24006f42:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
24006f44:	687b      	ldr	r3, [r7, #4]
24006f46:	2b00      	cmp	r3, #0
24006f48:	d101      	bne.n	24006f4e <HAL_DMA_UnRegisterCallback+0x1a>
  {
    return HAL_ERROR;
24006f4a:	2301      	movs	r3, #1
24006f4c:	e059      	b.n	24007002 <HAL_DMA_UnRegisterCallback+0xce>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
24006f4e:	687b      	ldr	r3, [r7, #4]
24006f50:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
24006f54:	2b01      	cmp	r3, #1
24006f56:	d101      	bne.n	24006f5c <HAL_DMA_UnRegisterCallback+0x28>
24006f58:	2302      	movs	r3, #2
24006f5a:	e052      	b.n	24007002 <HAL_DMA_UnRegisterCallback+0xce>
24006f5c:	687b      	ldr	r3, [r7, #4]
24006f5e:	2201      	movs	r2, #1
24006f60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
24006f64:	687b      	ldr	r3, [r7, #4]
24006f66:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
24006f6a:	b2db      	uxtb	r3, r3
24006f6c:	2b01      	cmp	r3, #1
24006f6e:	d141      	bne.n	24006ff4 <HAL_DMA_UnRegisterCallback+0xc0>
  {
    switch (CallbackID)
24006f70:	78fb      	ldrb	r3, [r7, #3]
24006f72:	2b06      	cmp	r3, #6
24006f74:	d83b      	bhi.n	24006fee <HAL_DMA_UnRegisterCallback+0xba>
24006f76:	a201      	add	r2, pc, #4	@ (adr r2, 24006f7c <HAL_DMA_UnRegisterCallback+0x48>)
24006f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24006f7c:	24006f99 	.word	0x24006f99
24006f80:	24006fa1 	.word	0x24006fa1
24006f84:	24006fa9 	.word	0x24006fa9
24006f88:	24006fb1 	.word	0x24006fb1
24006f8c:	24006fb9 	.word	0x24006fb9
24006f90:	24006fc1 	.word	0x24006fc1
24006f94:	24006fc9 	.word	0x24006fc9
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = NULL;
24006f98:	687b      	ldr	r3, [r7, #4]
24006f9a:	2200      	movs	r2, #0
24006f9c:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
24006f9e:	e02b      	b.n	24006ff8 <HAL_DMA_UnRegisterCallback+0xc4>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = NULL;
24006fa0:	687b      	ldr	r3, [r7, #4]
24006fa2:	2200      	movs	r2, #0
24006fa4:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
24006fa6:	e027      	b.n	24006ff8 <HAL_DMA_UnRegisterCallback+0xc4>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = NULL;
24006fa8:	687b      	ldr	r3, [r7, #4]
24006faa:	2200      	movs	r2, #0
24006fac:	645a      	str	r2, [r3, #68]	@ 0x44
      break;
24006fae:	e023      	b.n	24006ff8 <HAL_DMA_UnRegisterCallback+0xc4>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = NULL;
24006fb0:	687b      	ldr	r3, [r7, #4]
24006fb2:	2200      	movs	r2, #0
24006fb4:	649a      	str	r2, [r3, #72]	@ 0x48
      break;
24006fb6:	e01f      	b.n	24006ff8 <HAL_DMA_UnRegisterCallback+0xc4>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = NULL;
24006fb8:	687b      	ldr	r3, [r7, #4]
24006fba:	2200      	movs	r2, #0
24006fbc:	64da      	str	r2, [r3, #76]	@ 0x4c
      break;
24006fbe:	e01b      	b.n	24006ff8 <HAL_DMA_UnRegisterCallback+0xc4>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = NULL;
24006fc0:	687b      	ldr	r3, [r7, #4]
24006fc2:	2200      	movs	r2, #0
24006fc4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
24006fc6:	e017      	b.n	24006ff8 <HAL_DMA_UnRegisterCallback+0xc4>

    case   HAL_DMA_XFER_ALL_CB_ID:
      hdma->XferCpltCallback = NULL;
24006fc8:	687b      	ldr	r3, [r7, #4]
24006fca:	2200      	movs	r2, #0
24006fcc:	63da      	str	r2, [r3, #60]	@ 0x3c
      hdma->XferHalfCpltCallback = NULL;
24006fce:	687b      	ldr	r3, [r7, #4]
24006fd0:	2200      	movs	r2, #0
24006fd2:	641a      	str	r2, [r3, #64]	@ 0x40
      hdma->XferM1CpltCallback = NULL;
24006fd4:	687b      	ldr	r3, [r7, #4]
24006fd6:	2200      	movs	r2, #0
24006fd8:	645a      	str	r2, [r3, #68]	@ 0x44
      hdma->XferM1HalfCpltCallback = NULL;
24006fda:	687b      	ldr	r3, [r7, #4]
24006fdc:	2200      	movs	r2, #0
24006fde:	649a      	str	r2, [r3, #72]	@ 0x48
      hdma->XferErrorCallback = NULL;
24006fe0:	687b      	ldr	r3, [r7, #4]
24006fe2:	2200      	movs	r2, #0
24006fe4:	64da      	str	r2, [r3, #76]	@ 0x4c
      hdma->XferAbortCallback = NULL;
24006fe6:	687b      	ldr	r3, [r7, #4]
24006fe8:	2200      	movs	r2, #0
24006fea:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
24006fec:	e004      	b.n	24006ff8 <HAL_DMA_UnRegisterCallback+0xc4>

    default:
      status = HAL_ERROR;
24006fee:	2301      	movs	r3, #1
24006ff0:	73fb      	strb	r3, [r7, #15]
      break;
24006ff2:	e001      	b.n	24006ff8 <HAL_DMA_UnRegisterCallback+0xc4>
    }
  }
  else
  {
    status = HAL_ERROR;
24006ff4:	2301      	movs	r3, #1
24006ff6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
24006ff8:	687b      	ldr	r3, [r7, #4]
24006ffa:	2200      	movs	r2, #0
24006ffc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
24007000:	7bfb      	ldrb	r3, [r7, #15]
}
24007002:	4618      	mov	r0, r3
24007004:	3714      	adds	r7, #20
24007006:	46bd      	mov	sp, r7
24007008:	f85d 7b04 	ldr.w	r7, [sp], #4
2400700c:	4770      	bx	lr
2400700e:	bf00      	nop

24007010 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
24007010:	b480      	push	{r7}
24007012:	b083      	sub	sp, #12
24007014:	af00      	add	r7, sp, #0
24007016:	6078      	str	r0, [r7, #4]
  return hdma->State;
24007018:	687b      	ldr	r3, [r7, #4]
2400701a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
2400701e:	b2db      	uxtb	r3, r3
}
24007020:	4618      	mov	r0, r3
24007022:	370c      	adds	r7, #12
24007024:	46bd      	mov	sp, r7
24007026:	f85d 7b04 	ldr.w	r7, [sp], #4
2400702a:	4770      	bx	lr

2400702c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
2400702c:	b480      	push	{r7}
2400702e:	b083      	sub	sp, #12
24007030:	af00      	add	r7, sp, #0
24007032:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
24007034:	687b      	ldr	r3, [r7, #4]
24007036:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
24007038:	4618      	mov	r0, r3
2400703a:	370c      	adds	r7, #12
2400703c:	46bd      	mov	sp, r7
2400703e:	f85d 7b04 	ldr.w	r7, [sp], #4
24007042:	4770      	bx	lr

24007044 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
24007044:	b480      	push	{r7}
24007046:	b087      	sub	sp, #28
24007048:	af00      	add	r7, sp, #0
2400704a:	60f8      	str	r0, [r7, #12]
2400704c:	60b9      	str	r1, [r7, #8]
2400704e:	607a      	str	r2, [r7, #4]
24007050:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
24007052:	68fb      	ldr	r3, [r7, #12]
24007054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
24007056:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
24007058:	68fb      	ldr	r3, [r7, #12]
2400705a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
2400705c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
2400705e:	68fb      	ldr	r3, [r7, #12]
24007060:	681b      	ldr	r3, [r3, #0]
24007062:	4a7f      	ldr	r2, [pc, #508]	@ (24007260 <DMA_SetConfig+0x21c>)
24007064:	4293      	cmp	r3, r2
24007066:	d072      	beq.n	2400714e <DMA_SetConfig+0x10a>
24007068:	68fb      	ldr	r3, [r7, #12]
2400706a:	681b      	ldr	r3, [r3, #0]
2400706c:	4a7d      	ldr	r2, [pc, #500]	@ (24007264 <DMA_SetConfig+0x220>)
2400706e:	4293      	cmp	r3, r2
24007070:	d06d      	beq.n	2400714e <DMA_SetConfig+0x10a>
24007072:	68fb      	ldr	r3, [r7, #12]
24007074:	681b      	ldr	r3, [r3, #0]
24007076:	4a7c      	ldr	r2, [pc, #496]	@ (24007268 <DMA_SetConfig+0x224>)
24007078:	4293      	cmp	r3, r2
2400707a:	d068      	beq.n	2400714e <DMA_SetConfig+0x10a>
2400707c:	68fb      	ldr	r3, [r7, #12]
2400707e:	681b      	ldr	r3, [r3, #0]
24007080:	4a7a      	ldr	r2, [pc, #488]	@ (2400726c <DMA_SetConfig+0x228>)
24007082:	4293      	cmp	r3, r2
24007084:	d063      	beq.n	2400714e <DMA_SetConfig+0x10a>
24007086:	68fb      	ldr	r3, [r7, #12]
24007088:	681b      	ldr	r3, [r3, #0]
2400708a:	4a79      	ldr	r2, [pc, #484]	@ (24007270 <DMA_SetConfig+0x22c>)
2400708c:	4293      	cmp	r3, r2
2400708e:	d05e      	beq.n	2400714e <DMA_SetConfig+0x10a>
24007090:	68fb      	ldr	r3, [r7, #12]
24007092:	681b      	ldr	r3, [r3, #0]
24007094:	4a77      	ldr	r2, [pc, #476]	@ (24007274 <DMA_SetConfig+0x230>)
24007096:	4293      	cmp	r3, r2
24007098:	d059      	beq.n	2400714e <DMA_SetConfig+0x10a>
2400709a:	68fb      	ldr	r3, [r7, #12]
2400709c:	681b      	ldr	r3, [r3, #0]
2400709e:	4a76      	ldr	r2, [pc, #472]	@ (24007278 <DMA_SetConfig+0x234>)
240070a0:	4293      	cmp	r3, r2
240070a2:	d054      	beq.n	2400714e <DMA_SetConfig+0x10a>
240070a4:	68fb      	ldr	r3, [r7, #12]
240070a6:	681b      	ldr	r3, [r3, #0]
240070a8:	4a74      	ldr	r2, [pc, #464]	@ (2400727c <DMA_SetConfig+0x238>)
240070aa:	4293      	cmp	r3, r2
240070ac:	d04f      	beq.n	2400714e <DMA_SetConfig+0x10a>
240070ae:	68fb      	ldr	r3, [r7, #12]
240070b0:	681b      	ldr	r3, [r3, #0]
240070b2:	4a73      	ldr	r2, [pc, #460]	@ (24007280 <DMA_SetConfig+0x23c>)
240070b4:	4293      	cmp	r3, r2
240070b6:	d04a      	beq.n	2400714e <DMA_SetConfig+0x10a>
240070b8:	68fb      	ldr	r3, [r7, #12]
240070ba:	681b      	ldr	r3, [r3, #0]
240070bc:	4a71      	ldr	r2, [pc, #452]	@ (24007284 <DMA_SetConfig+0x240>)
240070be:	4293      	cmp	r3, r2
240070c0:	d045      	beq.n	2400714e <DMA_SetConfig+0x10a>
240070c2:	68fb      	ldr	r3, [r7, #12]
240070c4:	681b      	ldr	r3, [r3, #0]
240070c6:	4a70      	ldr	r2, [pc, #448]	@ (24007288 <DMA_SetConfig+0x244>)
240070c8:	4293      	cmp	r3, r2
240070ca:	d040      	beq.n	2400714e <DMA_SetConfig+0x10a>
240070cc:	68fb      	ldr	r3, [r7, #12]
240070ce:	681b      	ldr	r3, [r3, #0]
240070d0:	4a6e      	ldr	r2, [pc, #440]	@ (2400728c <DMA_SetConfig+0x248>)
240070d2:	4293      	cmp	r3, r2
240070d4:	d03b      	beq.n	2400714e <DMA_SetConfig+0x10a>
240070d6:	68fb      	ldr	r3, [r7, #12]
240070d8:	681b      	ldr	r3, [r3, #0]
240070da:	4a6d      	ldr	r2, [pc, #436]	@ (24007290 <DMA_SetConfig+0x24c>)
240070dc:	4293      	cmp	r3, r2
240070de:	d036      	beq.n	2400714e <DMA_SetConfig+0x10a>
240070e0:	68fb      	ldr	r3, [r7, #12]
240070e2:	681b      	ldr	r3, [r3, #0]
240070e4:	4a6b      	ldr	r2, [pc, #428]	@ (24007294 <DMA_SetConfig+0x250>)
240070e6:	4293      	cmp	r3, r2
240070e8:	d031      	beq.n	2400714e <DMA_SetConfig+0x10a>
240070ea:	68fb      	ldr	r3, [r7, #12]
240070ec:	681b      	ldr	r3, [r3, #0]
240070ee:	4a6a      	ldr	r2, [pc, #424]	@ (24007298 <DMA_SetConfig+0x254>)
240070f0:	4293      	cmp	r3, r2
240070f2:	d02c      	beq.n	2400714e <DMA_SetConfig+0x10a>
240070f4:	68fb      	ldr	r3, [r7, #12]
240070f6:	681b      	ldr	r3, [r3, #0]
240070f8:	4a68      	ldr	r2, [pc, #416]	@ (2400729c <DMA_SetConfig+0x258>)
240070fa:	4293      	cmp	r3, r2
240070fc:	d027      	beq.n	2400714e <DMA_SetConfig+0x10a>
240070fe:	68fb      	ldr	r3, [r7, #12]
24007100:	681b      	ldr	r3, [r3, #0]
24007102:	4a67      	ldr	r2, [pc, #412]	@ (240072a0 <DMA_SetConfig+0x25c>)
24007104:	4293      	cmp	r3, r2
24007106:	d022      	beq.n	2400714e <DMA_SetConfig+0x10a>
24007108:	68fb      	ldr	r3, [r7, #12]
2400710a:	681b      	ldr	r3, [r3, #0]
2400710c:	4a65      	ldr	r2, [pc, #404]	@ (240072a4 <DMA_SetConfig+0x260>)
2400710e:	4293      	cmp	r3, r2
24007110:	d01d      	beq.n	2400714e <DMA_SetConfig+0x10a>
24007112:	68fb      	ldr	r3, [r7, #12]
24007114:	681b      	ldr	r3, [r3, #0]
24007116:	4a64      	ldr	r2, [pc, #400]	@ (240072a8 <DMA_SetConfig+0x264>)
24007118:	4293      	cmp	r3, r2
2400711a:	d018      	beq.n	2400714e <DMA_SetConfig+0x10a>
2400711c:	68fb      	ldr	r3, [r7, #12]
2400711e:	681b      	ldr	r3, [r3, #0]
24007120:	4a62      	ldr	r2, [pc, #392]	@ (240072ac <DMA_SetConfig+0x268>)
24007122:	4293      	cmp	r3, r2
24007124:	d013      	beq.n	2400714e <DMA_SetConfig+0x10a>
24007126:	68fb      	ldr	r3, [r7, #12]
24007128:	681b      	ldr	r3, [r3, #0]
2400712a:	4a61      	ldr	r2, [pc, #388]	@ (240072b0 <DMA_SetConfig+0x26c>)
2400712c:	4293      	cmp	r3, r2
2400712e:	d00e      	beq.n	2400714e <DMA_SetConfig+0x10a>
24007130:	68fb      	ldr	r3, [r7, #12]
24007132:	681b      	ldr	r3, [r3, #0]
24007134:	4a5f      	ldr	r2, [pc, #380]	@ (240072b4 <DMA_SetConfig+0x270>)
24007136:	4293      	cmp	r3, r2
24007138:	d009      	beq.n	2400714e <DMA_SetConfig+0x10a>
2400713a:	68fb      	ldr	r3, [r7, #12]
2400713c:	681b      	ldr	r3, [r3, #0]
2400713e:	4a5e      	ldr	r2, [pc, #376]	@ (240072b8 <DMA_SetConfig+0x274>)
24007140:	4293      	cmp	r3, r2
24007142:	d004      	beq.n	2400714e <DMA_SetConfig+0x10a>
24007144:	68fb      	ldr	r3, [r7, #12]
24007146:	681b      	ldr	r3, [r3, #0]
24007148:	4a5c      	ldr	r2, [pc, #368]	@ (240072bc <DMA_SetConfig+0x278>)
2400714a:	4293      	cmp	r3, r2
2400714c:	d101      	bne.n	24007152 <DMA_SetConfig+0x10e>
2400714e:	2301      	movs	r3, #1
24007150:	e000      	b.n	24007154 <DMA_SetConfig+0x110>
24007152:	2300      	movs	r3, #0
24007154:	2b00      	cmp	r3, #0
24007156:	d00d      	beq.n	24007174 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24007158:	68fb      	ldr	r3, [r7, #12]
2400715a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
2400715c:	68fa      	ldr	r2, [r7, #12]
2400715e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
24007160:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
24007162:	68fb      	ldr	r3, [r7, #12]
24007164:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
24007166:	2b00      	cmp	r3, #0
24007168:	d004      	beq.n	24007174 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
2400716a:	68fb      	ldr	r3, [r7, #12]
2400716c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2400716e:	68fa      	ldr	r2, [r7, #12]
24007170:	6f52      	ldr	r2, [r2, #116]	@ 0x74
24007172:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24007174:	68fb      	ldr	r3, [r7, #12]
24007176:	681b      	ldr	r3, [r3, #0]
24007178:	4a39      	ldr	r2, [pc, #228]	@ (24007260 <DMA_SetConfig+0x21c>)
2400717a:	4293      	cmp	r3, r2
2400717c:	d04a      	beq.n	24007214 <DMA_SetConfig+0x1d0>
2400717e:	68fb      	ldr	r3, [r7, #12]
24007180:	681b      	ldr	r3, [r3, #0]
24007182:	4a38      	ldr	r2, [pc, #224]	@ (24007264 <DMA_SetConfig+0x220>)
24007184:	4293      	cmp	r3, r2
24007186:	d045      	beq.n	24007214 <DMA_SetConfig+0x1d0>
24007188:	68fb      	ldr	r3, [r7, #12]
2400718a:	681b      	ldr	r3, [r3, #0]
2400718c:	4a36      	ldr	r2, [pc, #216]	@ (24007268 <DMA_SetConfig+0x224>)
2400718e:	4293      	cmp	r3, r2
24007190:	d040      	beq.n	24007214 <DMA_SetConfig+0x1d0>
24007192:	68fb      	ldr	r3, [r7, #12]
24007194:	681b      	ldr	r3, [r3, #0]
24007196:	4a35      	ldr	r2, [pc, #212]	@ (2400726c <DMA_SetConfig+0x228>)
24007198:	4293      	cmp	r3, r2
2400719a:	d03b      	beq.n	24007214 <DMA_SetConfig+0x1d0>
2400719c:	68fb      	ldr	r3, [r7, #12]
2400719e:	681b      	ldr	r3, [r3, #0]
240071a0:	4a33      	ldr	r2, [pc, #204]	@ (24007270 <DMA_SetConfig+0x22c>)
240071a2:	4293      	cmp	r3, r2
240071a4:	d036      	beq.n	24007214 <DMA_SetConfig+0x1d0>
240071a6:	68fb      	ldr	r3, [r7, #12]
240071a8:	681b      	ldr	r3, [r3, #0]
240071aa:	4a32      	ldr	r2, [pc, #200]	@ (24007274 <DMA_SetConfig+0x230>)
240071ac:	4293      	cmp	r3, r2
240071ae:	d031      	beq.n	24007214 <DMA_SetConfig+0x1d0>
240071b0:	68fb      	ldr	r3, [r7, #12]
240071b2:	681b      	ldr	r3, [r3, #0]
240071b4:	4a30      	ldr	r2, [pc, #192]	@ (24007278 <DMA_SetConfig+0x234>)
240071b6:	4293      	cmp	r3, r2
240071b8:	d02c      	beq.n	24007214 <DMA_SetConfig+0x1d0>
240071ba:	68fb      	ldr	r3, [r7, #12]
240071bc:	681b      	ldr	r3, [r3, #0]
240071be:	4a2f      	ldr	r2, [pc, #188]	@ (2400727c <DMA_SetConfig+0x238>)
240071c0:	4293      	cmp	r3, r2
240071c2:	d027      	beq.n	24007214 <DMA_SetConfig+0x1d0>
240071c4:	68fb      	ldr	r3, [r7, #12]
240071c6:	681b      	ldr	r3, [r3, #0]
240071c8:	4a2d      	ldr	r2, [pc, #180]	@ (24007280 <DMA_SetConfig+0x23c>)
240071ca:	4293      	cmp	r3, r2
240071cc:	d022      	beq.n	24007214 <DMA_SetConfig+0x1d0>
240071ce:	68fb      	ldr	r3, [r7, #12]
240071d0:	681b      	ldr	r3, [r3, #0]
240071d2:	4a2c      	ldr	r2, [pc, #176]	@ (24007284 <DMA_SetConfig+0x240>)
240071d4:	4293      	cmp	r3, r2
240071d6:	d01d      	beq.n	24007214 <DMA_SetConfig+0x1d0>
240071d8:	68fb      	ldr	r3, [r7, #12]
240071da:	681b      	ldr	r3, [r3, #0]
240071dc:	4a2a      	ldr	r2, [pc, #168]	@ (24007288 <DMA_SetConfig+0x244>)
240071de:	4293      	cmp	r3, r2
240071e0:	d018      	beq.n	24007214 <DMA_SetConfig+0x1d0>
240071e2:	68fb      	ldr	r3, [r7, #12]
240071e4:	681b      	ldr	r3, [r3, #0]
240071e6:	4a29      	ldr	r2, [pc, #164]	@ (2400728c <DMA_SetConfig+0x248>)
240071e8:	4293      	cmp	r3, r2
240071ea:	d013      	beq.n	24007214 <DMA_SetConfig+0x1d0>
240071ec:	68fb      	ldr	r3, [r7, #12]
240071ee:	681b      	ldr	r3, [r3, #0]
240071f0:	4a27      	ldr	r2, [pc, #156]	@ (24007290 <DMA_SetConfig+0x24c>)
240071f2:	4293      	cmp	r3, r2
240071f4:	d00e      	beq.n	24007214 <DMA_SetConfig+0x1d0>
240071f6:	68fb      	ldr	r3, [r7, #12]
240071f8:	681b      	ldr	r3, [r3, #0]
240071fa:	4a26      	ldr	r2, [pc, #152]	@ (24007294 <DMA_SetConfig+0x250>)
240071fc:	4293      	cmp	r3, r2
240071fe:	d009      	beq.n	24007214 <DMA_SetConfig+0x1d0>
24007200:	68fb      	ldr	r3, [r7, #12]
24007202:	681b      	ldr	r3, [r3, #0]
24007204:	4a24      	ldr	r2, [pc, #144]	@ (24007298 <DMA_SetConfig+0x254>)
24007206:	4293      	cmp	r3, r2
24007208:	d004      	beq.n	24007214 <DMA_SetConfig+0x1d0>
2400720a:	68fb      	ldr	r3, [r7, #12]
2400720c:	681b      	ldr	r3, [r3, #0]
2400720e:	4a23      	ldr	r2, [pc, #140]	@ (2400729c <DMA_SetConfig+0x258>)
24007210:	4293      	cmp	r3, r2
24007212:	d101      	bne.n	24007218 <DMA_SetConfig+0x1d4>
24007214:	2301      	movs	r3, #1
24007216:	e000      	b.n	2400721a <DMA_SetConfig+0x1d6>
24007218:	2300      	movs	r3, #0
2400721a:	2b00      	cmp	r3, #0
2400721c:	d059      	beq.n	240072d2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
2400721e:	68fb      	ldr	r3, [r7, #12]
24007220:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
24007222:	f003 031f 	and.w	r3, r3, #31
24007226:	223f      	movs	r2, #63	@ 0x3f
24007228:	409a      	lsls	r2, r3
2400722a:	697b      	ldr	r3, [r7, #20]
2400722c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
2400722e:	68fb      	ldr	r3, [r7, #12]
24007230:	681b      	ldr	r3, [r3, #0]
24007232:	681a      	ldr	r2, [r3, #0]
24007234:	68fb      	ldr	r3, [r7, #12]
24007236:	681b      	ldr	r3, [r3, #0]
24007238:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
2400723c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
2400723e:	68fb      	ldr	r3, [r7, #12]
24007240:	681b      	ldr	r3, [r3, #0]
24007242:	683a      	ldr	r2, [r7, #0]
24007244:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
24007246:	68fb      	ldr	r3, [r7, #12]
24007248:	689b      	ldr	r3, [r3, #8]
2400724a:	2b40      	cmp	r3, #64	@ 0x40
2400724c:	d138      	bne.n	240072c0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
2400724e:	68fb      	ldr	r3, [r7, #12]
24007250:	681b      	ldr	r3, [r3, #0]
24007252:	687a      	ldr	r2, [r7, #4]
24007254:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
24007256:	68fb      	ldr	r3, [r7, #12]
24007258:	681b      	ldr	r3, [r3, #0]
2400725a:	68ba      	ldr	r2, [r7, #8]
2400725c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
2400725e:	e086      	b.n	2400736e <DMA_SetConfig+0x32a>
24007260:	40020010 	.word	0x40020010
24007264:	40020028 	.word	0x40020028
24007268:	40020040 	.word	0x40020040
2400726c:	40020058 	.word	0x40020058
24007270:	40020070 	.word	0x40020070
24007274:	40020088 	.word	0x40020088
24007278:	400200a0 	.word	0x400200a0
2400727c:	400200b8 	.word	0x400200b8
24007280:	40020410 	.word	0x40020410
24007284:	40020428 	.word	0x40020428
24007288:	40020440 	.word	0x40020440
2400728c:	40020458 	.word	0x40020458
24007290:	40020470 	.word	0x40020470
24007294:	40020488 	.word	0x40020488
24007298:	400204a0 	.word	0x400204a0
2400729c:	400204b8 	.word	0x400204b8
240072a0:	58025408 	.word	0x58025408
240072a4:	5802541c 	.word	0x5802541c
240072a8:	58025430 	.word	0x58025430
240072ac:	58025444 	.word	0x58025444
240072b0:	58025458 	.word	0x58025458
240072b4:	5802546c 	.word	0x5802546c
240072b8:	58025480 	.word	0x58025480
240072bc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
240072c0:	68fb      	ldr	r3, [r7, #12]
240072c2:	681b      	ldr	r3, [r3, #0]
240072c4:	68ba      	ldr	r2, [r7, #8]
240072c6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
240072c8:	68fb      	ldr	r3, [r7, #12]
240072ca:	681b      	ldr	r3, [r3, #0]
240072cc:	687a      	ldr	r2, [r7, #4]
240072ce:	60da      	str	r2, [r3, #12]
}
240072d0:	e04d      	b.n	2400736e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
240072d2:	68fb      	ldr	r3, [r7, #12]
240072d4:	681b      	ldr	r3, [r3, #0]
240072d6:	4a29      	ldr	r2, [pc, #164]	@ (2400737c <DMA_SetConfig+0x338>)
240072d8:	4293      	cmp	r3, r2
240072da:	d022      	beq.n	24007322 <DMA_SetConfig+0x2de>
240072dc:	68fb      	ldr	r3, [r7, #12]
240072de:	681b      	ldr	r3, [r3, #0]
240072e0:	4a27      	ldr	r2, [pc, #156]	@ (24007380 <DMA_SetConfig+0x33c>)
240072e2:	4293      	cmp	r3, r2
240072e4:	d01d      	beq.n	24007322 <DMA_SetConfig+0x2de>
240072e6:	68fb      	ldr	r3, [r7, #12]
240072e8:	681b      	ldr	r3, [r3, #0]
240072ea:	4a26      	ldr	r2, [pc, #152]	@ (24007384 <DMA_SetConfig+0x340>)
240072ec:	4293      	cmp	r3, r2
240072ee:	d018      	beq.n	24007322 <DMA_SetConfig+0x2de>
240072f0:	68fb      	ldr	r3, [r7, #12]
240072f2:	681b      	ldr	r3, [r3, #0]
240072f4:	4a24      	ldr	r2, [pc, #144]	@ (24007388 <DMA_SetConfig+0x344>)
240072f6:	4293      	cmp	r3, r2
240072f8:	d013      	beq.n	24007322 <DMA_SetConfig+0x2de>
240072fa:	68fb      	ldr	r3, [r7, #12]
240072fc:	681b      	ldr	r3, [r3, #0]
240072fe:	4a23      	ldr	r2, [pc, #140]	@ (2400738c <DMA_SetConfig+0x348>)
24007300:	4293      	cmp	r3, r2
24007302:	d00e      	beq.n	24007322 <DMA_SetConfig+0x2de>
24007304:	68fb      	ldr	r3, [r7, #12]
24007306:	681b      	ldr	r3, [r3, #0]
24007308:	4a21      	ldr	r2, [pc, #132]	@ (24007390 <DMA_SetConfig+0x34c>)
2400730a:	4293      	cmp	r3, r2
2400730c:	d009      	beq.n	24007322 <DMA_SetConfig+0x2de>
2400730e:	68fb      	ldr	r3, [r7, #12]
24007310:	681b      	ldr	r3, [r3, #0]
24007312:	4a20      	ldr	r2, [pc, #128]	@ (24007394 <DMA_SetConfig+0x350>)
24007314:	4293      	cmp	r3, r2
24007316:	d004      	beq.n	24007322 <DMA_SetConfig+0x2de>
24007318:	68fb      	ldr	r3, [r7, #12]
2400731a:	681b      	ldr	r3, [r3, #0]
2400731c:	4a1e      	ldr	r2, [pc, #120]	@ (24007398 <DMA_SetConfig+0x354>)
2400731e:	4293      	cmp	r3, r2
24007320:	d101      	bne.n	24007326 <DMA_SetConfig+0x2e2>
24007322:	2301      	movs	r3, #1
24007324:	e000      	b.n	24007328 <DMA_SetConfig+0x2e4>
24007326:	2300      	movs	r3, #0
24007328:	2b00      	cmp	r3, #0
2400732a:	d020      	beq.n	2400736e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
2400732c:	68fb      	ldr	r3, [r7, #12]
2400732e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
24007330:	f003 031f 	and.w	r3, r3, #31
24007334:	2201      	movs	r2, #1
24007336:	409a      	lsls	r2, r3
24007338:	693b      	ldr	r3, [r7, #16]
2400733a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
2400733c:	68fb      	ldr	r3, [r7, #12]
2400733e:	681b      	ldr	r3, [r3, #0]
24007340:	683a      	ldr	r2, [r7, #0]
24007342:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
24007344:	68fb      	ldr	r3, [r7, #12]
24007346:	689b      	ldr	r3, [r3, #8]
24007348:	2b40      	cmp	r3, #64	@ 0x40
2400734a:	d108      	bne.n	2400735e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
2400734c:	68fb      	ldr	r3, [r7, #12]
2400734e:	681b      	ldr	r3, [r3, #0]
24007350:	687a      	ldr	r2, [r7, #4]
24007352:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
24007354:	68fb      	ldr	r3, [r7, #12]
24007356:	681b      	ldr	r3, [r3, #0]
24007358:	68ba      	ldr	r2, [r7, #8]
2400735a:	60da      	str	r2, [r3, #12]
}
2400735c:	e007      	b.n	2400736e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
2400735e:	68fb      	ldr	r3, [r7, #12]
24007360:	681b      	ldr	r3, [r3, #0]
24007362:	68ba      	ldr	r2, [r7, #8]
24007364:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
24007366:	68fb      	ldr	r3, [r7, #12]
24007368:	681b      	ldr	r3, [r3, #0]
2400736a:	687a      	ldr	r2, [r7, #4]
2400736c:	60da      	str	r2, [r3, #12]
}
2400736e:	bf00      	nop
24007370:	371c      	adds	r7, #28
24007372:	46bd      	mov	sp, r7
24007374:	f85d 7b04 	ldr.w	r7, [sp], #4
24007378:	4770      	bx	lr
2400737a:	bf00      	nop
2400737c:	58025408 	.word	0x58025408
24007380:	5802541c 	.word	0x5802541c
24007384:	58025430 	.word	0x58025430
24007388:	58025444 	.word	0x58025444
2400738c:	58025458 	.word	0x58025458
24007390:	5802546c 	.word	0x5802546c
24007394:	58025480 	.word	0x58025480
24007398:	58025494 	.word	0x58025494

2400739c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
2400739c:	b480      	push	{r7}
2400739e:	b085      	sub	sp, #20
240073a0:	af00      	add	r7, sp, #0
240073a2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
240073a4:	687b      	ldr	r3, [r7, #4]
240073a6:	681b      	ldr	r3, [r3, #0]
240073a8:	4a42      	ldr	r2, [pc, #264]	@ (240074b4 <DMA_CalcBaseAndBitshift+0x118>)
240073aa:	4293      	cmp	r3, r2
240073ac:	d04a      	beq.n	24007444 <DMA_CalcBaseAndBitshift+0xa8>
240073ae:	687b      	ldr	r3, [r7, #4]
240073b0:	681b      	ldr	r3, [r3, #0]
240073b2:	4a41      	ldr	r2, [pc, #260]	@ (240074b8 <DMA_CalcBaseAndBitshift+0x11c>)
240073b4:	4293      	cmp	r3, r2
240073b6:	d045      	beq.n	24007444 <DMA_CalcBaseAndBitshift+0xa8>
240073b8:	687b      	ldr	r3, [r7, #4]
240073ba:	681b      	ldr	r3, [r3, #0]
240073bc:	4a3f      	ldr	r2, [pc, #252]	@ (240074bc <DMA_CalcBaseAndBitshift+0x120>)
240073be:	4293      	cmp	r3, r2
240073c0:	d040      	beq.n	24007444 <DMA_CalcBaseAndBitshift+0xa8>
240073c2:	687b      	ldr	r3, [r7, #4]
240073c4:	681b      	ldr	r3, [r3, #0]
240073c6:	4a3e      	ldr	r2, [pc, #248]	@ (240074c0 <DMA_CalcBaseAndBitshift+0x124>)
240073c8:	4293      	cmp	r3, r2
240073ca:	d03b      	beq.n	24007444 <DMA_CalcBaseAndBitshift+0xa8>
240073cc:	687b      	ldr	r3, [r7, #4]
240073ce:	681b      	ldr	r3, [r3, #0]
240073d0:	4a3c      	ldr	r2, [pc, #240]	@ (240074c4 <DMA_CalcBaseAndBitshift+0x128>)
240073d2:	4293      	cmp	r3, r2
240073d4:	d036      	beq.n	24007444 <DMA_CalcBaseAndBitshift+0xa8>
240073d6:	687b      	ldr	r3, [r7, #4]
240073d8:	681b      	ldr	r3, [r3, #0]
240073da:	4a3b      	ldr	r2, [pc, #236]	@ (240074c8 <DMA_CalcBaseAndBitshift+0x12c>)
240073dc:	4293      	cmp	r3, r2
240073de:	d031      	beq.n	24007444 <DMA_CalcBaseAndBitshift+0xa8>
240073e0:	687b      	ldr	r3, [r7, #4]
240073e2:	681b      	ldr	r3, [r3, #0]
240073e4:	4a39      	ldr	r2, [pc, #228]	@ (240074cc <DMA_CalcBaseAndBitshift+0x130>)
240073e6:	4293      	cmp	r3, r2
240073e8:	d02c      	beq.n	24007444 <DMA_CalcBaseAndBitshift+0xa8>
240073ea:	687b      	ldr	r3, [r7, #4]
240073ec:	681b      	ldr	r3, [r3, #0]
240073ee:	4a38      	ldr	r2, [pc, #224]	@ (240074d0 <DMA_CalcBaseAndBitshift+0x134>)
240073f0:	4293      	cmp	r3, r2
240073f2:	d027      	beq.n	24007444 <DMA_CalcBaseAndBitshift+0xa8>
240073f4:	687b      	ldr	r3, [r7, #4]
240073f6:	681b      	ldr	r3, [r3, #0]
240073f8:	4a36      	ldr	r2, [pc, #216]	@ (240074d4 <DMA_CalcBaseAndBitshift+0x138>)
240073fa:	4293      	cmp	r3, r2
240073fc:	d022      	beq.n	24007444 <DMA_CalcBaseAndBitshift+0xa8>
240073fe:	687b      	ldr	r3, [r7, #4]
24007400:	681b      	ldr	r3, [r3, #0]
24007402:	4a35      	ldr	r2, [pc, #212]	@ (240074d8 <DMA_CalcBaseAndBitshift+0x13c>)
24007404:	4293      	cmp	r3, r2
24007406:	d01d      	beq.n	24007444 <DMA_CalcBaseAndBitshift+0xa8>
24007408:	687b      	ldr	r3, [r7, #4]
2400740a:	681b      	ldr	r3, [r3, #0]
2400740c:	4a33      	ldr	r2, [pc, #204]	@ (240074dc <DMA_CalcBaseAndBitshift+0x140>)
2400740e:	4293      	cmp	r3, r2
24007410:	d018      	beq.n	24007444 <DMA_CalcBaseAndBitshift+0xa8>
24007412:	687b      	ldr	r3, [r7, #4]
24007414:	681b      	ldr	r3, [r3, #0]
24007416:	4a32      	ldr	r2, [pc, #200]	@ (240074e0 <DMA_CalcBaseAndBitshift+0x144>)
24007418:	4293      	cmp	r3, r2
2400741a:	d013      	beq.n	24007444 <DMA_CalcBaseAndBitshift+0xa8>
2400741c:	687b      	ldr	r3, [r7, #4]
2400741e:	681b      	ldr	r3, [r3, #0]
24007420:	4a30      	ldr	r2, [pc, #192]	@ (240074e4 <DMA_CalcBaseAndBitshift+0x148>)
24007422:	4293      	cmp	r3, r2
24007424:	d00e      	beq.n	24007444 <DMA_CalcBaseAndBitshift+0xa8>
24007426:	687b      	ldr	r3, [r7, #4]
24007428:	681b      	ldr	r3, [r3, #0]
2400742a:	4a2f      	ldr	r2, [pc, #188]	@ (240074e8 <DMA_CalcBaseAndBitshift+0x14c>)
2400742c:	4293      	cmp	r3, r2
2400742e:	d009      	beq.n	24007444 <DMA_CalcBaseAndBitshift+0xa8>
24007430:	687b      	ldr	r3, [r7, #4]
24007432:	681b      	ldr	r3, [r3, #0]
24007434:	4a2d      	ldr	r2, [pc, #180]	@ (240074ec <DMA_CalcBaseAndBitshift+0x150>)
24007436:	4293      	cmp	r3, r2
24007438:	d004      	beq.n	24007444 <DMA_CalcBaseAndBitshift+0xa8>
2400743a:	687b      	ldr	r3, [r7, #4]
2400743c:	681b      	ldr	r3, [r3, #0]
2400743e:	4a2c      	ldr	r2, [pc, #176]	@ (240074f0 <DMA_CalcBaseAndBitshift+0x154>)
24007440:	4293      	cmp	r3, r2
24007442:	d101      	bne.n	24007448 <DMA_CalcBaseAndBitshift+0xac>
24007444:	2301      	movs	r3, #1
24007446:	e000      	b.n	2400744a <DMA_CalcBaseAndBitshift+0xae>
24007448:	2300      	movs	r3, #0
2400744a:	2b00      	cmp	r3, #0
2400744c:	d024      	beq.n	24007498 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
2400744e:	687b      	ldr	r3, [r7, #4]
24007450:	681b      	ldr	r3, [r3, #0]
24007452:	b2db      	uxtb	r3, r3
24007454:	3b10      	subs	r3, #16
24007456:	4a27      	ldr	r2, [pc, #156]	@ (240074f4 <DMA_CalcBaseAndBitshift+0x158>)
24007458:	fba2 2303 	umull	r2, r3, r2, r3
2400745c:	091b      	lsrs	r3, r3, #4
2400745e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
24007460:	68fb      	ldr	r3, [r7, #12]
24007462:	f003 0307 	and.w	r3, r3, #7
24007466:	4a24      	ldr	r2, [pc, #144]	@ (240074f8 <DMA_CalcBaseAndBitshift+0x15c>)
24007468:	5cd3      	ldrb	r3, [r2, r3]
2400746a:	461a      	mov	r2, r3
2400746c:	687b      	ldr	r3, [r7, #4]
2400746e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
24007470:	68fb      	ldr	r3, [r7, #12]
24007472:	2b03      	cmp	r3, #3
24007474:	d908      	bls.n	24007488 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
24007476:	687b      	ldr	r3, [r7, #4]
24007478:	681b      	ldr	r3, [r3, #0]
2400747a:	461a      	mov	r2, r3
2400747c:	4b1f      	ldr	r3, [pc, #124]	@ (240074fc <DMA_CalcBaseAndBitshift+0x160>)
2400747e:	4013      	ands	r3, r2
24007480:	1d1a      	adds	r2, r3, #4
24007482:	687b      	ldr	r3, [r7, #4]
24007484:	659a      	str	r2, [r3, #88]	@ 0x58
24007486:	e00d      	b.n	240074a4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
24007488:	687b      	ldr	r3, [r7, #4]
2400748a:	681b      	ldr	r3, [r3, #0]
2400748c:	461a      	mov	r2, r3
2400748e:	4b1b      	ldr	r3, [pc, #108]	@ (240074fc <DMA_CalcBaseAndBitshift+0x160>)
24007490:	4013      	ands	r3, r2
24007492:	687a      	ldr	r2, [r7, #4]
24007494:	6593      	str	r3, [r2, #88]	@ 0x58
24007496:	e005      	b.n	240074a4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
24007498:	687b      	ldr	r3, [r7, #4]
2400749a:	681b      	ldr	r3, [r3, #0]
2400749c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
240074a0:	687b      	ldr	r3, [r7, #4]
240074a2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
240074a4:	687b      	ldr	r3, [r7, #4]
240074a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
240074a8:	4618      	mov	r0, r3
240074aa:	3714      	adds	r7, #20
240074ac:	46bd      	mov	sp, r7
240074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
240074b2:	4770      	bx	lr
240074b4:	40020010 	.word	0x40020010
240074b8:	40020028 	.word	0x40020028
240074bc:	40020040 	.word	0x40020040
240074c0:	40020058 	.word	0x40020058
240074c4:	40020070 	.word	0x40020070
240074c8:	40020088 	.word	0x40020088
240074cc:	400200a0 	.word	0x400200a0
240074d0:	400200b8 	.word	0x400200b8
240074d4:	40020410 	.word	0x40020410
240074d8:	40020428 	.word	0x40020428
240074dc:	40020440 	.word	0x40020440
240074e0:	40020458 	.word	0x40020458
240074e4:	40020470 	.word	0x40020470
240074e8:	40020488 	.word	0x40020488
240074ec:	400204a0 	.word	0x400204a0
240074f0:	400204b8 	.word	0x400204b8
240074f4:	aaaaaaab 	.word	0xaaaaaaab
240074f8:	2401b644 	.word	0x2401b644
240074fc:	fffffc00 	.word	0xfffffc00

24007500 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
24007500:	b480      	push	{r7}
24007502:	b085      	sub	sp, #20
24007504:	af00      	add	r7, sp, #0
24007506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
24007508:	2300      	movs	r3, #0
2400750a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
2400750c:	687b      	ldr	r3, [r7, #4]
2400750e:	699b      	ldr	r3, [r3, #24]
24007510:	2b00      	cmp	r3, #0
24007512:	d120      	bne.n	24007556 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
24007514:	687b      	ldr	r3, [r7, #4]
24007516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
24007518:	2b03      	cmp	r3, #3
2400751a:	d858      	bhi.n	240075ce <DMA_CheckFifoParam+0xce>
2400751c:	a201      	add	r2, pc, #4	@ (adr r2, 24007524 <DMA_CheckFifoParam+0x24>)
2400751e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24007522:	bf00      	nop
24007524:	24007535 	.word	0x24007535
24007528:	24007547 	.word	0x24007547
2400752c:	24007535 	.word	0x24007535
24007530:	240075cf 	.word	0x240075cf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
24007534:	687b      	ldr	r3, [r7, #4]
24007536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
24007538:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
2400753c:	2b00      	cmp	r3, #0
2400753e:	d048      	beq.n	240075d2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
24007540:	2301      	movs	r3, #1
24007542:	73fb      	strb	r3, [r7, #15]
        }
        break;
24007544:	e045      	b.n	240075d2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
24007546:	687b      	ldr	r3, [r7, #4]
24007548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2400754a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
2400754e:	d142      	bne.n	240075d6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
24007550:	2301      	movs	r3, #1
24007552:	73fb      	strb	r3, [r7, #15]
        }
        break;
24007554:	e03f      	b.n	240075d6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
24007556:	687b      	ldr	r3, [r7, #4]
24007558:	699b      	ldr	r3, [r3, #24]
2400755a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
2400755e:	d123      	bne.n	240075a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
24007560:	687b      	ldr	r3, [r7, #4]
24007562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
24007564:	2b03      	cmp	r3, #3
24007566:	d838      	bhi.n	240075da <DMA_CheckFifoParam+0xda>
24007568:	a201      	add	r2, pc, #4	@ (adr r2, 24007570 <DMA_CheckFifoParam+0x70>)
2400756a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2400756e:	bf00      	nop
24007570:	24007581 	.word	0x24007581
24007574:	24007587 	.word	0x24007587
24007578:	24007581 	.word	0x24007581
2400757c:	24007599 	.word	0x24007599
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
24007580:	2301      	movs	r3, #1
24007582:	73fb      	strb	r3, [r7, #15]
        break;
24007584:	e030      	b.n	240075e8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
24007586:	687b      	ldr	r3, [r7, #4]
24007588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2400758a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
2400758e:	2b00      	cmp	r3, #0
24007590:	d025      	beq.n	240075de <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
24007592:	2301      	movs	r3, #1
24007594:	73fb      	strb	r3, [r7, #15]
        }
        break;
24007596:	e022      	b.n	240075de <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
24007598:	687b      	ldr	r3, [r7, #4]
2400759a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2400759c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
240075a0:	d11f      	bne.n	240075e2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
240075a2:	2301      	movs	r3, #1
240075a4:	73fb      	strb	r3, [r7, #15]
        }
        break;
240075a6:	e01c      	b.n	240075e2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
240075a8:	687b      	ldr	r3, [r7, #4]
240075aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
240075ac:	2b02      	cmp	r3, #2
240075ae:	d902      	bls.n	240075b6 <DMA_CheckFifoParam+0xb6>
240075b0:	2b03      	cmp	r3, #3
240075b2:	d003      	beq.n	240075bc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
240075b4:	e018      	b.n	240075e8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
240075b6:	2301      	movs	r3, #1
240075b8:	73fb      	strb	r3, [r7, #15]
        break;
240075ba:	e015      	b.n	240075e8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
240075bc:	687b      	ldr	r3, [r7, #4]
240075be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
240075c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
240075c4:	2b00      	cmp	r3, #0
240075c6:	d00e      	beq.n	240075e6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
240075c8:	2301      	movs	r3, #1
240075ca:	73fb      	strb	r3, [r7, #15]
    break;
240075cc:	e00b      	b.n	240075e6 <DMA_CheckFifoParam+0xe6>
        break;
240075ce:	bf00      	nop
240075d0:	e00a      	b.n	240075e8 <DMA_CheckFifoParam+0xe8>
        break;
240075d2:	bf00      	nop
240075d4:	e008      	b.n	240075e8 <DMA_CheckFifoParam+0xe8>
        break;
240075d6:	bf00      	nop
240075d8:	e006      	b.n	240075e8 <DMA_CheckFifoParam+0xe8>
        break;
240075da:	bf00      	nop
240075dc:	e004      	b.n	240075e8 <DMA_CheckFifoParam+0xe8>
        break;
240075de:	bf00      	nop
240075e0:	e002      	b.n	240075e8 <DMA_CheckFifoParam+0xe8>
        break;
240075e2:	bf00      	nop
240075e4:	e000      	b.n	240075e8 <DMA_CheckFifoParam+0xe8>
    break;
240075e6:	bf00      	nop
    }
  }

  return status;
240075e8:	7bfb      	ldrb	r3, [r7, #15]
}
240075ea:	4618      	mov	r0, r3
240075ec:	3714      	adds	r7, #20
240075ee:	46bd      	mov	sp, r7
240075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
240075f4:	4770      	bx	lr
240075f6:	bf00      	nop

240075f8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
240075f8:	b480      	push	{r7}
240075fa:	b085      	sub	sp, #20
240075fc:	af00      	add	r7, sp, #0
240075fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
24007600:	687b      	ldr	r3, [r7, #4]
24007602:	681b      	ldr	r3, [r3, #0]
24007604:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
24007606:	687b      	ldr	r3, [r7, #4]
24007608:	681b      	ldr	r3, [r3, #0]
2400760a:	4a38      	ldr	r2, [pc, #224]	@ (240076ec <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
2400760c:	4293      	cmp	r3, r2
2400760e:	d022      	beq.n	24007656 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
24007610:	687b      	ldr	r3, [r7, #4]
24007612:	681b      	ldr	r3, [r3, #0]
24007614:	4a36      	ldr	r2, [pc, #216]	@ (240076f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
24007616:	4293      	cmp	r3, r2
24007618:	d01d      	beq.n	24007656 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
2400761a:	687b      	ldr	r3, [r7, #4]
2400761c:	681b      	ldr	r3, [r3, #0]
2400761e:	4a35      	ldr	r2, [pc, #212]	@ (240076f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
24007620:	4293      	cmp	r3, r2
24007622:	d018      	beq.n	24007656 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
24007624:	687b      	ldr	r3, [r7, #4]
24007626:	681b      	ldr	r3, [r3, #0]
24007628:	4a33      	ldr	r2, [pc, #204]	@ (240076f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
2400762a:	4293      	cmp	r3, r2
2400762c:	d013      	beq.n	24007656 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
2400762e:	687b      	ldr	r3, [r7, #4]
24007630:	681b      	ldr	r3, [r3, #0]
24007632:	4a32      	ldr	r2, [pc, #200]	@ (240076fc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
24007634:	4293      	cmp	r3, r2
24007636:	d00e      	beq.n	24007656 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
24007638:	687b      	ldr	r3, [r7, #4]
2400763a:	681b      	ldr	r3, [r3, #0]
2400763c:	4a30      	ldr	r2, [pc, #192]	@ (24007700 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
2400763e:	4293      	cmp	r3, r2
24007640:	d009      	beq.n	24007656 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
24007642:	687b      	ldr	r3, [r7, #4]
24007644:	681b      	ldr	r3, [r3, #0]
24007646:	4a2f      	ldr	r2, [pc, #188]	@ (24007704 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
24007648:	4293      	cmp	r3, r2
2400764a:	d004      	beq.n	24007656 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
2400764c:	687b      	ldr	r3, [r7, #4]
2400764e:	681b      	ldr	r3, [r3, #0]
24007650:	4a2d      	ldr	r2, [pc, #180]	@ (24007708 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
24007652:	4293      	cmp	r3, r2
24007654:	d101      	bne.n	2400765a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
24007656:	2301      	movs	r3, #1
24007658:	e000      	b.n	2400765c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
2400765a:	2300      	movs	r3, #0
2400765c:	2b00      	cmp	r3, #0
2400765e:	d01a      	beq.n	24007696 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
24007660:	687b      	ldr	r3, [r7, #4]
24007662:	681b      	ldr	r3, [r3, #0]
24007664:	b2db      	uxtb	r3, r3
24007666:	3b08      	subs	r3, #8
24007668:	4a28      	ldr	r2, [pc, #160]	@ (2400770c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
2400766a:	fba2 2303 	umull	r2, r3, r2, r3
2400766e:	091b      	lsrs	r3, r3, #4
24007670:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
24007672:	68fa      	ldr	r2, [r7, #12]
24007674:	4b26      	ldr	r3, [pc, #152]	@ (24007710 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
24007676:	4413      	add	r3, r2
24007678:	009b      	lsls	r3, r3, #2
2400767a:	461a      	mov	r2, r3
2400767c:	687b      	ldr	r3, [r7, #4]
2400767e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
24007680:	687b      	ldr	r3, [r7, #4]
24007682:	4a24      	ldr	r2, [pc, #144]	@ (24007714 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
24007684:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24007686:	68fb      	ldr	r3, [r7, #12]
24007688:	f003 031f 	and.w	r3, r3, #31
2400768c:	2201      	movs	r2, #1
2400768e:	409a      	lsls	r2, r3
24007690:	687b      	ldr	r3, [r7, #4]
24007692:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
24007694:	e024      	b.n	240076e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24007696:	687b      	ldr	r3, [r7, #4]
24007698:	681b      	ldr	r3, [r3, #0]
2400769a:	b2db      	uxtb	r3, r3
2400769c:	3b10      	subs	r3, #16
2400769e:	4a1e      	ldr	r2, [pc, #120]	@ (24007718 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
240076a0:	fba2 2303 	umull	r2, r3, r2, r3
240076a4:	091b      	lsrs	r3, r3, #4
240076a6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
240076a8:	68bb      	ldr	r3, [r7, #8]
240076aa:	4a1c      	ldr	r2, [pc, #112]	@ (2400771c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
240076ac:	4293      	cmp	r3, r2
240076ae:	d806      	bhi.n	240076be <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
240076b0:	68bb      	ldr	r3, [r7, #8]
240076b2:	4a1b      	ldr	r2, [pc, #108]	@ (24007720 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
240076b4:	4293      	cmp	r3, r2
240076b6:	d902      	bls.n	240076be <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
240076b8:	68fb      	ldr	r3, [r7, #12]
240076ba:	3308      	adds	r3, #8
240076bc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
240076be:	68fa      	ldr	r2, [r7, #12]
240076c0:	4b18      	ldr	r3, [pc, #96]	@ (24007724 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
240076c2:	4413      	add	r3, r2
240076c4:	009b      	lsls	r3, r3, #2
240076c6:	461a      	mov	r2, r3
240076c8:	687b      	ldr	r3, [r7, #4]
240076ca:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
240076cc:	687b      	ldr	r3, [r7, #4]
240076ce:	4a16      	ldr	r2, [pc, #88]	@ (24007728 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
240076d0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
240076d2:	68fb      	ldr	r3, [r7, #12]
240076d4:	f003 031f 	and.w	r3, r3, #31
240076d8:	2201      	movs	r2, #1
240076da:	409a      	lsls	r2, r3
240076dc:	687b      	ldr	r3, [r7, #4]
240076de:	669a      	str	r2, [r3, #104]	@ 0x68
}
240076e0:	bf00      	nop
240076e2:	3714      	adds	r7, #20
240076e4:	46bd      	mov	sp, r7
240076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
240076ea:	4770      	bx	lr
240076ec:	58025408 	.word	0x58025408
240076f0:	5802541c 	.word	0x5802541c
240076f4:	58025430 	.word	0x58025430
240076f8:	58025444 	.word	0x58025444
240076fc:	58025458 	.word	0x58025458
24007700:	5802546c 	.word	0x5802546c
24007704:	58025480 	.word	0x58025480
24007708:	58025494 	.word	0x58025494
2400770c:	cccccccd 	.word	0xcccccccd
24007710:	16009600 	.word	0x16009600
24007714:	58025880 	.word	0x58025880
24007718:	aaaaaaab 	.word	0xaaaaaaab
2400771c:	400204b8 	.word	0x400204b8
24007720:	4002040f 	.word	0x4002040f
24007724:	10008200 	.word	0x10008200
24007728:	40020880 	.word	0x40020880

2400772c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
2400772c:	b480      	push	{r7}
2400772e:	b085      	sub	sp, #20
24007730:	af00      	add	r7, sp, #0
24007732:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
24007734:	687b      	ldr	r3, [r7, #4]
24007736:	685b      	ldr	r3, [r3, #4]
24007738:	b2db      	uxtb	r3, r3
2400773a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
2400773c:	68fb      	ldr	r3, [r7, #12]
2400773e:	2b00      	cmp	r3, #0
24007740:	d04a      	beq.n	240077d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
24007742:	68fb      	ldr	r3, [r7, #12]
24007744:	2b08      	cmp	r3, #8
24007746:	d847      	bhi.n	240077d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
24007748:	687b      	ldr	r3, [r7, #4]
2400774a:	681b      	ldr	r3, [r3, #0]
2400774c:	4a25      	ldr	r2, [pc, #148]	@ (240077e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
2400774e:	4293      	cmp	r3, r2
24007750:	d022      	beq.n	24007798 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
24007752:	687b      	ldr	r3, [r7, #4]
24007754:	681b      	ldr	r3, [r3, #0]
24007756:	4a24      	ldr	r2, [pc, #144]	@ (240077e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
24007758:	4293      	cmp	r3, r2
2400775a:	d01d      	beq.n	24007798 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
2400775c:	687b      	ldr	r3, [r7, #4]
2400775e:	681b      	ldr	r3, [r3, #0]
24007760:	4a22      	ldr	r2, [pc, #136]	@ (240077ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
24007762:	4293      	cmp	r3, r2
24007764:	d018      	beq.n	24007798 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
24007766:	687b      	ldr	r3, [r7, #4]
24007768:	681b      	ldr	r3, [r3, #0]
2400776a:	4a21      	ldr	r2, [pc, #132]	@ (240077f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
2400776c:	4293      	cmp	r3, r2
2400776e:	d013      	beq.n	24007798 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
24007770:	687b      	ldr	r3, [r7, #4]
24007772:	681b      	ldr	r3, [r3, #0]
24007774:	4a1f      	ldr	r2, [pc, #124]	@ (240077f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
24007776:	4293      	cmp	r3, r2
24007778:	d00e      	beq.n	24007798 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
2400777a:	687b      	ldr	r3, [r7, #4]
2400777c:	681b      	ldr	r3, [r3, #0]
2400777e:	4a1e      	ldr	r2, [pc, #120]	@ (240077f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
24007780:	4293      	cmp	r3, r2
24007782:	d009      	beq.n	24007798 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
24007784:	687b      	ldr	r3, [r7, #4]
24007786:	681b      	ldr	r3, [r3, #0]
24007788:	4a1c      	ldr	r2, [pc, #112]	@ (240077fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
2400778a:	4293      	cmp	r3, r2
2400778c:	d004      	beq.n	24007798 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
2400778e:	687b      	ldr	r3, [r7, #4]
24007790:	681b      	ldr	r3, [r3, #0]
24007792:	4a1b      	ldr	r2, [pc, #108]	@ (24007800 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
24007794:	4293      	cmp	r3, r2
24007796:	d101      	bne.n	2400779c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
24007798:	2301      	movs	r3, #1
2400779a:	e000      	b.n	2400779e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
2400779c:	2300      	movs	r3, #0
2400779e:	2b00      	cmp	r3, #0
240077a0:	d00a      	beq.n	240077b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
240077a2:	68fa      	ldr	r2, [r7, #12]
240077a4:	4b17      	ldr	r3, [pc, #92]	@ (24007804 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
240077a6:	4413      	add	r3, r2
240077a8:	009b      	lsls	r3, r3, #2
240077aa:	461a      	mov	r2, r3
240077ac:	687b      	ldr	r3, [r7, #4]
240077ae:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
240077b0:	687b      	ldr	r3, [r7, #4]
240077b2:	4a15      	ldr	r2, [pc, #84]	@ (24007808 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
240077b4:	671a      	str	r2, [r3, #112]	@ 0x70
240077b6:	e009      	b.n	240077cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
240077b8:	68fa      	ldr	r2, [r7, #12]
240077ba:	4b14      	ldr	r3, [pc, #80]	@ (2400780c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
240077bc:	4413      	add	r3, r2
240077be:	009b      	lsls	r3, r3, #2
240077c0:	461a      	mov	r2, r3
240077c2:	687b      	ldr	r3, [r7, #4]
240077c4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
240077c6:	687b      	ldr	r3, [r7, #4]
240077c8:	4a11      	ldr	r2, [pc, #68]	@ (24007810 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
240077ca:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
240077cc:	68fb      	ldr	r3, [r7, #12]
240077ce:	3b01      	subs	r3, #1
240077d0:	2201      	movs	r2, #1
240077d2:	409a      	lsls	r2, r3
240077d4:	687b      	ldr	r3, [r7, #4]
240077d6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
240077d8:	bf00      	nop
240077da:	3714      	adds	r7, #20
240077dc:	46bd      	mov	sp, r7
240077de:	f85d 7b04 	ldr.w	r7, [sp], #4
240077e2:	4770      	bx	lr
240077e4:	58025408 	.word	0x58025408
240077e8:	5802541c 	.word	0x5802541c
240077ec:	58025430 	.word	0x58025430
240077f0:	58025444 	.word	0x58025444
240077f4:	58025458 	.word	0x58025458
240077f8:	5802546c 	.word	0x5802546c
240077fc:	58025480 	.word	0x58025480
24007800:	58025494 	.word	0x58025494
24007804:	1600963f 	.word	0x1600963f
24007808:	58025940 	.word	0x58025940
2400780c:	1000823f 	.word	0x1000823f
24007810:	40020940 	.word	0x40020940

24007814 <HAL_DMAEx_MultiBufferStart>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
24007814:	b580      	push	{r7, lr}
24007816:	b086      	sub	sp, #24
24007818:	af00      	add	r7, sp, #0
2400781a:	60f8      	str	r0, [r7, #12]
2400781c:	60b9      	str	r1, [r7, #8]
2400781e:	607a      	str	r2, [r7, #4]
24007820:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
24007822:	2300      	movs	r3, #0
24007824:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
24007826:	68fb      	ldr	r3, [r7, #12]
24007828:	689b      	ldr	r3, [r3, #8]
2400782a:	2b80      	cmp	r3, #128	@ 0x80
2400782c:	d106      	bne.n	2400783c <HAL_DMAEx_MultiBufferStart+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
2400782e:	68fb      	ldr	r3, [r7, #12]
24007830:	f44f 7280 	mov.w	r2, #256	@ 0x100
24007834:	655a      	str	r2, [r3, #84]	@ 0x54
    status = HAL_ERROR;
24007836:	2301      	movs	r3, #1
24007838:	75fb      	strb	r3, [r7, #23]
2400783a:	e1c8      	b.n	24007bce <HAL_DMAEx_MultiBufferStart+0x3ba>
  }
  else
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
2400783c:	68fb      	ldr	r3, [r7, #12]
2400783e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
24007842:	2b01      	cmp	r3, #1
24007844:	d101      	bne.n	2400784a <HAL_DMAEx_MultiBufferStart+0x36>
24007846:	2302      	movs	r3, #2
24007848:	e1c2      	b.n	24007bd0 <HAL_DMAEx_MultiBufferStart+0x3bc>
2400784a:	68fb      	ldr	r3, [r7, #12]
2400784c:	2201      	movs	r2, #1
2400784e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    if(HAL_DMA_STATE_READY == hdma->State)
24007852:	68fb      	ldr	r3, [r7, #12]
24007854:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
24007858:	b2db      	uxtb	r3, r3
2400785a:	2b01      	cmp	r3, #1
2400785c:	f040 81b1 	bne.w	24007bc2 <HAL_DMAEx_MultiBufferStart+0x3ae>
    {
      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_BUSY;
24007860:	68fb      	ldr	r3, [r7, #12]
24007862:	2202      	movs	r2, #2
24007864:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Initialize the error code */
      hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24007868:	68fb      	ldr	r3, [r7, #12]
2400786a:	2200      	movs	r2, #0
2400786c:	655a      	str	r2, [r3, #84]	@ 0x54

      if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
2400786e:	68fb      	ldr	r3, [r7, #12]
24007870:	681b      	ldr	r3, [r3, #0]
24007872:	4a7f      	ldr	r2, [pc, #508]	@ (24007a70 <HAL_DMAEx_MultiBufferStart+0x25c>)
24007874:	4293      	cmp	r3, r2
24007876:	d04a      	beq.n	2400790e <HAL_DMAEx_MultiBufferStart+0xfa>
24007878:	68fb      	ldr	r3, [r7, #12]
2400787a:	681b      	ldr	r3, [r3, #0]
2400787c:	4a7d      	ldr	r2, [pc, #500]	@ (24007a74 <HAL_DMAEx_MultiBufferStart+0x260>)
2400787e:	4293      	cmp	r3, r2
24007880:	d045      	beq.n	2400790e <HAL_DMAEx_MultiBufferStart+0xfa>
24007882:	68fb      	ldr	r3, [r7, #12]
24007884:	681b      	ldr	r3, [r3, #0]
24007886:	4a7c      	ldr	r2, [pc, #496]	@ (24007a78 <HAL_DMAEx_MultiBufferStart+0x264>)
24007888:	4293      	cmp	r3, r2
2400788a:	d040      	beq.n	2400790e <HAL_DMAEx_MultiBufferStart+0xfa>
2400788c:	68fb      	ldr	r3, [r7, #12]
2400788e:	681b      	ldr	r3, [r3, #0]
24007890:	4a7a      	ldr	r2, [pc, #488]	@ (24007a7c <HAL_DMAEx_MultiBufferStart+0x268>)
24007892:	4293      	cmp	r3, r2
24007894:	d03b      	beq.n	2400790e <HAL_DMAEx_MultiBufferStart+0xfa>
24007896:	68fb      	ldr	r3, [r7, #12]
24007898:	681b      	ldr	r3, [r3, #0]
2400789a:	4a79      	ldr	r2, [pc, #484]	@ (24007a80 <HAL_DMAEx_MultiBufferStart+0x26c>)
2400789c:	4293      	cmp	r3, r2
2400789e:	d036      	beq.n	2400790e <HAL_DMAEx_MultiBufferStart+0xfa>
240078a0:	68fb      	ldr	r3, [r7, #12]
240078a2:	681b      	ldr	r3, [r3, #0]
240078a4:	4a77      	ldr	r2, [pc, #476]	@ (24007a84 <HAL_DMAEx_MultiBufferStart+0x270>)
240078a6:	4293      	cmp	r3, r2
240078a8:	d031      	beq.n	2400790e <HAL_DMAEx_MultiBufferStart+0xfa>
240078aa:	68fb      	ldr	r3, [r7, #12]
240078ac:	681b      	ldr	r3, [r3, #0]
240078ae:	4a76      	ldr	r2, [pc, #472]	@ (24007a88 <HAL_DMAEx_MultiBufferStart+0x274>)
240078b0:	4293      	cmp	r3, r2
240078b2:	d02c      	beq.n	2400790e <HAL_DMAEx_MultiBufferStart+0xfa>
240078b4:	68fb      	ldr	r3, [r7, #12]
240078b6:	681b      	ldr	r3, [r3, #0]
240078b8:	4a74      	ldr	r2, [pc, #464]	@ (24007a8c <HAL_DMAEx_MultiBufferStart+0x278>)
240078ba:	4293      	cmp	r3, r2
240078bc:	d027      	beq.n	2400790e <HAL_DMAEx_MultiBufferStart+0xfa>
240078be:	68fb      	ldr	r3, [r7, #12]
240078c0:	681b      	ldr	r3, [r3, #0]
240078c2:	4a73      	ldr	r2, [pc, #460]	@ (24007a90 <HAL_DMAEx_MultiBufferStart+0x27c>)
240078c4:	4293      	cmp	r3, r2
240078c6:	d022      	beq.n	2400790e <HAL_DMAEx_MultiBufferStart+0xfa>
240078c8:	68fb      	ldr	r3, [r7, #12]
240078ca:	681b      	ldr	r3, [r3, #0]
240078cc:	4a71      	ldr	r2, [pc, #452]	@ (24007a94 <HAL_DMAEx_MultiBufferStart+0x280>)
240078ce:	4293      	cmp	r3, r2
240078d0:	d01d      	beq.n	2400790e <HAL_DMAEx_MultiBufferStart+0xfa>
240078d2:	68fb      	ldr	r3, [r7, #12]
240078d4:	681b      	ldr	r3, [r3, #0]
240078d6:	4a70      	ldr	r2, [pc, #448]	@ (24007a98 <HAL_DMAEx_MultiBufferStart+0x284>)
240078d8:	4293      	cmp	r3, r2
240078da:	d018      	beq.n	2400790e <HAL_DMAEx_MultiBufferStart+0xfa>
240078dc:	68fb      	ldr	r3, [r7, #12]
240078de:	681b      	ldr	r3, [r3, #0]
240078e0:	4a6e      	ldr	r2, [pc, #440]	@ (24007a9c <HAL_DMAEx_MultiBufferStart+0x288>)
240078e2:	4293      	cmp	r3, r2
240078e4:	d013      	beq.n	2400790e <HAL_DMAEx_MultiBufferStart+0xfa>
240078e6:	68fb      	ldr	r3, [r7, #12]
240078e8:	681b      	ldr	r3, [r3, #0]
240078ea:	4a6d      	ldr	r2, [pc, #436]	@ (24007aa0 <HAL_DMAEx_MultiBufferStart+0x28c>)
240078ec:	4293      	cmp	r3, r2
240078ee:	d00e      	beq.n	2400790e <HAL_DMAEx_MultiBufferStart+0xfa>
240078f0:	68fb      	ldr	r3, [r7, #12]
240078f2:	681b      	ldr	r3, [r3, #0]
240078f4:	4a6b      	ldr	r2, [pc, #428]	@ (24007aa4 <HAL_DMAEx_MultiBufferStart+0x290>)
240078f6:	4293      	cmp	r3, r2
240078f8:	d009      	beq.n	2400790e <HAL_DMAEx_MultiBufferStart+0xfa>
240078fa:	68fb      	ldr	r3, [r7, #12]
240078fc:	681b      	ldr	r3, [r3, #0]
240078fe:	4a6a      	ldr	r2, [pc, #424]	@ (24007aa8 <HAL_DMAEx_MultiBufferStart+0x294>)
24007900:	4293      	cmp	r3, r2
24007902:	d004      	beq.n	2400790e <HAL_DMAEx_MultiBufferStart+0xfa>
24007904:	68fb      	ldr	r3, [r7, #12]
24007906:	681b      	ldr	r3, [r3, #0]
24007908:	4a68      	ldr	r2, [pc, #416]	@ (24007aac <HAL_DMAEx_MultiBufferStart+0x298>)
2400790a:	4293      	cmp	r3, r2
2400790c:	d101      	bne.n	24007912 <HAL_DMAEx_MultiBufferStart+0xfe>
2400790e:	2301      	movs	r3, #1
24007910:	e000      	b.n	24007914 <HAL_DMAEx_MultiBufferStart+0x100>
24007912:	2300      	movs	r3, #0
24007914:	2b00      	cmp	r3, #0
24007916:	d018      	beq.n	2400794a <HAL_DMAEx_MultiBufferStart+0x136>
      {
        /* Enable the Double buffer mode */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
24007918:	68fb      	ldr	r3, [r7, #12]
2400791a:	681b      	ldr	r3, [r3, #0]
2400791c:	681a      	ldr	r2, [r3, #0]
2400791e:	68fb      	ldr	r3, [r7, #12]
24007920:	681b      	ldr	r3, [r3, #0]
24007922:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
24007926:	601a      	str	r2, [r3, #0]

        /* Configure DMA Stream destination address */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
24007928:	68fb      	ldr	r3, [r7, #12]
2400792a:	681b      	ldr	r3, [r3, #0]
2400792c:	683a      	ldr	r2, [r7, #0]
2400792e:	611a      	str	r2, [r3, #16]

        /* Calculate the interrupt clear flag register (IFCR) base address  */
        ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
24007930:	68fb      	ldr	r3, [r7, #12]
24007932:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
24007934:	3308      	adds	r3, #8
24007936:	613b      	str	r3, [r7, #16]

        /* Clear all flags */
        *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24007938:	68fb      	ldr	r3, [r7, #12]
2400793a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
2400793c:	f003 031f 	and.w	r3, r3, #31
24007940:	223f      	movs	r2, #63	@ 0x3f
24007942:	409a      	lsls	r2, r3
24007944:	693b      	ldr	r3, [r7, #16]
24007946:	601a      	str	r2, [r3, #0]
24007948:	e018      	b.n	2400797c <HAL_DMAEx_MultiBufferStart+0x168>
      }
      else /* BDMA instance(s) */
      {
        /* Enable the Double buffer mode */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
2400794a:	68fb      	ldr	r3, [r7, #12]
2400794c:	681b      	ldr	r3, [r3, #0]
2400794e:	6819      	ldr	r1, [r3, #0]
24007950:	68fb      	ldr	r3, [r7, #12]
24007952:	681a      	ldr	r2, [r3, #0]
24007954:	f248 0320 	movw	r3, #32800	@ 0x8020
24007958:	430b      	orrs	r3, r1
2400795a:	6013      	str	r3, [r2, #0]

        /* Configure DMA Stream destination address */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
2400795c:	68fb      	ldr	r3, [r7, #12]
2400795e:	681b      	ldr	r3, [r3, #0]
24007960:	683a      	ldr	r2, [r7, #0]
24007962:	611a      	str	r2, [r3, #16]

        /* Calculate the interrupt clear flag register (IFCR) base address  */
        ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
24007964:	68fb      	ldr	r3, [r7, #12]
24007966:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
24007968:	3304      	adds	r3, #4
2400796a:	613b      	str	r3, [r7, #16]

        /* Clear all flags */
        *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
2400796c:	68fb      	ldr	r3, [r7, #12]
2400796e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
24007970:	f003 031f 	and.w	r3, r3, #31
24007974:	2201      	movs	r2, #1
24007976:	409a      	lsls	r2, r3
24007978:	693b      	ldr	r3, [r7, #16]
2400797a:	601a      	str	r2, [r3, #0]
      }

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
2400797c:	68fb      	ldr	r3, [r7, #12]
2400797e:	681b      	ldr	r3, [r3, #0]
24007980:	4a3b      	ldr	r2, [pc, #236]	@ (24007a70 <HAL_DMAEx_MultiBufferStart+0x25c>)
24007982:	4293      	cmp	r3, r2
24007984:	d072      	beq.n	24007a6c <HAL_DMAEx_MultiBufferStart+0x258>
24007986:	68fb      	ldr	r3, [r7, #12]
24007988:	681b      	ldr	r3, [r3, #0]
2400798a:	4a3a      	ldr	r2, [pc, #232]	@ (24007a74 <HAL_DMAEx_MultiBufferStart+0x260>)
2400798c:	4293      	cmp	r3, r2
2400798e:	d06d      	beq.n	24007a6c <HAL_DMAEx_MultiBufferStart+0x258>
24007990:	68fb      	ldr	r3, [r7, #12]
24007992:	681b      	ldr	r3, [r3, #0]
24007994:	4a38      	ldr	r2, [pc, #224]	@ (24007a78 <HAL_DMAEx_MultiBufferStart+0x264>)
24007996:	4293      	cmp	r3, r2
24007998:	d068      	beq.n	24007a6c <HAL_DMAEx_MultiBufferStart+0x258>
2400799a:	68fb      	ldr	r3, [r7, #12]
2400799c:	681b      	ldr	r3, [r3, #0]
2400799e:	4a37      	ldr	r2, [pc, #220]	@ (24007a7c <HAL_DMAEx_MultiBufferStart+0x268>)
240079a0:	4293      	cmp	r3, r2
240079a2:	d063      	beq.n	24007a6c <HAL_DMAEx_MultiBufferStart+0x258>
240079a4:	68fb      	ldr	r3, [r7, #12]
240079a6:	681b      	ldr	r3, [r3, #0]
240079a8:	4a35      	ldr	r2, [pc, #212]	@ (24007a80 <HAL_DMAEx_MultiBufferStart+0x26c>)
240079aa:	4293      	cmp	r3, r2
240079ac:	d05e      	beq.n	24007a6c <HAL_DMAEx_MultiBufferStart+0x258>
240079ae:	68fb      	ldr	r3, [r7, #12]
240079b0:	681b      	ldr	r3, [r3, #0]
240079b2:	4a34      	ldr	r2, [pc, #208]	@ (24007a84 <HAL_DMAEx_MultiBufferStart+0x270>)
240079b4:	4293      	cmp	r3, r2
240079b6:	d059      	beq.n	24007a6c <HAL_DMAEx_MultiBufferStart+0x258>
240079b8:	68fb      	ldr	r3, [r7, #12]
240079ba:	681b      	ldr	r3, [r3, #0]
240079bc:	4a32      	ldr	r2, [pc, #200]	@ (24007a88 <HAL_DMAEx_MultiBufferStart+0x274>)
240079be:	4293      	cmp	r3, r2
240079c0:	d054      	beq.n	24007a6c <HAL_DMAEx_MultiBufferStart+0x258>
240079c2:	68fb      	ldr	r3, [r7, #12]
240079c4:	681b      	ldr	r3, [r3, #0]
240079c6:	4a31      	ldr	r2, [pc, #196]	@ (24007a8c <HAL_DMAEx_MultiBufferStart+0x278>)
240079c8:	4293      	cmp	r3, r2
240079ca:	d04f      	beq.n	24007a6c <HAL_DMAEx_MultiBufferStart+0x258>
240079cc:	68fb      	ldr	r3, [r7, #12]
240079ce:	681b      	ldr	r3, [r3, #0]
240079d0:	4a2f      	ldr	r2, [pc, #188]	@ (24007a90 <HAL_DMAEx_MultiBufferStart+0x27c>)
240079d2:	4293      	cmp	r3, r2
240079d4:	d04a      	beq.n	24007a6c <HAL_DMAEx_MultiBufferStart+0x258>
240079d6:	68fb      	ldr	r3, [r7, #12]
240079d8:	681b      	ldr	r3, [r3, #0]
240079da:	4a2e      	ldr	r2, [pc, #184]	@ (24007a94 <HAL_DMAEx_MultiBufferStart+0x280>)
240079dc:	4293      	cmp	r3, r2
240079de:	d045      	beq.n	24007a6c <HAL_DMAEx_MultiBufferStart+0x258>
240079e0:	68fb      	ldr	r3, [r7, #12]
240079e2:	681b      	ldr	r3, [r3, #0]
240079e4:	4a2c      	ldr	r2, [pc, #176]	@ (24007a98 <HAL_DMAEx_MultiBufferStart+0x284>)
240079e6:	4293      	cmp	r3, r2
240079e8:	d040      	beq.n	24007a6c <HAL_DMAEx_MultiBufferStart+0x258>
240079ea:	68fb      	ldr	r3, [r7, #12]
240079ec:	681b      	ldr	r3, [r3, #0]
240079ee:	4a2b      	ldr	r2, [pc, #172]	@ (24007a9c <HAL_DMAEx_MultiBufferStart+0x288>)
240079f0:	4293      	cmp	r3, r2
240079f2:	d03b      	beq.n	24007a6c <HAL_DMAEx_MultiBufferStart+0x258>
240079f4:	68fb      	ldr	r3, [r7, #12]
240079f6:	681b      	ldr	r3, [r3, #0]
240079f8:	4a29      	ldr	r2, [pc, #164]	@ (24007aa0 <HAL_DMAEx_MultiBufferStart+0x28c>)
240079fa:	4293      	cmp	r3, r2
240079fc:	d036      	beq.n	24007a6c <HAL_DMAEx_MultiBufferStart+0x258>
240079fe:	68fb      	ldr	r3, [r7, #12]
24007a00:	681b      	ldr	r3, [r3, #0]
24007a02:	4a28      	ldr	r2, [pc, #160]	@ (24007aa4 <HAL_DMAEx_MultiBufferStart+0x290>)
24007a04:	4293      	cmp	r3, r2
24007a06:	d031      	beq.n	24007a6c <HAL_DMAEx_MultiBufferStart+0x258>
24007a08:	68fb      	ldr	r3, [r7, #12]
24007a0a:	681b      	ldr	r3, [r3, #0]
24007a0c:	4a26      	ldr	r2, [pc, #152]	@ (24007aa8 <HAL_DMAEx_MultiBufferStart+0x294>)
24007a0e:	4293      	cmp	r3, r2
24007a10:	d02c      	beq.n	24007a6c <HAL_DMAEx_MultiBufferStart+0x258>
24007a12:	68fb      	ldr	r3, [r7, #12]
24007a14:	681b      	ldr	r3, [r3, #0]
24007a16:	4a25      	ldr	r2, [pc, #148]	@ (24007aac <HAL_DMAEx_MultiBufferStart+0x298>)
24007a18:	4293      	cmp	r3, r2
24007a1a:	d027      	beq.n	24007a6c <HAL_DMAEx_MultiBufferStart+0x258>
24007a1c:	68fb      	ldr	r3, [r7, #12]
24007a1e:	681b      	ldr	r3, [r3, #0]
24007a20:	4a23      	ldr	r2, [pc, #140]	@ (24007ab0 <HAL_DMAEx_MultiBufferStart+0x29c>)
24007a22:	4293      	cmp	r3, r2
24007a24:	d022      	beq.n	24007a6c <HAL_DMAEx_MultiBufferStart+0x258>
24007a26:	68fb      	ldr	r3, [r7, #12]
24007a28:	681b      	ldr	r3, [r3, #0]
24007a2a:	4a22      	ldr	r2, [pc, #136]	@ (24007ab4 <HAL_DMAEx_MultiBufferStart+0x2a0>)
24007a2c:	4293      	cmp	r3, r2
24007a2e:	d01d      	beq.n	24007a6c <HAL_DMAEx_MultiBufferStart+0x258>
24007a30:	68fb      	ldr	r3, [r7, #12]
24007a32:	681b      	ldr	r3, [r3, #0]
24007a34:	4a20      	ldr	r2, [pc, #128]	@ (24007ab8 <HAL_DMAEx_MultiBufferStart+0x2a4>)
24007a36:	4293      	cmp	r3, r2
24007a38:	d018      	beq.n	24007a6c <HAL_DMAEx_MultiBufferStart+0x258>
24007a3a:	68fb      	ldr	r3, [r7, #12]
24007a3c:	681b      	ldr	r3, [r3, #0]
24007a3e:	4a1f      	ldr	r2, [pc, #124]	@ (24007abc <HAL_DMAEx_MultiBufferStart+0x2a8>)
24007a40:	4293      	cmp	r3, r2
24007a42:	d013      	beq.n	24007a6c <HAL_DMAEx_MultiBufferStart+0x258>
24007a44:	68fb      	ldr	r3, [r7, #12]
24007a46:	681b      	ldr	r3, [r3, #0]
24007a48:	4a1d      	ldr	r2, [pc, #116]	@ (24007ac0 <HAL_DMAEx_MultiBufferStart+0x2ac>)
24007a4a:	4293      	cmp	r3, r2
24007a4c:	d00e      	beq.n	24007a6c <HAL_DMAEx_MultiBufferStart+0x258>
24007a4e:	68fb      	ldr	r3, [r7, #12]
24007a50:	681b      	ldr	r3, [r3, #0]
24007a52:	4a1c      	ldr	r2, [pc, #112]	@ (24007ac4 <HAL_DMAEx_MultiBufferStart+0x2b0>)
24007a54:	4293      	cmp	r3, r2
24007a56:	d009      	beq.n	24007a6c <HAL_DMAEx_MultiBufferStart+0x258>
24007a58:	68fb      	ldr	r3, [r7, #12]
24007a5a:	681b      	ldr	r3, [r3, #0]
24007a5c:	4a1a      	ldr	r2, [pc, #104]	@ (24007ac8 <HAL_DMAEx_MultiBufferStart+0x2b4>)
24007a5e:	4293      	cmp	r3, r2
24007a60:	d004      	beq.n	24007a6c <HAL_DMAEx_MultiBufferStart+0x258>
24007a62:	68fb      	ldr	r3, [r7, #12]
24007a64:	681b      	ldr	r3, [r3, #0]
24007a66:	4a19      	ldr	r2, [pc, #100]	@ (24007acc <HAL_DMAEx_MultiBufferStart+0x2b8>)
24007a68:	4293      	cmp	r3, r2
24007a6a:	d131      	bne.n	24007ad0 <HAL_DMAEx_MultiBufferStart+0x2bc>
24007a6c:	2301      	movs	r3, #1
24007a6e:	e030      	b.n	24007ad2 <HAL_DMAEx_MultiBufferStart+0x2be>
24007a70:	40020010 	.word	0x40020010
24007a74:	40020028 	.word	0x40020028
24007a78:	40020040 	.word	0x40020040
24007a7c:	40020058 	.word	0x40020058
24007a80:	40020070 	.word	0x40020070
24007a84:	40020088 	.word	0x40020088
24007a88:	400200a0 	.word	0x400200a0
24007a8c:	400200b8 	.word	0x400200b8
24007a90:	40020410 	.word	0x40020410
24007a94:	40020428 	.word	0x40020428
24007a98:	40020440 	.word	0x40020440
24007a9c:	40020458 	.word	0x40020458
24007aa0:	40020470 	.word	0x40020470
24007aa4:	40020488 	.word	0x40020488
24007aa8:	400204a0 	.word	0x400204a0
24007aac:	400204b8 	.word	0x400204b8
24007ab0:	58025408 	.word	0x58025408
24007ab4:	5802541c 	.word	0x5802541c
24007ab8:	58025430 	.word	0x58025430
24007abc:	58025444 	.word	0x58025444
24007ac0:	58025458 	.word	0x58025458
24007ac4:	5802546c 	.word	0x5802546c
24007ac8:	58025480 	.word	0x58025480
24007acc:	58025494 	.word	0x58025494
24007ad0:	2300      	movs	r3, #0
24007ad2:	2b00      	cmp	r3, #0
24007ad4:	d013      	beq.n	24007afe <HAL_DMAEx_MultiBufferStart+0x2ea>
      {
        /* Configure the source, destination address and the data length */
        DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
24007ad6:	6a3b      	ldr	r3, [r7, #32]
24007ad8:	687a      	ldr	r2, [r7, #4]
24007ada:	68b9      	ldr	r1, [r7, #8]
24007adc:	68f8      	ldr	r0, [r7, #12]
24007ade:	f000 fea3 	bl	24008828 <DMA_MultiBufferSetConfig>

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24007ae2:	68fb      	ldr	r3, [r7, #12]
24007ae4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
24007ae6:	68fa      	ldr	r2, [r7, #12]
24007ae8:	6e92      	ldr	r2, [r2, #104]	@ 0x68
24007aea:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
24007aec:	68fb      	ldr	r3, [r7, #12]
24007aee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
24007af0:	2b00      	cmp	r3, #0
24007af2:	d004      	beq.n	24007afe <HAL_DMAEx_MultiBufferStart+0x2ea>
        {
          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24007af4:	68fb      	ldr	r3, [r7, #12]
24007af6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
24007af8:	68fa      	ldr	r2, [r7, #12]
24007afa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
24007afc:	605a      	str	r2, [r3, #4]
        }
      }

      /* Enable the peripheral */
      __HAL_DMA_ENABLE(hdma);
24007afe:	68fb      	ldr	r3, [r7, #12]
24007b00:	681b      	ldr	r3, [r3, #0]
24007b02:	4a35      	ldr	r2, [pc, #212]	@ (24007bd8 <HAL_DMAEx_MultiBufferStart+0x3c4>)
24007b04:	4293      	cmp	r3, r2
24007b06:	d04a      	beq.n	24007b9e <HAL_DMAEx_MultiBufferStart+0x38a>
24007b08:	68fb      	ldr	r3, [r7, #12]
24007b0a:	681b      	ldr	r3, [r3, #0]
24007b0c:	4a33      	ldr	r2, [pc, #204]	@ (24007bdc <HAL_DMAEx_MultiBufferStart+0x3c8>)
24007b0e:	4293      	cmp	r3, r2
24007b10:	d045      	beq.n	24007b9e <HAL_DMAEx_MultiBufferStart+0x38a>
24007b12:	68fb      	ldr	r3, [r7, #12]
24007b14:	681b      	ldr	r3, [r3, #0]
24007b16:	4a32      	ldr	r2, [pc, #200]	@ (24007be0 <HAL_DMAEx_MultiBufferStart+0x3cc>)
24007b18:	4293      	cmp	r3, r2
24007b1a:	d040      	beq.n	24007b9e <HAL_DMAEx_MultiBufferStart+0x38a>
24007b1c:	68fb      	ldr	r3, [r7, #12]
24007b1e:	681b      	ldr	r3, [r3, #0]
24007b20:	4a30      	ldr	r2, [pc, #192]	@ (24007be4 <HAL_DMAEx_MultiBufferStart+0x3d0>)
24007b22:	4293      	cmp	r3, r2
24007b24:	d03b      	beq.n	24007b9e <HAL_DMAEx_MultiBufferStart+0x38a>
24007b26:	68fb      	ldr	r3, [r7, #12]
24007b28:	681b      	ldr	r3, [r3, #0]
24007b2a:	4a2f      	ldr	r2, [pc, #188]	@ (24007be8 <HAL_DMAEx_MultiBufferStart+0x3d4>)
24007b2c:	4293      	cmp	r3, r2
24007b2e:	d036      	beq.n	24007b9e <HAL_DMAEx_MultiBufferStart+0x38a>
24007b30:	68fb      	ldr	r3, [r7, #12]
24007b32:	681b      	ldr	r3, [r3, #0]
24007b34:	4a2d      	ldr	r2, [pc, #180]	@ (24007bec <HAL_DMAEx_MultiBufferStart+0x3d8>)
24007b36:	4293      	cmp	r3, r2
24007b38:	d031      	beq.n	24007b9e <HAL_DMAEx_MultiBufferStart+0x38a>
24007b3a:	68fb      	ldr	r3, [r7, #12]
24007b3c:	681b      	ldr	r3, [r3, #0]
24007b3e:	4a2c      	ldr	r2, [pc, #176]	@ (24007bf0 <HAL_DMAEx_MultiBufferStart+0x3dc>)
24007b40:	4293      	cmp	r3, r2
24007b42:	d02c      	beq.n	24007b9e <HAL_DMAEx_MultiBufferStart+0x38a>
24007b44:	68fb      	ldr	r3, [r7, #12]
24007b46:	681b      	ldr	r3, [r3, #0]
24007b48:	4a2a      	ldr	r2, [pc, #168]	@ (24007bf4 <HAL_DMAEx_MultiBufferStart+0x3e0>)
24007b4a:	4293      	cmp	r3, r2
24007b4c:	d027      	beq.n	24007b9e <HAL_DMAEx_MultiBufferStart+0x38a>
24007b4e:	68fb      	ldr	r3, [r7, #12]
24007b50:	681b      	ldr	r3, [r3, #0]
24007b52:	4a29      	ldr	r2, [pc, #164]	@ (24007bf8 <HAL_DMAEx_MultiBufferStart+0x3e4>)
24007b54:	4293      	cmp	r3, r2
24007b56:	d022      	beq.n	24007b9e <HAL_DMAEx_MultiBufferStart+0x38a>
24007b58:	68fb      	ldr	r3, [r7, #12]
24007b5a:	681b      	ldr	r3, [r3, #0]
24007b5c:	4a27      	ldr	r2, [pc, #156]	@ (24007bfc <HAL_DMAEx_MultiBufferStart+0x3e8>)
24007b5e:	4293      	cmp	r3, r2
24007b60:	d01d      	beq.n	24007b9e <HAL_DMAEx_MultiBufferStart+0x38a>
24007b62:	68fb      	ldr	r3, [r7, #12]
24007b64:	681b      	ldr	r3, [r3, #0]
24007b66:	4a26      	ldr	r2, [pc, #152]	@ (24007c00 <HAL_DMAEx_MultiBufferStart+0x3ec>)
24007b68:	4293      	cmp	r3, r2
24007b6a:	d018      	beq.n	24007b9e <HAL_DMAEx_MultiBufferStart+0x38a>
24007b6c:	68fb      	ldr	r3, [r7, #12]
24007b6e:	681b      	ldr	r3, [r3, #0]
24007b70:	4a24      	ldr	r2, [pc, #144]	@ (24007c04 <HAL_DMAEx_MultiBufferStart+0x3f0>)
24007b72:	4293      	cmp	r3, r2
24007b74:	d013      	beq.n	24007b9e <HAL_DMAEx_MultiBufferStart+0x38a>
24007b76:	68fb      	ldr	r3, [r7, #12]
24007b78:	681b      	ldr	r3, [r3, #0]
24007b7a:	4a23      	ldr	r2, [pc, #140]	@ (24007c08 <HAL_DMAEx_MultiBufferStart+0x3f4>)
24007b7c:	4293      	cmp	r3, r2
24007b7e:	d00e      	beq.n	24007b9e <HAL_DMAEx_MultiBufferStart+0x38a>
24007b80:	68fb      	ldr	r3, [r7, #12]
24007b82:	681b      	ldr	r3, [r3, #0]
24007b84:	4a21      	ldr	r2, [pc, #132]	@ (24007c0c <HAL_DMAEx_MultiBufferStart+0x3f8>)
24007b86:	4293      	cmp	r3, r2
24007b88:	d009      	beq.n	24007b9e <HAL_DMAEx_MultiBufferStart+0x38a>
24007b8a:	68fb      	ldr	r3, [r7, #12]
24007b8c:	681b      	ldr	r3, [r3, #0]
24007b8e:	4a20      	ldr	r2, [pc, #128]	@ (24007c10 <HAL_DMAEx_MultiBufferStart+0x3fc>)
24007b90:	4293      	cmp	r3, r2
24007b92:	d004      	beq.n	24007b9e <HAL_DMAEx_MultiBufferStart+0x38a>
24007b94:	68fb      	ldr	r3, [r7, #12]
24007b96:	681b      	ldr	r3, [r3, #0]
24007b98:	4a1e      	ldr	r2, [pc, #120]	@ (24007c14 <HAL_DMAEx_MultiBufferStart+0x400>)
24007b9a:	4293      	cmp	r3, r2
24007b9c:	d108      	bne.n	24007bb0 <HAL_DMAEx_MultiBufferStart+0x39c>
24007b9e:	68fb      	ldr	r3, [r7, #12]
24007ba0:	681b      	ldr	r3, [r3, #0]
24007ba2:	681a      	ldr	r2, [r3, #0]
24007ba4:	68fb      	ldr	r3, [r7, #12]
24007ba6:	681b      	ldr	r3, [r3, #0]
24007ba8:	f042 0201 	orr.w	r2, r2, #1
24007bac:	601a      	str	r2, [r3, #0]
24007bae:	e00e      	b.n	24007bce <HAL_DMAEx_MultiBufferStart+0x3ba>
24007bb0:	68fb      	ldr	r3, [r7, #12]
24007bb2:	681b      	ldr	r3, [r3, #0]
24007bb4:	681a      	ldr	r2, [r3, #0]
24007bb6:	68fb      	ldr	r3, [r7, #12]
24007bb8:	681b      	ldr	r3, [r3, #0]
24007bba:	f042 0201 	orr.w	r2, r2, #1
24007bbe:	601a      	str	r2, [r3, #0]
24007bc0:	e005      	b.n	24007bce <HAL_DMAEx_MultiBufferStart+0x3ba>
    }
    else
    {
      /* Set the error code to busy */
      hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
24007bc2:	68fb      	ldr	r3, [r7, #12]
24007bc4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
24007bc8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Return error status */
      status = HAL_ERROR;
24007bca:	2301      	movs	r3, #1
24007bcc:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
24007bce:	7dfb      	ldrb	r3, [r7, #23]
}
24007bd0:	4618      	mov	r0, r3
24007bd2:	3718      	adds	r7, #24
24007bd4:	46bd      	mov	sp, r7
24007bd6:	bd80      	pop	{r7, pc}
24007bd8:	40020010 	.word	0x40020010
24007bdc:	40020028 	.word	0x40020028
24007be0:	40020040 	.word	0x40020040
24007be4:	40020058 	.word	0x40020058
24007be8:	40020070 	.word	0x40020070
24007bec:	40020088 	.word	0x40020088
24007bf0:	400200a0 	.word	0x400200a0
24007bf4:	400200b8 	.word	0x400200b8
24007bf8:	40020410 	.word	0x40020410
24007bfc:	40020428 	.word	0x40020428
24007c00:	40020440 	.word	0x40020440
24007c04:	40020458 	.word	0x40020458
24007c08:	40020470 	.word	0x40020470
24007c0c:	40020488 	.word	0x40020488
24007c10:	400204a0 	.word	0x400204a0
24007c14:	400204b8 	.word	0x400204b8

24007c18 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
24007c18:	b580      	push	{r7, lr}
24007c1a:	b086      	sub	sp, #24
24007c1c:	af00      	add	r7, sp, #0
24007c1e:	60f8      	str	r0, [r7, #12]
24007c20:	60b9      	str	r1, [r7, #8]
24007c22:	607a      	str	r2, [r7, #4]
24007c24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
24007c26:	2300      	movs	r3, #0
24007c28:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
24007c2a:	68fb      	ldr	r3, [r7, #12]
24007c2c:	689b      	ldr	r3, [r3, #8]
24007c2e:	2b80      	cmp	r3, #128	@ 0x80
24007c30:	d105      	bne.n	24007c3e <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
24007c32:	68fb      	ldr	r3, [r7, #12]
24007c34:	f44f 7280 	mov.w	r2, #256	@ 0x100
24007c38:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
24007c3a:	2301      	movs	r3, #1
24007c3c:	e315      	b.n	2400826a <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
24007c3e:	68fb      	ldr	r3, [r7, #12]
24007c40:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
24007c44:	2b01      	cmp	r3, #1
24007c46:	d101      	bne.n	24007c4c <HAL_DMAEx_MultiBufferStart_IT+0x34>
24007c48:	2302      	movs	r3, #2
24007c4a:	e30e      	b.n	2400826a <HAL_DMAEx_MultiBufferStart_IT+0x652>
24007c4c:	68fb      	ldr	r3, [r7, #12]
24007c4e:	2201      	movs	r2, #1
24007c50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
24007c54:	68fb      	ldr	r3, [r7, #12]
24007c56:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
24007c5a:	b2db      	uxtb	r3, r3
24007c5c:	2b01      	cmp	r3, #1
24007c5e:	f040 82fd 	bne.w	2400825c <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
24007c62:	68fb      	ldr	r3, [r7, #12]
24007c64:	2202      	movs	r2, #2
24007c66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24007c6a:	68fb      	ldr	r3, [r7, #12]
24007c6c:	2200      	movs	r2, #0
24007c6e:	655a      	str	r2, [r3, #84]	@ 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24007c70:	68fb      	ldr	r3, [r7, #12]
24007c72:	681b      	ldr	r3, [r3, #0]
24007c74:	4a82      	ldr	r2, [pc, #520]	@ (24007e80 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
24007c76:	4293      	cmp	r3, r2
24007c78:	d04a      	beq.n	24007d10 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
24007c7a:	68fb      	ldr	r3, [r7, #12]
24007c7c:	681b      	ldr	r3, [r3, #0]
24007c7e:	4a81      	ldr	r2, [pc, #516]	@ (24007e84 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
24007c80:	4293      	cmp	r3, r2
24007c82:	d045      	beq.n	24007d10 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
24007c84:	68fb      	ldr	r3, [r7, #12]
24007c86:	681b      	ldr	r3, [r3, #0]
24007c88:	4a7f      	ldr	r2, [pc, #508]	@ (24007e88 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
24007c8a:	4293      	cmp	r3, r2
24007c8c:	d040      	beq.n	24007d10 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
24007c8e:	68fb      	ldr	r3, [r7, #12]
24007c90:	681b      	ldr	r3, [r3, #0]
24007c92:	4a7e      	ldr	r2, [pc, #504]	@ (24007e8c <HAL_DMAEx_MultiBufferStart_IT+0x274>)
24007c94:	4293      	cmp	r3, r2
24007c96:	d03b      	beq.n	24007d10 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
24007c98:	68fb      	ldr	r3, [r7, #12]
24007c9a:	681b      	ldr	r3, [r3, #0]
24007c9c:	4a7c      	ldr	r2, [pc, #496]	@ (24007e90 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
24007c9e:	4293      	cmp	r3, r2
24007ca0:	d036      	beq.n	24007d10 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
24007ca2:	68fb      	ldr	r3, [r7, #12]
24007ca4:	681b      	ldr	r3, [r3, #0]
24007ca6:	4a7b      	ldr	r2, [pc, #492]	@ (24007e94 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
24007ca8:	4293      	cmp	r3, r2
24007caa:	d031      	beq.n	24007d10 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
24007cac:	68fb      	ldr	r3, [r7, #12]
24007cae:	681b      	ldr	r3, [r3, #0]
24007cb0:	4a79      	ldr	r2, [pc, #484]	@ (24007e98 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
24007cb2:	4293      	cmp	r3, r2
24007cb4:	d02c      	beq.n	24007d10 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
24007cb6:	68fb      	ldr	r3, [r7, #12]
24007cb8:	681b      	ldr	r3, [r3, #0]
24007cba:	4a78      	ldr	r2, [pc, #480]	@ (24007e9c <HAL_DMAEx_MultiBufferStart_IT+0x284>)
24007cbc:	4293      	cmp	r3, r2
24007cbe:	d027      	beq.n	24007d10 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
24007cc0:	68fb      	ldr	r3, [r7, #12]
24007cc2:	681b      	ldr	r3, [r3, #0]
24007cc4:	4a76      	ldr	r2, [pc, #472]	@ (24007ea0 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
24007cc6:	4293      	cmp	r3, r2
24007cc8:	d022      	beq.n	24007d10 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
24007cca:	68fb      	ldr	r3, [r7, #12]
24007ccc:	681b      	ldr	r3, [r3, #0]
24007cce:	4a75      	ldr	r2, [pc, #468]	@ (24007ea4 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
24007cd0:	4293      	cmp	r3, r2
24007cd2:	d01d      	beq.n	24007d10 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
24007cd4:	68fb      	ldr	r3, [r7, #12]
24007cd6:	681b      	ldr	r3, [r3, #0]
24007cd8:	4a73      	ldr	r2, [pc, #460]	@ (24007ea8 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
24007cda:	4293      	cmp	r3, r2
24007cdc:	d018      	beq.n	24007d10 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
24007cde:	68fb      	ldr	r3, [r7, #12]
24007ce0:	681b      	ldr	r3, [r3, #0]
24007ce2:	4a72      	ldr	r2, [pc, #456]	@ (24007eac <HAL_DMAEx_MultiBufferStart_IT+0x294>)
24007ce4:	4293      	cmp	r3, r2
24007ce6:	d013      	beq.n	24007d10 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
24007ce8:	68fb      	ldr	r3, [r7, #12]
24007cea:	681b      	ldr	r3, [r3, #0]
24007cec:	4a70      	ldr	r2, [pc, #448]	@ (24007eb0 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
24007cee:	4293      	cmp	r3, r2
24007cf0:	d00e      	beq.n	24007d10 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
24007cf2:	68fb      	ldr	r3, [r7, #12]
24007cf4:	681b      	ldr	r3, [r3, #0]
24007cf6:	4a6f      	ldr	r2, [pc, #444]	@ (24007eb4 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
24007cf8:	4293      	cmp	r3, r2
24007cfa:	d009      	beq.n	24007d10 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
24007cfc:	68fb      	ldr	r3, [r7, #12]
24007cfe:	681b      	ldr	r3, [r3, #0]
24007d00:	4a6d      	ldr	r2, [pc, #436]	@ (24007eb8 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
24007d02:	4293      	cmp	r3, r2
24007d04:	d004      	beq.n	24007d10 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
24007d06:	68fb      	ldr	r3, [r7, #12]
24007d08:	681b      	ldr	r3, [r3, #0]
24007d0a:	4a6c      	ldr	r2, [pc, #432]	@ (24007ebc <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
24007d0c:	4293      	cmp	r3, r2
24007d0e:	d101      	bne.n	24007d14 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
24007d10:	2301      	movs	r3, #1
24007d12:	e000      	b.n	24007d16 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
24007d14:	2300      	movs	r3, #0
24007d16:	2b00      	cmp	r3, #0
24007d18:	d018      	beq.n	24007d4c <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
24007d1a:	68fb      	ldr	r3, [r7, #12]
24007d1c:	681b      	ldr	r3, [r3, #0]
24007d1e:	681a      	ldr	r2, [r3, #0]
24007d20:	68fb      	ldr	r3, [r7, #12]
24007d22:	681b      	ldr	r3, [r3, #0]
24007d24:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
24007d28:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
24007d2a:	68fb      	ldr	r3, [r7, #12]
24007d2c:	681b      	ldr	r3, [r3, #0]
24007d2e:	683a      	ldr	r2, [r7, #0]
24007d30:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
24007d32:	68fb      	ldr	r3, [r7, #12]
24007d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
24007d36:	3308      	adds	r3, #8
24007d38:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24007d3a:	68fb      	ldr	r3, [r7, #12]
24007d3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
24007d3e:	f003 031f 	and.w	r3, r3, #31
24007d42:	223f      	movs	r2, #63	@ 0x3f
24007d44:	409a      	lsls	r2, r3
24007d46:	693b      	ldr	r3, [r7, #16]
24007d48:	601a      	str	r2, [r3, #0]
24007d4a:	e018      	b.n	24007d7e <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
24007d4c:	68fb      	ldr	r3, [r7, #12]
24007d4e:	681b      	ldr	r3, [r3, #0]
24007d50:	6819      	ldr	r1, [r3, #0]
24007d52:	68fb      	ldr	r3, [r7, #12]
24007d54:	681a      	ldr	r2, [r3, #0]
24007d56:	f248 0320 	movw	r3, #32800	@ 0x8020
24007d5a:	430b      	orrs	r3, r1
24007d5c:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
24007d5e:	68fb      	ldr	r3, [r7, #12]
24007d60:	681b      	ldr	r3, [r3, #0]
24007d62:	683a      	ldr	r2, [r7, #0]
24007d64:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
24007d66:	68fb      	ldr	r3, [r7, #12]
24007d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
24007d6a:	3304      	adds	r3, #4
24007d6c:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
24007d6e:	68fb      	ldr	r3, [r7, #12]
24007d70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
24007d72:	f003 031f 	and.w	r3, r3, #31
24007d76:	2201      	movs	r2, #1
24007d78:	409a      	lsls	r2, r3
24007d7a:	693b      	ldr	r3, [r7, #16]
24007d7c:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
24007d7e:	6a3b      	ldr	r3, [r7, #32]
24007d80:	687a      	ldr	r2, [r7, #4]
24007d82:	68b9      	ldr	r1, [r7, #8]
24007d84:	68f8      	ldr	r0, [r7, #12]
24007d86:	f000 fd4f 	bl	24008828 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24007d8a:	68fb      	ldr	r3, [r7, #12]
24007d8c:	681b      	ldr	r3, [r3, #0]
24007d8e:	4a3c      	ldr	r2, [pc, #240]	@ (24007e80 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
24007d90:	4293      	cmp	r3, r2
24007d92:	d072      	beq.n	24007e7a <HAL_DMAEx_MultiBufferStart_IT+0x262>
24007d94:	68fb      	ldr	r3, [r7, #12]
24007d96:	681b      	ldr	r3, [r3, #0]
24007d98:	4a3a      	ldr	r2, [pc, #232]	@ (24007e84 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
24007d9a:	4293      	cmp	r3, r2
24007d9c:	d06d      	beq.n	24007e7a <HAL_DMAEx_MultiBufferStart_IT+0x262>
24007d9e:	68fb      	ldr	r3, [r7, #12]
24007da0:	681b      	ldr	r3, [r3, #0]
24007da2:	4a39      	ldr	r2, [pc, #228]	@ (24007e88 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
24007da4:	4293      	cmp	r3, r2
24007da6:	d068      	beq.n	24007e7a <HAL_DMAEx_MultiBufferStart_IT+0x262>
24007da8:	68fb      	ldr	r3, [r7, #12]
24007daa:	681b      	ldr	r3, [r3, #0]
24007dac:	4a37      	ldr	r2, [pc, #220]	@ (24007e8c <HAL_DMAEx_MultiBufferStart_IT+0x274>)
24007dae:	4293      	cmp	r3, r2
24007db0:	d063      	beq.n	24007e7a <HAL_DMAEx_MultiBufferStart_IT+0x262>
24007db2:	68fb      	ldr	r3, [r7, #12]
24007db4:	681b      	ldr	r3, [r3, #0]
24007db6:	4a36      	ldr	r2, [pc, #216]	@ (24007e90 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
24007db8:	4293      	cmp	r3, r2
24007dba:	d05e      	beq.n	24007e7a <HAL_DMAEx_MultiBufferStart_IT+0x262>
24007dbc:	68fb      	ldr	r3, [r7, #12]
24007dbe:	681b      	ldr	r3, [r3, #0]
24007dc0:	4a34      	ldr	r2, [pc, #208]	@ (24007e94 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
24007dc2:	4293      	cmp	r3, r2
24007dc4:	d059      	beq.n	24007e7a <HAL_DMAEx_MultiBufferStart_IT+0x262>
24007dc6:	68fb      	ldr	r3, [r7, #12]
24007dc8:	681b      	ldr	r3, [r3, #0]
24007dca:	4a33      	ldr	r2, [pc, #204]	@ (24007e98 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
24007dcc:	4293      	cmp	r3, r2
24007dce:	d054      	beq.n	24007e7a <HAL_DMAEx_MultiBufferStart_IT+0x262>
24007dd0:	68fb      	ldr	r3, [r7, #12]
24007dd2:	681b      	ldr	r3, [r3, #0]
24007dd4:	4a31      	ldr	r2, [pc, #196]	@ (24007e9c <HAL_DMAEx_MultiBufferStart_IT+0x284>)
24007dd6:	4293      	cmp	r3, r2
24007dd8:	d04f      	beq.n	24007e7a <HAL_DMAEx_MultiBufferStart_IT+0x262>
24007dda:	68fb      	ldr	r3, [r7, #12]
24007ddc:	681b      	ldr	r3, [r3, #0]
24007dde:	4a30      	ldr	r2, [pc, #192]	@ (24007ea0 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
24007de0:	4293      	cmp	r3, r2
24007de2:	d04a      	beq.n	24007e7a <HAL_DMAEx_MultiBufferStart_IT+0x262>
24007de4:	68fb      	ldr	r3, [r7, #12]
24007de6:	681b      	ldr	r3, [r3, #0]
24007de8:	4a2e      	ldr	r2, [pc, #184]	@ (24007ea4 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
24007dea:	4293      	cmp	r3, r2
24007dec:	d045      	beq.n	24007e7a <HAL_DMAEx_MultiBufferStart_IT+0x262>
24007dee:	68fb      	ldr	r3, [r7, #12]
24007df0:	681b      	ldr	r3, [r3, #0]
24007df2:	4a2d      	ldr	r2, [pc, #180]	@ (24007ea8 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
24007df4:	4293      	cmp	r3, r2
24007df6:	d040      	beq.n	24007e7a <HAL_DMAEx_MultiBufferStart_IT+0x262>
24007df8:	68fb      	ldr	r3, [r7, #12]
24007dfa:	681b      	ldr	r3, [r3, #0]
24007dfc:	4a2b      	ldr	r2, [pc, #172]	@ (24007eac <HAL_DMAEx_MultiBufferStart_IT+0x294>)
24007dfe:	4293      	cmp	r3, r2
24007e00:	d03b      	beq.n	24007e7a <HAL_DMAEx_MultiBufferStart_IT+0x262>
24007e02:	68fb      	ldr	r3, [r7, #12]
24007e04:	681b      	ldr	r3, [r3, #0]
24007e06:	4a2a      	ldr	r2, [pc, #168]	@ (24007eb0 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
24007e08:	4293      	cmp	r3, r2
24007e0a:	d036      	beq.n	24007e7a <HAL_DMAEx_MultiBufferStart_IT+0x262>
24007e0c:	68fb      	ldr	r3, [r7, #12]
24007e0e:	681b      	ldr	r3, [r3, #0]
24007e10:	4a28      	ldr	r2, [pc, #160]	@ (24007eb4 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
24007e12:	4293      	cmp	r3, r2
24007e14:	d031      	beq.n	24007e7a <HAL_DMAEx_MultiBufferStart_IT+0x262>
24007e16:	68fb      	ldr	r3, [r7, #12]
24007e18:	681b      	ldr	r3, [r3, #0]
24007e1a:	4a27      	ldr	r2, [pc, #156]	@ (24007eb8 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
24007e1c:	4293      	cmp	r3, r2
24007e1e:	d02c      	beq.n	24007e7a <HAL_DMAEx_MultiBufferStart_IT+0x262>
24007e20:	68fb      	ldr	r3, [r7, #12]
24007e22:	681b      	ldr	r3, [r3, #0]
24007e24:	4a25      	ldr	r2, [pc, #148]	@ (24007ebc <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
24007e26:	4293      	cmp	r3, r2
24007e28:	d027      	beq.n	24007e7a <HAL_DMAEx_MultiBufferStart_IT+0x262>
24007e2a:	68fb      	ldr	r3, [r7, #12]
24007e2c:	681b      	ldr	r3, [r3, #0]
24007e2e:	4a24      	ldr	r2, [pc, #144]	@ (24007ec0 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
24007e30:	4293      	cmp	r3, r2
24007e32:	d022      	beq.n	24007e7a <HAL_DMAEx_MultiBufferStart_IT+0x262>
24007e34:	68fb      	ldr	r3, [r7, #12]
24007e36:	681b      	ldr	r3, [r3, #0]
24007e38:	4a22      	ldr	r2, [pc, #136]	@ (24007ec4 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
24007e3a:	4293      	cmp	r3, r2
24007e3c:	d01d      	beq.n	24007e7a <HAL_DMAEx_MultiBufferStart_IT+0x262>
24007e3e:	68fb      	ldr	r3, [r7, #12]
24007e40:	681b      	ldr	r3, [r3, #0]
24007e42:	4a21      	ldr	r2, [pc, #132]	@ (24007ec8 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
24007e44:	4293      	cmp	r3, r2
24007e46:	d018      	beq.n	24007e7a <HAL_DMAEx_MultiBufferStart_IT+0x262>
24007e48:	68fb      	ldr	r3, [r7, #12]
24007e4a:	681b      	ldr	r3, [r3, #0]
24007e4c:	4a1f      	ldr	r2, [pc, #124]	@ (24007ecc <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
24007e4e:	4293      	cmp	r3, r2
24007e50:	d013      	beq.n	24007e7a <HAL_DMAEx_MultiBufferStart_IT+0x262>
24007e52:	68fb      	ldr	r3, [r7, #12]
24007e54:	681b      	ldr	r3, [r3, #0]
24007e56:	4a1e      	ldr	r2, [pc, #120]	@ (24007ed0 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
24007e58:	4293      	cmp	r3, r2
24007e5a:	d00e      	beq.n	24007e7a <HAL_DMAEx_MultiBufferStart_IT+0x262>
24007e5c:	68fb      	ldr	r3, [r7, #12]
24007e5e:	681b      	ldr	r3, [r3, #0]
24007e60:	4a1c      	ldr	r2, [pc, #112]	@ (24007ed4 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
24007e62:	4293      	cmp	r3, r2
24007e64:	d009      	beq.n	24007e7a <HAL_DMAEx_MultiBufferStart_IT+0x262>
24007e66:	68fb      	ldr	r3, [r7, #12]
24007e68:	681b      	ldr	r3, [r3, #0]
24007e6a:	4a1b      	ldr	r2, [pc, #108]	@ (24007ed8 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
24007e6c:	4293      	cmp	r3, r2
24007e6e:	d004      	beq.n	24007e7a <HAL_DMAEx_MultiBufferStart_IT+0x262>
24007e70:	68fb      	ldr	r3, [r7, #12]
24007e72:	681b      	ldr	r3, [r3, #0]
24007e74:	4a19      	ldr	r2, [pc, #100]	@ (24007edc <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
24007e76:	4293      	cmp	r3, r2
24007e78:	d132      	bne.n	24007ee0 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
24007e7a:	2301      	movs	r3, #1
24007e7c:	e031      	b.n	24007ee2 <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
24007e7e:	bf00      	nop
24007e80:	40020010 	.word	0x40020010
24007e84:	40020028 	.word	0x40020028
24007e88:	40020040 	.word	0x40020040
24007e8c:	40020058 	.word	0x40020058
24007e90:	40020070 	.word	0x40020070
24007e94:	40020088 	.word	0x40020088
24007e98:	400200a0 	.word	0x400200a0
24007e9c:	400200b8 	.word	0x400200b8
24007ea0:	40020410 	.word	0x40020410
24007ea4:	40020428 	.word	0x40020428
24007ea8:	40020440 	.word	0x40020440
24007eac:	40020458 	.word	0x40020458
24007eb0:	40020470 	.word	0x40020470
24007eb4:	40020488 	.word	0x40020488
24007eb8:	400204a0 	.word	0x400204a0
24007ebc:	400204b8 	.word	0x400204b8
24007ec0:	58025408 	.word	0x58025408
24007ec4:	5802541c 	.word	0x5802541c
24007ec8:	58025430 	.word	0x58025430
24007ecc:	58025444 	.word	0x58025444
24007ed0:	58025458 	.word	0x58025458
24007ed4:	5802546c 	.word	0x5802546c
24007ed8:	58025480 	.word	0x58025480
24007edc:	58025494 	.word	0x58025494
24007ee0:	2300      	movs	r3, #0
24007ee2:	2b00      	cmp	r3, #0
24007ee4:	d00d      	beq.n	24007f02 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24007ee6:	68fb      	ldr	r3, [r7, #12]
24007ee8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
24007eea:	68fa      	ldr	r2, [r7, #12]
24007eec:	6e92      	ldr	r2, [r2, #104]	@ 0x68
24007eee:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
24007ef0:	68fb      	ldr	r3, [r7, #12]
24007ef2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
24007ef4:	2b00      	cmp	r3, #0
24007ef6:	d004      	beq.n	24007f02 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24007ef8:	68fb      	ldr	r3, [r7, #12]
24007efa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
24007efc:	68fa      	ldr	r2, [r7, #12]
24007efe:	6f52      	ldr	r2, [r2, #116]	@ 0x74
24007f00:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24007f02:	68fb      	ldr	r3, [r7, #12]
24007f04:	681b      	ldr	r3, [r3, #0]
24007f06:	4a3b      	ldr	r2, [pc, #236]	@ (24007ff4 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
24007f08:	4293      	cmp	r3, r2
24007f0a:	d04a      	beq.n	24007fa2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
24007f0c:	68fb      	ldr	r3, [r7, #12]
24007f0e:	681b      	ldr	r3, [r3, #0]
24007f10:	4a39      	ldr	r2, [pc, #228]	@ (24007ff8 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
24007f12:	4293      	cmp	r3, r2
24007f14:	d045      	beq.n	24007fa2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
24007f16:	68fb      	ldr	r3, [r7, #12]
24007f18:	681b      	ldr	r3, [r3, #0]
24007f1a:	4a38      	ldr	r2, [pc, #224]	@ (24007ffc <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
24007f1c:	4293      	cmp	r3, r2
24007f1e:	d040      	beq.n	24007fa2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
24007f20:	68fb      	ldr	r3, [r7, #12]
24007f22:	681b      	ldr	r3, [r3, #0]
24007f24:	4a36      	ldr	r2, [pc, #216]	@ (24008000 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
24007f26:	4293      	cmp	r3, r2
24007f28:	d03b      	beq.n	24007fa2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
24007f2a:	68fb      	ldr	r3, [r7, #12]
24007f2c:	681b      	ldr	r3, [r3, #0]
24007f2e:	4a35      	ldr	r2, [pc, #212]	@ (24008004 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
24007f30:	4293      	cmp	r3, r2
24007f32:	d036      	beq.n	24007fa2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
24007f34:	68fb      	ldr	r3, [r7, #12]
24007f36:	681b      	ldr	r3, [r3, #0]
24007f38:	4a33      	ldr	r2, [pc, #204]	@ (24008008 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
24007f3a:	4293      	cmp	r3, r2
24007f3c:	d031      	beq.n	24007fa2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
24007f3e:	68fb      	ldr	r3, [r7, #12]
24007f40:	681b      	ldr	r3, [r3, #0]
24007f42:	4a32      	ldr	r2, [pc, #200]	@ (2400800c <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
24007f44:	4293      	cmp	r3, r2
24007f46:	d02c      	beq.n	24007fa2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
24007f48:	68fb      	ldr	r3, [r7, #12]
24007f4a:	681b      	ldr	r3, [r3, #0]
24007f4c:	4a30      	ldr	r2, [pc, #192]	@ (24008010 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
24007f4e:	4293      	cmp	r3, r2
24007f50:	d027      	beq.n	24007fa2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
24007f52:	68fb      	ldr	r3, [r7, #12]
24007f54:	681b      	ldr	r3, [r3, #0]
24007f56:	4a2f      	ldr	r2, [pc, #188]	@ (24008014 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
24007f58:	4293      	cmp	r3, r2
24007f5a:	d022      	beq.n	24007fa2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
24007f5c:	68fb      	ldr	r3, [r7, #12]
24007f5e:	681b      	ldr	r3, [r3, #0]
24007f60:	4a2d      	ldr	r2, [pc, #180]	@ (24008018 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
24007f62:	4293      	cmp	r3, r2
24007f64:	d01d      	beq.n	24007fa2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
24007f66:	68fb      	ldr	r3, [r7, #12]
24007f68:	681b      	ldr	r3, [r3, #0]
24007f6a:	4a2c      	ldr	r2, [pc, #176]	@ (2400801c <HAL_DMAEx_MultiBufferStart_IT+0x404>)
24007f6c:	4293      	cmp	r3, r2
24007f6e:	d018      	beq.n	24007fa2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
24007f70:	68fb      	ldr	r3, [r7, #12]
24007f72:	681b      	ldr	r3, [r3, #0]
24007f74:	4a2a      	ldr	r2, [pc, #168]	@ (24008020 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
24007f76:	4293      	cmp	r3, r2
24007f78:	d013      	beq.n	24007fa2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
24007f7a:	68fb      	ldr	r3, [r7, #12]
24007f7c:	681b      	ldr	r3, [r3, #0]
24007f7e:	4a29      	ldr	r2, [pc, #164]	@ (24008024 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
24007f80:	4293      	cmp	r3, r2
24007f82:	d00e      	beq.n	24007fa2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
24007f84:	68fb      	ldr	r3, [r7, #12]
24007f86:	681b      	ldr	r3, [r3, #0]
24007f88:	4a27      	ldr	r2, [pc, #156]	@ (24008028 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
24007f8a:	4293      	cmp	r3, r2
24007f8c:	d009      	beq.n	24007fa2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
24007f8e:	68fb      	ldr	r3, [r7, #12]
24007f90:	681b      	ldr	r3, [r3, #0]
24007f92:	4a26      	ldr	r2, [pc, #152]	@ (2400802c <HAL_DMAEx_MultiBufferStart_IT+0x414>)
24007f94:	4293      	cmp	r3, r2
24007f96:	d004      	beq.n	24007fa2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
24007f98:	68fb      	ldr	r3, [r7, #12]
24007f9a:	681b      	ldr	r3, [r3, #0]
24007f9c:	4a24      	ldr	r2, [pc, #144]	@ (24008030 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
24007f9e:	4293      	cmp	r3, r2
24007fa0:	d101      	bne.n	24007fa6 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
24007fa2:	2301      	movs	r3, #1
24007fa4:	e000      	b.n	24007fa8 <HAL_DMAEx_MultiBufferStart_IT+0x390>
24007fa6:	2300      	movs	r3, #0
24007fa8:	2b00      	cmp	r3, #0
24007faa:	d043      	beq.n	24008034 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
24007fac:	68fb      	ldr	r3, [r7, #12]
24007fae:	681b      	ldr	r3, [r3, #0]
24007fb0:	681b      	ldr	r3, [r3, #0]
24007fb2:	f023 021e 	bic.w	r2, r3, #30
24007fb6:	68fb      	ldr	r3, [r7, #12]
24007fb8:	681b      	ldr	r3, [r3, #0]
24007fba:	f042 0216 	orr.w	r2, r2, #22
24007fbe:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
24007fc0:	68fb      	ldr	r3, [r7, #12]
24007fc2:	681b      	ldr	r3, [r3, #0]
24007fc4:	695a      	ldr	r2, [r3, #20]
24007fc6:	68fb      	ldr	r3, [r7, #12]
24007fc8:	681b      	ldr	r3, [r3, #0]
24007fca:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
24007fce:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
24007fd0:	68fb      	ldr	r3, [r7, #12]
24007fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
24007fd4:	2b00      	cmp	r3, #0
24007fd6:	d103      	bne.n	24007fe0 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
24007fd8:	68fb      	ldr	r3, [r7, #12]
24007fda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
24007fdc:	2b00      	cmp	r3, #0
24007fde:	d043      	beq.n	24008068 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
24007fe0:	68fb      	ldr	r3, [r7, #12]
24007fe2:	681b      	ldr	r3, [r3, #0]
24007fe4:	681a      	ldr	r2, [r3, #0]
24007fe6:	68fb      	ldr	r3, [r7, #12]
24007fe8:	681b      	ldr	r3, [r3, #0]
24007fea:	f042 0208 	orr.w	r2, r2, #8
24007fee:	601a      	str	r2, [r3, #0]
24007ff0:	e03a      	b.n	24008068 <HAL_DMAEx_MultiBufferStart_IT+0x450>
24007ff2:	bf00      	nop
24007ff4:	40020010 	.word	0x40020010
24007ff8:	40020028 	.word	0x40020028
24007ffc:	40020040 	.word	0x40020040
24008000:	40020058 	.word	0x40020058
24008004:	40020070 	.word	0x40020070
24008008:	40020088 	.word	0x40020088
2400800c:	400200a0 	.word	0x400200a0
24008010:	400200b8 	.word	0x400200b8
24008014:	40020410 	.word	0x40020410
24008018:	40020428 	.word	0x40020428
2400801c:	40020440 	.word	0x40020440
24008020:	40020458 	.word	0x40020458
24008024:	40020470 	.word	0x40020470
24008028:	40020488 	.word	0x40020488
2400802c:	400204a0 	.word	0x400204a0
24008030:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
24008034:	68fb      	ldr	r3, [r7, #12]
24008036:	681b      	ldr	r3, [r3, #0]
24008038:	681b      	ldr	r3, [r3, #0]
2400803a:	f023 020e 	bic.w	r2, r3, #14
2400803e:	68fb      	ldr	r3, [r7, #12]
24008040:	681b      	ldr	r3, [r3, #0]
24008042:	f042 020a 	orr.w	r2, r2, #10
24008046:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
24008048:	68fb      	ldr	r3, [r7, #12]
2400804a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2400804c:	2b00      	cmp	r3, #0
2400804e:	d103      	bne.n	24008058 <HAL_DMAEx_MultiBufferStart_IT+0x440>
24008050:	68fb      	ldr	r3, [r7, #12]
24008052:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
24008054:	2b00      	cmp	r3, #0
24008056:	d007      	beq.n	24008068 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
24008058:	68fb      	ldr	r3, [r7, #12]
2400805a:	681b      	ldr	r3, [r3, #0]
2400805c:	681a      	ldr	r2, [r3, #0]
2400805e:	68fb      	ldr	r3, [r7, #12]
24008060:	681b      	ldr	r3, [r3, #0]
24008062:	f042 0204 	orr.w	r2, r2, #4
24008066:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24008068:	68fb      	ldr	r3, [r7, #12]
2400806a:	681b      	ldr	r3, [r3, #0]
2400806c:	4a81      	ldr	r2, [pc, #516]	@ (24008274 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
2400806e:	4293      	cmp	r3, r2
24008070:	d072      	beq.n	24008158 <HAL_DMAEx_MultiBufferStart_IT+0x540>
24008072:	68fb      	ldr	r3, [r7, #12]
24008074:	681b      	ldr	r3, [r3, #0]
24008076:	4a80      	ldr	r2, [pc, #512]	@ (24008278 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
24008078:	4293      	cmp	r3, r2
2400807a:	d06d      	beq.n	24008158 <HAL_DMAEx_MultiBufferStart_IT+0x540>
2400807c:	68fb      	ldr	r3, [r7, #12]
2400807e:	681b      	ldr	r3, [r3, #0]
24008080:	4a7e      	ldr	r2, [pc, #504]	@ (2400827c <HAL_DMAEx_MultiBufferStart_IT+0x664>)
24008082:	4293      	cmp	r3, r2
24008084:	d068      	beq.n	24008158 <HAL_DMAEx_MultiBufferStart_IT+0x540>
24008086:	68fb      	ldr	r3, [r7, #12]
24008088:	681b      	ldr	r3, [r3, #0]
2400808a:	4a7d      	ldr	r2, [pc, #500]	@ (24008280 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
2400808c:	4293      	cmp	r3, r2
2400808e:	d063      	beq.n	24008158 <HAL_DMAEx_MultiBufferStart_IT+0x540>
24008090:	68fb      	ldr	r3, [r7, #12]
24008092:	681b      	ldr	r3, [r3, #0]
24008094:	4a7b      	ldr	r2, [pc, #492]	@ (24008284 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
24008096:	4293      	cmp	r3, r2
24008098:	d05e      	beq.n	24008158 <HAL_DMAEx_MultiBufferStart_IT+0x540>
2400809a:	68fb      	ldr	r3, [r7, #12]
2400809c:	681b      	ldr	r3, [r3, #0]
2400809e:	4a7a      	ldr	r2, [pc, #488]	@ (24008288 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
240080a0:	4293      	cmp	r3, r2
240080a2:	d059      	beq.n	24008158 <HAL_DMAEx_MultiBufferStart_IT+0x540>
240080a4:	68fb      	ldr	r3, [r7, #12]
240080a6:	681b      	ldr	r3, [r3, #0]
240080a8:	4a78      	ldr	r2, [pc, #480]	@ (2400828c <HAL_DMAEx_MultiBufferStart_IT+0x674>)
240080aa:	4293      	cmp	r3, r2
240080ac:	d054      	beq.n	24008158 <HAL_DMAEx_MultiBufferStart_IT+0x540>
240080ae:	68fb      	ldr	r3, [r7, #12]
240080b0:	681b      	ldr	r3, [r3, #0]
240080b2:	4a77      	ldr	r2, [pc, #476]	@ (24008290 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
240080b4:	4293      	cmp	r3, r2
240080b6:	d04f      	beq.n	24008158 <HAL_DMAEx_MultiBufferStart_IT+0x540>
240080b8:	68fb      	ldr	r3, [r7, #12]
240080ba:	681b      	ldr	r3, [r3, #0]
240080bc:	4a75      	ldr	r2, [pc, #468]	@ (24008294 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
240080be:	4293      	cmp	r3, r2
240080c0:	d04a      	beq.n	24008158 <HAL_DMAEx_MultiBufferStart_IT+0x540>
240080c2:	68fb      	ldr	r3, [r7, #12]
240080c4:	681b      	ldr	r3, [r3, #0]
240080c6:	4a74      	ldr	r2, [pc, #464]	@ (24008298 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
240080c8:	4293      	cmp	r3, r2
240080ca:	d045      	beq.n	24008158 <HAL_DMAEx_MultiBufferStart_IT+0x540>
240080cc:	68fb      	ldr	r3, [r7, #12]
240080ce:	681b      	ldr	r3, [r3, #0]
240080d0:	4a72      	ldr	r2, [pc, #456]	@ (2400829c <HAL_DMAEx_MultiBufferStart_IT+0x684>)
240080d2:	4293      	cmp	r3, r2
240080d4:	d040      	beq.n	24008158 <HAL_DMAEx_MultiBufferStart_IT+0x540>
240080d6:	68fb      	ldr	r3, [r7, #12]
240080d8:	681b      	ldr	r3, [r3, #0]
240080da:	4a71      	ldr	r2, [pc, #452]	@ (240082a0 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
240080dc:	4293      	cmp	r3, r2
240080de:	d03b      	beq.n	24008158 <HAL_DMAEx_MultiBufferStart_IT+0x540>
240080e0:	68fb      	ldr	r3, [r7, #12]
240080e2:	681b      	ldr	r3, [r3, #0]
240080e4:	4a6f      	ldr	r2, [pc, #444]	@ (240082a4 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
240080e6:	4293      	cmp	r3, r2
240080e8:	d036      	beq.n	24008158 <HAL_DMAEx_MultiBufferStart_IT+0x540>
240080ea:	68fb      	ldr	r3, [r7, #12]
240080ec:	681b      	ldr	r3, [r3, #0]
240080ee:	4a6e      	ldr	r2, [pc, #440]	@ (240082a8 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
240080f0:	4293      	cmp	r3, r2
240080f2:	d031      	beq.n	24008158 <HAL_DMAEx_MultiBufferStart_IT+0x540>
240080f4:	68fb      	ldr	r3, [r7, #12]
240080f6:	681b      	ldr	r3, [r3, #0]
240080f8:	4a6c      	ldr	r2, [pc, #432]	@ (240082ac <HAL_DMAEx_MultiBufferStart_IT+0x694>)
240080fa:	4293      	cmp	r3, r2
240080fc:	d02c      	beq.n	24008158 <HAL_DMAEx_MultiBufferStart_IT+0x540>
240080fe:	68fb      	ldr	r3, [r7, #12]
24008100:	681b      	ldr	r3, [r3, #0]
24008102:	4a6b      	ldr	r2, [pc, #428]	@ (240082b0 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
24008104:	4293      	cmp	r3, r2
24008106:	d027      	beq.n	24008158 <HAL_DMAEx_MultiBufferStart_IT+0x540>
24008108:	68fb      	ldr	r3, [r7, #12]
2400810a:	681b      	ldr	r3, [r3, #0]
2400810c:	4a69      	ldr	r2, [pc, #420]	@ (240082b4 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
2400810e:	4293      	cmp	r3, r2
24008110:	d022      	beq.n	24008158 <HAL_DMAEx_MultiBufferStart_IT+0x540>
24008112:	68fb      	ldr	r3, [r7, #12]
24008114:	681b      	ldr	r3, [r3, #0]
24008116:	4a68      	ldr	r2, [pc, #416]	@ (240082b8 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
24008118:	4293      	cmp	r3, r2
2400811a:	d01d      	beq.n	24008158 <HAL_DMAEx_MultiBufferStart_IT+0x540>
2400811c:	68fb      	ldr	r3, [r7, #12]
2400811e:	681b      	ldr	r3, [r3, #0]
24008120:	4a66      	ldr	r2, [pc, #408]	@ (240082bc <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
24008122:	4293      	cmp	r3, r2
24008124:	d018      	beq.n	24008158 <HAL_DMAEx_MultiBufferStart_IT+0x540>
24008126:	68fb      	ldr	r3, [r7, #12]
24008128:	681b      	ldr	r3, [r3, #0]
2400812a:	4a65      	ldr	r2, [pc, #404]	@ (240082c0 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
2400812c:	4293      	cmp	r3, r2
2400812e:	d013      	beq.n	24008158 <HAL_DMAEx_MultiBufferStart_IT+0x540>
24008130:	68fb      	ldr	r3, [r7, #12]
24008132:	681b      	ldr	r3, [r3, #0]
24008134:	4a63      	ldr	r2, [pc, #396]	@ (240082c4 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
24008136:	4293      	cmp	r3, r2
24008138:	d00e      	beq.n	24008158 <HAL_DMAEx_MultiBufferStart_IT+0x540>
2400813a:	68fb      	ldr	r3, [r7, #12]
2400813c:	681b      	ldr	r3, [r3, #0]
2400813e:	4a62      	ldr	r2, [pc, #392]	@ (240082c8 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
24008140:	4293      	cmp	r3, r2
24008142:	d009      	beq.n	24008158 <HAL_DMAEx_MultiBufferStart_IT+0x540>
24008144:	68fb      	ldr	r3, [r7, #12]
24008146:	681b      	ldr	r3, [r3, #0]
24008148:	4a60      	ldr	r2, [pc, #384]	@ (240082cc <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
2400814a:	4293      	cmp	r3, r2
2400814c:	d004      	beq.n	24008158 <HAL_DMAEx_MultiBufferStart_IT+0x540>
2400814e:	68fb      	ldr	r3, [r7, #12]
24008150:	681b      	ldr	r3, [r3, #0]
24008152:	4a5f      	ldr	r2, [pc, #380]	@ (240082d0 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
24008154:	4293      	cmp	r3, r2
24008156:	d101      	bne.n	2400815c <HAL_DMAEx_MultiBufferStart_IT+0x544>
24008158:	2301      	movs	r3, #1
2400815a:	e000      	b.n	2400815e <HAL_DMAEx_MultiBufferStart_IT+0x546>
2400815c:	2300      	movs	r3, #0
2400815e:	2b00      	cmp	r3, #0
24008160:	d01a      	beq.n	24008198 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
24008162:	68fb      	ldr	r3, [r7, #12]
24008164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
24008166:	681b      	ldr	r3, [r3, #0]
24008168:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
2400816c:	2b00      	cmp	r3, #0
2400816e:	d007      	beq.n	24008180 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
24008170:	68fb      	ldr	r3, [r7, #12]
24008172:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
24008174:	681a      	ldr	r2, [r3, #0]
24008176:	68fb      	ldr	r3, [r7, #12]
24008178:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
2400817a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
2400817e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
24008180:	68fb      	ldr	r3, [r7, #12]
24008182:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
24008184:	2b00      	cmp	r3, #0
24008186:	d007      	beq.n	24008198 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
24008188:	68fb      	ldr	r3, [r7, #12]
2400818a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
2400818c:	681a      	ldr	r2, [r3, #0]
2400818e:	68fb      	ldr	r3, [r7, #12]
24008190:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
24008192:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
24008196:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
24008198:	68fb      	ldr	r3, [r7, #12]
2400819a:	681b      	ldr	r3, [r3, #0]
2400819c:	4a35      	ldr	r2, [pc, #212]	@ (24008274 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
2400819e:	4293      	cmp	r3, r2
240081a0:	d04a      	beq.n	24008238 <HAL_DMAEx_MultiBufferStart_IT+0x620>
240081a2:	68fb      	ldr	r3, [r7, #12]
240081a4:	681b      	ldr	r3, [r3, #0]
240081a6:	4a34      	ldr	r2, [pc, #208]	@ (24008278 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
240081a8:	4293      	cmp	r3, r2
240081aa:	d045      	beq.n	24008238 <HAL_DMAEx_MultiBufferStart_IT+0x620>
240081ac:	68fb      	ldr	r3, [r7, #12]
240081ae:	681b      	ldr	r3, [r3, #0]
240081b0:	4a32      	ldr	r2, [pc, #200]	@ (2400827c <HAL_DMAEx_MultiBufferStart_IT+0x664>)
240081b2:	4293      	cmp	r3, r2
240081b4:	d040      	beq.n	24008238 <HAL_DMAEx_MultiBufferStart_IT+0x620>
240081b6:	68fb      	ldr	r3, [r7, #12]
240081b8:	681b      	ldr	r3, [r3, #0]
240081ba:	4a31      	ldr	r2, [pc, #196]	@ (24008280 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
240081bc:	4293      	cmp	r3, r2
240081be:	d03b      	beq.n	24008238 <HAL_DMAEx_MultiBufferStart_IT+0x620>
240081c0:	68fb      	ldr	r3, [r7, #12]
240081c2:	681b      	ldr	r3, [r3, #0]
240081c4:	4a2f      	ldr	r2, [pc, #188]	@ (24008284 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
240081c6:	4293      	cmp	r3, r2
240081c8:	d036      	beq.n	24008238 <HAL_DMAEx_MultiBufferStart_IT+0x620>
240081ca:	68fb      	ldr	r3, [r7, #12]
240081cc:	681b      	ldr	r3, [r3, #0]
240081ce:	4a2e      	ldr	r2, [pc, #184]	@ (24008288 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
240081d0:	4293      	cmp	r3, r2
240081d2:	d031      	beq.n	24008238 <HAL_DMAEx_MultiBufferStart_IT+0x620>
240081d4:	68fb      	ldr	r3, [r7, #12]
240081d6:	681b      	ldr	r3, [r3, #0]
240081d8:	4a2c      	ldr	r2, [pc, #176]	@ (2400828c <HAL_DMAEx_MultiBufferStart_IT+0x674>)
240081da:	4293      	cmp	r3, r2
240081dc:	d02c      	beq.n	24008238 <HAL_DMAEx_MultiBufferStart_IT+0x620>
240081de:	68fb      	ldr	r3, [r7, #12]
240081e0:	681b      	ldr	r3, [r3, #0]
240081e2:	4a2b      	ldr	r2, [pc, #172]	@ (24008290 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
240081e4:	4293      	cmp	r3, r2
240081e6:	d027      	beq.n	24008238 <HAL_DMAEx_MultiBufferStart_IT+0x620>
240081e8:	68fb      	ldr	r3, [r7, #12]
240081ea:	681b      	ldr	r3, [r3, #0]
240081ec:	4a29      	ldr	r2, [pc, #164]	@ (24008294 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
240081ee:	4293      	cmp	r3, r2
240081f0:	d022      	beq.n	24008238 <HAL_DMAEx_MultiBufferStart_IT+0x620>
240081f2:	68fb      	ldr	r3, [r7, #12]
240081f4:	681b      	ldr	r3, [r3, #0]
240081f6:	4a28      	ldr	r2, [pc, #160]	@ (24008298 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
240081f8:	4293      	cmp	r3, r2
240081fa:	d01d      	beq.n	24008238 <HAL_DMAEx_MultiBufferStart_IT+0x620>
240081fc:	68fb      	ldr	r3, [r7, #12]
240081fe:	681b      	ldr	r3, [r3, #0]
24008200:	4a26      	ldr	r2, [pc, #152]	@ (2400829c <HAL_DMAEx_MultiBufferStart_IT+0x684>)
24008202:	4293      	cmp	r3, r2
24008204:	d018      	beq.n	24008238 <HAL_DMAEx_MultiBufferStart_IT+0x620>
24008206:	68fb      	ldr	r3, [r7, #12]
24008208:	681b      	ldr	r3, [r3, #0]
2400820a:	4a25      	ldr	r2, [pc, #148]	@ (240082a0 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
2400820c:	4293      	cmp	r3, r2
2400820e:	d013      	beq.n	24008238 <HAL_DMAEx_MultiBufferStart_IT+0x620>
24008210:	68fb      	ldr	r3, [r7, #12]
24008212:	681b      	ldr	r3, [r3, #0]
24008214:	4a23      	ldr	r2, [pc, #140]	@ (240082a4 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
24008216:	4293      	cmp	r3, r2
24008218:	d00e      	beq.n	24008238 <HAL_DMAEx_MultiBufferStart_IT+0x620>
2400821a:	68fb      	ldr	r3, [r7, #12]
2400821c:	681b      	ldr	r3, [r3, #0]
2400821e:	4a22      	ldr	r2, [pc, #136]	@ (240082a8 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
24008220:	4293      	cmp	r3, r2
24008222:	d009      	beq.n	24008238 <HAL_DMAEx_MultiBufferStart_IT+0x620>
24008224:	68fb      	ldr	r3, [r7, #12]
24008226:	681b      	ldr	r3, [r3, #0]
24008228:	4a20      	ldr	r2, [pc, #128]	@ (240082ac <HAL_DMAEx_MultiBufferStart_IT+0x694>)
2400822a:	4293      	cmp	r3, r2
2400822c:	d004      	beq.n	24008238 <HAL_DMAEx_MultiBufferStart_IT+0x620>
2400822e:	68fb      	ldr	r3, [r7, #12]
24008230:	681b      	ldr	r3, [r3, #0]
24008232:	4a1f      	ldr	r2, [pc, #124]	@ (240082b0 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
24008234:	4293      	cmp	r3, r2
24008236:	d108      	bne.n	2400824a <HAL_DMAEx_MultiBufferStart_IT+0x632>
24008238:	68fb      	ldr	r3, [r7, #12]
2400823a:	681b      	ldr	r3, [r3, #0]
2400823c:	681a      	ldr	r2, [r3, #0]
2400823e:	68fb      	ldr	r3, [r7, #12]
24008240:	681b      	ldr	r3, [r3, #0]
24008242:	f042 0201 	orr.w	r2, r2, #1
24008246:	601a      	str	r2, [r3, #0]
24008248:	e00e      	b.n	24008268 <HAL_DMAEx_MultiBufferStart_IT+0x650>
2400824a:	68fb      	ldr	r3, [r7, #12]
2400824c:	681b      	ldr	r3, [r3, #0]
2400824e:	681a      	ldr	r2, [r3, #0]
24008250:	68fb      	ldr	r3, [r7, #12]
24008252:	681b      	ldr	r3, [r3, #0]
24008254:	f042 0201 	orr.w	r2, r2, #1
24008258:	601a      	str	r2, [r3, #0]
2400825a:	e005      	b.n	24008268 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
2400825c:	68fb      	ldr	r3, [r7, #12]
2400825e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
24008262:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    status = HAL_ERROR;
24008264:	2301      	movs	r3, #1
24008266:	75fb      	strb	r3, [r7, #23]
  }
  return status;
24008268:	7dfb      	ldrb	r3, [r7, #23]
}
2400826a:	4618      	mov	r0, r3
2400826c:	3718      	adds	r7, #24
2400826e:	46bd      	mov	sp, r7
24008270:	bd80      	pop	{r7, pc}
24008272:	bf00      	nop
24008274:	40020010 	.word	0x40020010
24008278:	40020028 	.word	0x40020028
2400827c:	40020040 	.word	0x40020040
24008280:	40020058 	.word	0x40020058
24008284:	40020070 	.word	0x40020070
24008288:	40020088 	.word	0x40020088
2400828c:	400200a0 	.word	0x400200a0
24008290:	400200b8 	.word	0x400200b8
24008294:	40020410 	.word	0x40020410
24008298:	40020428 	.word	0x40020428
2400829c:	40020440 	.word	0x40020440
240082a0:	40020458 	.word	0x40020458
240082a4:	40020470 	.word	0x40020470
240082a8:	40020488 	.word	0x40020488
240082ac:	400204a0 	.word	0x400204a0
240082b0:	400204b8 	.word	0x400204b8
240082b4:	58025408 	.word	0x58025408
240082b8:	5802541c 	.word	0x5802541c
240082bc:	58025430 	.word	0x58025430
240082c0:	58025444 	.word	0x58025444
240082c4:	58025458 	.word	0x58025458
240082c8:	5802546c 	.word	0x5802546c
240082cc:	58025480 	.word	0x58025480
240082d0:	58025494 	.word	0x58025494

240082d4 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
240082d4:	b480      	push	{r7}
240082d6:	b085      	sub	sp, #20
240082d8:	af00      	add	r7, sp, #0
240082da:	60f8      	str	r0, [r7, #12]
240082dc:	60b9      	str	r1, [r7, #8]
240082de:	4613      	mov	r3, r2
240082e0:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
240082e2:	68fb      	ldr	r3, [r7, #12]
240082e4:	681b      	ldr	r3, [r3, #0]
240082e6:	4a39      	ldr	r2, [pc, #228]	@ (240083cc <HAL_DMAEx_ChangeMemory+0xf8>)
240082e8:	4293      	cmp	r3, r2
240082ea:	d04a      	beq.n	24008382 <HAL_DMAEx_ChangeMemory+0xae>
240082ec:	68fb      	ldr	r3, [r7, #12]
240082ee:	681b      	ldr	r3, [r3, #0]
240082f0:	4a37      	ldr	r2, [pc, #220]	@ (240083d0 <HAL_DMAEx_ChangeMemory+0xfc>)
240082f2:	4293      	cmp	r3, r2
240082f4:	d045      	beq.n	24008382 <HAL_DMAEx_ChangeMemory+0xae>
240082f6:	68fb      	ldr	r3, [r7, #12]
240082f8:	681b      	ldr	r3, [r3, #0]
240082fa:	4a36      	ldr	r2, [pc, #216]	@ (240083d4 <HAL_DMAEx_ChangeMemory+0x100>)
240082fc:	4293      	cmp	r3, r2
240082fe:	d040      	beq.n	24008382 <HAL_DMAEx_ChangeMemory+0xae>
24008300:	68fb      	ldr	r3, [r7, #12]
24008302:	681b      	ldr	r3, [r3, #0]
24008304:	4a34      	ldr	r2, [pc, #208]	@ (240083d8 <HAL_DMAEx_ChangeMemory+0x104>)
24008306:	4293      	cmp	r3, r2
24008308:	d03b      	beq.n	24008382 <HAL_DMAEx_ChangeMemory+0xae>
2400830a:	68fb      	ldr	r3, [r7, #12]
2400830c:	681b      	ldr	r3, [r3, #0]
2400830e:	4a33      	ldr	r2, [pc, #204]	@ (240083dc <HAL_DMAEx_ChangeMemory+0x108>)
24008310:	4293      	cmp	r3, r2
24008312:	d036      	beq.n	24008382 <HAL_DMAEx_ChangeMemory+0xae>
24008314:	68fb      	ldr	r3, [r7, #12]
24008316:	681b      	ldr	r3, [r3, #0]
24008318:	4a31      	ldr	r2, [pc, #196]	@ (240083e0 <HAL_DMAEx_ChangeMemory+0x10c>)
2400831a:	4293      	cmp	r3, r2
2400831c:	d031      	beq.n	24008382 <HAL_DMAEx_ChangeMemory+0xae>
2400831e:	68fb      	ldr	r3, [r7, #12]
24008320:	681b      	ldr	r3, [r3, #0]
24008322:	4a30      	ldr	r2, [pc, #192]	@ (240083e4 <HAL_DMAEx_ChangeMemory+0x110>)
24008324:	4293      	cmp	r3, r2
24008326:	d02c      	beq.n	24008382 <HAL_DMAEx_ChangeMemory+0xae>
24008328:	68fb      	ldr	r3, [r7, #12]
2400832a:	681b      	ldr	r3, [r3, #0]
2400832c:	4a2e      	ldr	r2, [pc, #184]	@ (240083e8 <HAL_DMAEx_ChangeMemory+0x114>)
2400832e:	4293      	cmp	r3, r2
24008330:	d027      	beq.n	24008382 <HAL_DMAEx_ChangeMemory+0xae>
24008332:	68fb      	ldr	r3, [r7, #12]
24008334:	681b      	ldr	r3, [r3, #0]
24008336:	4a2d      	ldr	r2, [pc, #180]	@ (240083ec <HAL_DMAEx_ChangeMemory+0x118>)
24008338:	4293      	cmp	r3, r2
2400833a:	d022      	beq.n	24008382 <HAL_DMAEx_ChangeMemory+0xae>
2400833c:	68fb      	ldr	r3, [r7, #12]
2400833e:	681b      	ldr	r3, [r3, #0]
24008340:	4a2b      	ldr	r2, [pc, #172]	@ (240083f0 <HAL_DMAEx_ChangeMemory+0x11c>)
24008342:	4293      	cmp	r3, r2
24008344:	d01d      	beq.n	24008382 <HAL_DMAEx_ChangeMemory+0xae>
24008346:	68fb      	ldr	r3, [r7, #12]
24008348:	681b      	ldr	r3, [r3, #0]
2400834a:	4a2a      	ldr	r2, [pc, #168]	@ (240083f4 <HAL_DMAEx_ChangeMemory+0x120>)
2400834c:	4293      	cmp	r3, r2
2400834e:	d018      	beq.n	24008382 <HAL_DMAEx_ChangeMemory+0xae>
24008350:	68fb      	ldr	r3, [r7, #12]
24008352:	681b      	ldr	r3, [r3, #0]
24008354:	4a28      	ldr	r2, [pc, #160]	@ (240083f8 <HAL_DMAEx_ChangeMemory+0x124>)
24008356:	4293      	cmp	r3, r2
24008358:	d013      	beq.n	24008382 <HAL_DMAEx_ChangeMemory+0xae>
2400835a:	68fb      	ldr	r3, [r7, #12]
2400835c:	681b      	ldr	r3, [r3, #0]
2400835e:	4a27      	ldr	r2, [pc, #156]	@ (240083fc <HAL_DMAEx_ChangeMemory+0x128>)
24008360:	4293      	cmp	r3, r2
24008362:	d00e      	beq.n	24008382 <HAL_DMAEx_ChangeMemory+0xae>
24008364:	68fb      	ldr	r3, [r7, #12]
24008366:	681b      	ldr	r3, [r3, #0]
24008368:	4a25      	ldr	r2, [pc, #148]	@ (24008400 <HAL_DMAEx_ChangeMemory+0x12c>)
2400836a:	4293      	cmp	r3, r2
2400836c:	d009      	beq.n	24008382 <HAL_DMAEx_ChangeMemory+0xae>
2400836e:	68fb      	ldr	r3, [r7, #12]
24008370:	681b      	ldr	r3, [r3, #0]
24008372:	4a24      	ldr	r2, [pc, #144]	@ (24008404 <HAL_DMAEx_ChangeMemory+0x130>)
24008374:	4293      	cmp	r3, r2
24008376:	d004      	beq.n	24008382 <HAL_DMAEx_ChangeMemory+0xae>
24008378:	68fb      	ldr	r3, [r7, #12]
2400837a:	681b      	ldr	r3, [r3, #0]
2400837c:	4a22      	ldr	r2, [pc, #136]	@ (24008408 <HAL_DMAEx_ChangeMemory+0x134>)
2400837e:	4293      	cmp	r3, r2
24008380:	d101      	bne.n	24008386 <HAL_DMAEx_ChangeMemory+0xb2>
24008382:	2301      	movs	r3, #1
24008384:	e000      	b.n	24008388 <HAL_DMAEx_ChangeMemory+0xb4>
24008386:	2300      	movs	r3, #0
24008388:	2b00      	cmp	r3, #0
2400838a:	d00c      	beq.n	240083a6 <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
2400838c:	79fb      	ldrb	r3, [r7, #7]
2400838e:	2b00      	cmp	r3, #0
24008390:	d104      	bne.n	2400839c <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
24008392:	68fb      	ldr	r3, [r7, #12]
24008394:	681b      	ldr	r3, [r3, #0]
24008396:	68ba      	ldr	r2, [r7, #8]
24008398:	60da      	str	r2, [r3, #12]
2400839a:	e010      	b.n	240083be <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
2400839c:	68fb      	ldr	r3, [r7, #12]
2400839e:	681b      	ldr	r3, [r3, #0]
240083a0:	68ba      	ldr	r2, [r7, #8]
240083a2:	611a      	str	r2, [r3, #16]
240083a4:	e00b      	b.n	240083be <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
240083a6:	79fb      	ldrb	r3, [r7, #7]
240083a8:	2b00      	cmp	r3, #0
240083aa:	d104      	bne.n	240083b6 <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
240083ac:	68fb      	ldr	r3, [r7, #12]
240083ae:	681b      	ldr	r3, [r3, #0]
240083b0:	68ba      	ldr	r2, [r7, #8]
240083b2:	60da      	str	r2, [r3, #12]
240083b4:	e003      	b.n	240083be <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
240083b6:	68fb      	ldr	r3, [r7, #12]
240083b8:	681b      	ldr	r3, [r3, #0]
240083ba:	68ba      	ldr	r2, [r7, #8]
240083bc:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
240083be:	2300      	movs	r3, #0
}
240083c0:	4618      	mov	r0, r3
240083c2:	3714      	adds	r7, #20
240083c4:	46bd      	mov	sp, r7
240083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
240083ca:	4770      	bx	lr
240083cc:	40020010 	.word	0x40020010
240083d0:	40020028 	.word	0x40020028
240083d4:	40020040 	.word	0x40020040
240083d8:	40020058 	.word	0x40020058
240083dc:	40020070 	.word	0x40020070
240083e0:	40020088 	.word	0x40020088
240083e4:	400200a0 	.word	0x400200a0
240083e8:	400200b8 	.word	0x400200b8
240083ec:	40020410 	.word	0x40020410
240083f0:	40020428 	.word	0x40020428
240083f4:	40020440 	.word	0x40020440
240083f8:	40020458 	.word	0x40020458
240083fc:	40020470 	.word	0x40020470
24008400:	40020488 	.word	0x40020488
24008404:	400204a0 	.word	0x400204a0
24008408:	400204b8 	.word	0x400204b8

2400840c <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
2400840c:	b480      	push	{r7}
2400840e:	b085      	sub	sp, #20
24008410:	af00      	add	r7, sp, #0
24008412:	6078      	str	r0, [r7, #4]
24008414:	6039      	str	r1, [r7, #0]
  uint32_t syncSignalID = 0;
24008416:	2300      	movs	r3, #0
24008418:	60fb      	str	r3, [r7, #12]
  uint32_t syncPolarity = 0;
2400841a:	2300      	movs	r3, #0
2400841c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
2400841e:	683b      	ldr	r3, [r7, #0]
24008420:	7a1b      	ldrb	r3, [r3, #8]
24008422:	2b01      	cmp	r3, #1
24008424:	d154      	bne.n	240084d0 <HAL_DMAEx_ConfigMuxSync+0xc4>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24008426:	687b      	ldr	r3, [r7, #4]
24008428:	681b      	ldr	r3, [r3, #0]
2400842a:	4a4b      	ldr	r2, [pc, #300]	@ (24008558 <HAL_DMAEx_ConfigMuxSync+0x14c>)
2400842c:	4293      	cmp	r3, r2
2400842e:	d049      	beq.n	240084c4 <HAL_DMAEx_ConfigMuxSync+0xb8>
24008430:	687b      	ldr	r3, [r7, #4]
24008432:	681b      	ldr	r3, [r3, #0]
24008434:	4a49      	ldr	r2, [pc, #292]	@ (2400855c <HAL_DMAEx_ConfigMuxSync+0x150>)
24008436:	4293      	cmp	r3, r2
24008438:	d044      	beq.n	240084c4 <HAL_DMAEx_ConfigMuxSync+0xb8>
2400843a:	687b      	ldr	r3, [r7, #4]
2400843c:	681b      	ldr	r3, [r3, #0]
2400843e:	4a48      	ldr	r2, [pc, #288]	@ (24008560 <HAL_DMAEx_ConfigMuxSync+0x154>)
24008440:	4293      	cmp	r3, r2
24008442:	d03f      	beq.n	240084c4 <HAL_DMAEx_ConfigMuxSync+0xb8>
24008444:	687b      	ldr	r3, [r7, #4]
24008446:	681b      	ldr	r3, [r3, #0]
24008448:	4a46      	ldr	r2, [pc, #280]	@ (24008564 <HAL_DMAEx_ConfigMuxSync+0x158>)
2400844a:	4293      	cmp	r3, r2
2400844c:	d03a      	beq.n	240084c4 <HAL_DMAEx_ConfigMuxSync+0xb8>
2400844e:	687b      	ldr	r3, [r7, #4]
24008450:	681b      	ldr	r3, [r3, #0]
24008452:	4a45      	ldr	r2, [pc, #276]	@ (24008568 <HAL_DMAEx_ConfigMuxSync+0x15c>)
24008454:	4293      	cmp	r3, r2
24008456:	d035      	beq.n	240084c4 <HAL_DMAEx_ConfigMuxSync+0xb8>
24008458:	687b      	ldr	r3, [r7, #4]
2400845a:	681b      	ldr	r3, [r3, #0]
2400845c:	4a43      	ldr	r2, [pc, #268]	@ (2400856c <HAL_DMAEx_ConfigMuxSync+0x160>)
2400845e:	4293      	cmp	r3, r2
24008460:	d030      	beq.n	240084c4 <HAL_DMAEx_ConfigMuxSync+0xb8>
24008462:	687b      	ldr	r3, [r7, #4]
24008464:	681b      	ldr	r3, [r3, #0]
24008466:	4a42      	ldr	r2, [pc, #264]	@ (24008570 <HAL_DMAEx_ConfigMuxSync+0x164>)
24008468:	4293      	cmp	r3, r2
2400846a:	d02b      	beq.n	240084c4 <HAL_DMAEx_ConfigMuxSync+0xb8>
2400846c:	687b      	ldr	r3, [r7, #4]
2400846e:	681b      	ldr	r3, [r3, #0]
24008470:	4a40      	ldr	r2, [pc, #256]	@ (24008574 <HAL_DMAEx_ConfigMuxSync+0x168>)
24008472:	4293      	cmp	r3, r2
24008474:	d026      	beq.n	240084c4 <HAL_DMAEx_ConfigMuxSync+0xb8>
24008476:	687b      	ldr	r3, [r7, #4]
24008478:	681b      	ldr	r3, [r3, #0]
2400847a:	4a3f      	ldr	r2, [pc, #252]	@ (24008578 <HAL_DMAEx_ConfigMuxSync+0x16c>)
2400847c:	4293      	cmp	r3, r2
2400847e:	d021      	beq.n	240084c4 <HAL_DMAEx_ConfigMuxSync+0xb8>
24008480:	687b      	ldr	r3, [r7, #4]
24008482:	681b      	ldr	r3, [r3, #0]
24008484:	4a3d      	ldr	r2, [pc, #244]	@ (2400857c <HAL_DMAEx_ConfigMuxSync+0x170>)
24008486:	4293      	cmp	r3, r2
24008488:	d01c      	beq.n	240084c4 <HAL_DMAEx_ConfigMuxSync+0xb8>
2400848a:	687b      	ldr	r3, [r7, #4]
2400848c:	681b      	ldr	r3, [r3, #0]
2400848e:	4a3c      	ldr	r2, [pc, #240]	@ (24008580 <HAL_DMAEx_ConfigMuxSync+0x174>)
24008490:	4293      	cmp	r3, r2
24008492:	d017      	beq.n	240084c4 <HAL_DMAEx_ConfigMuxSync+0xb8>
24008494:	687b      	ldr	r3, [r7, #4]
24008496:	681b      	ldr	r3, [r3, #0]
24008498:	4a3a      	ldr	r2, [pc, #232]	@ (24008584 <HAL_DMAEx_ConfigMuxSync+0x178>)
2400849a:	4293      	cmp	r3, r2
2400849c:	d012      	beq.n	240084c4 <HAL_DMAEx_ConfigMuxSync+0xb8>
2400849e:	687b      	ldr	r3, [r7, #4]
240084a0:	681b      	ldr	r3, [r3, #0]
240084a2:	4a39      	ldr	r2, [pc, #228]	@ (24008588 <HAL_DMAEx_ConfigMuxSync+0x17c>)
240084a4:	4293      	cmp	r3, r2
240084a6:	d00d      	beq.n	240084c4 <HAL_DMAEx_ConfigMuxSync+0xb8>
240084a8:	687b      	ldr	r3, [r7, #4]
240084aa:	681b      	ldr	r3, [r3, #0]
240084ac:	4a37      	ldr	r2, [pc, #220]	@ (2400858c <HAL_DMAEx_ConfigMuxSync+0x180>)
240084ae:	4293      	cmp	r3, r2
240084b0:	d008      	beq.n	240084c4 <HAL_DMAEx_ConfigMuxSync+0xb8>
240084b2:	687b      	ldr	r3, [r7, #4]
240084b4:	681b      	ldr	r3, [r3, #0]
240084b6:	4a36      	ldr	r2, [pc, #216]	@ (24008590 <HAL_DMAEx_ConfigMuxSync+0x184>)
240084b8:	4293      	cmp	r3, r2
240084ba:	d003      	beq.n	240084c4 <HAL_DMAEx_ConfigMuxSync+0xb8>
240084bc:	687b      	ldr	r3, [r7, #4]
240084be:	681b      	ldr	r3, [r3, #0]
240084c0:	4a34      	ldr	r2, [pc, #208]	@ (24008594 <HAL_DMAEx_ConfigMuxSync+0x188>)
240084c2:	4293      	cmp	r3, r2
    }
    else
    {
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    }
    syncSignalID = pSyncConfig->SyncSignalID;
240084c4:	683b      	ldr	r3, [r7, #0]
240084c6:	681b      	ldr	r3, [r3, #0]
240084c8:	60fb      	str	r3, [r7, #12]
    syncPolarity = pSyncConfig->SyncPolarity;
240084ca:	683b      	ldr	r3, [r7, #0]
240084cc:	685b      	ldr	r3, [r3, #4]
240084ce:	60bb      	str	r3, [r7, #8]
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
240084d0:	687b      	ldr	r3, [r7, #4]
240084d2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
240084d6:	b2db      	uxtb	r3, r3
240084d8:	2b01      	cmp	r3, #1
240084da:	d131      	bne.n	24008540 <HAL_DMAEx_ConfigMuxSync+0x134>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
240084dc:	687b      	ldr	r3, [r7, #4]
240084de:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
240084e2:	2b01      	cmp	r3, #1
240084e4:	d101      	bne.n	240084ea <HAL_DMAEx_ConfigMuxSync+0xde>
240084e6:	2302      	movs	r3, #2
240084e8:	e02f      	b.n	2400854a <HAL_DMAEx_ConfigMuxSync+0x13e>
240084ea:	687b      	ldr	r3, [r7, #4]
240084ec:	2201      	movs	r2, #1
240084ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
240084f2:	687b      	ldr	r3, [r7, #4]
240084f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
240084f6:	681a      	ldr	r2, [r3, #0]
240084f8:	687b      	ldr	r3, [r7, #4]
240084fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
240084fc:	f422 3281 	bic.w	r2, r2, #66048	@ 0x10200
24008500:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
24008502:	687b      	ldr	r3, [r7, #4]
24008504:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
24008506:	681b      	ldr	r3, [r3, #0]
24008508:	b2d9      	uxtb	r1, r3
2400850a:	68fb      	ldr	r3, [r7, #12]
2400850c:	061a      	lsls	r2, r3, #24
2400850e:	683b      	ldr	r3, [r7, #0]
24008510:	68db      	ldr	r3, [r3, #12]
24008512:	3b01      	subs	r3, #1
24008514:	04db      	lsls	r3, r3, #19
24008516:	431a      	orrs	r2, r3
24008518:	68bb      	ldr	r3, [r7, #8]
2400851a:	431a      	orrs	r2, r3
2400851c:	683b      	ldr	r3, [r7, #0]
2400851e:	7a1b      	ldrb	r3, [r3, #8]
24008520:	041b      	lsls	r3, r3, #16
24008522:	431a      	orrs	r2, r3
24008524:	683b      	ldr	r3, [r7, #0]
24008526:	7a5b      	ldrb	r3, [r3, #9]
24008528:	025b      	lsls	r3, r3, #9
2400852a:	431a      	orrs	r2, r3
2400852c:	687b      	ldr	r3, [r7, #4]
2400852e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
24008530:	430a      	orrs	r2, r1
24008532:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
24008534:	687b      	ldr	r3, [r7, #4]
24008536:	2200      	movs	r2, #0
24008538:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
2400853c:	2300      	movs	r3, #0
2400853e:	e004      	b.n	2400854a <HAL_DMAEx_ConfigMuxSync+0x13e>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
24008540:	687b      	ldr	r3, [r7, #4]
24008542:	f44f 6200 	mov.w	r2, #2048	@ 0x800
24008546:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    return HAL_ERROR;
24008548:	2301      	movs	r3, #1
  }
}
2400854a:	4618      	mov	r0, r3
2400854c:	3714      	adds	r7, #20
2400854e:	46bd      	mov	sp, r7
24008550:	f85d 7b04 	ldr.w	r7, [sp], #4
24008554:	4770      	bx	lr
24008556:	bf00      	nop
24008558:	40020010 	.word	0x40020010
2400855c:	40020028 	.word	0x40020028
24008560:	40020040 	.word	0x40020040
24008564:	40020058 	.word	0x40020058
24008568:	40020070 	.word	0x40020070
2400856c:	40020088 	.word	0x40020088
24008570:	400200a0 	.word	0x400200a0
24008574:	400200b8 	.word	0x400200b8
24008578:	40020410 	.word	0x40020410
2400857c:	40020428 	.word	0x40020428
24008580:	40020440 	.word	0x40020440
24008584:	40020458 	.word	0x40020458
24008588:	40020470 	.word	0x40020470
2400858c:	40020488 	.word	0x40020488
24008590:	400204a0 	.word	0x400204a0
24008594:	400204b8 	.word	0x400204b8

24008598 <HAL_DMAEx_ConfigMuxRequestGenerator>:
  *         contains the request generator parameters.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxRequestGenerator (DMA_HandleTypeDef *hdma, HAL_DMA_MuxRequestGeneratorConfigTypeDef *pRequestGeneratorConfig)
{
24008598:	b480      	push	{r7}
2400859a:	b085      	sub	sp, #20
2400859c:	af00      	add	r7, sp, #0
2400859e:	6078      	str	r0, [r7, #4]
240085a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  HAL_DMA_StateTypeDef temp_state = hdma->State;
240085a2:	687b      	ldr	r3, [r7, #4]
240085a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
240085a8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
240085aa:	687b      	ldr	r3, [r7, #4]
240085ac:	681b      	ldr	r3, [r3, #0]
240085ae:	4a46      	ldr	r2, [pc, #280]	@ (240086c8 <HAL_DMAEx_ConfigMuxRequestGenerator+0x130>)
240085b0:	4293      	cmp	r3, r2
240085b2:	d049      	beq.n	24008648 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
240085b4:	687b      	ldr	r3, [r7, #4]
240085b6:	681b      	ldr	r3, [r3, #0]
240085b8:	4a44      	ldr	r2, [pc, #272]	@ (240086cc <HAL_DMAEx_ConfigMuxRequestGenerator+0x134>)
240085ba:	4293      	cmp	r3, r2
240085bc:	d044      	beq.n	24008648 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
240085be:	687b      	ldr	r3, [r7, #4]
240085c0:	681b      	ldr	r3, [r3, #0]
240085c2:	4a43      	ldr	r2, [pc, #268]	@ (240086d0 <HAL_DMAEx_ConfigMuxRequestGenerator+0x138>)
240085c4:	4293      	cmp	r3, r2
240085c6:	d03f      	beq.n	24008648 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
240085c8:	687b      	ldr	r3, [r7, #4]
240085ca:	681b      	ldr	r3, [r3, #0]
240085cc:	4a41      	ldr	r2, [pc, #260]	@ (240086d4 <HAL_DMAEx_ConfigMuxRequestGenerator+0x13c>)
240085ce:	4293      	cmp	r3, r2
240085d0:	d03a      	beq.n	24008648 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
240085d2:	687b      	ldr	r3, [r7, #4]
240085d4:	681b      	ldr	r3, [r3, #0]
240085d6:	4a40      	ldr	r2, [pc, #256]	@ (240086d8 <HAL_DMAEx_ConfigMuxRequestGenerator+0x140>)
240085d8:	4293      	cmp	r3, r2
240085da:	d035      	beq.n	24008648 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
240085dc:	687b      	ldr	r3, [r7, #4]
240085de:	681b      	ldr	r3, [r3, #0]
240085e0:	4a3e      	ldr	r2, [pc, #248]	@ (240086dc <HAL_DMAEx_ConfigMuxRequestGenerator+0x144>)
240085e2:	4293      	cmp	r3, r2
240085e4:	d030      	beq.n	24008648 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
240085e6:	687b      	ldr	r3, [r7, #4]
240085e8:	681b      	ldr	r3, [r3, #0]
240085ea:	4a3d      	ldr	r2, [pc, #244]	@ (240086e0 <HAL_DMAEx_ConfigMuxRequestGenerator+0x148>)
240085ec:	4293      	cmp	r3, r2
240085ee:	d02b      	beq.n	24008648 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
240085f0:	687b      	ldr	r3, [r7, #4]
240085f2:	681b      	ldr	r3, [r3, #0]
240085f4:	4a3b      	ldr	r2, [pc, #236]	@ (240086e4 <HAL_DMAEx_ConfigMuxRequestGenerator+0x14c>)
240085f6:	4293      	cmp	r3, r2
240085f8:	d026      	beq.n	24008648 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
240085fa:	687b      	ldr	r3, [r7, #4]
240085fc:	681b      	ldr	r3, [r3, #0]
240085fe:	4a3a      	ldr	r2, [pc, #232]	@ (240086e8 <HAL_DMAEx_ConfigMuxRequestGenerator+0x150>)
24008600:	4293      	cmp	r3, r2
24008602:	d021      	beq.n	24008648 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
24008604:	687b      	ldr	r3, [r7, #4]
24008606:	681b      	ldr	r3, [r3, #0]
24008608:	4a38      	ldr	r2, [pc, #224]	@ (240086ec <HAL_DMAEx_ConfigMuxRequestGenerator+0x154>)
2400860a:	4293      	cmp	r3, r2
2400860c:	d01c      	beq.n	24008648 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
2400860e:	687b      	ldr	r3, [r7, #4]
24008610:	681b      	ldr	r3, [r3, #0]
24008612:	4a37      	ldr	r2, [pc, #220]	@ (240086f0 <HAL_DMAEx_ConfigMuxRequestGenerator+0x158>)
24008614:	4293      	cmp	r3, r2
24008616:	d017      	beq.n	24008648 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
24008618:	687b      	ldr	r3, [r7, #4]
2400861a:	681b      	ldr	r3, [r3, #0]
2400861c:	4a35      	ldr	r2, [pc, #212]	@ (240086f4 <HAL_DMAEx_ConfigMuxRequestGenerator+0x15c>)
2400861e:	4293      	cmp	r3, r2
24008620:	d012      	beq.n	24008648 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
24008622:	687b      	ldr	r3, [r7, #4]
24008624:	681b      	ldr	r3, [r3, #0]
24008626:	4a34      	ldr	r2, [pc, #208]	@ (240086f8 <HAL_DMAEx_ConfigMuxRequestGenerator+0x160>)
24008628:	4293      	cmp	r3, r2
2400862a:	d00d      	beq.n	24008648 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
2400862c:	687b      	ldr	r3, [r7, #4]
2400862e:	681b      	ldr	r3, [r3, #0]
24008630:	4a32      	ldr	r2, [pc, #200]	@ (240086fc <HAL_DMAEx_ConfigMuxRequestGenerator+0x164>)
24008632:	4293      	cmp	r3, r2
24008634:	d008      	beq.n	24008648 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
24008636:	687b      	ldr	r3, [r7, #4]
24008638:	681b      	ldr	r3, [r3, #0]
2400863a:	4a31      	ldr	r2, [pc, #196]	@ (24008700 <HAL_DMAEx_ConfigMuxRequestGenerator+0x168>)
2400863c:	4293      	cmp	r3, r2
2400863e:	d003      	beq.n	24008648 <HAL_DMAEx_ConfigMuxRequestGenerator+0xb0>
24008640:	687b      	ldr	r3, [r7, #4]
24008642:	681b      	ldr	r3, [r3, #0]
24008644:	4a2f      	ldr	r2, [pc, #188]	@ (24008704 <HAL_DMAEx_ConfigMuxRequestGenerator+0x16c>)
24008646:	4293      	cmp	r3, r2
  assert_param(IS_DMAMUX_REQUEST_GEN_REQUEST_NUMBER(pRequestGeneratorConfig->RequestNumber));

  /* check if the DMA state is ready
     and DMA is using a DMAMUX request generator block
  */
  if(hdma->DMAmuxRequestGen == 0U)
24008648:	687b      	ldr	r3, [r7, #4]
2400864a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
2400864c:	2b00      	cmp	r3, #0
2400864e:	d105      	bne.n	2400865c <HAL_DMAEx_ConfigMuxRequestGenerator+0xc4>
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
24008650:	687b      	ldr	r3, [r7, #4]
24008652:	2240      	movs	r2, #64	@ 0x40
24008654:	655a      	str	r2, [r3, #84]	@ 0x54

    /* error status */
    status = HAL_ERROR;
24008656:	2301      	movs	r3, #1
24008658:	73fb      	strb	r3, [r7, #15]
2400865a:	e02e      	b.n	240086ba <HAL_DMAEx_ConfigMuxRequestGenerator+0x122>
  }
  else if(((hdma->DMAmuxRequestGen->RGCR & DMAMUX_RGxCR_GE) == 0U) && (temp_state == HAL_DMA_STATE_READY))
2400865c:	687b      	ldr	r3, [r7, #4]
2400865e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
24008660:	681b      	ldr	r3, [r3, #0]
24008662:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
24008666:	2b00      	cmp	r3, #0
24008668:	d121      	bne.n	240086ae <HAL_DMAEx_ConfigMuxRequestGenerator+0x116>
2400866a:	7bbb      	ldrb	r3, [r7, #14]
2400866c:	2b01      	cmp	r3, #1
2400866e:	d11e      	bne.n	240086ae <HAL_DMAEx_ConfigMuxRequestGenerator+0x116>
  {
    /* RequestGenerator must be disable prior to the configuration i.e GE bit is 0 */

    /* Process Locked */
    __HAL_LOCK(hdma);
24008670:	687b      	ldr	r3, [r7, #4]
24008672:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
24008676:	2b01      	cmp	r3, #1
24008678:	d101      	bne.n	2400867e <HAL_DMAEx_ConfigMuxRequestGenerator+0xe6>
2400867a:	2302      	movs	r3, #2
2400867c:	e01e      	b.n	240086bc <HAL_DMAEx_ConfigMuxRequestGenerator+0x124>
2400867e:	687b      	ldr	r3, [r7, #4]
24008680:	2201      	movs	r2, #1
24008682:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Set the request generator new parameters */
    hdma->DMAmuxRequestGen->RGCR = pRequestGeneratorConfig->SignalID | \
24008686:	683b      	ldr	r3, [r7, #0]
24008688:	681a      	ldr	r2, [r3, #0]
                                  ((pRequestGeneratorConfig->RequestNumber - 1U) << DMAMUX_RGxCR_GNBREQ_Pos)| \
2400868a:	683b      	ldr	r3, [r7, #0]
2400868c:	689b      	ldr	r3, [r3, #8]
2400868e:	3b01      	subs	r3, #1
24008690:	04db      	lsls	r3, r3, #19
    hdma->DMAmuxRequestGen->RGCR = pRequestGeneratorConfig->SignalID | \
24008692:	ea42 0103 	orr.w	r1, r2, r3
                                  pRequestGeneratorConfig->Polarity;
24008696:	683b      	ldr	r3, [r7, #0]
24008698:	685a      	ldr	r2, [r3, #4]
    hdma->DMAmuxRequestGen->RGCR = pRequestGeneratorConfig->SignalID | \
2400869a:	687b      	ldr	r3, [r7, #4]
2400869c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
                                  ((pRequestGeneratorConfig->RequestNumber - 1U) << DMAMUX_RGxCR_GNBREQ_Pos)| \
2400869e:	430a      	orrs	r2, r1
    hdma->DMAmuxRequestGen->RGCR = pRequestGeneratorConfig->SignalID | \
240086a0:	601a      	str	r2, [r3, #0]
    /* Process Locked */
    __HAL_UNLOCK(hdma);
240086a2:	687b      	ldr	r3, [r7, #4]
240086a4:	2200      	movs	r2, #0
240086a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
240086aa:	2300      	movs	r3, #0
240086ac:	e006      	b.n	240086bc <HAL_DMAEx_ConfigMuxRequestGenerator+0x124>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
240086ae:	687b      	ldr	r3, [r7, #4]
240086b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
240086b4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* error status */
    status = HAL_ERROR;
240086b6:	2301      	movs	r3, #1
240086b8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
240086ba:	7bfb      	ldrb	r3, [r7, #15]
}
240086bc:	4618      	mov	r0, r3
240086be:	3714      	adds	r7, #20
240086c0:	46bd      	mov	sp, r7
240086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
240086c6:	4770      	bx	lr
240086c8:	40020010 	.word	0x40020010
240086cc:	40020028 	.word	0x40020028
240086d0:	40020040 	.word	0x40020040
240086d4:	40020058 	.word	0x40020058
240086d8:	40020070 	.word	0x40020070
240086dc:	40020088 	.word	0x40020088
240086e0:	400200a0 	.word	0x400200a0
240086e4:	400200b8 	.word	0x400200b8
240086e8:	40020410 	.word	0x40020410
240086ec:	40020428 	.word	0x40020428
240086f0:	40020440 	.word	0x40020440
240086f4:	40020458 	.word	0x40020458
240086f8:	40020470 	.word	0x40020470
240086fc:	40020488 	.word	0x40020488
24008700:	400204a0 	.word	0x400204a0
24008704:	400204b8 	.word	0x400204b8

24008708 <HAL_DMAEx_EnableMuxRequestGenerator>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_EnableMuxRequestGenerator (DMA_HandleTypeDef *hdma)
{
24008708:	b480      	push	{r7}
2400870a:	b083      	sub	sp, #12
2400870c:	af00      	add	r7, sp, #0
2400870e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));

  /* check if the DMA state is ready
     and DMA is using a DMAMUX request generator block */
  if((hdma->State != HAL_DMA_STATE_RESET) && (hdma->DMAmuxRequestGen != 0U))
24008710:	687b      	ldr	r3, [r7, #4]
24008712:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
24008716:	b2db      	uxtb	r3, r3
24008718:	2b00      	cmp	r3, #0
2400871a:	d00d      	beq.n	24008738 <HAL_DMAEx_EnableMuxRequestGenerator+0x30>
2400871c:	687b      	ldr	r3, [r7, #4]
2400871e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
24008720:	2b00      	cmp	r3, #0
24008722:	d009      	beq.n	24008738 <HAL_DMAEx_EnableMuxRequestGenerator+0x30>
  {
    /* Enable the request generator*/
    hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_GE;
24008724:	687b      	ldr	r3, [r7, #4]
24008726:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
24008728:	681a      	ldr	r2, [r3, #0]
2400872a:	687b      	ldr	r3, [r7, #4]
2400872c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
2400872e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
24008732:	601a      	str	r2, [r3, #0]

   return HAL_OK;
24008734:	2300      	movs	r3, #0
24008736:	e000      	b.n	2400873a <HAL_DMAEx_EnableMuxRequestGenerator+0x32>
 }
 else
 {
   return HAL_ERROR;
24008738:	2301      	movs	r3, #1
 }
}
2400873a:	4618      	mov	r0, r3
2400873c:	370c      	adds	r7, #12
2400873e:	46bd      	mov	sp, r7
24008740:	f85d 7b04 	ldr.w	r7, [sp], #4
24008744:	4770      	bx	lr

24008746 <HAL_DMAEx_DisableMuxRequestGenerator>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_DisableMuxRequestGenerator (DMA_HandleTypeDef *hdma)
{
24008746:	b480      	push	{r7}
24008748:	b083      	sub	sp, #12
2400874a:	af00      	add	r7, sp, #0
2400874c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));

  /* check if the DMA state is ready
     and DMA is using a DMAMUX request generator block */
  if((hdma->State != HAL_DMA_STATE_RESET) && (hdma->DMAmuxRequestGen != 0U))
2400874e:	687b      	ldr	r3, [r7, #4]
24008750:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
24008754:	b2db      	uxtb	r3, r3
24008756:	2b00      	cmp	r3, #0
24008758:	d00d      	beq.n	24008776 <HAL_DMAEx_DisableMuxRequestGenerator+0x30>
2400875a:	687b      	ldr	r3, [r7, #4]
2400875c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
2400875e:	2b00      	cmp	r3, #0
24008760:	d009      	beq.n	24008776 <HAL_DMAEx_DisableMuxRequestGenerator+0x30>
  {
    /* Disable the request generator*/
    hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_GE;
24008762:	687b      	ldr	r3, [r7, #4]
24008764:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
24008766:	681a      	ldr	r2, [r3, #0]
24008768:	687b      	ldr	r3, [r7, #4]
2400876a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
2400876c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
24008770:	601a      	str	r2, [r3, #0]

   return HAL_OK;
24008772:	2300      	movs	r3, #0
24008774:	e000      	b.n	24008778 <HAL_DMAEx_DisableMuxRequestGenerator+0x32>
 }
 else
 {
   return HAL_ERROR;
24008776:	2301      	movs	r3, #1
 }
}
24008778:	4618      	mov	r0, r3
2400877a:	370c      	adds	r7, #12
2400877c:	46bd      	mov	sp, r7
2400877e:	f85d 7b04 	ldr.w	r7, [sp], #4
24008782:	4770      	bx	lr

24008784 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
24008784:	b580      	push	{r7, lr}
24008786:	b082      	sub	sp, #8
24008788:	af00      	add	r7, sp, #0
2400878a:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
2400878c:	687b      	ldr	r3, [r7, #4]
2400878e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
24008790:	681a      	ldr	r2, [r3, #0]
24008792:	687b      	ldr	r3, [r7, #4]
24008794:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
24008796:	4013      	ands	r3, r2
24008798:	2b00      	cmp	r3, #0
2400879a:	d01a      	beq.n	240087d2 <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
2400879c:	687b      	ldr	r3, [r7, #4]
2400879e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
240087a0:	681a      	ldr	r2, [r3, #0]
240087a2:	687b      	ldr	r3, [r7, #4]
240087a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
240087a6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
240087aa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
240087ac:	687b      	ldr	r3, [r7, #4]
240087ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
240087b0:	687a      	ldr	r2, [r7, #4]
240087b2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
240087b4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
240087b6:	687b      	ldr	r3, [r7, #4]
240087b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
240087ba:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
240087be:	687b      	ldr	r3, [r7, #4]
240087c0:	655a      	str	r2, [r3, #84]	@ 0x54

    if(hdma->XferErrorCallback != NULL)
240087c2:	687b      	ldr	r3, [r7, #4]
240087c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
240087c6:	2b00      	cmp	r3, #0
240087c8:	d003      	beq.n	240087d2 <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
240087ca:	687b      	ldr	r3, [r7, #4]
240087cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
240087ce:	6878      	ldr	r0, [r7, #4]
240087d0:	4798      	blx	r3
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
240087d2:	687b      	ldr	r3, [r7, #4]
240087d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
240087d6:	2b00      	cmp	r3, #0
240087d8:	d022      	beq.n	24008820 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
240087da:	687b      	ldr	r3, [r7, #4]
240087dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
240087de:	681a      	ldr	r2, [r3, #0]
240087e0:	687b      	ldr	r3, [r7, #4]
240087e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
240087e4:	4013      	ands	r3, r2
240087e6:	2b00      	cmp	r3, #0
240087e8:	d01a      	beq.n	24008820 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
240087ea:	687b      	ldr	r3, [r7, #4]
240087ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
240087ee:	681a      	ldr	r2, [r3, #0]
240087f0:	687b      	ldr	r3, [r7, #4]
240087f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
240087f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
240087f8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
240087fa:	687b      	ldr	r3, [r7, #4]
240087fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
240087fe:	687a      	ldr	r2, [r7, #4]
24008800:	6f52      	ldr	r2, [r2, #116]	@ 0x74
24008802:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
24008804:	687b      	ldr	r3, [r7, #4]
24008806:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
24008808:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
2400880c:	687b      	ldr	r3, [r7, #4]
2400880e:	655a      	str	r2, [r3, #84]	@ 0x54

      if(hdma->XferErrorCallback != NULL)
24008810:	687b      	ldr	r3, [r7, #4]
24008812:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
24008814:	2b00      	cmp	r3, #0
24008816:	d003      	beq.n	24008820 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
24008818:	687b      	ldr	r3, [r7, #4]
2400881a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
2400881c:	6878      	ldr	r0, [r7, #4]
2400881e:	4798      	blx	r3
      }
    }
  }
}
24008820:	bf00      	nop
24008822:	3708      	adds	r7, #8
24008824:	46bd      	mov	sp, r7
24008826:	bd80      	pop	{r7, pc}

24008828 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
24008828:	b480      	push	{r7}
2400882a:	b085      	sub	sp, #20
2400882c:	af00      	add	r7, sp, #0
2400882e:	60f8      	str	r0, [r7, #12]
24008830:	60b9      	str	r1, [r7, #8]
24008832:	607a      	str	r2, [r7, #4]
24008834:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24008836:	68fb      	ldr	r3, [r7, #12]
24008838:	681b      	ldr	r3, [r3, #0]
2400883a:	4a46      	ldr	r2, [pc, #280]	@ (24008954 <DMA_MultiBufferSetConfig+0x12c>)
2400883c:	4293      	cmp	r3, r2
2400883e:	d04a      	beq.n	240088d6 <DMA_MultiBufferSetConfig+0xae>
24008840:	68fb      	ldr	r3, [r7, #12]
24008842:	681b      	ldr	r3, [r3, #0]
24008844:	4a44      	ldr	r2, [pc, #272]	@ (24008958 <DMA_MultiBufferSetConfig+0x130>)
24008846:	4293      	cmp	r3, r2
24008848:	d045      	beq.n	240088d6 <DMA_MultiBufferSetConfig+0xae>
2400884a:	68fb      	ldr	r3, [r7, #12]
2400884c:	681b      	ldr	r3, [r3, #0]
2400884e:	4a43      	ldr	r2, [pc, #268]	@ (2400895c <DMA_MultiBufferSetConfig+0x134>)
24008850:	4293      	cmp	r3, r2
24008852:	d040      	beq.n	240088d6 <DMA_MultiBufferSetConfig+0xae>
24008854:	68fb      	ldr	r3, [r7, #12]
24008856:	681b      	ldr	r3, [r3, #0]
24008858:	4a41      	ldr	r2, [pc, #260]	@ (24008960 <DMA_MultiBufferSetConfig+0x138>)
2400885a:	4293      	cmp	r3, r2
2400885c:	d03b      	beq.n	240088d6 <DMA_MultiBufferSetConfig+0xae>
2400885e:	68fb      	ldr	r3, [r7, #12]
24008860:	681b      	ldr	r3, [r3, #0]
24008862:	4a40      	ldr	r2, [pc, #256]	@ (24008964 <DMA_MultiBufferSetConfig+0x13c>)
24008864:	4293      	cmp	r3, r2
24008866:	d036      	beq.n	240088d6 <DMA_MultiBufferSetConfig+0xae>
24008868:	68fb      	ldr	r3, [r7, #12]
2400886a:	681b      	ldr	r3, [r3, #0]
2400886c:	4a3e      	ldr	r2, [pc, #248]	@ (24008968 <DMA_MultiBufferSetConfig+0x140>)
2400886e:	4293      	cmp	r3, r2
24008870:	d031      	beq.n	240088d6 <DMA_MultiBufferSetConfig+0xae>
24008872:	68fb      	ldr	r3, [r7, #12]
24008874:	681b      	ldr	r3, [r3, #0]
24008876:	4a3d      	ldr	r2, [pc, #244]	@ (2400896c <DMA_MultiBufferSetConfig+0x144>)
24008878:	4293      	cmp	r3, r2
2400887a:	d02c      	beq.n	240088d6 <DMA_MultiBufferSetConfig+0xae>
2400887c:	68fb      	ldr	r3, [r7, #12]
2400887e:	681b      	ldr	r3, [r3, #0]
24008880:	4a3b      	ldr	r2, [pc, #236]	@ (24008970 <DMA_MultiBufferSetConfig+0x148>)
24008882:	4293      	cmp	r3, r2
24008884:	d027      	beq.n	240088d6 <DMA_MultiBufferSetConfig+0xae>
24008886:	68fb      	ldr	r3, [r7, #12]
24008888:	681b      	ldr	r3, [r3, #0]
2400888a:	4a3a      	ldr	r2, [pc, #232]	@ (24008974 <DMA_MultiBufferSetConfig+0x14c>)
2400888c:	4293      	cmp	r3, r2
2400888e:	d022      	beq.n	240088d6 <DMA_MultiBufferSetConfig+0xae>
24008890:	68fb      	ldr	r3, [r7, #12]
24008892:	681b      	ldr	r3, [r3, #0]
24008894:	4a38      	ldr	r2, [pc, #224]	@ (24008978 <DMA_MultiBufferSetConfig+0x150>)
24008896:	4293      	cmp	r3, r2
24008898:	d01d      	beq.n	240088d6 <DMA_MultiBufferSetConfig+0xae>
2400889a:	68fb      	ldr	r3, [r7, #12]
2400889c:	681b      	ldr	r3, [r3, #0]
2400889e:	4a37      	ldr	r2, [pc, #220]	@ (2400897c <DMA_MultiBufferSetConfig+0x154>)
240088a0:	4293      	cmp	r3, r2
240088a2:	d018      	beq.n	240088d6 <DMA_MultiBufferSetConfig+0xae>
240088a4:	68fb      	ldr	r3, [r7, #12]
240088a6:	681b      	ldr	r3, [r3, #0]
240088a8:	4a35      	ldr	r2, [pc, #212]	@ (24008980 <DMA_MultiBufferSetConfig+0x158>)
240088aa:	4293      	cmp	r3, r2
240088ac:	d013      	beq.n	240088d6 <DMA_MultiBufferSetConfig+0xae>
240088ae:	68fb      	ldr	r3, [r7, #12]
240088b0:	681b      	ldr	r3, [r3, #0]
240088b2:	4a34      	ldr	r2, [pc, #208]	@ (24008984 <DMA_MultiBufferSetConfig+0x15c>)
240088b4:	4293      	cmp	r3, r2
240088b6:	d00e      	beq.n	240088d6 <DMA_MultiBufferSetConfig+0xae>
240088b8:	68fb      	ldr	r3, [r7, #12]
240088ba:	681b      	ldr	r3, [r3, #0]
240088bc:	4a32      	ldr	r2, [pc, #200]	@ (24008988 <DMA_MultiBufferSetConfig+0x160>)
240088be:	4293      	cmp	r3, r2
240088c0:	d009      	beq.n	240088d6 <DMA_MultiBufferSetConfig+0xae>
240088c2:	68fb      	ldr	r3, [r7, #12]
240088c4:	681b      	ldr	r3, [r3, #0]
240088c6:	4a31      	ldr	r2, [pc, #196]	@ (2400898c <DMA_MultiBufferSetConfig+0x164>)
240088c8:	4293      	cmp	r3, r2
240088ca:	d004      	beq.n	240088d6 <DMA_MultiBufferSetConfig+0xae>
240088cc:	68fb      	ldr	r3, [r7, #12]
240088ce:	681b      	ldr	r3, [r3, #0]
240088d0:	4a2f      	ldr	r2, [pc, #188]	@ (24008990 <DMA_MultiBufferSetConfig+0x168>)
240088d2:	4293      	cmp	r3, r2
240088d4:	d101      	bne.n	240088da <DMA_MultiBufferSetConfig+0xb2>
240088d6:	2301      	movs	r3, #1
240088d8:	e000      	b.n	240088dc <DMA_MultiBufferSetConfig+0xb4>
240088da:	2300      	movs	r3, #0
240088dc:	2b00      	cmp	r3, #0
240088de:	d019      	beq.n	24008914 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
240088e0:	68fb      	ldr	r3, [r7, #12]
240088e2:	681b      	ldr	r3, [r3, #0]
240088e4:	683a      	ldr	r2, [r7, #0]
240088e6:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
240088e8:	68fb      	ldr	r3, [r7, #12]
240088ea:	689b      	ldr	r3, [r3, #8]
240088ec:	2b40      	cmp	r3, #64	@ 0x40
240088ee:	d108      	bne.n	24008902 <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
240088f0:	68fb      	ldr	r3, [r7, #12]
240088f2:	681b      	ldr	r3, [r3, #0]
240088f4:	687a      	ldr	r2, [r7, #4]
240088f6:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
240088f8:	68fb      	ldr	r3, [r7, #12]
240088fa:	681b      	ldr	r3, [r3, #0]
240088fc:	68ba      	ldr	r2, [r7, #8]
240088fe:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
24008900:	e021      	b.n	24008946 <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
24008902:	68fb      	ldr	r3, [r7, #12]
24008904:	681b      	ldr	r3, [r3, #0]
24008906:	68ba      	ldr	r2, [r7, #8]
24008908:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
2400890a:	68fb      	ldr	r3, [r7, #12]
2400890c:	681b      	ldr	r3, [r3, #0]
2400890e:	687a      	ldr	r2, [r7, #4]
24008910:	60da      	str	r2, [r3, #12]
}
24008912:	e018      	b.n	24008946 <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
24008914:	68fb      	ldr	r3, [r7, #12]
24008916:	681b      	ldr	r3, [r3, #0]
24008918:	683a      	ldr	r2, [r7, #0]
2400891a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
2400891c:	68fb      	ldr	r3, [r7, #12]
2400891e:	689b      	ldr	r3, [r3, #8]
24008920:	2b40      	cmp	r3, #64	@ 0x40
24008922:	d108      	bne.n	24008936 <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
24008924:	68fb      	ldr	r3, [r7, #12]
24008926:	681b      	ldr	r3, [r3, #0]
24008928:	687a      	ldr	r2, [r7, #4]
2400892a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
2400892c:	68fb      	ldr	r3, [r7, #12]
2400892e:	681b      	ldr	r3, [r3, #0]
24008930:	68ba      	ldr	r2, [r7, #8]
24008932:	60da      	str	r2, [r3, #12]
}
24008934:	e007      	b.n	24008946 <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
24008936:	68fb      	ldr	r3, [r7, #12]
24008938:	681b      	ldr	r3, [r3, #0]
2400893a:	68ba      	ldr	r2, [r7, #8]
2400893c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
2400893e:	68fb      	ldr	r3, [r7, #12]
24008940:	681b      	ldr	r3, [r3, #0]
24008942:	687a      	ldr	r2, [r7, #4]
24008944:	60da      	str	r2, [r3, #12]
}
24008946:	bf00      	nop
24008948:	3714      	adds	r7, #20
2400894a:	46bd      	mov	sp, r7
2400894c:	f85d 7b04 	ldr.w	r7, [sp], #4
24008950:	4770      	bx	lr
24008952:	bf00      	nop
24008954:	40020010 	.word	0x40020010
24008958:	40020028 	.word	0x40020028
2400895c:	40020040 	.word	0x40020040
24008960:	40020058 	.word	0x40020058
24008964:	40020070 	.word	0x40020070
24008968:	40020088 	.word	0x40020088
2400896c:	400200a0 	.word	0x400200a0
24008970:	400200b8 	.word	0x400200b8
24008974:	40020410 	.word	0x40020410
24008978:	40020428 	.word	0x40020428
2400897c:	40020440 	.word	0x40020440
24008980:	40020458 	.word	0x40020458
24008984:	40020470 	.word	0x40020470
24008988:	40020488 	.word	0x40020488
2400898c:	400204a0 	.word	0x400204a0
24008990:	400204b8 	.word	0x400204b8

24008994 <HAL_EXTI_SetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on EXTI configuration to be set.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_SetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
24008994:	b480      	push	{r7}
24008996:	b089      	sub	sp, #36	@ 0x24
24008998:	af00      	add	r7, sp, #0
2400899a:	6078      	str	r0, [r7, #4]
2400899c:	6039      	str	r1, [r7, #0]
  uint32_t maskline;
  uint32_t offset;
  uint32_t pcrlinepos;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
2400899e:	687b      	ldr	r3, [r7, #4]
240089a0:	2b00      	cmp	r3, #0
240089a2:	d002      	beq.n	240089aa <HAL_EXTI_SetConfigLine+0x16>
240089a4:	683b      	ldr	r3, [r7, #0]
240089a6:	2b00      	cmp	r3, #0
240089a8:	d101      	bne.n	240089ae <HAL_EXTI_SetConfigLine+0x1a>
  {
    return HAL_ERROR;
240089aa:	2301      	movs	r3, #1
240089ac:	e109      	b.n	24008bc2 <HAL_EXTI_SetConfigLine+0x22e>
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(pExtiConfig->Line));
  assert_param(IS_EXTI_MODE(pExtiConfig->Mode));

  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;
240089ae:	683b      	ldr	r3, [r7, #0]
240089b0:	681a      	ldr	r2, [r3, #0]
240089b2:	687b      	ldr	r3, [r7, #4]
240089b4:	601a      	str	r2, [r3, #0]

  /* compute line register offset and line mask */
  offset = ((pExtiConfig->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
240089b6:	683b      	ldr	r3, [r7, #0]
240089b8:	681b      	ldr	r3, [r3, #0]
240089ba:	0c1b      	lsrs	r3, r3, #16
240089bc:	f003 0303 	and.w	r3, r3, #3
240089c0:	613b      	str	r3, [r7, #16]
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
240089c2:	683b      	ldr	r3, [r7, #0]
240089c4:	681b      	ldr	r3, [r3, #0]
240089c6:	f003 031f 	and.w	r3, r3, #31
240089ca:	60fb      	str	r3, [r7, #12]
  maskline = (1UL << linepos);
240089cc:	2201      	movs	r2, #1
240089ce:	68fb      	ldr	r3, [r7, #12]
240089d0:	fa02 f303 	lsl.w	r3, r2, r3
240089d4:	60bb      	str	r3, [r7, #8]

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00U)
240089d6:	683b      	ldr	r3, [r7, #0]
240089d8:	681b      	ldr	r3, [r3, #0]
240089da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
240089de:	2b00      	cmp	r3, #0
240089e0:	d064      	beq.n	24008aac <HAL_EXTI_SetConfigLine+0x118>
  {
    assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));

    /* Configure rising trigger */
    regaddr = (__IO uint32_t *)(&EXTI->RTSR1 + (EXTI_CONFIG_OFFSET * offset));
240089e2:	693b      	ldr	r3, [r7, #16]
240089e4:	015b      	lsls	r3, r3, #5
240089e6:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
240089ea:	61fb      	str	r3, [r7, #28]
    regval = *regaddr;
240089ec:	69fb      	ldr	r3, [r7, #28]
240089ee:	681b      	ldr	r3, [r3, #0]
240089f0:	61bb      	str	r3, [r7, #24]

    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00U)
240089f2:	683b      	ldr	r3, [r7, #0]
240089f4:	689b      	ldr	r3, [r3, #8]
240089f6:	f003 0301 	and.w	r3, r3, #1
240089fa:	2b00      	cmp	r3, #0
240089fc:	d004      	beq.n	24008a08 <HAL_EXTI_SetConfigLine+0x74>
    {
      regval |= maskline;
240089fe:	69ba      	ldr	r2, [r7, #24]
24008a00:	68bb      	ldr	r3, [r7, #8]
24008a02:	4313      	orrs	r3, r2
24008a04:	61bb      	str	r3, [r7, #24]
24008a06:	e004      	b.n	24008a12 <HAL_EXTI_SetConfigLine+0x7e>
    }
    else
    {
      regval &= ~maskline;
24008a08:	68bb      	ldr	r3, [r7, #8]
24008a0a:	43db      	mvns	r3, r3
24008a0c:	69ba      	ldr	r2, [r7, #24]
24008a0e:	4013      	ands	r3, r2
24008a10:	61bb      	str	r3, [r7, #24]
    }

    /* Store rising trigger mode */
    *regaddr = regval;
24008a12:	69fb      	ldr	r3, [r7, #28]
24008a14:	69ba      	ldr	r2, [r7, #24]
24008a16:	601a      	str	r2, [r3, #0]

    /* Configure falling trigger */
    regaddr = (__IO uint32_t *)(&EXTI->FTSR1 + (EXTI_CONFIG_OFFSET * offset));
24008a18:	693b      	ldr	r3, [r7, #16]
24008a1a:	015a      	lsls	r2, r3, #5
24008a1c:	4b6c      	ldr	r3, [pc, #432]	@ (24008bd0 <HAL_EXTI_SetConfigLine+0x23c>)
24008a1e:	4413      	add	r3, r2
24008a20:	61fb      	str	r3, [r7, #28]
    regval = *regaddr;
24008a22:	69fb      	ldr	r3, [r7, #28]
24008a24:	681b      	ldr	r3, [r3, #0]
24008a26:	61bb      	str	r3, [r7, #24]

    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00U)
24008a28:	683b      	ldr	r3, [r7, #0]
24008a2a:	689b      	ldr	r3, [r3, #8]
24008a2c:	f003 0302 	and.w	r3, r3, #2
24008a30:	2b00      	cmp	r3, #0
24008a32:	d004      	beq.n	24008a3e <HAL_EXTI_SetConfigLine+0xaa>
    {
      regval |= maskline;
24008a34:	69ba      	ldr	r2, [r7, #24]
24008a36:	68bb      	ldr	r3, [r7, #8]
24008a38:	4313      	orrs	r3, r2
24008a3a:	61bb      	str	r3, [r7, #24]
24008a3c:	e004      	b.n	24008a48 <HAL_EXTI_SetConfigLine+0xb4>
    }
    else
    {
      regval &= ~maskline;
24008a3e:	68bb      	ldr	r3, [r7, #8]
24008a40:	43db      	mvns	r3, r3
24008a42:	69ba      	ldr	r2, [r7, #24]
24008a44:	4013      	ands	r3, r2
24008a46:	61bb      	str	r3, [r7, #24]
    }

    /* Store falling trigger mode */
    *regaddr = regval;
24008a48:	69fb      	ldr	r3, [r7, #28]
24008a4a:	69ba      	ldr	r2, [r7, #24]
24008a4c:	601a      	str	r2, [r3, #0]

    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
24008a4e:	683b      	ldr	r3, [r7, #0]
24008a50:	681b      	ldr	r3, [r3, #0]
24008a52:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
24008a56:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
24008a5a:	d127      	bne.n	24008aac <HAL_EXTI_SetConfigLine+0x118>
    {
      assert_param(IS_EXTI_GPIO_PORT(pExtiConfig->GPIOSel));
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[(linepos >> 2U) & 0x03UL];
24008a5c:	4a5d      	ldr	r2, [pc, #372]	@ (24008bd4 <HAL_EXTI_SetConfigLine+0x240>)
24008a5e:	68fb      	ldr	r3, [r7, #12]
24008a60:	089b      	lsrs	r3, r3, #2
24008a62:	f003 0303 	and.w	r3, r3, #3
24008a66:	3302      	adds	r3, #2
24008a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
24008a6c:	61bb      	str	r3, [r7, #24]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03U)));
24008a6e:	68fb      	ldr	r3, [r7, #12]
24008a70:	f003 0303 	and.w	r3, r3, #3
24008a74:	009b      	lsls	r3, r3, #2
24008a76:	220f      	movs	r2, #15
24008a78:	fa02 f303 	lsl.w	r3, r2, r3
24008a7c:	43db      	mvns	r3, r3
24008a7e:	69ba      	ldr	r2, [r7, #24]
24008a80:	4013      	ands	r3, r2
24008a82:	61bb      	str	r3, [r7, #24]
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03U)));
24008a84:	683b      	ldr	r3, [r7, #0]
24008a86:	68da      	ldr	r2, [r3, #12]
24008a88:	68fb      	ldr	r3, [r7, #12]
24008a8a:	f003 0303 	and.w	r3, r3, #3
24008a8e:	009b      	lsls	r3, r3, #2
24008a90:	fa02 f303 	lsl.w	r3, r2, r3
24008a94:	69ba      	ldr	r2, [r7, #24]
24008a96:	4313      	orrs	r3, r2
24008a98:	61bb      	str	r3, [r7, #24]
      SYSCFG->EXTICR[(linepos >> 2U) & 0x03UL] = regval;
24008a9a:	494e      	ldr	r1, [pc, #312]	@ (24008bd4 <HAL_EXTI_SetConfigLine+0x240>)
24008a9c:	68fb      	ldr	r3, [r7, #12]
24008a9e:	089b      	lsrs	r3, r3, #2
24008aa0:	f003 0303 	and.w	r3, r3, #3
24008aa4:	3302      	adds	r3, #2
24008aa6:	69ba      	ldr	r2, [r7, #24]
24008aa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  /* Configure interrupt mode : read current mode */
  regaddr = (__IO uint32_t *)(&EXTI->IMR1 + (EXTI_MODE_OFFSET * offset));
24008aac:	693b      	ldr	r3, [r7, #16]
24008aae:	011a      	lsls	r2, r3, #4
24008ab0:	4b49      	ldr	r3, [pc, #292]	@ (24008bd8 <HAL_EXTI_SetConfigLine+0x244>)
24008ab2:	4413      	add	r3, r2
24008ab4:	61fb      	str	r3, [r7, #28]
  regval = *regaddr;
24008ab6:	69fb      	ldr	r3, [r7, #28]
24008ab8:	681b      	ldr	r3, [r3, #0]
24008aba:	61bb      	str	r3, [r7, #24]

  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00U)
24008abc:	683b      	ldr	r3, [r7, #0]
24008abe:	685b      	ldr	r3, [r3, #4]
24008ac0:	f003 0301 	and.w	r3, r3, #1
24008ac4:	2b00      	cmp	r3, #0
24008ac6:	d004      	beq.n	24008ad2 <HAL_EXTI_SetConfigLine+0x13e>
  {
    regval |= maskline;
24008ac8:	69ba      	ldr	r2, [r7, #24]
24008aca:	68bb      	ldr	r3, [r7, #8]
24008acc:	4313      	orrs	r3, r2
24008ace:	61bb      	str	r3, [r7, #24]
24008ad0:	e004      	b.n	24008adc <HAL_EXTI_SetConfigLine+0x148>
  }
  else
  {
    regval &= ~maskline;
24008ad2:	68bb      	ldr	r3, [r7, #8]
24008ad4:	43db      	mvns	r3, r3
24008ad6:	69ba      	ldr	r2, [r7, #24]
24008ad8:	4013      	ands	r3, r2
24008ada:	61bb      	str	r3, [r7, #24]
  }

  /* Store interrupt mode */
  *regaddr = regval;
24008adc:	69fb      	ldr	r3, [r7, #28]
24008ade:	69ba      	ldr	r2, [r7, #24]
24008ae0:	601a      	str	r2, [r3, #0]

  /* The event mode cannot be configured if the line does not support it */
  assert_param(((pExtiConfig->Line & EXTI_EVENT) == EXTI_EVENT) || ((pExtiConfig->Mode & EXTI_MODE_EVENT) != EXTI_MODE_EVENT));

  /* Configure event mode : read current mode */
  regaddr = (__IO uint32_t *)(&EXTI->EMR1 + (EXTI_MODE_OFFSET * offset));
24008ae2:	693b      	ldr	r3, [r7, #16]
24008ae4:	011a      	lsls	r2, r3, #4
24008ae6:	4b3d      	ldr	r3, [pc, #244]	@ (24008bdc <HAL_EXTI_SetConfigLine+0x248>)
24008ae8:	4413      	add	r3, r2
24008aea:	61fb      	str	r3, [r7, #28]
  regval = *regaddr;
24008aec:	69fb      	ldr	r3, [r7, #28]
24008aee:	681b      	ldr	r3, [r3, #0]
24008af0:	61bb      	str	r3, [r7, #24]

  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00U)
24008af2:	683b      	ldr	r3, [r7, #0]
24008af4:	685b      	ldr	r3, [r3, #4]
24008af6:	f003 0302 	and.w	r3, r3, #2
24008afa:	2b00      	cmp	r3, #0
24008afc:	d004      	beq.n	24008b08 <HAL_EXTI_SetConfigLine+0x174>
  {
    regval |= maskline;
24008afe:	69ba      	ldr	r2, [r7, #24]
24008b00:	68bb      	ldr	r3, [r7, #8]
24008b02:	4313      	orrs	r3, r2
24008b04:	61bb      	str	r3, [r7, #24]
24008b06:	e004      	b.n	24008b12 <HAL_EXTI_SetConfigLine+0x17e>
  }
  else
  {
    regval &= ~maskline;
24008b08:	68bb      	ldr	r3, [r7, #8]
24008b0a:	43db      	mvns	r3, r3
24008b0c:	69ba      	ldr	r2, [r7, #24]
24008b0e:	4013      	ands	r3, r2
24008b10:	61bb      	str	r3, [r7, #24]
  }

  /* Store event mode */
  *regaddr = regval;
24008b12:	69fb      	ldr	r3, [r7, #28]
24008b14:	69ba      	ldr	r2, [r7, #24]
24008b16:	601a      	str	r2, [r3, #0]
  /* Store event mode */
  *regaddr = regval;
#endif /* DUAL_CORE */

  /* Configure the D3 PendClear source in case of Wakeup target is Any */
  if ((pExtiConfig->Line & EXTI_TARGET_MASK) == EXTI_TARGET_MSK_ALL)
24008b18:	683b      	ldr	r3, [r7, #0]
24008b1a:	681b      	ldr	r3, [r3, #0]
24008b1c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
24008b20:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
24008b24:	d14c      	bne.n	24008bc0 <HAL_EXTI_SetConfigLine+0x22c>
  {
    assert_param(IS_EXTI_D3_PENDCLR_SRC(pExtiConfig->PendClearSource));

    /*Calc the PMR register address for the given line */
    regaddr = (__IO uint32_t *)(&EXTI->D3PMR1 + (EXTI_CONFIG_OFFSET * offset));
24008b26:	693b      	ldr	r3, [r7, #16]
24008b28:	015a      	lsls	r2, r3, #5
24008b2a:	4b2d      	ldr	r3, [pc, #180]	@ (24008be0 <HAL_EXTI_SetConfigLine+0x24c>)
24008b2c:	4413      	add	r3, r2
24008b2e:	61fb      	str	r3, [r7, #28]
    regval = *regaddr;
24008b30:	69fb      	ldr	r3, [r7, #28]
24008b32:	681b      	ldr	r3, [r3, #0]
24008b34:	61bb      	str	r3, [r7, #24]

    if(pExtiConfig->PendClearSource == EXTI_D3_PENDCLR_SRC_NONE)
24008b36:	683b      	ldr	r3, [r7, #0]
24008b38:	691b      	ldr	r3, [r3, #16]
24008b3a:	2b00      	cmp	r3, #0
24008b3c:	d108      	bne.n	24008b50 <HAL_EXTI_SetConfigLine+0x1bc>
    {
      /* Clear D3PMRx register for the given line */
      regval &= ~maskline;
24008b3e:	68bb      	ldr	r3, [r7, #8]
24008b40:	43db      	mvns	r3, r3
24008b42:	69ba      	ldr	r2, [r7, #24]
24008b44:	4013      	ands	r3, r2
24008b46:	61bb      	str	r3, [r7, #24]
      /* Store D3PMRx register value */
      *regaddr = regval;
24008b48:	69fb      	ldr	r3, [r7, #28]
24008b4a:	69ba      	ldr	r2, [r7, #24]
24008b4c:	601a      	str	r2, [r3, #0]
24008b4e:	e037      	b.n	24008bc0 <HAL_EXTI_SetConfigLine+0x22c>
    }
    else
    {
      /* Set D3PMRx register to 1 for the given line */
      regval |= maskline;
24008b50:	69ba      	ldr	r2, [r7, #24]
24008b52:	68bb      	ldr	r3, [r7, #8]
24008b54:	4313      	orrs	r3, r2
24008b56:	61bb      	str	r3, [r7, #24]
      /* Store D3PMRx register value */
      *regaddr = regval;
24008b58:	69fb      	ldr	r3, [r7, #28]
24008b5a:	69ba      	ldr	r2, [r7, #24]
24008b5c:	601a      	str	r2, [r3, #0]

      if(linepos < 16UL)
24008b5e:	68fb      	ldr	r3, [r7, #12]
24008b60:	2b0f      	cmp	r3, #15
24008b62:	d80a      	bhi.n	24008b7a <HAL_EXTI_SetConfigLine+0x1e6>
      {
        regaddr = (__IO uint32_t *)(&EXTI->D3PCR1L + (EXTI_CONFIG_OFFSET * offset));
24008b64:	693b      	ldr	r3, [r7, #16]
24008b66:	015a      	lsls	r2, r3, #5
24008b68:	4b1e      	ldr	r3, [pc, #120]	@ (24008be4 <HAL_EXTI_SetConfigLine+0x250>)
24008b6a:	4413      	add	r3, r2
24008b6c:	61fb      	str	r3, [r7, #28]
        pcrlinepos = 1UL << linepos;
24008b6e:	2201      	movs	r2, #1
24008b70:	68fb      	ldr	r3, [r7, #12]
24008b72:	fa02 f303 	lsl.w	r3, r2, r3
24008b76:	617b      	str	r3, [r7, #20]
24008b78:	e00a      	b.n	24008b90 <HAL_EXTI_SetConfigLine+0x1fc>
      }
      else
      {
        regaddr = (__IO uint32_t *)(&EXTI->D3PCR1H + (EXTI_CONFIG_OFFSET * offset));
24008b7a:	693b      	ldr	r3, [r7, #16]
24008b7c:	015a      	lsls	r2, r3, #5
24008b7e:	4b1a      	ldr	r3, [pc, #104]	@ (24008be8 <HAL_EXTI_SetConfigLine+0x254>)
24008b80:	4413      	add	r3, r2
24008b82:	61fb      	str	r3, [r7, #28]
        pcrlinepos = 1UL << (linepos - 16UL);
24008b84:	68fb      	ldr	r3, [r7, #12]
24008b86:	3b10      	subs	r3, #16
24008b88:	2201      	movs	r2, #1
24008b8a:	fa02 f303 	lsl.w	r3, r2, r3
24008b8e:	617b      	str	r3, [r7, #20]
      }

      regval = (*regaddr & (~(pcrlinepos * pcrlinepos * 3UL))) | (pcrlinepos * pcrlinepos * (pExtiConfig->PendClearSource - 1UL));
24008b90:	69fb      	ldr	r3, [r7, #28]
24008b92:	6819      	ldr	r1, [r3, #0]
24008b94:	697b      	ldr	r3, [r7, #20]
24008b96:	fb03 f203 	mul.w	r2, r3, r3
24008b9a:	4613      	mov	r3, r2
24008b9c:	005b      	lsls	r3, r3, #1
24008b9e:	4413      	add	r3, r2
24008ba0:	43db      	mvns	r3, r3
24008ba2:	ea01 0203 	and.w	r2, r1, r3
24008ba6:	697b      	ldr	r3, [r7, #20]
24008ba8:	fb03 f303 	mul.w	r3, r3, r3
24008bac:	6839      	ldr	r1, [r7, #0]
24008bae:	6909      	ldr	r1, [r1, #16]
24008bb0:	3901      	subs	r1, #1
24008bb2:	fb01 f303 	mul.w	r3, r1, r3
24008bb6:	4313      	orrs	r3, r2
24008bb8:	61bb      	str	r3, [r7, #24]
      *regaddr = regval;
24008bba:	69fb      	ldr	r3, [r7, #28]
24008bbc:	69ba      	ldr	r2, [r7, #24]
24008bbe:	601a      	str	r2, [r3, #0]
    }
  }

  return HAL_OK;
24008bc0:	2300      	movs	r3, #0
}
24008bc2:	4618      	mov	r0, r3
24008bc4:	3724      	adds	r7, #36	@ 0x24
24008bc6:	46bd      	mov	sp, r7
24008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
24008bcc:	4770      	bx	lr
24008bce:	bf00      	nop
24008bd0:	58000004 	.word	0x58000004
24008bd4:	58000400 	.word	0x58000400
24008bd8:	58000080 	.word	0x58000080
24008bdc:	58000084 	.word	0x58000084
24008be0:	5800000c 	.word	0x5800000c
24008be4:	58000010 	.word	0x58000010
24008be8:	58000014 	.word	0x58000014

24008bec <HAL_EXTI_GetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on structure to store Exti configuration.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
24008bec:	b480      	push	{r7}
24008bee:	b089      	sub	sp, #36	@ 0x24
24008bf0:	af00      	add	r7, sp, #0
24008bf2:	6078      	str	r0, [r7, #4]
24008bf4:	6039      	str	r1, [r7, #0]
  uint32_t maskline;
  uint32_t offset;
  uint32_t pcrlinepos;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
24008bf6:	687b      	ldr	r3, [r7, #4]
24008bf8:	2b00      	cmp	r3, #0
24008bfa:	d002      	beq.n	24008c02 <HAL_EXTI_GetConfigLine+0x16>
24008bfc:	683b      	ldr	r3, [r7, #0]
24008bfe:	2b00      	cmp	r3, #0
24008c00:	d101      	bne.n	24008c06 <HAL_EXTI_GetConfigLine+0x1a>
  {
    return HAL_ERROR;
24008c02:	2301      	movs	r3, #1
24008c04:	e0c4      	b.n	24008d90 <HAL_EXTI_GetConfigLine+0x1a4>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* Store handle line number to configuration structure */
  pExtiConfig->Line = hexti->Line;
24008c06:	687b      	ldr	r3, [r7, #4]
24008c08:	681a      	ldr	r2, [r3, #0]
24008c0a:	683b      	ldr	r3, [r7, #0]
24008c0c:	601a      	str	r2, [r3, #0]

  /* compute line register offset and line mask */
  offset = ((pExtiConfig->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
24008c0e:	683b      	ldr	r3, [r7, #0]
24008c10:	681b      	ldr	r3, [r3, #0]
24008c12:	0c1b      	lsrs	r3, r3, #16
24008c14:	f003 0303 	and.w	r3, r3, #3
24008c18:	617b      	str	r3, [r7, #20]
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
24008c1a:	683b      	ldr	r3, [r7, #0]
24008c1c:	681b      	ldr	r3, [r3, #0]
24008c1e:	f003 031f 	and.w	r3, r3, #31
24008c22:	613b      	str	r3, [r7, #16]
  maskline = (1UL << linepos);
24008c24:	2201      	movs	r2, #1
24008c26:	693b      	ldr	r3, [r7, #16]
24008c28:	fa02 f303 	lsl.w	r3, r2, r3
24008c2c:	60fb      	str	r3, [r7, #12]

  /* 1] Get core mode : interrupt */
  regaddr = (__IO uint32_t *)(&EXTI->IMR1 + (EXTI_MODE_OFFSET * offset));
24008c2e:	697b      	ldr	r3, [r7, #20]
24008c30:	011a      	lsls	r2, r3, #4
24008c32:	4b5a      	ldr	r3, [pc, #360]	@ (24008d9c <HAL_EXTI_GetConfigLine+0x1b0>)
24008c34:	4413      	add	r3, r2
24008c36:	61fb      	str	r3, [r7, #28]
  regval = *regaddr;
24008c38:	69fb      	ldr	r3, [r7, #28]
24008c3a:	681b      	ldr	r3, [r3, #0]
24008c3c:	60bb      	str	r3, [r7, #8]

  pExtiConfig->Mode = EXTI_MODE_NONE;
24008c3e:	683b      	ldr	r3, [r7, #0]
24008c40:	2200      	movs	r2, #0
24008c42:	605a      	str	r2, [r3, #4]

  /* Check if selected line is enable */
  if ((regval & maskline) != 0x00U)
24008c44:	68ba      	ldr	r2, [r7, #8]
24008c46:	68fb      	ldr	r3, [r7, #12]
24008c48:	4013      	ands	r3, r2
24008c4a:	2b00      	cmp	r3, #0
24008c4c:	d002      	beq.n	24008c54 <HAL_EXTI_GetConfigLine+0x68>
  {
    pExtiConfig->Mode = EXTI_MODE_INTERRUPT;
24008c4e:	683b      	ldr	r3, [r7, #0]
24008c50:	2201      	movs	r2, #1
24008c52:	605a      	str	r2, [r3, #4]
  }

  /* Get event mode */
  regaddr = (__IO uint32_t *)(&EXTI->EMR1 + (EXTI_MODE_OFFSET * offset));
24008c54:	697b      	ldr	r3, [r7, #20]
24008c56:	011a      	lsls	r2, r3, #4
24008c58:	4b51      	ldr	r3, [pc, #324]	@ (24008da0 <HAL_EXTI_GetConfigLine+0x1b4>)
24008c5a:	4413      	add	r3, r2
24008c5c:	61fb      	str	r3, [r7, #28]
  regval = *regaddr;
24008c5e:	69fb      	ldr	r3, [r7, #28]
24008c60:	681b      	ldr	r3, [r3, #0]
24008c62:	60bb      	str	r3, [r7, #8]

  /* Check if selected line is enable */
  if ((regval & maskline) != 0x00U)
24008c64:	68ba      	ldr	r2, [r7, #8]
24008c66:	68fb      	ldr	r3, [r7, #12]
24008c68:	4013      	ands	r3, r2
24008c6a:	2b00      	cmp	r3, #0
24008c6c:	d005      	beq.n	24008c7a <HAL_EXTI_GetConfigLine+0x8e>
  {
    pExtiConfig->Mode |= EXTI_MODE_EVENT;
24008c6e:	683b      	ldr	r3, [r7, #0]
24008c70:	685b      	ldr	r3, [r3, #4]
24008c72:	f043 0202 	orr.w	r2, r3, #2
24008c76:	683b      	ldr	r3, [r7, #0]
24008c78:	605a      	str	r2, [r3, #4]
    pExtiConfig->Mode |= EXTI_MODE_CORE2_EVENT;
  }
#endif /*DUAL_CORE*/

  /* Get default Trigger and GPIOSel configuration */
  pExtiConfig->Trigger = EXTI_TRIGGER_NONE;
24008c7a:	683b      	ldr	r3, [r7, #0]
24008c7c:	2200      	movs	r2, #0
24008c7e:	609a      	str	r2, [r3, #8]
  pExtiConfig->GPIOSel = 0x00U;
24008c80:	683b      	ldr	r3, [r7, #0]
24008c82:	2200      	movs	r2, #0
24008c84:	60da      	str	r2, [r3, #12]

  /* 2] Get trigger for configurable lines : rising */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00U)
24008c86:	683b      	ldr	r3, [r7, #0]
24008c88:	681b      	ldr	r3, [r3, #0]
24008c8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
24008c8e:	2b00      	cmp	r3, #0
24008c90:	d03d      	beq.n	24008d0e <HAL_EXTI_GetConfigLine+0x122>
  {
    regaddr = (__IO uint32_t *)(&EXTI->RTSR1 + (EXTI_CONFIG_OFFSET * offset));
24008c92:	697b      	ldr	r3, [r7, #20]
24008c94:	015b      	lsls	r3, r3, #5
24008c96:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
24008c9a:	61fb      	str	r3, [r7, #28]
    regval = *regaddr;
24008c9c:	69fb      	ldr	r3, [r7, #28]
24008c9e:	681b      	ldr	r3, [r3, #0]
24008ca0:	60bb      	str	r3, [r7, #8]

    /* Check if configuration of selected line is enable */
    if ((regval & maskline) != 0x00U)
24008ca2:	68ba      	ldr	r2, [r7, #8]
24008ca4:	68fb      	ldr	r3, [r7, #12]
24008ca6:	4013      	ands	r3, r2
24008ca8:	2b00      	cmp	r3, #0
24008caa:	d002      	beq.n	24008cb2 <HAL_EXTI_GetConfigLine+0xc6>
    {
      pExtiConfig->Trigger = EXTI_TRIGGER_RISING;
24008cac:	683b      	ldr	r3, [r7, #0]
24008cae:	2201      	movs	r2, #1
24008cb0:	609a      	str	r2, [r3, #8]
    }

    /* Get falling configuration */
    regaddr = (__IO uint32_t *)(&EXTI->FTSR1 + (EXTI_CONFIG_OFFSET * offset));
24008cb2:	697b      	ldr	r3, [r7, #20]
24008cb4:	015a      	lsls	r2, r3, #5
24008cb6:	4b3b      	ldr	r3, [pc, #236]	@ (24008da4 <HAL_EXTI_GetConfigLine+0x1b8>)
24008cb8:	4413      	add	r3, r2
24008cba:	61fb      	str	r3, [r7, #28]
    regval = *regaddr;
24008cbc:	69fb      	ldr	r3, [r7, #28]
24008cbe:	681b      	ldr	r3, [r3, #0]
24008cc0:	60bb      	str	r3, [r7, #8]

    /* Check if configuration of selected line is enable */
    if ((regval & maskline) != 0x00U)
24008cc2:	68ba      	ldr	r2, [r7, #8]
24008cc4:	68fb      	ldr	r3, [r7, #12]
24008cc6:	4013      	ands	r3, r2
24008cc8:	2b00      	cmp	r3, #0
24008cca:	d005      	beq.n	24008cd8 <HAL_EXTI_GetConfigLine+0xec>
    {
      pExtiConfig->Trigger |= EXTI_TRIGGER_FALLING;
24008ccc:	683b      	ldr	r3, [r7, #0]
24008cce:	689b      	ldr	r3, [r3, #8]
24008cd0:	f043 0202 	orr.w	r2, r3, #2
24008cd4:	683b      	ldr	r3, [r7, #0]
24008cd6:	609a      	str	r2, [r3, #8]
    }

    /* Get Gpio port selection for gpio lines */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
24008cd8:	683b      	ldr	r3, [r7, #0]
24008cda:	681b      	ldr	r3, [r3, #0]
24008cdc:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
24008ce0:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
24008ce4:	d113      	bne.n	24008d0e <HAL_EXTI_GetConfigLine+0x122>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[(linepos >> 2U) & 0x03UL];
24008ce6:	4a30      	ldr	r2, [pc, #192]	@ (24008da8 <HAL_EXTI_GetConfigLine+0x1bc>)
24008ce8:	693b      	ldr	r3, [r7, #16]
24008cea:	089b      	lsrs	r3, r3, #2
24008cec:	f003 0303 	and.w	r3, r3, #3
24008cf0:	3302      	adds	r3, #2
24008cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
24008cf6:	60bb      	str	r3, [r7, #8]
      pExtiConfig->GPIOSel = (regval >> (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u))) & SYSCFG_EXTICR1_EXTI0;
24008cf8:	693b      	ldr	r3, [r7, #16]
24008cfa:	f003 0303 	and.w	r3, r3, #3
24008cfe:	009b      	lsls	r3, r3, #2
24008d00:	68ba      	ldr	r2, [r7, #8]
24008d02:	fa22 f303 	lsr.w	r3, r2, r3
24008d06:	f003 020f 	and.w	r2, r3, #15
24008d0a:	683b      	ldr	r3, [r7, #0]
24008d0c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get default Pend Clear Source */
  pExtiConfig->PendClearSource = EXTI_D3_PENDCLR_SRC_NONE;
24008d0e:	683b      	ldr	r3, [r7, #0]
24008d10:	2200      	movs	r2, #0
24008d12:	611a      	str	r2, [r3, #16]

  /* 3] Get D3 Pend Clear source */
  if ((pExtiConfig->Line & EXTI_TARGET_MASK) == EXTI_TARGET_MSK_ALL)
24008d14:	683b      	ldr	r3, [r7, #0]
24008d16:	681b      	ldr	r3, [r3, #0]
24008d18:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
24008d1c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
24008d20:	d135      	bne.n	24008d8e <HAL_EXTI_GetConfigLine+0x1a2>
  {
    regaddr = (__IO uint32_t *)(&EXTI->D3PMR1 + (EXTI_CONFIG_OFFSET * offset));
24008d22:	697b      	ldr	r3, [r7, #20]
24008d24:	015a      	lsls	r2, r3, #5
24008d26:	4b21      	ldr	r3, [pc, #132]	@ (24008dac <HAL_EXTI_GetConfigLine+0x1c0>)
24008d28:	4413      	add	r3, r2
24008d2a:	61fb      	str	r3, [r7, #28]
    if(((*regaddr) & linepos) != 0UL)
24008d2c:	69fb      	ldr	r3, [r7, #28]
24008d2e:	681a      	ldr	r2, [r3, #0]
24008d30:	693b      	ldr	r3, [r7, #16]
24008d32:	4013      	ands	r3, r2
24008d34:	2b00      	cmp	r3, #0
24008d36:	d02a      	beq.n	24008d8e <HAL_EXTI_GetConfigLine+0x1a2>
    {
      /* if wakeup target is any and PMR set, the read pend clear source from  D3PCRxL/H */
      if(linepos < 16UL)
24008d38:	693b      	ldr	r3, [r7, #16]
24008d3a:	2b0f      	cmp	r3, #15
24008d3c:	d80a      	bhi.n	24008d54 <HAL_EXTI_GetConfigLine+0x168>
      {
        regaddr = (__IO uint32_t *)(&EXTI->D3PCR1L + (EXTI_CONFIG_OFFSET * offset));
24008d3e:	697b      	ldr	r3, [r7, #20]
24008d40:	015a      	lsls	r2, r3, #5
24008d42:	4b1b      	ldr	r3, [pc, #108]	@ (24008db0 <HAL_EXTI_GetConfigLine+0x1c4>)
24008d44:	4413      	add	r3, r2
24008d46:	61fb      	str	r3, [r7, #28]
        pcrlinepos = 1UL << linepos;
24008d48:	2201      	movs	r2, #1
24008d4a:	693b      	ldr	r3, [r7, #16]
24008d4c:	fa02 f303 	lsl.w	r3, r2, r3
24008d50:	61bb      	str	r3, [r7, #24]
24008d52:	e00a      	b.n	24008d6a <HAL_EXTI_GetConfigLine+0x17e>
      }
      else
      {
        regaddr = (__IO uint32_t *)(&EXTI->D3PCR1H + (EXTI_CONFIG_OFFSET * offset));
24008d54:	697b      	ldr	r3, [r7, #20]
24008d56:	015a      	lsls	r2, r3, #5
24008d58:	4b16      	ldr	r3, [pc, #88]	@ (24008db4 <HAL_EXTI_GetConfigLine+0x1c8>)
24008d5a:	4413      	add	r3, r2
24008d5c:	61fb      	str	r3, [r7, #28]
        pcrlinepos = 1UL << (linepos - 16UL);
24008d5e:	693b      	ldr	r3, [r7, #16]
24008d60:	3b10      	subs	r3, #16
24008d62:	2201      	movs	r2, #1
24008d64:	fa02 f303 	lsl.w	r3, r2, r3
24008d68:	61bb      	str	r3, [r7, #24]
      }

      pExtiConfig->PendClearSource = 1UL + ((*regaddr & (pcrlinepos * pcrlinepos * 3UL)) / (pcrlinepos * pcrlinepos));
24008d6a:	69fb      	ldr	r3, [r7, #28]
24008d6c:	6819      	ldr	r1, [r3, #0]
24008d6e:	69bb      	ldr	r3, [r7, #24]
24008d70:	fb03 f203 	mul.w	r2, r3, r3
24008d74:	4613      	mov	r3, r2
24008d76:	005b      	lsls	r3, r3, #1
24008d78:	4413      	add	r3, r2
24008d7a:	ea01 0203 	and.w	r2, r1, r3
24008d7e:	69bb      	ldr	r3, [r7, #24]
24008d80:	fb03 f303 	mul.w	r3, r3, r3
24008d84:	fbb2 f3f3 	udiv	r3, r2, r3
24008d88:	1c5a      	adds	r2, r3, #1
24008d8a:	683b      	ldr	r3, [r7, #0]
24008d8c:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
24008d8e:	2300      	movs	r3, #0
}
24008d90:	4618      	mov	r0, r3
24008d92:	3724      	adds	r7, #36	@ 0x24
24008d94:	46bd      	mov	sp, r7
24008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
24008d9a:	4770      	bx	lr
24008d9c:	58000080 	.word	0x58000080
24008da0:	58000084 	.word	0x58000084
24008da4:	58000004 	.word	0x58000004
24008da8:	58000400 	.word	0x58000400
24008dac:	5800000c 	.word	0x5800000c
24008db0:	58000010 	.word	0x58000010
24008db4:	58000014 	.word	0x58000014

24008db8 <HAL_EXTI_ClearConfigLine>:
  * @brief  Clear whole configuration of a dedicated Exti line.
  * @param  hexti Exti handle.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_ClearConfigLine(EXTI_HandleTypeDef *hexti)
{
24008db8:	b480      	push	{r7}
24008dba:	b089      	sub	sp, #36	@ 0x24
24008dbc:	af00      	add	r7, sp, #0
24008dbe:	6078      	str	r0, [r7, #4]
  uint32_t maskline;
  uint32_t offset;
  uint32_t pcrlinepos;

  /* Check null pointer */
  if (hexti == NULL)
24008dc0:	687b      	ldr	r3, [r7, #4]
24008dc2:	2b00      	cmp	r3, #0
24008dc4:	d101      	bne.n	24008dca <HAL_EXTI_ClearConfigLine+0x12>
  {
    return HAL_ERROR;
24008dc6:	2301      	movs	r3, #1
24008dc8:	e0ab      	b.n	24008f22 <HAL_EXTI_ClearConfigLine+0x16a>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
24008dca:	687b      	ldr	r3, [r7, #4]
24008dcc:	681b      	ldr	r3, [r3, #0]
24008dce:	0c1b      	lsrs	r3, r3, #16
24008dd0:	f003 0303 	and.w	r3, r3, #3
24008dd4:	617b      	str	r3, [r7, #20]
  linepos = (hexti->Line & EXTI_PIN_MASK);
24008dd6:	687b      	ldr	r3, [r7, #4]
24008dd8:	681b      	ldr	r3, [r3, #0]
24008dda:	f003 031f 	and.w	r3, r3, #31
24008dde:	613b      	str	r3, [r7, #16]
  maskline = (1UL << linepos);
24008de0:	2201      	movs	r2, #1
24008de2:	693b      	ldr	r3, [r7, #16]
24008de4:	fa02 f303 	lsl.w	r3, r2, r3
24008de8:	60fb      	str	r3, [r7, #12]

  /* 1] Clear interrupt mode */
  regaddr = (__IO uint32_t *)(&EXTI->IMR1 + (EXTI_MODE_OFFSET * offset));
24008dea:	697b      	ldr	r3, [r7, #20]
24008dec:	011a      	lsls	r2, r3, #4
24008dee:	4b50      	ldr	r3, [pc, #320]	@ (24008f30 <HAL_EXTI_ClearConfigLine+0x178>)
24008df0:	4413      	add	r3, r2
24008df2:	61fb      	str	r3, [r7, #28]
  regval = (*regaddr & ~maskline);
24008df4:	69fb      	ldr	r3, [r7, #28]
24008df6:	681a      	ldr	r2, [r3, #0]
24008df8:	68fb      	ldr	r3, [r7, #12]
24008dfa:	43db      	mvns	r3, r3
24008dfc:	4013      	ands	r3, r2
24008dfe:	60bb      	str	r3, [r7, #8]
  *regaddr = regval;
24008e00:	69fb      	ldr	r3, [r7, #28]
24008e02:	68ba      	ldr	r2, [r7, #8]
24008e04:	601a      	str	r2, [r3, #0]

  /* 2] Clear event mode */
  regaddr = (__IO uint32_t *)(&EXTI->EMR1 + (EXTI_MODE_OFFSET * offset));
24008e06:	697b      	ldr	r3, [r7, #20]
24008e08:	011a      	lsls	r2, r3, #4
24008e0a:	4b4a      	ldr	r3, [pc, #296]	@ (24008f34 <HAL_EXTI_ClearConfigLine+0x17c>)
24008e0c:	4413      	add	r3, r2
24008e0e:	61fb      	str	r3, [r7, #28]
  regval = (*regaddr & ~maskline);
24008e10:	69fb      	ldr	r3, [r7, #28]
24008e12:	681a      	ldr	r2, [r3, #0]
24008e14:	68fb      	ldr	r3, [r7, #12]
24008e16:	43db      	mvns	r3, r3
24008e18:	4013      	ands	r3, r2
24008e1a:	60bb      	str	r3, [r7, #8]
  *regaddr = regval;
24008e1c:	69fb      	ldr	r3, [r7, #28]
24008e1e:	68ba      	ldr	r2, [r7, #8]
24008e20:	601a      	str	r2, [r3, #0]
  regval = (*regaddr & ~maskline);
  *regaddr = regval;
#endif /* DUAL_CORE */

  /* 3] Clear triggers in case of configurable lines */
  if ((hexti->Line & EXTI_CONFIG) != 0x00U)
24008e22:	687b      	ldr	r3, [r7, #4]
24008e24:	681b      	ldr	r3, [r3, #0]
24008e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
24008e2a:	2b00      	cmp	r3, #0
24008e2c:	d03f      	beq.n	24008eae <HAL_EXTI_ClearConfigLine+0xf6>
  {
    regaddr = (__IO uint32_t *)(&EXTI->RTSR1 + (EXTI_CONFIG_OFFSET * offset));
24008e2e:	697b      	ldr	r3, [r7, #20]
24008e30:	015b      	lsls	r3, r3, #5
24008e32:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
24008e36:	61fb      	str	r3, [r7, #28]
    regval = (*regaddr & ~maskline);
24008e38:	69fb      	ldr	r3, [r7, #28]
24008e3a:	681a      	ldr	r2, [r3, #0]
24008e3c:	68fb      	ldr	r3, [r7, #12]
24008e3e:	43db      	mvns	r3, r3
24008e40:	4013      	ands	r3, r2
24008e42:	60bb      	str	r3, [r7, #8]
    *regaddr = regval;
24008e44:	69fb      	ldr	r3, [r7, #28]
24008e46:	68ba      	ldr	r2, [r7, #8]
24008e48:	601a      	str	r2, [r3, #0]

    regaddr = (__IO uint32_t *)(&EXTI->FTSR1 + (EXTI_CONFIG_OFFSET * offset));
24008e4a:	697b      	ldr	r3, [r7, #20]
24008e4c:	015a      	lsls	r2, r3, #5
24008e4e:	4b3a      	ldr	r3, [pc, #232]	@ (24008f38 <HAL_EXTI_ClearConfigLine+0x180>)
24008e50:	4413      	add	r3, r2
24008e52:	61fb      	str	r3, [r7, #28]
    regval = (*regaddr & ~maskline);
24008e54:	69fb      	ldr	r3, [r7, #28]
24008e56:	681a      	ldr	r2, [r3, #0]
24008e58:	68fb      	ldr	r3, [r7, #12]
24008e5a:	43db      	mvns	r3, r3
24008e5c:	4013      	ands	r3, r2
24008e5e:	60bb      	str	r3, [r7, #8]
    *regaddr = regval;
24008e60:	69fb      	ldr	r3, [r7, #28]
24008e62:	68ba      	ldr	r2, [r7, #8]
24008e64:	601a      	str	r2, [r3, #0]

    /* Get Gpio port selection for gpio lines */
    if ((hexti->Line & EXTI_GPIO) == EXTI_GPIO)
24008e66:	687b      	ldr	r3, [r7, #4]
24008e68:	681b      	ldr	r3, [r3, #0]
24008e6a:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
24008e6e:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
24008e72:	d11c      	bne.n	24008eae <HAL_EXTI_ClearConfigLine+0xf6>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[(linepos >> 2U) & 0x03UL];
24008e74:	4a31      	ldr	r2, [pc, #196]	@ (24008f3c <HAL_EXTI_ClearConfigLine+0x184>)
24008e76:	693b      	ldr	r3, [r7, #16]
24008e78:	089b      	lsrs	r3, r3, #2
24008e7a:	f003 0303 	and.w	r3, r3, #3
24008e7e:	3302      	adds	r3, #2
24008e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
24008e84:	60bb      	str	r3, [r7, #8]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03UL)));
24008e86:	693b      	ldr	r3, [r7, #16]
24008e88:	f003 0303 	and.w	r3, r3, #3
24008e8c:	009b      	lsls	r3, r3, #2
24008e8e:	220f      	movs	r2, #15
24008e90:	fa02 f303 	lsl.w	r3, r2, r3
24008e94:	43db      	mvns	r3, r3
24008e96:	68ba      	ldr	r2, [r7, #8]
24008e98:	4013      	ands	r3, r2
24008e9a:	60bb      	str	r3, [r7, #8]
      SYSCFG->EXTICR[(linepos >> 2U) & 0x03UL] = regval;
24008e9c:	4927      	ldr	r1, [pc, #156]	@ (24008f3c <HAL_EXTI_ClearConfigLine+0x184>)
24008e9e:	693b      	ldr	r3, [r7, #16]
24008ea0:	089b      	lsrs	r3, r3, #2
24008ea2:	f003 0303 	and.w	r3, r3, #3
24008ea6:	3302      	adds	r3, #2
24008ea8:	68ba      	ldr	r2, [r7, #8]
24008eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  /* 4] Clear D3 Config lines */
  if ((hexti->Line & EXTI_TARGET_MASK) == EXTI_TARGET_MSK_ALL)
24008eae:	687b      	ldr	r3, [r7, #4]
24008eb0:	681b      	ldr	r3, [r3, #0]
24008eb2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
24008eb6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
24008eba:	d131      	bne.n	24008f20 <HAL_EXTI_ClearConfigLine+0x168>
  {
    regaddr = (__IO uint32_t *)(&EXTI->D3PMR1 + (EXTI_CONFIG_OFFSET * offset));
24008ebc:	697b      	ldr	r3, [r7, #20]
24008ebe:	015a      	lsls	r2, r3, #5
24008ec0:	4b1f      	ldr	r3, [pc, #124]	@ (24008f40 <HAL_EXTI_ClearConfigLine+0x188>)
24008ec2:	4413      	add	r3, r2
24008ec4:	61fb      	str	r3, [r7, #28]
    *regaddr = (*regaddr & ~maskline);
24008ec6:	69fb      	ldr	r3, [r7, #28]
24008ec8:	681a      	ldr	r2, [r3, #0]
24008eca:	68fb      	ldr	r3, [r7, #12]
24008ecc:	43db      	mvns	r3, r3
24008ece:	401a      	ands	r2, r3
24008ed0:	69fb      	ldr	r3, [r7, #28]
24008ed2:	601a      	str	r2, [r3, #0]

    if(linepos < 16UL)
24008ed4:	693b      	ldr	r3, [r7, #16]
24008ed6:	2b0f      	cmp	r3, #15
24008ed8:	d80a      	bhi.n	24008ef0 <HAL_EXTI_ClearConfigLine+0x138>
    {
      regaddr = (__IO uint32_t *)(&EXTI->D3PCR1L + (EXTI_CONFIG_OFFSET * offset));
24008eda:	697b      	ldr	r3, [r7, #20]
24008edc:	015a      	lsls	r2, r3, #5
24008ede:	4b19      	ldr	r3, [pc, #100]	@ (24008f44 <HAL_EXTI_ClearConfigLine+0x18c>)
24008ee0:	4413      	add	r3, r2
24008ee2:	61fb      	str	r3, [r7, #28]
      pcrlinepos = 1UL << linepos;
24008ee4:	2201      	movs	r2, #1
24008ee6:	693b      	ldr	r3, [r7, #16]
24008ee8:	fa02 f303 	lsl.w	r3, r2, r3
24008eec:	61bb      	str	r3, [r7, #24]
24008eee:	e00a      	b.n	24008f06 <HAL_EXTI_ClearConfigLine+0x14e>
    }
    else
    {
      regaddr = (__IO uint32_t *)(&EXTI->D3PCR1H + (EXTI_CONFIG_OFFSET * offset));
24008ef0:	697b      	ldr	r3, [r7, #20]
24008ef2:	015a      	lsls	r2, r3, #5
24008ef4:	4b14      	ldr	r3, [pc, #80]	@ (24008f48 <HAL_EXTI_ClearConfigLine+0x190>)
24008ef6:	4413      	add	r3, r2
24008ef8:	61fb      	str	r3, [r7, #28]
      pcrlinepos = 1UL << (linepos - 16UL);
24008efa:	693b      	ldr	r3, [r7, #16]
24008efc:	3b10      	subs	r3, #16
24008efe:	2201      	movs	r2, #1
24008f00:	fa02 f303 	lsl.w	r3, r2, r3
24008f04:	61bb      	str	r3, [r7, #24]
    }

    /*Clear D3 PendClear source */
    *regaddr &= (~(pcrlinepos * pcrlinepos * 3UL));
24008f06:	69fb      	ldr	r3, [r7, #28]
24008f08:	6819      	ldr	r1, [r3, #0]
24008f0a:	69bb      	ldr	r3, [r7, #24]
24008f0c:	fb03 f203 	mul.w	r2, r3, r3
24008f10:	4613      	mov	r3, r2
24008f12:	005b      	lsls	r3, r3, #1
24008f14:	4413      	add	r3, r2
24008f16:	43db      	mvns	r3, r3
24008f18:	ea01 0203 	and.w	r2, r1, r3
24008f1c:	69fb      	ldr	r3, [r7, #28]
24008f1e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
24008f20:	2300      	movs	r3, #0
}
24008f22:	4618      	mov	r0, r3
24008f24:	3724      	adds	r7, #36	@ 0x24
24008f26:	46bd      	mov	sp, r7
24008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
24008f2c:	4770      	bx	lr
24008f2e:	bf00      	nop
24008f30:	58000080 	.word	0x58000080
24008f34:	58000084 	.word	0x58000084
24008f38:	58000004 	.word	0x58000004
24008f3c:	58000400 	.word	0x58000400
24008f40:	5800000c 	.word	0x5800000c
24008f44:	58000010 	.word	0x58000010
24008f48:	58000014 	.word	0x58000014

24008f4c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
24008f4c:	b480      	push	{r7}
24008f4e:	b087      	sub	sp, #28
24008f50:	af00      	add	r7, sp, #0
24008f52:	60f8      	str	r0, [r7, #12]
24008f54:	460b      	mov	r3, r1
24008f56:	607a      	str	r2, [r7, #4]
24008f58:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
24008f5a:	2300      	movs	r3, #0
24008f5c:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
24008f5e:	68fb      	ldr	r3, [r7, #12]
24008f60:	2b00      	cmp	r3, #0
24008f62:	d101      	bne.n	24008f68 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
24008f64:	2301      	movs	r3, #1
24008f66:	e00a      	b.n	24008f7e <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
24008f68:	7afb      	ldrb	r3, [r7, #11]
24008f6a:	2b00      	cmp	r3, #0
24008f6c:	d103      	bne.n	24008f76 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
24008f6e:	68fb      	ldr	r3, [r7, #12]
24008f70:	687a      	ldr	r2, [r7, #4]
24008f72:	605a      	str	r2, [r3, #4]
      break;
24008f74:	e002      	b.n	24008f7c <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
24008f76:	2301      	movs	r3, #1
24008f78:	75fb      	strb	r3, [r7, #23]
      break;
24008f7a:	bf00      	nop
  }

  return status;
24008f7c:	7dfb      	ldrb	r3, [r7, #23]
}
24008f7e:	4618      	mov	r0, r3
24008f80:	371c      	adds	r7, #28
24008f82:	46bd      	mov	sp, r7
24008f84:	f85d 7b04 	ldr.w	r7, [sp], #4
24008f88:	4770      	bx	lr

24008f8a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
24008f8a:	b480      	push	{r7}
24008f8c:	b083      	sub	sp, #12
24008f8e:	af00      	add	r7, sp, #0
24008f90:	6078      	str	r0, [r7, #4]
24008f92:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
24008f94:	687b      	ldr	r3, [r7, #4]
24008f96:	2b00      	cmp	r3, #0
24008f98:	d101      	bne.n	24008f9e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
24008f9a:	2301      	movs	r3, #1
24008f9c:	e003      	b.n	24008fa6 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
24008f9e:	687b      	ldr	r3, [r7, #4]
24008fa0:	683a      	ldr	r2, [r7, #0]
24008fa2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
24008fa4:	2300      	movs	r3, #0
  }
}
24008fa6:	4618      	mov	r0, r3
24008fa8:	370c      	adds	r7, #12
24008faa:	46bd      	mov	sp, r7
24008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
24008fb0:	4770      	bx	lr
	...

24008fb4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
24008fb4:	b580      	push	{r7, lr}
24008fb6:	b086      	sub	sp, #24
24008fb8:	af00      	add	r7, sp, #0
24008fba:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
24008fbc:	687b      	ldr	r3, [r7, #4]
24008fbe:	681b      	ldr	r3, [r3, #0]
24008fc0:	0c1b      	lsrs	r3, r3, #16
24008fc2:	f003 0303 	and.w	r3, r3, #3
24008fc6:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
24008fc8:	687b      	ldr	r3, [r7, #4]
24008fca:	681b      	ldr	r3, [r3, #0]
24008fcc:	f003 031f 	and.w	r3, r3, #31
24008fd0:	2201      	movs	r2, #1
24008fd2:	fa02 f303 	lsl.w	r3, r2, r3
24008fd6:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
24008fd8:	697b      	ldr	r3, [r7, #20]
24008fda:	011a      	lsls	r2, r3, #4
24008fdc:	4b0c      	ldr	r3, [pc, #48]	@ (24009010 <HAL_EXTI_IRQHandler+0x5c>)
24008fde:	4413      	add	r3, r2
24008fe0:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
24008fe2:	68fb      	ldr	r3, [r7, #12]
24008fe4:	681b      	ldr	r3, [r3, #0]
24008fe6:	693a      	ldr	r2, [r7, #16]
24008fe8:	4013      	ands	r3, r2
24008fea:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
24008fec:	68bb      	ldr	r3, [r7, #8]
24008fee:	2b00      	cmp	r3, #0
24008ff0:	d009      	beq.n	24009006 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
24008ff2:	68fb      	ldr	r3, [r7, #12]
24008ff4:	693a      	ldr	r2, [r7, #16]
24008ff6:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
24008ff8:	687b      	ldr	r3, [r7, #4]
24008ffa:	685b      	ldr	r3, [r3, #4]
24008ffc:	2b00      	cmp	r3, #0
24008ffe:	d002      	beq.n	24009006 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
24009000:	687b      	ldr	r3, [r7, #4]
24009002:	685b      	ldr	r3, [r3, #4]
24009004:	4798      	blx	r3
    }
  }
}
24009006:	bf00      	nop
24009008:	3718      	adds	r7, #24
2400900a:	46bd      	mov	sp, r7
2400900c:	bd80      	pop	{r7, pc}
2400900e:	bf00      	nop
24009010:	58000088 	.word	0x58000088

24009014 <HAL_EXTI_GetPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval 1 if interrupt is pending else 0.
  */
uint32_t HAL_EXTI_GetPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
24009014:	b480      	push	{r7}
24009016:	b089      	sub	sp, #36	@ 0x24
24009018:	af00      	add	r7, sp, #0
2400901a:	6078      	str	r0, [r7, #4]
2400901c:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
2400901e:	687b      	ldr	r3, [r7, #4]
24009020:	681b      	ldr	r3, [r3, #0]
24009022:	0c1b      	lsrs	r3, r3, #16
24009024:	f003 0303 	and.w	r3, r3, #3
24009028:	61fb      	str	r3, [r7, #28]
  linepos = (hexti->Line & EXTI_PIN_MASK);
2400902a:	687b      	ldr	r3, [r7, #4]
2400902c:	681b      	ldr	r3, [r3, #0]
2400902e:	f003 031f 	and.w	r3, r3, #31
24009032:	61bb      	str	r3, [r7, #24]
  maskline = (1UL << linepos);
24009034:	2201      	movs	r2, #1
24009036:	69bb      	ldr	r3, [r7, #24]
24009038:	fa02 f303 	lsl.w	r3, r2, r3
2400903c:	617b      	str	r3, [r7, #20]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
2400903e:	69fb      	ldr	r3, [r7, #28]
24009040:	011a      	lsls	r2, r3, #4
24009042:	4b09      	ldr	r3, [pc, #36]	@ (24009068 <HAL_EXTI_GetPending+0x54>)
24009044:	4413      	add	r3, r2
24009046:	613b      	str	r3, [r7, #16]
#endif /* DUAL_CORE */

  /* return 1 if bit is set else 0 */
  regval = ((*regaddr & maskline) >> linepos);
24009048:	693b      	ldr	r3, [r7, #16]
2400904a:	681a      	ldr	r2, [r3, #0]
2400904c:	697b      	ldr	r3, [r7, #20]
2400904e:	401a      	ands	r2, r3
24009050:	69bb      	ldr	r3, [r7, #24]
24009052:	fa22 f303 	lsr.w	r3, r2, r3
24009056:	60fb      	str	r3, [r7, #12]
  return regval;
24009058:	68fb      	ldr	r3, [r7, #12]
}
2400905a:	4618      	mov	r0, r3
2400905c:	3724      	adds	r7, #36	@ 0x24
2400905e:	46bd      	mov	sp, r7
24009060:	f85d 7b04 	ldr.w	r7, [sp], #4
24009064:	4770      	bx	lr
24009066:	bf00      	nop
24009068:	58000088 	.word	0x58000088

2400906c <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
2400906c:	b480      	push	{r7}
2400906e:	b087      	sub	sp, #28
24009070:	af00      	add	r7, sp, #0
24009072:	6078      	str	r0, [r7, #4]
24009074:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
24009076:	687b      	ldr	r3, [r7, #4]
24009078:	681b      	ldr	r3, [r3, #0]
2400907a:	0c1b      	lsrs	r3, r3, #16
2400907c:	f003 0303 	and.w	r3, r3, #3
24009080:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
24009082:	687b      	ldr	r3, [r7, #4]
24009084:	681b      	ldr	r3, [r3, #0]
24009086:	f003 031f 	and.w	r3, r3, #31
2400908a:	2201      	movs	r2, #1
2400908c:	fa02 f303 	lsl.w	r3, r2, r3
24009090:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
24009092:	697b      	ldr	r3, [r7, #20]
24009094:	011a      	lsls	r2, r3, #4
24009096:	4b06      	ldr	r3, [pc, #24]	@ (240090b0 <HAL_EXTI_ClearPending+0x44>)
24009098:	4413      	add	r3, r2
2400909a:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Clear Pending bit */
  *regaddr =  maskline;
2400909c:	68fb      	ldr	r3, [r7, #12]
2400909e:	693a      	ldr	r2, [r7, #16]
240090a0:	601a      	str	r2, [r3, #0]
}
240090a2:	bf00      	nop
240090a4:	371c      	adds	r7, #28
240090a6:	46bd      	mov	sp, r7
240090a8:	f85d 7b04 	ldr.w	r7, [sp], #4
240090ac:	4770      	bx	lr
240090ae:	bf00      	nop
240090b0:	58000088 	.word	0x58000088

240090b4 <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
240090b4:	b480      	push	{r7}
240090b6:	b087      	sub	sp, #28
240090b8:	af00      	add	r7, sp, #0
240090ba:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
240090bc:	687b      	ldr	r3, [r7, #4]
240090be:	681b      	ldr	r3, [r3, #0]
240090c0:	0c1b      	lsrs	r3, r3, #16
240090c2:	f003 0303 	and.w	r3, r3, #3
240090c6:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
240090c8:	687b      	ldr	r3, [r7, #4]
240090ca:	681b      	ldr	r3, [r3, #0]
240090cc:	f003 031f 	and.w	r3, r3, #31
240090d0:	2201      	movs	r2, #1
240090d2:	fa02 f303 	lsl.w	r3, r2, r3
240090d6:	613b      	str	r3, [r7, #16]

  regaddr = (__IO uint32_t *)(&EXTI->SWIER1 + (EXTI_CONFIG_OFFSET * offset));
240090d8:	697b      	ldr	r3, [r7, #20]
240090da:	015a      	lsls	r2, r3, #5
240090dc:	4b05      	ldr	r3, [pc, #20]	@ (240090f4 <HAL_EXTI_GenerateSWI+0x40>)
240090de:	4413      	add	r3, r2
240090e0:	60fb      	str	r3, [r7, #12]
  *regaddr = maskline;
240090e2:	68fb      	ldr	r3, [r7, #12]
240090e4:	693a      	ldr	r2, [r7, #16]
240090e6:	601a      	str	r2, [r3, #0]
}
240090e8:	bf00      	nop
240090ea:	371c      	adds	r7, #28
240090ec:	46bd      	mov	sp, r7
240090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
240090f2:	4770      	bx	lr
240090f4:	58000008 	.word	0x58000008

240090f8 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
240090f8:	b580      	push	{r7, lr}
240090fa:	b08a      	sub	sp, #40	@ 0x28
240090fc:	af00      	add	r7, sp, #0
240090fe:	60f8      	str	r0, [r7, #12]
24009100:	60b9      	str	r1, [r7, #8]
24009102:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
24009104:	68bb      	ldr	r3, [r7, #8]
24009106:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
24009108:	687b      	ldr	r3, [r7, #4]
2400910a:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
2400910c:	2308      	movs	r3, #8
2400910e:	76fb      	strb	r3, [r7, #27]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
24009110:	4b2f      	ldr	r3, [pc, #188]	@ (240091d0 <HAL_FLASH_Program+0xd8>)
24009112:	7d1b      	ldrb	r3, [r3, #20]
24009114:	2b01      	cmp	r3, #1
24009116:	d101      	bne.n	2400911c <HAL_FLASH_Program+0x24>
24009118:	2302      	movs	r3, #2
2400911a:	e054      	b.n	240091c6 <HAL_FLASH_Program+0xce>
2400911c:	4b2c      	ldr	r3, [pc, #176]	@ (240091d0 <HAL_FLASH_Program+0xd8>)
2400911e:	2201      	movs	r2, #1
24009120:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
24009122:	68bb      	ldr	r3, [r7, #8]
24009124:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
24009128:	d316      	bcc.n	24009158 <HAL_FLASH_Program+0x60>
2400912a:	68bb      	ldr	r3, [r7, #8]
2400912c:	4a29      	ldr	r2, [pc, #164]	@ (240091d4 <HAL_FLASH_Program+0xdc>)
2400912e:	4293      	cmp	r3, r2
24009130:	d812      	bhi.n	24009158 <HAL_FLASH_Program+0x60>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
24009132:	2301      	movs	r3, #1
24009134:	617b      	str	r3, [r7, #20]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(TypeProgram);
24009136:	bf00      	nop
  {
    return HAL_ERROR;
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
24009138:	4b25      	ldr	r3, [pc, #148]	@ (240091d0 <HAL_FLASH_Program+0xd8>)
2400913a:	2200      	movs	r2, #0
2400913c:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
2400913e:	6979      	ldr	r1, [r7, #20]
24009140:	f24c 3050 	movw	r0, #50000	@ 0xc350
24009144:	f000 fa20 	bl	24009588 <FLASH_WaitForLastOperation>
24009148:	4603      	mov	r3, r0
2400914a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if(status == HAL_OK)
2400914e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
24009152:	2b00      	cmp	r3, #0
24009154:	d132      	bne.n	240091bc <HAL_FLASH_Program+0xc4>
24009156:	e001      	b.n	2400915c <HAL_FLASH_Program+0x64>
    return HAL_ERROR;
24009158:	2301      	movs	r3, #1
2400915a:	e034      	b.n	240091c6 <HAL_FLASH_Program+0xce>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
2400915c:	4b1e      	ldr	r3, [pc, #120]	@ (240091d8 <HAL_FLASH_Program+0xe0>)
2400915e:	68db      	ldr	r3, [r3, #12]
24009160:	4a1d      	ldr	r2, [pc, #116]	@ (240091d8 <HAL_FLASH_Program+0xe0>)
24009162:	f043 0302 	orr.w	r3, r3, #2
24009166:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("isb 0xF":::"memory");
24009168:	f3bf 8f6f 	isb	sy
}
2400916c:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
2400916e:	f3bf 8f4f 	dsb	sy
}
24009172:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
24009174:	69fb      	ldr	r3, [r7, #28]
24009176:	681a      	ldr	r2, [r3, #0]
24009178:	6a3b      	ldr	r3, [r7, #32]
2400917a:	601a      	str	r2, [r3, #0]
        dest_addr++;
2400917c:	6a3b      	ldr	r3, [r7, #32]
2400917e:	3304      	adds	r3, #4
24009180:	623b      	str	r3, [r7, #32]
        src_addr++;
24009182:	69fb      	ldr	r3, [r7, #28]
24009184:	3304      	adds	r3, #4
24009186:	61fb      	str	r3, [r7, #28]
        row_index--;
24009188:	7efb      	ldrb	r3, [r7, #27]
2400918a:	3b01      	subs	r3, #1
2400918c:	76fb      	strb	r3, [r7, #27]
     } while (row_index != 0U);
2400918e:	7efb      	ldrb	r3, [r7, #27]
24009190:	2b00      	cmp	r3, #0
24009192:	d1ef      	bne.n	24009174 <HAL_FLASH_Program+0x7c>
  __ASM volatile ("isb 0xF":::"memory");
24009194:	f3bf 8f6f 	isb	sy
}
24009198:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
2400919a:	f3bf 8f4f 	dsb	sy
}
2400919e:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
240091a0:	6979      	ldr	r1, [r7, #20]
240091a2:	f24c 3050 	movw	r0, #50000	@ 0xc350
240091a6:	f000 f9ef 	bl	24009588 <FLASH_WaitForLastOperation>
240091aa:	4603      	mov	r3, r0
240091ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* If the program operation is completed, disable the PG */
      CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
240091b0:	4b09      	ldr	r3, [pc, #36]	@ (240091d8 <HAL_FLASH_Program+0xe0>)
240091b2:	68db      	ldr	r3, [r3, #12]
240091b4:	4a08      	ldr	r2, [pc, #32]	@ (240091d8 <HAL_FLASH_Program+0xe0>)
240091b6:	f023 0302 	bic.w	r3, r3, #2
240091ba:	60d3      	str	r3, [r2, #12]
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
240091bc:	4b04      	ldr	r3, [pc, #16]	@ (240091d0 <HAL_FLASH_Program+0xd8>)
240091be:	2200      	movs	r2, #0
240091c0:	751a      	strb	r2, [r3, #20]

  return status;
240091c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
240091c6:	4618      	mov	r0, r3
240091c8:	3728      	adds	r7, #40	@ 0x28
240091ca:	46bd      	mov	sp, r7
240091cc:	bd80      	pop	{r7, pc}
240091ce:	bf00      	nop
240091d0:	2400053c 	.word	0x2400053c
240091d4:	0801ffff 	.word	0x0801ffff
240091d8:	52002000 	.word	0x52002000

240091dc <HAL_FLASH_Program_IT>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
240091dc:	b580      	push	{r7, lr}
240091de:	b08a      	sub	sp, #40	@ 0x28
240091e0:	af00      	add	r7, sp, #0
240091e2:	60f8      	str	r0, [r7, #12]
240091e4:	60b9      	str	r1, [r7, #8]
240091e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t*)FlashAddress;
240091e8:	68bb      	ldr	r3, [r7, #8]
240091ea:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
240091ec:	687b      	ldr	r3, [r7, #4]
240091ee:	623b      	str	r3, [r7, #32]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
240091f0:	2308      	movs	r3, #8
240091f2:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
240091f4:	4b2d      	ldr	r3, [pc, #180]	@ (240092ac <HAL_FLASH_Program_IT+0xd0>)
240091f6:	7d1b      	ldrb	r3, [r3, #20]
240091f8:	2b01      	cmp	r3, #1
240091fa:	d101      	bne.n	24009200 <HAL_FLASH_Program_IT+0x24>
240091fc:	2302      	movs	r3, #2
240091fe:	e050      	b.n	240092a2 <HAL_FLASH_Program_IT+0xc6>
24009200:	4b2a      	ldr	r3, [pc, #168]	@ (240092ac <HAL_FLASH_Program_IT+0xd0>)
24009202:	2201      	movs	r2, #1
24009204:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
24009206:	4b29      	ldr	r3, [pc, #164]	@ (240092ac <HAL_FLASH_Program_IT+0xd0>)
24009208:	2200      	movs	r2, #0
2400920a:	619a      	str	r2, [r3, #24]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
2400920c:	68bb      	ldr	r3, [r7, #8]
2400920e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
24009212:	d311      	bcc.n	24009238 <HAL_FLASH_Program_IT+0x5c>
24009214:	68bb      	ldr	r3, [r7, #8]
24009216:	4a26      	ldr	r2, [pc, #152]	@ (240092b0 <HAL_FLASH_Program_IT+0xd4>)
24009218:	4293      	cmp	r3, r2
2400921a:	d80d      	bhi.n	24009238 <HAL_FLASH_Program_IT+0x5c>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
2400921c:	2301      	movs	r3, #1
2400921e:	61bb      	str	r3, [r7, #24]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(TypeProgram);
24009220:	bf00      	nop
  {
    return HAL_ERROR;
  }

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
24009222:	69b9      	ldr	r1, [r7, #24]
24009224:	f24c 3050 	movw	r0, #50000	@ 0xc350
24009228:	f000 f9ae 	bl	24009588 <FLASH_WaitForLastOperation>
2400922c:	4603      	mov	r3, r0
2400922e:	75fb      	strb	r3, [r7, #23]

  if (status != HAL_OK)
24009230:	7dfb      	ldrb	r3, [r7, #23]
24009232:	2b00      	cmp	r3, #0
24009234:	d006      	beq.n	24009244 <HAL_FLASH_Program_IT+0x68>
24009236:	e001      	b.n	2400923c <HAL_FLASH_Program_IT+0x60>
    return HAL_ERROR;
24009238:	2301      	movs	r3, #1
2400923a:	e032      	b.n	240092a2 <HAL_FLASH_Program_IT+0xc6>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
2400923c:	4b1b      	ldr	r3, [pc, #108]	@ (240092ac <HAL_FLASH_Program_IT+0xd0>)
2400923e:	2200      	movs	r2, #0
24009240:	751a      	strb	r2, [r3, #20]
24009242:	e02d      	b.n	240092a0 <HAL_FLASH_Program_IT+0xc4>
  }
  else
  {
    pFlash.Address = FlashAddress;
24009244:	4a19      	ldr	r2, [pc, #100]	@ (240092ac <HAL_FLASH_Program_IT+0xd0>)
24009246:	68bb      	ldr	r3, [r7, #8]
24009248:	6113      	str	r3, [r2, #16]
                                  FLASH_IT_STRBERR_BANK2 | FLASH_IT_INCERR_BANK2);
#endif /* FLASH_CR_OPERRIE */
    }
#else /* Single Bank */
    /* Set internal variables used by the IRQ handler */
    pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM_BANK1;
2400924a:	4b18      	ldr	r3, [pc, #96]	@ (240092ac <HAL_FLASH_Program_IT+0xd0>)
2400924c:	2203      	movs	r2, #3
2400924e:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR1, FLASH_CR_PG);
24009250:	4b18      	ldr	r3, [pc, #96]	@ (240092b4 <HAL_FLASH_Program_IT+0xd8>)
24009252:	68db      	ldr	r3, [r3, #12]
24009254:	4a17      	ldr	r2, [pc, #92]	@ (240092b4 <HAL_FLASH_Program_IT+0xd8>)
24009256:	f043 0302 	orr.w	r3, r3, #2
2400925a:	60d3      	str	r3, [r2, #12]
    }

      /* Enable End of Operation and Error interrupts for Bank 1 */
#if defined (FLASH_CR_OPERRIE)
      __HAL_FLASH_ENABLE_IT_BANK1(FLASH_IT_EOP_BANK1     | FLASH_IT_WRPERR_BANK1 | FLASH_IT_PGSERR_BANK1 | \
2400925c:	4b15      	ldr	r3, [pc, #84]	@ (240092b4 <HAL_FLASH_Program_IT+0xd8>)
2400925e:	68db      	ldr	r3, [r3, #12]
24009260:	4a14      	ldr	r2, [pc, #80]	@ (240092b4 <HAL_FLASH_Program_IT+0xd8>)
24009262:	f443 03de 	orr.w	r3, r3, #7274496	@ 0x6f0000
24009266:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("isb 0xF":::"memory");
24009268:	f3bf 8f6f 	isb	sy
}
2400926c:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
2400926e:	f3bf 8f4f 	dsb	sy
}
24009272:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
24009274:	6a3b      	ldr	r3, [r7, #32]
24009276:	681a      	ldr	r2, [r3, #0]
24009278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2400927a:	601a      	str	r2, [r3, #0]
        dest_addr++;
2400927c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2400927e:	3304      	adds	r3, #4
24009280:	627b      	str	r3, [r7, #36]	@ 0x24
        src_addr++;
24009282:	6a3b      	ldr	r3, [r7, #32]
24009284:	3304      	adds	r3, #4
24009286:	623b      	str	r3, [r7, #32]
        row_index--;
24009288:	7ffb      	ldrb	r3, [r7, #31]
2400928a:	3b01      	subs	r3, #1
2400928c:	77fb      	strb	r3, [r7, #31]
      } while (row_index != 0U);
2400928e:	7ffb      	ldrb	r3, [r7, #31]
24009290:	2b00      	cmp	r3, #0
24009292:	d1ef      	bne.n	24009274 <HAL_FLASH_Program_IT+0x98>
  __ASM volatile ("isb 0xF":::"memory");
24009294:	f3bf 8f6f 	isb	sy
}
24009298:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
2400929a:	f3bf 8f4f 	dsb	sy
}
2400929e:	bf00      	nop

    __ISB();
    __DSB();
  }

  return status;
240092a0:	7dfb      	ldrb	r3, [r7, #23]
}
240092a2:	4618      	mov	r0, r3
240092a4:	3728      	adds	r7, #40	@ 0x28
240092a6:	46bd      	mov	sp, r7
240092a8:	bd80      	pop	{r7, pc}
240092aa:	bf00      	nop
240092ac:	2400053c 	.word	0x2400053c
240092b0:	0801ffff 	.word	0x0801ffff
240092b4:	52002000 	.word	0x52002000

240092b8 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
240092b8:	b580      	push	{r7, lr}
240092ba:	b084      	sub	sp, #16
240092bc:	af00      	add	r7, sp, #0
  uint32_t temp;
  uint32_t errorflag;
  FLASH_ProcedureTypeDef procedure;

  /* Check FLASH Bank1 End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG_BANK1(FLASH_SR_EOP) != RESET)
240092be:	4b53      	ldr	r3, [pc, #332]	@ (2400940c <HAL_FLASH_IRQHandler+0x154>)
240092c0:	691b      	ldr	r3, [r3, #16]
240092c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
240092c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
240092ca:	d15c      	bne.n	24009386 <HAL_FLASH_IRQHandler+0xce>
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE_BANK1)
240092cc:	4b50      	ldr	r3, [pc, #320]	@ (24009410 <HAL_FLASH_IRQHandler+0x158>)
240092ce:	781b      	ldrb	r3, [r3, #0]
240092d0:	b2db      	uxtb	r3, r3
240092d2:	2b01      	cmp	r3, #1
240092d4:	d132      	bne.n	2400933c <HAL_FLASH_IRQHandler+0x84>
    {
      /* Nb of sector to erased can be decreased */
      pFlash.NbSectorsToErase--;
240092d6:	4b4e      	ldr	r3, [pc, #312]	@ (24009410 <HAL_FLASH_IRQHandler+0x158>)
240092d8:	685b      	ldr	r3, [r3, #4]
240092da:	3b01      	subs	r3, #1
240092dc:	4a4c      	ldr	r2, [pc, #304]	@ (24009410 <HAL_FLASH_IRQHandler+0x158>)
240092de:	6053      	str	r3, [r2, #4]

      /* Check if there are still sectors to erase */
      if(pFlash.NbSectorsToErase != 0U)
240092e0:	4b4b      	ldr	r3, [pc, #300]	@ (24009410 <HAL_FLASH_IRQHandler+0x158>)
240092e2:	685b      	ldr	r3, [r3, #4]
240092e4:	2b00      	cmp	r3, #0
240092e6:	d018      	beq.n	2400931a <HAL_FLASH_IRQHandler+0x62>
      {
        /* Indicate user which sector has been erased */
        HAL_FLASH_EndOfOperationCallback(pFlash.Sector);
240092e8:	4b49      	ldr	r3, [pc, #292]	@ (24009410 <HAL_FLASH_IRQHandler+0x158>)
240092ea:	68db      	ldr	r3, [r3, #12]
240092ec:	4618      	mov	r0, r3
240092ee:	f000 f891 	bl	24009414 <HAL_FLASH_EndOfOperationCallback>

        /* Clear bank 1 End of Operation pending bit */
        __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
240092f2:	4b46      	ldr	r3, [pc, #280]	@ (2400940c <HAL_FLASH_IRQHandler+0x154>)
240092f4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
240092f8:	615a      	str	r2, [r3, #20]

        /* Increment sector number */
        pFlash.Sector++;
240092fa:	4b45      	ldr	r3, [pc, #276]	@ (24009410 <HAL_FLASH_IRQHandler+0x158>)
240092fc:	68db      	ldr	r3, [r3, #12]
240092fe:	3301      	adds	r3, #1
24009300:	4a43      	ldr	r2, [pc, #268]	@ (24009410 <HAL_FLASH_IRQHandler+0x158>)
24009302:	60d3      	str	r3, [r2, #12]
        temp = pFlash.Sector;
24009304:	4b42      	ldr	r3, [pc, #264]	@ (24009410 <HAL_FLASH_IRQHandler+0x158>)
24009306:	68db      	ldr	r3, [r3, #12]
24009308:	60fb      	str	r3, [r7, #12]
        FLASH_Erase_Sector(temp, FLASH_BANK_1, pFlash.VoltageForErase);
2400930a:	4b41      	ldr	r3, [pc, #260]	@ (24009410 <HAL_FLASH_IRQHandler+0x158>)
2400930c:	689b      	ldr	r3, [r3, #8]
2400930e:	461a      	mov	r2, r3
24009310:	2101      	movs	r1, #1
24009312:	68f8      	ldr	r0, [r7, #12]
24009314:	f000 fd04 	bl	24009d20 <FLASH_Erase_Sector>
24009318:	e035      	b.n	24009386 <HAL_FLASH_IRQHandler+0xce>
      }
      else
      {
        /* No more sectors to Erase, user callback can be called */
        /* Reset Sector and stop Erase sectors procedure */
        pFlash.Sector = 0xFFFFFFFFU;
2400931a:	4b3d      	ldr	r3, [pc, #244]	@ (24009410 <HAL_FLASH_IRQHandler+0x158>)
2400931c:	f04f 32ff 	mov.w	r2, #4294967295
24009320:	60da      	str	r2, [r3, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
24009322:	4b3b      	ldr	r3, [pc, #236]	@ (24009410 <HAL_FLASH_IRQHandler+0x158>)
24009324:	2200      	movs	r2, #0
24009326:	701a      	strb	r2, [r3, #0]

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Sector);
24009328:	4b39      	ldr	r3, [pc, #228]	@ (24009410 <HAL_FLASH_IRQHandler+0x158>)
2400932a:	68db      	ldr	r3, [r3, #12]
2400932c:	4618      	mov	r0, r3
2400932e:	f000 f871 	bl	24009414 <HAL_FLASH_EndOfOperationCallback>

        /* Clear FLASH End of Operation pending bit */
        __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
24009332:	4b36      	ldr	r3, [pc, #216]	@ (2400940c <HAL_FLASH_IRQHandler+0x154>)
24009334:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
24009338:	615a      	str	r2, [r3, #20]
2400933a:	e024      	b.n	24009386 <HAL_FLASH_IRQHandler+0xce>
      }
    }
    else
    {
      procedure = pFlash.ProcedureOnGoing;
2400933c:	4b34      	ldr	r3, [pc, #208]	@ (24009410 <HAL_FLASH_IRQHandler+0x158>)
2400933e:	781b      	ldrb	r3, [r3, #0]
24009340:	72fb      	strb	r3, [r7, #11]

      if((procedure == FLASH_PROC_MASSERASE_BANK1) || (procedure == FLASH_PROC_ALLBANK_MASSERASE))
24009342:	7afb      	ldrb	r3, [r7, #11]
24009344:	2b02      	cmp	r3, #2
24009346:	d002      	beq.n	2400934e <HAL_FLASH_IRQHandler+0x96>
24009348:	7afb      	ldrb	r3, [r7, #11]
2400934a:	2b07      	cmp	r3, #7
2400934c:	d103      	bne.n	24009356 <HAL_FLASH_IRQHandler+0x9e>
      {
        /* MassErase ended. Return the selected bank */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(FLASH_BANK_1);
2400934e:	2001      	movs	r0, #1
24009350:	f000 f860 	bl	24009414 <HAL_FLASH_EndOfOperationCallback>
24009354:	e007      	b.n	24009366 <HAL_FLASH_IRQHandler+0xae>
      }
      else if(procedure == FLASH_PROC_PROGRAM_BANK1)
24009356:	7afb      	ldrb	r3, [r7, #11]
24009358:	2b03      	cmp	r3, #3
2400935a:	d104      	bne.n	24009366 <HAL_FLASH_IRQHandler+0xae>
      {
        /* Program ended. Return the selected address */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
2400935c:	4b2c      	ldr	r3, [pc, #176]	@ (24009410 <HAL_FLASH_IRQHandler+0x158>)
2400935e:	691b      	ldr	r3, [r3, #16]
24009360:	4618      	mov	r0, r3
24009362:	f000 f857 	bl	24009414 <HAL_FLASH_EndOfOperationCallback>
      else
      {
        /* Nothing to do */
      }

      if((procedure != FLASH_PROC_SECTERASE_BANK2) && \
24009366:	7afb      	ldrb	r3, [r7, #11]
24009368:	2b04      	cmp	r3, #4
2400936a:	d00c      	beq.n	24009386 <HAL_FLASH_IRQHandler+0xce>
2400936c:	7afb      	ldrb	r3, [r7, #11]
2400936e:	2b05      	cmp	r3, #5
24009370:	d009      	beq.n	24009386 <HAL_FLASH_IRQHandler+0xce>
         (procedure != FLASH_PROC_MASSERASE_BANK2) && \
24009372:	7afb      	ldrb	r3, [r7, #11]
24009374:	2b06      	cmp	r3, #6
24009376:	d006      	beq.n	24009386 <HAL_FLASH_IRQHandler+0xce>
         (procedure != FLASH_PROC_PROGRAM_BANK2))
      {
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
24009378:	4b25      	ldr	r3, [pc, #148]	@ (24009410 <HAL_FLASH_IRQHandler+0x158>)
2400937a:	2200      	movs	r2, #0
2400937c:	701a      	strb	r2, [r3, #0]
        /* Clear FLASH End of Operation pending bit */
        __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
2400937e:	4b23      	ldr	r3, [pc, #140]	@ (2400940c <HAL_FLASH_IRQHandler+0x154>)
24009380:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
24009384:	615a      	str	r2, [r3, #20]
  }
#endif /* DUAL_BANK */

  /* Check FLASH Bank1 operation error flags */
#if defined (FLASH_SR_OPERR)
  errorflag = FLASH->SR1 & (FLASH_FLAG_WRPERR_BANK1 | FLASH_FLAG_PGSERR_BANK1 | FLASH_FLAG_STRBERR_BANK1 | \
24009386:	4b21      	ldr	r3, [pc, #132]	@ (2400940c <HAL_FLASH_IRQHandler+0x154>)
24009388:	691b      	ldr	r3, [r3, #16]
2400938a:	f403 03dc 	and.w	r3, r3, #7208960	@ 0x6e0000
2400938e:	607b      	str	r3, [r7, #4]
#else
  errorflag = FLASH->SR1 & (FLASH_FLAG_WRPERR_BANK1 | FLASH_FLAG_PGSERR_BANK1 | FLASH_FLAG_STRBERR_BANK1 | \
                            FLASH_FLAG_INCERR_BANK1);
#endif /* FLASH_SR_OPERR */

  if(errorflag != 0U)
24009390:	687b      	ldr	r3, [r7, #4]
24009392:	2b00      	cmp	r3, #0
24009394:	d028      	beq.n	240093e8 <HAL_FLASH_IRQHandler+0x130>
  {
    /* Save the error code */
    pFlash.ErrorCode |= errorflag;
24009396:	4b1e      	ldr	r3, [pc, #120]	@ (24009410 <HAL_FLASH_IRQHandler+0x158>)
24009398:	699a      	ldr	r2, [r3, #24]
2400939a:	687b      	ldr	r3, [r7, #4]
2400939c:	4313      	orrs	r3, r2
2400939e:	4a1c      	ldr	r2, [pc, #112]	@ (24009410 <HAL_FLASH_IRQHandler+0x158>)
240093a0:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG_BANK1(errorflag);
240093a2:	4a1a      	ldr	r2, [pc, #104]	@ (2400940c <HAL_FLASH_IRQHandler+0x154>)
240093a4:	687b      	ldr	r3, [r7, #4]
240093a6:	6153      	str	r3, [r2, #20]

    procedure = pFlash.ProcedureOnGoing;
240093a8:	4b19      	ldr	r3, [pc, #100]	@ (24009410 <HAL_FLASH_IRQHandler+0x158>)
240093aa:	781b      	ldrb	r3, [r3, #0]
240093ac:	72fb      	strb	r3, [r7, #11]

    if(procedure == FLASH_PROC_SECTERASE_BANK1)
240093ae:	7afb      	ldrb	r3, [r7, #11]
240093b0:	2b01      	cmp	r3, #1
240093b2:	d107      	bne.n	240093c4 <HAL_FLASH_IRQHandler+0x10c>
    {
      /* Return the faulty sector */
      temp = pFlash.Sector;
240093b4:	4b16      	ldr	r3, [pc, #88]	@ (24009410 <HAL_FLASH_IRQHandler+0x158>)
240093b6:	68db      	ldr	r3, [r3, #12]
240093b8:	60fb      	str	r3, [r7, #12]
      pFlash.Sector = 0xFFFFFFFFU;
240093ba:	4b15      	ldr	r3, [pc, #84]	@ (24009410 <HAL_FLASH_IRQHandler+0x158>)
240093bc:	f04f 32ff 	mov.w	r2, #4294967295
240093c0:	60da      	str	r2, [r3, #12]
240093c2:	e00b      	b.n	240093dc <HAL_FLASH_IRQHandler+0x124>
    }
    else if((procedure == FLASH_PROC_MASSERASE_BANK1) || (procedure == FLASH_PROC_ALLBANK_MASSERASE))
240093c4:	7afb      	ldrb	r3, [r7, #11]
240093c6:	2b02      	cmp	r3, #2
240093c8:	d002      	beq.n	240093d0 <HAL_FLASH_IRQHandler+0x118>
240093ca:	7afb      	ldrb	r3, [r7, #11]
240093cc:	2b07      	cmp	r3, #7
240093ce:	d102      	bne.n	240093d6 <HAL_FLASH_IRQHandler+0x11e>
    {
      /* Return the faulty bank */
      temp = FLASH_BANK_1;
240093d0:	2301      	movs	r3, #1
240093d2:	60fb      	str	r3, [r7, #12]
240093d4:	e002      	b.n	240093dc <HAL_FLASH_IRQHandler+0x124>
    }
    else
    {
      /* Return the faulty address */
      temp = pFlash.Address;
240093d6:	4b0e      	ldr	r3, [pc, #56]	@ (24009410 <HAL_FLASH_IRQHandler+0x158>)
240093d8:	691b      	ldr	r3, [r3, #16]
240093da:	60fb      	str	r3, [r7, #12]
    }

    /* Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
240093dc:	4b0c      	ldr	r3, [pc, #48]	@ (24009410 <HAL_FLASH_IRQHandler+0x158>)
240093de:	2200      	movs	r2, #0
240093e0:	701a      	strb	r2, [r3, #0]

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(temp);
240093e2:	68f8      	ldr	r0, [r7, #12]
240093e4:	f000 f820 	bl	24009428 <HAL_FLASH_OperationErrorCallback>
  }

#endif /* USE_FLASH_ECC */
#endif /* DUAL_BANK */

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
240093e8:	4b09      	ldr	r3, [pc, #36]	@ (24009410 <HAL_FLASH_IRQHandler+0x158>)
240093ea:	781b      	ldrb	r3, [r3, #0]
240093ec:	b2db      	uxtb	r3, r3
240093ee:	2b00      	cmp	r3, #0
240093f0:	d108      	bne.n	24009404 <HAL_FLASH_IRQHandler+0x14c>
  {
#if defined (FLASH_CR_OPERRIE)
    /* Disable Bank1 Operation and Error source interrupt */
    __HAL_FLASH_DISABLE_IT_BANK1(FLASH_IT_EOP_BANK1    | FLASH_IT_WRPERR_BANK1 | FLASH_IT_PGSERR_BANK1 | \
240093f2:	4b06      	ldr	r3, [pc, #24]	@ (2400940c <HAL_FLASH_IRQHandler+0x154>)
240093f4:	68db      	ldr	r3, [r3, #12]
240093f6:	4a05      	ldr	r2, [pc, #20]	@ (2400940c <HAL_FLASH_IRQHandler+0x154>)
240093f8:	f423 03de 	bic.w	r3, r3, #7274496	@ 0x6f0000
240093fc:	60d3      	str	r3, [r2, #12]
                                 FLASH_IT_STRBERR_BANK2 | FLASH_IT_INCERR_BANK2);
#endif /* DUAL_BANK */
#endif /* FLASH_CR_OPERRIE */

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
240093fe:	4b04      	ldr	r3, [pc, #16]	@ (24009410 <HAL_FLASH_IRQHandler+0x158>)
24009400:	2200      	movs	r2, #0
24009402:	751a      	strb	r2, [r3, #20]
  }
}
24009404:	bf00      	nop
24009406:	3710      	adds	r7, #16
24009408:	46bd      	mov	sp, r7
2400940a:	bd80      	pop	{r7, pc}
2400940c:	52002000 	.word	0x52002000
24009410:	2400053c 	.word	0x2400053c

24009414 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
24009414:	b480      	push	{r7}
24009416:	b083      	sub	sp, #12
24009418:	af00      	add	r7, sp, #0
2400941a:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
2400941c:	bf00      	nop
2400941e:	370c      	adds	r7, #12
24009420:	46bd      	mov	sp, r7
24009422:	f85d 7b04 	ldr.w	r7, [sp], #4
24009426:	4770      	bx	lr

24009428 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
24009428:	b480      	push	{r7}
2400942a:	b083      	sub	sp, #12
2400942c:	af00      	add	r7, sp, #0
2400942e:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
24009430:	bf00      	nop
24009432:	370c      	adds	r7, #12
24009434:	46bd      	mov	sp, r7
24009436:	f85d 7b04 	ldr.w	r7, [sp], #4
2400943a:	4770      	bx	lr

2400943c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
2400943c:	b480      	push	{r7}
2400943e:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
24009440:	4b0c      	ldr	r3, [pc, #48]	@ (24009474 <HAL_FLASH_Unlock+0x38>)
24009442:	68db      	ldr	r3, [r3, #12]
24009444:	f003 0301 	and.w	r3, r3, #1
24009448:	2b00      	cmp	r3, #0
2400944a:	d00d      	beq.n	24009468 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
2400944c:	4b09      	ldr	r3, [pc, #36]	@ (24009474 <HAL_FLASH_Unlock+0x38>)
2400944e:	4a0a      	ldr	r2, [pc, #40]	@ (24009478 <HAL_FLASH_Unlock+0x3c>)
24009450:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
24009452:	4b08      	ldr	r3, [pc, #32]	@ (24009474 <HAL_FLASH_Unlock+0x38>)
24009454:	4a09      	ldr	r2, [pc, #36]	@ (2400947c <HAL_FLASH_Unlock+0x40>)
24009456:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
24009458:	4b06      	ldr	r3, [pc, #24]	@ (24009474 <HAL_FLASH_Unlock+0x38>)
2400945a:	68db      	ldr	r3, [r3, #12]
2400945c:	f003 0301 	and.w	r3, r3, #1
24009460:	2b00      	cmp	r3, #0
24009462:	d001      	beq.n	24009468 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
24009464:	2301      	movs	r3, #1
24009466:	e000      	b.n	2400946a <HAL_FLASH_Unlock+0x2e>
      return HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
24009468:	2300      	movs	r3, #0
}
2400946a:	4618      	mov	r0, r3
2400946c:	46bd      	mov	sp, r7
2400946e:	f85d 7b04 	ldr.w	r7, [sp], #4
24009472:	4770      	bx	lr
24009474:	52002000 	.word	0x52002000
24009478:	45670123 	.word	0x45670123
2400947c:	cdef89ab 	.word	0xcdef89ab

24009480 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
24009480:	b480      	push	{r7}
24009482:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
24009484:	4b09      	ldr	r3, [pc, #36]	@ (240094ac <HAL_FLASH_Lock+0x2c>)
24009486:	68db      	ldr	r3, [r3, #12]
24009488:	4a08      	ldr	r2, [pc, #32]	@ (240094ac <HAL_FLASH_Lock+0x2c>)
2400948a:	f043 0301 	orr.w	r3, r3, #1
2400948e:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
24009490:	4b06      	ldr	r3, [pc, #24]	@ (240094ac <HAL_FLASH_Lock+0x2c>)
24009492:	68db      	ldr	r3, [r3, #12]
24009494:	f003 0301 	and.w	r3, r3, #1
24009498:	2b00      	cmp	r3, #0
2400949a:	d101      	bne.n	240094a0 <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
2400949c:	2301      	movs	r3, #1
2400949e:	e000      	b.n	240094a2 <HAL_FLASH_Lock+0x22>
  {
    return HAL_ERROR;
  }
#endif /* DUAL_BANK */

  return HAL_OK;
240094a0:	2300      	movs	r3, #0
}
240094a2:	4618      	mov	r0, r3
240094a4:	46bd      	mov	sp, r7
240094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
240094aa:	4770      	bx	lr
240094ac:	52002000 	.word	0x52002000

240094b0 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
240094b0:	b480      	push	{r7}
240094b2:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK) != 0U)
240094b4:	4b0c      	ldr	r3, [pc, #48]	@ (240094e8 <HAL_FLASH_OB_Unlock+0x38>)
240094b6:	699b      	ldr	r3, [r3, #24]
240094b8:	f003 0301 	and.w	r3, r3, #1
240094bc:	2b00      	cmp	r3, #0
240094be:	d00d      	beq.n	240094dc <HAL_FLASH_OB_Unlock+0x2c>
  {
    /* Authorizes the Option Byte registers programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPT_KEY1);
240094c0:	4b09      	ldr	r3, [pc, #36]	@ (240094e8 <HAL_FLASH_OB_Unlock+0x38>)
240094c2:	4a0a      	ldr	r2, [pc, #40]	@ (240094ec <HAL_FLASH_OB_Unlock+0x3c>)
240094c4:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPT_KEY2);
240094c6:	4b08      	ldr	r3, [pc, #32]	@ (240094e8 <HAL_FLASH_OB_Unlock+0x38>)
240094c8:	4a09      	ldr	r2, [pc, #36]	@ (240094f0 <HAL_FLASH_OB_Unlock+0x40>)
240094ca:	609a      	str	r2, [r3, #8]

    /* Verify that the Option Bytes are unlocked */
    if (READ_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK) != 0U)
240094cc:	4b06      	ldr	r3, [pc, #24]	@ (240094e8 <HAL_FLASH_OB_Unlock+0x38>)
240094ce:	699b      	ldr	r3, [r3, #24]
240094d0:	f003 0301 	and.w	r3, r3, #1
240094d4:	2b00      	cmp	r3, #0
240094d6:	d001      	beq.n	240094dc <HAL_FLASH_OB_Unlock+0x2c>
    {
      return HAL_ERROR;
240094d8:	2301      	movs	r3, #1
240094da:	e000      	b.n	240094de <HAL_FLASH_OB_Unlock+0x2e>
    }
  }

  return HAL_OK;
240094dc:	2300      	movs	r3, #0
}
240094de:	4618      	mov	r0, r3
240094e0:	46bd      	mov	sp, r7
240094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
240094e6:	4770      	bx	lr
240094e8:	52002000 	.word	0x52002000
240094ec:	08192a3b 	.word	0x08192a3b
240094f0:	4c5d6e7f 	.word	0x4c5d6e7f

240094f4 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
240094f4:	b480      	push	{r7}
240094f6:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  SET_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK);
240094f8:	4b09      	ldr	r3, [pc, #36]	@ (24009520 <HAL_FLASH_OB_Lock+0x2c>)
240094fa:	699b      	ldr	r3, [r3, #24]
240094fc:	4a08      	ldr	r2, [pc, #32]	@ (24009520 <HAL_FLASH_OB_Lock+0x2c>)
240094fe:	f043 0301 	orr.w	r3, r3, #1
24009502:	6193      	str	r3, [r2, #24]

  /* Verify that the Option Bytes are locked */
  if (READ_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTLOCK) == 0U)
24009504:	4b06      	ldr	r3, [pc, #24]	@ (24009520 <HAL_FLASH_OB_Lock+0x2c>)
24009506:	699b      	ldr	r3, [r3, #24]
24009508:	f003 0301 	and.w	r3, r3, #1
2400950c:	2b00      	cmp	r3, #0
2400950e:	d101      	bne.n	24009514 <HAL_FLASH_OB_Lock+0x20>
  {
    return HAL_ERROR;
24009510:	2301      	movs	r3, #1
24009512:	e000      	b.n	24009516 <HAL_FLASH_OB_Lock+0x22>
  }

  return HAL_OK;
24009514:	2300      	movs	r3, #0
}
24009516:	4618      	mov	r0, r3
24009518:	46bd      	mov	sp, r7
2400951a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400951e:	4770      	bx	lr
24009520:	52002000 	.word	0x52002000

24009524 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option bytes loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
24009524:	b580      	push	{r7, lr}
24009526:	b082      	sub	sp, #8
24009528:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;

  /* Wait for CRC computation to be completed */
  if (FLASH_CRC_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
2400952a:	2101      	movs	r1, #1
2400952c:	f24c 3050 	movw	r0, #50000	@ 0xc350
24009530:	f000 f8bc 	bl	240096ac <FLASH_CRC_WaitForLastOperation>
24009534:	4603      	mov	r3, r0
24009536:	2b00      	cmp	r3, #0
24009538:	d002      	beq.n	24009540 <HAL_FLASH_OB_Launch+0x1c>
  {
    status = HAL_ERROR;
2400953a:	2301      	movs	r3, #1
2400953c:	71fb      	strb	r3, [r7, #7]
2400953e:	e001      	b.n	24009544 <HAL_FLASH_OB_Launch+0x20>
    status = HAL_ERROR;
  }
#endif /* DUAL_BANK */
  else
  {
    status = HAL_OK;
24009540:	2300      	movs	r3, #0
24009542:	71fb      	strb	r3, [r7, #7]
  }

  if (status == HAL_OK)
24009544:	79fb      	ldrb	r3, [r7, #7]
24009546:	2b00      	cmp	r3, #0
24009548:	d10b      	bne.n	24009562 <HAL_FLASH_OB_Launch+0x3e>
  {
    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->OPTCR, FLASH_OPTCR_OPTSTART);
2400954a:	4b08      	ldr	r3, [pc, #32]	@ (2400956c <HAL_FLASH_OB_Launch+0x48>)
2400954c:	699b      	ldr	r3, [r3, #24]
2400954e:	4a07      	ldr	r2, [pc, #28]	@ (2400956c <HAL_FLASH_OB_Launch+0x48>)
24009550:	f043 0302 	orr.w	r3, r3, #2
24009554:	6193      	str	r3, [r2, #24]

    /* Wait for OB change operation to be completed */
    status = FLASH_OB_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
24009556:	f24c 3050 	movw	r0, #50000	@ 0xc350
2400955a:	f000 f86b 	bl	24009634 <FLASH_OB_WaitForLastOperation>
2400955e:	4603      	mov	r3, r0
24009560:	71fb      	strb	r3, [r7, #7]
  }

  return status;
24009562:	79fb      	ldrb	r3, [r7, #7]
}
24009564:	4618      	mov	r0, r3
24009566:	3708      	adds	r7, #8
24009568:	46bd      	mov	sp, r7
2400956a:	bd80      	pop	{r7, pc}
2400956c:	52002000 	.word	0x52002000

24009570 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_DBECC_BANK2: Double Detection ECC on Bank 2
  *            @arg HAL_FLASH_ERROR_CRCRD_BANK2: CRC Read Error on Bank 2
  */

uint32_t HAL_FLASH_GetError(void)
{
24009570:	b480      	push	{r7}
24009572:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
24009574:	4b03      	ldr	r3, [pc, #12]	@ (24009584 <HAL_FLASH_GetError+0x14>)
24009576:	699b      	ldr	r3, [r3, #24]
}
24009578:	4618      	mov	r0, r3
2400957a:	46bd      	mov	sp, r7
2400957c:	f85d 7b04 	ldr.w	r7, [sp], #4
24009580:	4770      	bx	lr
24009582:	bf00      	nop
24009584:	2400053c 	.word	0x2400053c

24009588 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
24009588:	b580      	push	{r7, lr}
2400958a:	b086      	sub	sp, #24
2400958c:	af00      	add	r7, sp, #0
2400958e:	6078      	str	r0, [r7, #4]
24009590:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
24009592:	2304      	movs	r3, #4
24009594:	613b      	str	r3, [r7, #16]
  uint32_t errorflag = 0;
24009596:	2300      	movs	r3, #0
24009598:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
2400959a:	f7f9 fba9 	bl	24002cf0 <HAL_GetTick>
2400959e:	60f8      	str	r0, [r7, #12]
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
240095a0:	e010      	b.n	240095c4 <FLASH_WaitForLastOperation+0x3c>
  {
    if(Timeout != HAL_MAX_DELAY)
240095a2:	687b      	ldr	r3, [r7, #4]
240095a4:	f1b3 3fff 	cmp.w	r3, #4294967295
240095a8:	d00c      	beq.n	240095c4 <FLASH_WaitForLastOperation+0x3c>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
240095aa:	f7f9 fba1 	bl	24002cf0 <HAL_GetTick>
240095ae:	4602      	mov	r2, r0
240095b0:	68fb      	ldr	r3, [r7, #12]
240095b2:	1ad3      	subs	r3, r2, r3
240095b4:	687a      	ldr	r2, [r7, #4]
240095b6:	429a      	cmp	r2, r3
240095b8:	d302      	bcc.n	240095c0 <FLASH_WaitForLastOperation+0x38>
240095ba:	687b      	ldr	r3, [r7, #4]
240095bc:	2b00      	cmp	r3, #0
240095be:	d101      	bne.n	240095c4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
240095c0:	2303      	movs	r3, #3
240095c2:	e02d      	b.n	24009620 <FLASH_WaitForLastOperation+0x98>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
240095c4:	4b18      	ldr	r3, [pc, #96]	@ (24009628 <FLASH_WaitForLastOperation+0xa0>)
240095c6:	691a      	ldr	r2, [r3, #16]
240095c8:	693b      	ldr	r3, [r7, #16]
240095ca:	4013      	ands	r3, r2
240095cc:	693a      	ldr	r2, [r7, #16]
240095ce:	429a      	cmp	r2, r3
240095d0:	d0e7      	beq.n	240095a2 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
240095d2:	683b      	ldr	r3, [r7, #0]
240095d4:	2b01      	cmp	r3, #1
240095d6:	d104      	bne.n	240095e2 <FLASH_WaitForLastOperation+0x5a>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
240095d8:	4b13      	ldr	r3, [pc, #76]	@ (24009628 <FLASH_WaitForLastOperation+0xa0>)
240095da:	691a      	ldr	r2, [r3, #16]
240095dc:	4b13      	ldr	r3, [pc, #76]	@ (2400962c <FLASH_WaitForLastOperation+0xa4>)
240095de:	4013      	ands	r3, r2
240095e0:	617b      	str	r3, [r7, #20]
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
240095e2:	697b      	ldr	r3, [r7, #20]
240095e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
240095e8:	2b00      	cmp	r3, #0
240095ea:	d00a      	beq.n	24009602 <FLASH_WaitForLastOperation+0x7a>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
240095ec:	4b10      	ldr	r3, [pc, #64]	@ (24009630 <FLASH_WaitForLastOperation+0xa8>)
240095ee:	699a      	ldr	r2, [r3, #24]
240095f0:	697b      	ldr	r3, [r7, #20]
240095f2:	4313      	orrs	r3, r2
240095f4:	4a0e      	ldr	r2, [pc, #56]	@ (24009630 <FLASH_WaitForLastOperation+0xa8>)
240095f6:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
240095f8:	4a0b      	ldr	r2, [pc, #44]	@ (24009628 <FLASH_WaitForLastOperation+0xa0>)
240095fa:	697b      	ldr	r3, [r7, #20]
240095fc:	6153      	str	r3, [r2, #20]

    return HAL_ERROR;
240095fe:	2301      	movs	r3, #1
24009600:	e00e      	b.n	24009620 <FLASH_WaitForLastOperation+0x98>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
24009602:	683b      	ldr	r3, [r7, #0]
24009604:	2b01      	cmp	r3, #1
24009606:	d10a      	bne.n	2400961e <FLASH_WaitForLastOperation+0x96>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
24009608:	4b07      	ldr	r3, [pc, #28]	@ (24009628 <FLASH_WaitForLastOperation+0xa0>)
2400960a:	691b      	ldr	r3, [r3, #16]
2400960c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
24009610:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
24009614:	d103      	bne.n	2400961e <FLASH_WaitForLastOperation+0x96>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
24009616:	4b04      	ldr	r3, [pc, #16]	@ (24009628 <FLASH_WaitForLastOperation+0xa0>)
24009618:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
2400961c:	615a      	str	r2, [r3, #20]
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
2400961e:	2300      	movs	r3, #0
}
24009620:	4618      	mov	r0, r3
24009622:	3718      	adds	r7, #24
24009624:	46bd      	mov	sp, r7
24009626:	bd80      	pop	{r7, pc}
24009628:	52002000 	.word	0x52002000
2400962c:	17ee0000 	.word	0x17ee0000
24009630:	2400053c 	.word	0x2400053c

24009634 <FLASH_OB_WaitForLastOperation>:
  * @brief  Wait for a FLASH Option Bytes change operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_OB_WaitForLastOperation(uint32_t Timeout)
{
24009634:	b580      	push	{r7, lr}
24009636:	b084      	sub	sp, #16
24009638:	af00      	add	r7, sp, #0
2400963a:	6078      	str	r0, [r7, #4]
  /* Get timeout */
  uint32_t tickstart = HAL_GetTick();
2400963c:	f7f9 fb58 	bl	24002cf0 <HAL_GetTick>
24009640:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH Option Bytes change operation to complete by polling on OPT_BUSY flag to be reset */
  while(READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_OPT_BUSY) != 0U)
24009642:	e010      	b.n	24009666 <FLASH_OB_WaitForLastOperation+0x32>
  {
    if(Timeout != HAL_MAX_DELAY)
24009644:	687b      	ldr	r3, [r7, #4]
24009646:	f1b3 3fff 	cmp.w	r3, #4294967295
2400964a:	d00c      	beq.n	24009666 <FLASH_OB_WaitForLastOperation+0x32>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
2400964c:	f7f9 fb50 	bl	24002cf0 <HAL_GetTick>
24009650:	4602      	mov	r2, r0
24009652:	68fb      	ldr	r3, [r7, #12]
24009654:	1ad3      	subs	r3, r2, r3
24009656:	687a      	ldr	r2, [r7, #4]
24009658:	429a      	cmp	r2, r3
2400965a:	d302      	bcc.n	24009662 <FLASH_OB_WaitForLastOperation+0x2e>
2400965c:	687b      	ldr	r3, [r7, #4]
2400965e:	2b00      	cmp	r3, #0
24009660:	d101      	bne.n	24009666 <FLASH_OB_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
24009662:	2303      	movs	r3, #3
24009664:	e01a      	b.n	2400969c <FLASH_OB_WaitForLastOperation+0x68>
  while(READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_OPT_BUSY) != 0U)
24009666:	4b0f      	ldr	r3, [pc, #60]	@ (240096a4 <FLASH_OB_WaitForLastOperation+0x70>)
24009668:	69db      	ldr	r3, [r3, #28]
2400966a:	f003 0301 	and.w	r3, r3, #1
2400966e:	2b00      	cmp	r3, #0
24009670:	d1e8      	bne.n	24009644 <FLASH_OB_WaitForLastOperation+0x10>
      }
    }
  }

  /* Check option byte change error */
  if(READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_OPTCHANGEERR) != 0U)
24009672:	4b0c      	ldr	r3, [pc, #48]	@ (240096a4 <FLASH_OB_WaitForLastOperation+0x70>)
24009674:	69db      	ldr	r3, [r3, #28]
24009676:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
2400967a:	2b00      	cmp	r3, #0
2400967c:	d00d      	beq.n	2400969a <FLASH_OB_WaitForLastOperation+0x66>
  {
    /* Save the error code */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OB_CHANGE;
2400967e:	4b0a      	ldr	r3, [pc, #40]	@ (240096a8 <FLASH_OB_WaitForLastOperation+0x74>)
24009680:	699b      	ldr	r3, [r3, #24]
24009682:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
24009686:	4a08      	ldr	r2, [pc, #32]	@ (240096a8 <FLASH_OB_WaitForLastOperation+0x74>)
24009688:	6193      	str	r3, [r2, #24]

    /* Clear the OB error flag */
    FLASH->OPTCCR |= FLASH_OPTCCR_CLR_OPTCHANGEERR;
2400968a:	4b06      	ldr	r3, [pc, #24]	@ (240096a4 <FLASH_OB_WaitForLastOperation+0x70>)
2400968c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2400968e:	4a05      	ldr	r2, [pc, #20]	@ (240096a4 <FLASH_OB_WaitForLastOperation+0x70>)
24009690:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
24009694:	6253      	str	r3, [r2, #36]	@ 0x24

    return HAL_ERROR;
24009696:	2301      	movs	r3, #1
24009698:	e000      	b.n	2400969c <FLASH_OB_WaitForLastOperation+0x68>
  }

  /* If there is no error flag set */
  return HAL_OK;
2400969a:	2300      	movs	r3, #0
}
2400969c:	4618      	mov	r0, r3
2400969e:	3710      	adds	r7, #16
240096a0:	46bd      	mov	sp, r7
240096a2:	bd80      	pop	{r7, pc}
240096a4:	52002000 	.word	0x52002000
240096a8:	2400053c 	.word	0x2400053c

240096ac <FLASH_CRC_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_CRC_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
240096ac:	b580      	push	{r7, lr}
240096ae:	b084      	sub	sp, #16
240096b0:	af00      	add	r7, sp, #0
240096b2:	6078      	str	r0, [r7, #4]
240096b4:	6039      	str	r1, [r7, #0]
  uint32_t bsyflag;
  uint32_t tickstart = HAL_GetTick();
240096b6:	f7f9 fb1b 	bl	24002cf0 <HAL_GetTick>
240096ba:	60b8      	str	r0, [r7, #8]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

  /* Select bsyflag depending on Bank */
  if(Bank == FLASH_BANK_1)
240096bc:	683b      	ldr	r3, [r7, #0]
240096be:	2b01      	cmp	r3, #1
240096c0:	d102      	bne.n	240096c8 <FLASH_CRC_WaitForLastOperation+0x1c>
  {
    bsyflag = FLASH_FLAG_CRC_BUSY_BANK1;
240096c2:	2308      	movs	r3, #8
240096c4:	60fb      	str	r3, [r7, #12]
240096c6:	e013      	b.n	240096f0 <FLASH_CRC_WaitForLastOperation+0x44>
  }
  else
  {
    bsyflag = FLASH_FLAG_CRC_BUSY_BANK2;
240096c8:	4b1a      	ldr	r3, [pc, #104]	@ (24009734 <FLASH_CRC_WaitForLastOperation+0x88>)
240096ca:	60fb      	str	r3, [r7, #12]
  }

  /* Wait for the FLASH CRC computation to complete by polling on CRC_BUSY flag to be reset */
  while(__HAL_FLASH_GET_FLAG(bsyflag))
240096cc:	e010      	b.n	240096f0 <FLASH_CRC_WaitForLastOperation+0x44>
  {
    if(Timeout != HAL_MAX_DELAY)
240096ce:	687b      	ldr	r3, [r7, #4]
240096d0:	f1b3 3fff 	cmp.w	r3, #4294967295
240096d4:	d00c      	beq.n	240096f0 <FLASH_CRC_WaitForLastOperation+0x44>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
240096d6:	f7f9 fb0b 	bl	24002cf0 <HAL_GetTick>
240096da:	4602      	mov	r2, r0
240096dc:	68bb      	ldr	r3, [r7, #8]
240096de:	1ad3      	subs	r3, r2, r3
240096e0:	687a      	ldr	r2, [r7, #4]
240096e2:	429a      	cmp	r2, r3
240096e4:	d302      	bcc.n	240096ec <FLASH_CRC_WaitForLastOperation+0x40>
240096e6:	687b      	ldr	r3, [r7, #4]
240096e8:	2b00      	cmp	r3, #0
240096ea:	d101      	bne.n	240096f0 <FLASH_CRC_WaitForLastOperation+0x44>
      {
        return HAL_TIMEOUT;
240096ec:	2303      	movs	r3, #3
240096ee:	e01d      	b.n	2400972c <FLASH_CRC_WaitForLastOperation+0x80>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
240096f0:	4b11      	ldr	r3, [pc, #68]	@ (24009738 <FLASH_CRC_WaitForLastOperation+0x8c>)
240096f2:	691a      	ldr	r2, [r3, #16]
240096f4:	68fb      	ldr	r3, [r7, #12]
240096f6:	4013      	ands	r3, r2
240096f8:	68fa      	ldr	r2, [r7, #12]
240096fa:	429a      	cmp	r2, r3
240096fc:	d0e7      	beq.n	240096ce <FLASH_CRC_WaitForLastOperation+0x22>
      }
    }
  }

  /* Check FLASH CRC read error flag  */
  if(Bank == FLASH_BANK_1)
240096fe:	683b      	ldr	r3, [r7, #0]
24009700:	2b01      	cmp	r3, #1
24009702:	d112      	bne.n	2400972a <FLASH_CRC_WaitForLastOperation+0x7e>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_CRCRDERR_BANK1))
24009704:	4b0c      	ldr	r3, [pc, #48]	@ (24009738 <FLASH_CRC_WaitForLastOperation+0x8c>)
24009706:	691b      	ldr	r3, [r3, #16]
24009708:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
2400970c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
24009710:	d10b      	bne.n	2400972a <FLASH_CRC_WaitForLastOperation+0x7e>
    {
      /* Save the error code */
      pFlash.ErrorCode |= HAL_FLASH_ERROR_CRCRD_BANK1;
24009712:	4b0a      	ldr	r3, [pc, #40]	@ (2400973c <FLASH_CRC_WaitForLastOperation+0x90>)
24009714:	699b      	ldr	r3, [r3, #24]
24009716:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
2400971a:	4a08      	ldr	r2, [pc, #32]	@ (2400973c <FLASH_CRC_WaitForLastOperation+0x90>)
2400971c:	6193      	str	r3, [r2, #24]

      /* Clear FLASH CRC read error pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_CRCRDERR_BANK1);
2400971e:	4b06      	ldr	r3, [pc, #24]	@ (24009738 <FLASH_CRC_WaitForLastOperation+0x8c>)
24009720:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
24009724:	615a      	str	r2, [r3, #20]

      return HAL_ERROR;
24009726:	2301      	movs	r3, #1
24009728:	e000      	b.n	2400972c <FLASH_CRC_WaitForLastOperation+0x80>
    }
  }
#endif /* DUAL_BANK */

  /* If there is no error flag set */
  return HAL_OK;
2400972a:	2300      	movs	r3, #0
}
2400972c:	4618      	mov	r0, r3
2400972e:	3710      	adds	r7, #16
24009730:	46bd      	mov	sp, r7
24009732:	bd80      	pop	{r7, pc}
24009734:	80000008 	.word	0x80000008
24009738:	52002000 	.word	0x52002000
2400973c:	2400053c 	.word	0x2400053c

24009740 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
24009740:	b580      	push	{r7, lr}
24009742:	b084      	sub	sp, #16
24009744:	af00      	add	r7, sp, #0
24009746:	6078      	str	r0, [r7, #4]
24009748:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
2400974a:	2300      	movs	r3, #0
2400974c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
2400974e:	4b3f      	ldr	r3, [pc, #252]	@ (2400984c <HAL_FLASHEx_Erase+0x10c>)
24009750:	7d1b      	ldrb	r3, [r3, #20]
24009752:	2b01      	cmp	r3, #1
24009754:	d101      	bne.n	2400975a <HAL_FLASHEx_Erase+0x1a>
24009756:	2302      	movs	r3, #2
24009758:	e074      	b.n	24009844 <HAL_FLASHEx_Erase+0x104>
2400975a:	4b3c      	ldr	r3, [pc, #240]	@ (2400984c <HAL_FLASHEx_Erase+0x10c>)
2400975c:	2201      	movs	r2, #1
2400975e:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
24009760:	4b3a      	ldr	r3, [pc, #232]	@ (2400984c <HAL_FLASHEx_Erase+0x10c>)
24009762:	2200      	movs	r2, #0
24009764:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
24009766:	687b      	ldr	r3, [r7, #4]
24009768:	685b      	ldr	r3, [r3, #4]
2400976a:	f003 0301 	and.w	r3, r3, #1
2400976e:	2b00      	cmp	r3, #0
24009770:	d009      	beq.n	24009786 <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
24009772:	2101      	movs	r1, #1
24009774:	f24c 3050 	movw	r0, #50000	@ 0xc350
24009778:	f7ff ff06 	bl	24009588 <FLASH_WaitForLastOperation>
2400977c:	4603      	mov	r3, r0
2400977e:	2b00      	cmp	r3, #0
24009780:	d001      	beq.n	24009786 <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
24009782:	2301      	movs	r3, #1
24009784:	73fb      	strb	r3, [r7, #15]
      status = HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
24009786:	7bfb      	ldrb	r3, [r7, #15]
24009788:	2b00      	cmp	r3, #0
2400978a:	d157      	bne.n	2400983c <HAL_FLASHEx_Erase+0xfc>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
2400978c:	687b      	ldr	r3, [r7, #4]
2400978e:	681b      	ldr	r3, [r3, #0]
24009790:	2b01      	cmp	r3, #1
24009792:	d11e      	bne.n	240097d2 <HAL_FLASHEx_Erase+0x92>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
24009794:	687b      	ldr	r3, [r7, #4]
24009796:	691a      	ldr	r2, [r3, #16]
24009798:	687b      	ldr	r3, [r7, #4]
2400979a:	685b      	ldr	r3, [r3, #4]
2400979c:	4619      	mov	r1, r3
2400979e:	4610      	mov	r0, r2
240097a0:	f000 fa9a 	bl	24009cd8 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
240097a4:	687b      	ldr	r3, [r7, #4]
240097a6:	685b      	ldr	r3, [r3, #4]
240097a8:	f003 0301 	and.w	r3, r3, #1
240097ac:	2b00      	cmp	r3, #0
240097ae:	d045      	beq.n	2400983c <HAL_FLASHEx_Erase+0xfc>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
240097b0:	2101      	movs	r1, #1
240097b2:	f24c 3050 	movw	r0, #50000	@ 0xc350
240097b6:	f7ff fee7 	bl	24009588 <FLASH_WaitForLastOperation>
240097ba:	4603      	mov	r3, r0
240097bc:	2b00      	cmp	r3, #0
240097be:	d001      	beq.n	240097c4 <HAL_FLASHEx_Erase+0x84>
        {
          status = HAL_ERROR;
240097c0:	2301      	movs	r3, #1
240097c2:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
240097c4:	4b22      	ldr	r3, [pc, #136]	@ (24009850 <HAL_FLASHEx_Erase+0x110>)
240097c6:	68db      	ldr	r3, [r3, #12]
240097c8:	4a21      	ldr	r2, [pc, #132]	@ (24009850 <HAL_FLASHEx_Erase+0x110>)
240097ca:	f023 0308 	bic.w	r3, r3, #8
240097ce:	60d3      	str	r3, [r2, #12]
240097d0:	e034      	b.n	2400983c <HAL_FLASHEx_Erase+0xfc>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
240097d2:	683b      	ldr	r3, [r7, #0]
240097d4:	f04f 32ff 	mov.w	r2, #4294967295
240097d8:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
240097da:	687b      	ldr	r3, [r7, #4]
240097dc:	689b      	ldr	r3, [r3, #8]
240097de:	60bb      	str	r3, [r7, #8]
240097e0:	e024      	b.n	2400982c <HAL_FLASHEx_Erase+0xec>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
240097e2:	687b      	ldr	r3, [r7, #4]
240097e4:	6859      	ldr	r1, [r3, #4]
240097e6:	687b      	ldr	r3, [r7, #4]
240097e8:	691b      	ldr	r3, [r3, #16]
240097ea:	461a      	mov	r2, r3
240097ec:	68b8      	ldr	r0, [r7, #8]
240097ee:	f000 fa97 	bl	24009d20 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
240097f2:	687b      	ldr	r3, [r7, #4]
240097f4:	685b      	ldr	r3, [r3, #4]
240097f6:	f003 0301 	and.w	r3, r3, #1
240097fa:	2b00      	cmp	r3, #0
240097fc:	d00c      	beq.n	24009818 <HAL_FLASHEx_Erase+0xd8>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
240097fe:	2101      	movs	r1, #1
24009800:	f24c 3050 	movw	r0, #50000	@ 0xc350
24009804:	f7ff fec0 	bl	24009588 <FLASH_WaitForLastOperation>
24009808:	4603      	mov	r3, r0
2400980a:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
2400980c:	4b10      	ldr	r3, [pc, #64]	@ (24009850 <HAL_FLASHEx_Erase+0x110>)
2400980e:	68da      	ldr	r2, [r3, #12]
24009810:	490f      	ldr	r1, [pc, #60]	@ (24009850 <HAL_FLASHEx_Erase+0x110>)
24009812:	4b10      	ldr	r3, [pc, #64]	@ (24009854 <HAL_FLASHEx_Erase+0x114>)
24009814:	4013      	ands	r3, r2
24009816:	60cb      	str	r3, [r1, #12]
          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
24009818:	7bfb      	ldrb	r3, [r7, #15]
2400981a:	2b00      	cmp	r3, #0
2400981c:	d003      	beq.n	24009826 <HAL_FLASHEx_Erase+0xe6>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
2400981e:	683b      	ldr	r3, [r7, #0]
24009820:	68ba      	ldr	r2, [r7, #8]
24009822:	601a      	str	r2, [r3, #0]
          break;
24009824:	e00a      	b.n	2400983c <HAL_FLASHEx_Erase+0xfc>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
24009826:	68bb      	ldr	r3, [r7, #8]
24009828:	3301      	adds	r3, #1
2400982a:	60bb      	str	r3, [r7, #8]
2400982c:	687b      	ldr	r3, [r7, #4]
2400982e:	68da      	ldr	r2, [r3, #12]
24009830:	687b      	ldr	r3, [r7, #4]
24009832:	689b      	ldr	r3, [r3, #8]
24009834:	4413      	add	r3, r2
24009836:	68ba      	ldr	r2, [r7, #8]
24009838:	429a      	cmp	r2, r3
2400983a:	d3d2      	bcc.n	240097e2 <HAL_FLASHEx_Erase+0xa2>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
2400983c:	4b03      	ldr	r3, [pc, #12]	@ (2400984c <HAL_FLASHEx_Erase+0x10c>)
2400983e:	2200      	movs	r2, #0
24009840:	751a      	strb	r2, [r3, #20]

  return status;
24009842:	7bfb      	ldrb	r3, [r7, #15]
}
24009844:	4618      	mov	r0, r3
24009846:	3710      	adds	r7, #16
24009848:	46bd      	mov	sp, r7
2400984a:	bd80      	pop	{r7, pc}
2400984c:	2400053c 	.word	0x2400053c
24009850:	52002000 	.word	0x52002000
24009854:	fffff8fb 	.word	0xfffff8fb

24009858 <HAL_FLASHEx_Erase_IT>:
  *         contains the configuration information for the erasing.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
24009858:	b580      	push	{r7, lr}
2400985a:	b084      	sub	sp, #16
2400985c:	af00      	add	r7, sp, #0
2400985e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
24009860:	2300      	movs	r3, #0
24009862:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
24009864:	4b31      	ldr	r3, [pc, #196]	@ (2400992c <HAL_FLASHEx_Erase_IT+0xd4>)
24009866:	7d1b      	ldrb	r3, [r3, #20]
24009868:	2b01      	cmp	r3, #1
2400986a:	d101      	bne.n	24009870 <HAL_FLASHEx_Erase_IT+0x18>
2400986c:	2302      	movs	r3, #2
2400986e:	e059      	b.n	24009924 <HAL_FLASHEx_Erase_IT+0xcc>
24009870:	4b2e      	ldr	r3, [pc, #184]	@ (2400992c <HAL_FLASHEx_Erase_IT+0xd4>)
24009872:	2201      	movs	r2, #1
24009874:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
24009876:	4b2d      	ldr	r3, [pc, #180]	@ (2400992c <HAL_FLASHEx_Erase_IT+0xd4>)
24009878:	2200      	movs	r2, #0
2400987a:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank 1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
2400987c:	687b      	ldr	r3, [r7, #4]
2400987e:	685b      	ldr	r3, [r3, #4]
24009880:	f003 0301 	and.w	r3, r3, #1
24009884:	2b00      	cmp	r3, #0
24009886:	d009      	beq.n	2400989c <HAL_FLASHEx_Erase_IT+0x44>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
24009888:	2101      	movs	r1, #1
2400988a:	f24c 3050 	movw	r0, #50000	@ 0xc350
2400988e:	f7ff fe7b 	bl	24009588 <FLASH_WaitForLastOperation>
24009892:	4603      	mov	r3, r0
24009894:	2b00      	cmp	r3, #0
24009896:	d001      	beq.n	2400989c <HAL_FLASHEx_Erase_IT+0x44>
    {
      status = HAL_ERROR;
24009898:	2301      	movs	r3, #1
2400989a:	73fb      	strb	r3, [r7, #15]
      status = HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  if (status != HAL_OK)
2400989c:	7bfb      	ldrb	r3, [r7, #15]
2400989e:	2b00      	cmp	r3, #0
240098a0:	d003      	beq.n	240098aa <HAL_FLASHEx_Erase_IT+0x52>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
240098a2:	4b22      	ldr	r3, [pc, #136]	@ (2400992c <HAL_FLASHEx_Erase_IT+0xd4>)
240098a4:	2200      	movs	r2, #0
240098a6:	751a      	strb	r2, [r3, #20]
240098a8:	e03b      	b.n	24009922 <HAL_FLASHEx_Erase_IT+0xca>
  }
  else
  {
    if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
240098aa:	687b      	ldr	r3, [r7, #4]
240098ac:	685b      	ldr	r3, [r3, #4]
240098ae:	f003 0301 	and.w	r3, r3, #1
240098b2:	2b00      	cmp	r3, #0
240098b4:	d005      	beq.n	240098c2 <HAL_FLASHEx_Erase_IT+0x6a>
    {
      /* Enable End of Operation and Error interrupts for Bank 1 */
#if defined (FLASH_CR_OPERRIE)
      __HAL_FLASH_ENABLE_IT_BANK1(FLASH_IT_EOP_BANK1     | FLASH_IT_WRPERR_BANK1 | FLASH_IT_PGSERR_BANK1 | \
240098b6:	4b1e      	ldr	r3, [pc, #120]	@ (24009930 <HAL_FLASHEx_Erase_IT+0xd8>)
240098b8:	68db      	ldr	r3, [r3, #12]
240098ba:	4a1d      	ldr	r2, [pc, #116]	@ (24009930 <HAL_FLASHEx_Erase_IT+0xd8>)
240098bc:	f443 03de 	orr.w	r3, r3, #7274496	@ 0x6f0000
240098c0:	60d3      	str	r3, [r2, #12]
                                  FLASH_IT_STRBERR_BANK2 | FLASH_IT_INCERR_BANK2);
#endif /* FLASH_CR_OPERRIE */
    }
#endif /* DUAL_BANK */

    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
240098c2:	687b      	ldr	r3, [r7, #4]
240098c4:	681b      	ldr	r3, [r3, #0]
240098c6:	2b01      	cmp	r3, #1
240098c8:	d113      	bne.n	240098f2 <HAL_FLASHEx_Erase_IT+0x9a>
    {
      /*Mass erase to be done*/
      if(pEraseInit->Banks == FLASH_BANK_1)
240098ca:	687b      	ldr	r3, [r7, #4]
240098cc:	685b      	ldr	r3, [r3, #4]
240098ce:	2b01      	cmp	r3, #1
240098d0:	d103      	bne.n	240098da <HAL_FLASHEx_Erase_IT+0x82>
      {
        pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE_BANK1;
240098d2:	4b16      	ldr	r3, [pc, #88]	@ (2400992c <HAL_FLASHEx_Erase_IT+0xd4>)
240098d4:	2202      	movs	r2, #2
240098d6:	701a      	strb	r2, [r3, #0]
240098d8:	e002      	b.n	240098e0 <HAL_FLASHEx_Erase_IT+0x88>
        pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE_BANK2;
      }
#endif /* DUAL_BANK */
      else
      {
        pFlash.ProcedureOnGoing = FLASH_PROC_ALLBANK_MASSERASE;
240098da:	4b14      	ldr	r3, [pc, #80]	@ (2400992c <HAL_FLASHEx_Erase_IT+0xd4>)
240098dc:	2207      	movs	r2, #7
240098de:	701a      	strb	r2, [r3, #0]
      }

      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
240098e0:	687b      	ldr	r3, [r7, #4]
240098e2:	691a      	ldr	r2, [r3, #16]
240098e4:	687b      	ldr	r3, [r7, #4]
240098e6:	685b      	ldr	r3, [r3, #4]
240098e8:	4619      	mov	r1, r3
240098ea:	4610      	mov	r0, r2
240098ec:	f000 f9f4 	bl	24009cd8 <FLASH_MassErase>
240098f0:	e017      	b.n	24009922 <HAL_FLASHEx_Erase_IT+0xca>
      else
      {
        pFlash.ProcedureOnGoing = FLASH_PROC_SECTERASE_BANK2;
      }
#else
      pFlash.ProcedureOnGoing = FLASH_PROC_SECTERASE_BANK1;
240098f2:	4b0e      	ldr	r3, [pc, #56]	@ (2400992c <HAL_FLASHEx_Erase_IT+0xd4>)
240098f4:	2201      	movs	r2, #1
240098f6:	701a      	strb	r2, [r3, #0]
#endif /* DUAL_BANK */

      pFlash.NbSectorsToErase = pEraseInit->NbSectors;
240098f8:	687b      	ldr	r3, [r7, #4]
240098fa:	68db      	ldr	r3, [r3, #12]
240098fc:	4a0b      	ldr	r2, [pc, #44]	@ (2400992c <HAL_FLASHEx_Erase_IT+0xd4>)
240098fe:	6053      	str	r3, [r2, #4]
      pFlash.Sector = pEraseInit->Sector;
24009900:	687b      	ldr	r3, [r7, #4]
24009902:	689b      	ldr	r3, [r3, #8]
24009904:	4a09      	ldr	r2, [pc, #36]	@ (2400992c <HAL_FLASHEx_Erase_IT+0xd4>)
24009906:	60d3      	str	r3, [r2, #12]
      pFlash.VoltageForErase = pEraseInit->VoltageRange;
24009908:	687b      	ldr	r3, [r7, #4]
2400990a:	691b      	ldr	r3, [r3, #16]
2400990c:	4a07      	ldr	r2, [pc, #28]	@ (2400992c <HAL_FLASHEx_Erase_IT+0xd4>)
2400990e:	6093      	str	r3, [r2, #8]

      /* Erase first sector and wait for IT */
      FLASH_Erase_Sector(pEraseInit->Sector, pEraseInit->Banks, pEraseInit->VoltageRange);
24009910:	687b      	ldr	r3, [r7, #4]
24009912:	6898      	ldr	r0, [r3, #8]
24009914:	687b      	ldr	r3, [r7, #4]
24009916:	6859      	ldr	r1, [r3, #4]
24009918:	687b      	ldr	r3, [r7, #4]
2400991a:	691b      	ldr	r3, [r3, #16]
2400991c:	461a      	mov	r2, r3
2400991e:	f000 f9ff 	bl	24009d20 <FLASH_Erase_Sector>
    }
  }

  return status;
24009922:	7bfb      	ldrb	r3, [r7, #15]
}
24009924:	4618      	mov	r0, r3
24009926:	3710      	adds	r7, #16
24009928:	46bd      	mov	sp, r7
2400992a:	bd80      	pop	{r7, pc}
2400992c:	2400053c 	.word	0x2400053c
24009930:	52002000 	.word	0x52002000

24009934 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
24009934:	b580      	push	{r7, lr}
24009936:	b084      	sub	sp, #16
24009938:	af00      	add	r7, sp, #0
2400993a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
2400993c:	4b54      	ldr	r3, [pc, #336]	@ (24009a90 <HAL_FLASHEx_OBProgram+0x15c>)
2400993e:	7d1b      	ldrb	r3, [r3, #20]
24009940:	2b01      	cmp	r3, #1
24009942:	d101      	bne.n	24009948 <HAL_FLASHEx_OBProgram+0x14>
24009944:	2302      	movs	r3, #2
24009946:	e09e      	b.n	24009a86 <HAL_FLASHEx_OBProgram+0x152>
24009948:	4b51      	ldr	r3, [pc, #324]	@ (24009a90 <HAL_FLASHEx_OBProgram+0x15c>)
2400994a:	2201      	movs	r2, #1
2400994c:	751a      	strb	r2, [r3, #20]

  /* Reset Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
2400994e:	4b50      	ldr	r3, [pc, #320]	@ (24009a90 <HAL_FLASHEx_OBProgram+0x15c>)
24009950:	2200      	movs	r2, #0
24009952:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
24009954:	2101      	movs	r1, #1
24009956:	f24c 3050 	movw	r0, #50000	@ 0xc350
2400995a:	f7ff fe15 	bl	24009588 <FLASH_WaitForLastOperation>
2400995e:	4603      	mov	r3, r0
24009960:	2b00      	cmp	r3, #0
24009962:	d002      	beq.n	2400996a <HAL_FLASHEx_OBProgram+0x36>
  {
    status = HAL_ERROR;
24009964:	2301      	movs	r3, #1
24009966:	73fb      	strb	r3, [r7, #15]
24009968:	e001      	b.n	2400996e <HAL_FLASHEx_OBProgram+0x3a>
    status = HAL_ERROR;
  }
#endif /* DUAL_BANK */
  else
  {
    status = HAL_OK;
2400996a:	2300      	movs	r3, #0
2400996c:	73fb      	strb	r3, [r7, #15]
  }

  if(status == HAL_OK)
2400996e:	7bfb      	ldrb	r3, [r7, #15]
24009970:	2b00      	cmp	r3, #0
24009972:	f040 8084 	bne.w	24009a7e <HAL_FLASHEx_OBProgram+0x14a>
  {
    /*Write protection configuration*/
    if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
24009976:	687b      	ldr	r3, [r7, #4]
24009978:	681b      	ldr	r3, [r3, #0]
2400997a:	f003 0301 	and.w	r3, r3, #1
2400997e:	2b00      	cmp	r3, #0
24009980:	d014      	beq.n	240099ac <HAL_FLASHEx_OBProgram+0x78>
    {
      assert_param(IS_WRPSTATE(pOBInit->WRPState));

      if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
24009982:	687b      	ldr	r3, [r7, #4]
24009984:	685b      	ldr	r3, [r3, #4]
24009986:	2b01      	cmp	r3, #1
24009988:	d108      	bne.n	2400999c <HAL_FLASHEx_OBProgram+0x68>
      {
        /*Enable of Write protection on the selected Sector*/
        FLASH_OB_EnableWRP(pOBInit->WRPSector,pOBInit->Banks);
2400998a:	687b      	ldr	r3, [r7, #4]
2400998c:	689a      	ldr	r2, [r3, #8]
2400998e:	687b      	ldr	r3, [r7, #4]
24009990:	69db      	ldr	r3, [r3, #28]
24009992:	4619      	mov	r1, r3
24009994:	4610      	mov	r0, r2
24009996:	f000 f9e7 	bl	24009d68 <FLASH_OB_EnableWRP>
2400999a:	e007      	b.n	240099ac <HAL_FLASHEx_OBProgram+0x78>
      }
      else
      {
        /*Disable of Write protection on the selected Sector*/
        FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
2400999c:	687b      	ldr	r3, [r7, #4]
2400999e:	689a      	ldr	r2, [r3, #8]
240099a0:	687b      	ldr	r3, [r7, #4]
240099a2:	69db      	ldr	r3, [r3, #28]
240099a4:	4619      	mov	r1, r3
240099a6:	4610      	mov	r0, r2
240099a8:	f000 f9f8 	bl	24009d9c <FLASH_OB_DisableWRP>
      }
    }

    /* Read protection configuration */
    if((pOBInit->OptionType & OPTIONBYTE_RDP) != 0U)
240099ac:	687b      	ldr	r3, [r7, #4]
240099ae:	681b      	ldr	r3, [r3, #0]
240099b0:	f003 0302 	and.w	r3, r3, #2
240099b4:	2b00      	cmp	r3, #0
240099b6:	d004      	beq.n	240099c2 <HAL_FLASHEx_OBProgram+0x8e>
    {
      /* Configure the Read protection level */
      FLASH_OB_RDPConfig(pOBInit->RDPLevel);
240099b8:	687b      	ldr	r3, [r7, #4]
240099ba:	68db      	ldr	r3, [r3, #12]
240099bc:	4618      	mov	r0, r3
240099be:	f000 fa2d 	bl	24009e1c <FLASH_OB_RDPConfig>
    }

    /* User Configuration */
    if((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
240099c2:	687b      	ldr	r3, [r7, #4]
240099c4:	681b      	ldr	r3, [r3, #0]
240099c6:	f003 0304 	and.w	r3, r3, #4
240099ca:	2b00      	cmp	r3, #0
240099cc:	d007      	beq.n	240099de <HAL_FLASHEx_OBProgram+0xaa>
    {
      /* Configure the user option bytes */
      FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig);
240099ce:	687b      	ldr	r3, [r7, #4]
240099d0:	695a      	ldr	r2, [r3, #20]
240099d2:	687b      	ldr	r3, [r7, #4]
240099d4:	699b      	ldr	r3, [r3, #24]
240099d6:	4619      	mov	r1, r3
240099d8:	4610      	mov	r0, r2
240099da:	f000 fa4f 	bl	24009e7c <FLASH_OB_UserConfig>
    }

    /* PCROP Configuration */
    if((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0U)
240099de:	687b      	ldr	r3, [r7, #4]
240099e0:	681b      	ldr	r3, [r3, #0]
240099e2:	f003 0308 	and.w	r3, r3, #8
240099e6:	2b00      	cmp	r3, #0
240099e8:	d009      	beq.n	240099fe <HAL_FLASHEx_OBProgram+0xca>
    {
      assert_param(IS_FLASH_BANK(pOBInit->Banks));

      /*Configure the Proprietary code readout protection */
      FLASH_OB_PCROPConfig(pOBInit->PCROPConfig, pOBInit->PCROPStartAddr, pOBInit->PCROPEndAddr, pOBInit->Banks);
240099ea:	687b      	ldr	r3, [r7, #4]
240099ec:	6a18      	ldr	r0, [r3, #32]
240099ee:	687b      	ldr	r3, [r7, #4]
240099f0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
240099f2:	687b      	ldr	r3, [r7, #4]
240099f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
240099f6:	687b      	ldr	r3, [r7, #4]
240099f8:	69db      	ldr	r3, [r3, #28]
240099fa:	f000 fb05 	bl	2400a008 <FLASH_OB_PCROPConfig>
    }

    /* BOR Level configuration */
    if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
240099fe:	687b      	ldr	r3, [r7, #4]
24009a00:	681b      	ldr	r3, [r3, #0]
24009a02:	f003 0310 	and.w	r3, r3, #16
24009a06:	2b00      	cmp	r3, #0
24009a08:	d004      	beq.n	24009a14 <HAL_FLASHEx_OBProgram+0xe0>
    {
      FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
24009a0a:	687b      	ldr	r3, [r7, #4]
24009a0c:	691b      	ldr	r3, [r3, #16]
24009a0e:	4618      	mov	r0, r3
24009a10:	f000 fb54 	bl	2400a0bc <FLASH_OB_BOR_LevelConfig>
    {
      FLASH_OB_CM4BootAddConfig(pOBInit->CM4BootConfig, pOBInit->CM4BootAddr0, pOBInit->CM4BootAddr1);
    }
#else /* Single Core*/
    /* Boot Address  configuration */
    if((pOBInit->OptionType & OPTIONBYTE_BOOTADD) == OPTIONBYTE_BOOTADD)
24009a14:	687b      	ldr	r3, [r7, #4]
24009a16:	681b      	ldr	r3, [r3, #0]
24009a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
24009a1c:	2b00      	cmp	r3, #0
24009a1e:	d008      	beq.n	24009a32 <HAL_FLASHEx_OBProgram+0xfe>
    {
      FLASH_OB_BootAddConfig(pOBInit->BootConfig, pOBInit->BootAddr0, pOBInit->BootAddr1);
24009a20:	687b      	ldr	r3, [r7, #4]
24009a22:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
24009a24:	687b      	ldr	r3, [r7, #4]
24009a26:	6b19      	ldr	r1, [r3, #48]	@ 0x30
24009a28:	687b      	ldr	r3, [r7, #4]
24009a2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
24009a2c:	461a      	mov	r2, r3
24009a2e:	f000 fb67 	bl	2400a100 <FLASH_OB_BootAddConfig>
    }
#endif /*DUAL_CORE*/

    /* Secure area configuration */
    if((pOBInit->OptionType & OPTIONBYTE_SECURE_AREA) == OPTIONBYTE_SECURE_AREA)
24009a32:	687b      	ldr	r3, [r7, #4]
24009a34:	681b      	ldr	r3, [r3, #0]
24009a36:	f003 0320 	and.w	r3, r3, #32
24009a3a:	2b00      	cmp	r3, #0
24009a3c:	d009      	beq.n	24009a52 <HAL_FLASHEx_OBProgram+0x11e>
    {
      FLASH_OB_SecureAreaConfig(pOBInit->SecureAreaConfig, pOBInit->SecureAreaStartAddr, pOBInit->SecureAreaEndAddr,pOBInit->Banks);
24009a3e:	687b      	ldr	r3, [r7, #4]
24009a40:	6b98      	ldr	r0, [r3, #56]	@ 0x38
24009a42:	687b      	ldr	r3, [r7, #4]
24009a44:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
24009a46:	687b      	ldr	r3, [r7, #4]
24009a48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
24009a4a:	687b      	ldr	r3, [r7, #4]
24009a4c:	69db      	ldr	r3, [r3, #28]
24009a4e:	f000 fb9d 	bl	2400a18c <FLASH_OB_SecureAreaConfig>
    }
#endif /* FLASH_OTPBL_LOCKBL */

#if defined(FLASH_OPTSR2_TCM_AXI_SHARED)
    /* TCM / AXI Shared RAM configuration */
    if((pOBInit->OptionType & OPTIONBYTE_SHARED_RAM) == OPTIONBYTE_SHARED_RAM)
24009a52:	687b      	ldr	r3, [r7, #4]
24009a54:	681b      	ldr	r3, [r3, #0]
24009a56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
24009a5a:	2b00      	cmp	r3, #0
24009a5c:	d004      	beq.n	24009a68 <HAL_FLASHEx_OBProgram+0x134>
    {
      FLASH_OB_SharedRAM_Config(pOBInit->SharedRamConfig);
24009a5e:	687b      	ldr	r3, [r7, #4]
24009a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
24009a62:	4618      	mov	r0, r3
24009a64:	f000 fc24 	bl	2400a2b0 <FLASH_OB_SharedRAM_Config>
    }
#endif /* FLASH_OPTSR2_TCM_AXI_SHARED */

#if defined(FLASH_OPTSR2_CPUFREQ_BOOST)
    /* CPU Frequency Boost configuration */
    if((pOBInit->OptionType & OPTIONBYTE_FREQ_BOOST) == OPTIONBYTE_FREQ_BOOST)
24009a68:	687b      	ldr	r3, [r7, #4]
24009a6a:	681b      	ldr	r3, [r3, #0]
24009a6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
24009a70:	2b00      	cmp	r3, #0
24009a72:	d004      	beq.n	24009a7e <HAL_FLASHEx_OBProgram+0x14a>
    {
      FLASH_OB_CPUFreq_BoostConfig(pOBInit->FreqBoostState);
24009a74:	687b      	ldr	r3, [r7, #4]
24009a76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
24009a78:	4618      	mov	r0, r3
24009a7a:	f000 fc3b 	bl	2400a2f4 <FLASH_OB_CPUFreq_BoostConfig>
    }
#endif /* FLASH_OPTSR2_CPUFREQ_BOOST */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
24009a7e:	4b04      	ldr	r3, [pc, #16]	@ (24009a90 <HAL_FLASHEx_OBProgram+0x15c>)
24009a80:	2200      	movs	r2, #0
24009a82:	751a      	strb	r2, [r3, #20]

  return status;
24009a84:	7bfb      	ldrb	r3, [r7, #15]
}
24009a86:	4618      	mov	r0, r3
24009a88:	3710      	adds	r7, #16
24009a8a:	46bd      	mov	sp, r7
24009a8c:	bd80      	pop	{r7, pc}
24009a8e:	bf00      	nop
24009a90:	2400053c 	.word	0x2400053c

24009a94 <HAL_FLASHEx_OBGetConfig>:
  *         as this parameter is use to get the given Bank WRP, PCROP and secured area configuration.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
24009a94:	b580      	push	{r7, lr}
24009a96:	b082      	sub	sp, #8
24009a98:	af00      	add	r7, sp, #0
24009a9a:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = (OPTIONBYTE_USER | OPTIONBYTE_RDP | OPTIONBYTE_BOR);
24009a9c:	687b      	ldr	r3, [r7, #4]
24009a9e:	2216      	movs	r2, #22
24009aa0:	601a      	str	r2, [r3, #0]

  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
24009aa2:	f000 f9cf 	bl	24009e44 <FLASH_OB_GetRDP>
24009aa6:	4602      	mov	r2, r0
24009aa8:	687b      	ldr	r3, [r7, #4]
24009aaa:	60da      	str	r2, [r3, #12]

  /* Get the user option bytes */
  pOBInit->USERConfig = FLASH_OB_GetUser();
24009aac:	f000 fa96 	bl	24009fdc <FLASH_OB_GetUser>
24009ab0:	4602      	mov	r2, r0
24009ab2:	687b      	ldr	r3, [r7, #4]
24009ab4:	619a      	str	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = FLASH_OB_GetBOR();
24009ab6:	f000 fb15 	bl	2400a0e4 <FLASH_OB_GetBOR>
24009aba:	4602      	mov	r2, r0
24009abc:	687b      	ldr	r3, [r7, #4]
24009abe:	611a      	str	r2, [r3, #16]

#if defined (DUAL_BANK)
  if ((pOBInit->Banks == FLASH_BANK_1) || (pOBInit->Banks == FLASH_BANK_2))
#else
  if (pOBInit->Banks == FLASH_BANK_1)
24009ac0:	687b      	ldr	r3, [r7, #4]
24009ac2:	69db      	ldr	r3, [r3, #28]
24009ac4:	2b01      	cmp	r3, #1
24009ac6:	d129      	bne.n	24009b1c <HAL_FLASHEx_OBGetConfig+0x88>
#endif /* DUAL_BANK */
  {
    pOBInit->OptionType |= (OPTIONBYTE_WRP | OPTIONBYTE_PCROP | OPTIONBYTE_SECURE_AREA);
24009ac8:	687b      	ldr	r3, [r7, #4]
24009aca:	681b      	ldr	r3, [r3, #0]
24009acc:	f043 0229 	orr.w	r2, r3, #41	@ 0x29
24009ad0:	687b      	ldr	r3, [r7, #4]
24009ad2:	601a      	str	r2, [r3, #0]

    /* Get write protection on the selected area */
    FLASH_OB_GetWRP(&(pOBInit->WRPState), &(pOBInit->WRPSector), pOBInit->Banks);
24009ad4:	687b      	ldr	r3, [r7, #4]
24009ad6:	1d18      	adds	r0, r3, #4
24009ad8:	687b      	ldr	r3, [r7, #4]
24009ada:	f103 0108 	add.w	r1, r3, #8
24009ade:	687b      	ldr	r3, [r7, #4]
24009ae0:	69db      	ldr	r3, [r3, #28]
24009ae2:	461a      	mov	r2, r3
24009ae4:	f000 f974 	bl	24009dd0 <FLASH_OB_GetWRP>

    /* Get the Proprietary code readout protection */
    FLASH_OB_GetPCROP(&(pOBInit->PCROPConfig), &(pOBInit->PCROPStartAddr), &(pOBInit->PCROPEndAddr), pOBInit->Banks);
24009ae8:	687b      	ldr	r3, [r7, #4]
24009aea:	f103 0020 	add.w	r0, r3, #32
24009aee:	687b      	ldr	r3, [r7, #4]
24009af0:	f103 0124 	add.w	r1, r3, #36	@ 0x24
24009af4:	687b      	ldr	r3, [r7, #4]
24009af6:	f103 0228 	add.w	r2, r3, #40	@ 0x28
24009afa:	687b      	ldr	r3, [r7, #4]
24009afc:	69db      	ldr	r3, [r3, #28]
24009afe:	f000 faa5 	bl	2400a04c <FLASH_OB_GetPCROP>

    /*Get Bank Secure area*/
    FLASH_OB_GetSecureArea(&(pOBInit->SecureAreaConfig), &(pOBInit->SecureAreaStartAddr), &(pOBInit->SecureAreaEndAddr), pOBInit->Banks);
24009b02:	687b      	ldr	r3, [r7, #4]
24009b04:	f103 0038 	add.w	r0, r3, #56	@ 0x38
24009b08:	687b      	ldr	r3, [r7, #4]
24009b0a:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
24009b0e:	687b      	ldr	r3, [r7, #4]
24009b10:	f103 0240 	add.w	r2, r3, #64	@ 0x40
24009b14:	687b      	ldr	r3, [r7, #4]
24009b16:	69db      	ldr	r3, [r3, #28]
24009b18:	f000 fb5c 	bl	2400a1d4 <FLASH_OB_GetSecureArea>
  }

  /*Get Boot Address*/
  FLASH_OB_GetBootAdd(&(pOBInit->BootAddr0), &(pOBInit->BootAddr1));
24009b1c:	687b      	ldr	r3, [r7, #4]
24009b1e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
24009b22:	687b      	ldr	r3, [r7, #4]
24009b24:	3334      	adds	r3, #52	@ 0x34
24009b26:	4619      	mov	r1, r3
24009b28:	4610      	mov	r0, r2
24009b2a:	f000 fb13 	bl	2400a154 <FLASH_OB_GetBootAdd>
  pOBInit->OptionType |= OPTIONBYTE_CM7_BOOTADD | OPTIONBYTE_CM4_BOOTADD;

  /*Get CM4 Boot Address*/
  FLASH_OB_GetCM4BootAdd(&(pOBInit->CM4BootAddr0), &(pOBInit->CM4BootAddr1));
#else
  pOBInit->OptionType |= OPTIONBYTE_BOOTADD;
24009b2e:	687b      	ldr	r3, [r7, #4]
24009b30:	681b      	ldr	r3, [r3, #0]
24009b32:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
24009b36:	687b      	ldr	r3, [r7, #4]
24009b38:	601a      	str	r2, [r3, #0]
  /* Get OTP Block Lock */
  pOBInit->OTPBlockLock = FLASH_OB_OTP_GetLock();
#endif /* FLASH_OTPBL_LOCKBL */

#if defined (FLASH_OPTSR2_TCM_AXI_SHARED)
  pOBInit->OptionType |= OPTIONBYTE_SHARED_RAM;
24009b3a:	687b      	ldr	r3, [r7, #4]
24009b3c:	681b      	ldr	r3, [r3, #0]
24009b3e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
24009b42:	687b      	ldr	r3, [r7, #4]
24009b44:	601a      	str	r2, [r3, #0]

  /* Get TCM / AXI Shared RAM */
  pOBInit->SharedRamConfig = FLASH_OB_SharedRAM_GetConfig();
24009b46:	f000 fbc7 	bl	2400a2d8 <FLASH_OB_SharedRAM_GetConfig>
24009b4a:	4602      	mov	r2, r0
24009b4c:	687b      	ldr	r3, [r7, #4]
24009b4e:	645a      	str	r2, [r3, #68]	@ 0x44
#endif /* FLASH_OPTSR2_TCM_AXI_SHARED */

#if defined (FLASH_OPTSR2_CPUFREQ_BOOST)
  pOBInit->OptionType |= OPTIONBYTE_FREQ_BOOST;
24009b50:	687b      	ldr	r3, [r7, #4]
24009b52:	681b      	ldr	r3, [r3, #0]
24009b54:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
24009b58:	687b      	ldr	r3, [r7, #4]
24009b5a:	601a      	str	r2, [r3, #0]

  /* Get CPU Frequency Boost */
  pOBInit->FreqBoostState = FLASH_OB_CPUFreq_GetBoost();
24009b5c:	f000 fbde 	bl	2400a31c <FLASH_OB_CPUFreq_GetBoost>
24009b60:	4602      	mov	r2, r0
24009b62:	687b      	ldr	r3, [r7, #4]
24009b64:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* FLASH_OPTSR2_CPUFREQ_BOOST */
}
24009b66:	bf00      	nop
24009b68:	3708      	adds	r7, #8
24009b6a:	46bd      	mov	sp, r7
24009b6c:	bd80      	pop	{r7, pc}
	...

24009b70 <HAL_FLASHEx_Unlock_Bank1>:
/**
  * @brief  Unlock the FLASH Bank1 control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Unlock_Bank1(void)
{
24009b70:	b480      	push	{r7}
24009b72:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
24009b74:	4b0c      	ldr	r3, [pc, #48]	@ (24009ba8 <HAL_FLASHEx_Unlock_Bank1+0x38>)
24009b76:	68db      	ldr	r3, [r3, #12]
24009b78:	f003 0301 	and.w	r3, r3, #1
24009b7c:	2b00      	cmp	r3, #0
24009b7e:	d00d      	beq.n	24009b9c <HAL_FLASHEx_Unlock_Bank1+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
24009b80:	4b09      	ldr	r3, [pc, #36]	@ (24009ba8 <HAL_FLASHEx_Unlock_Bank1+0x38>)
24009b82:	4a0a      	ldr	r2, [pc, #40]	@ (24009bac <HAL_FLASHEx_Unlock_Bank1+0x3c>)
24009b84:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
24009b86:	4b08      	ldr	r3, [pc, #32]	@ (24009ba8 <HAL_FLASHEx_Unlock_Bank1+0x38>)
24009b88:	4a09      	ldr	r2, [pc, #36]	@ (24009bb0 <HAL_FLASHEx_Unlock_Bank1+0x40>)
24009b8a:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
24009b8c:	4b06      	ldr	r3, [pc, #24]	@ (24009ba8 <HAL_FLASHEx_Unlock_Bank1+0x38>)
24009b8e:	68db      	ldr	r3, [r3, #12]
24009b90:	f003 0301 	and.w	r3, r3, #1
24009b94:	2b00      	cmp	r3, #0
24009b96:	d001      	beq.n	24009b9c <HAL_FLASHEx_Unlock_Bank1+0x2c>
    {
      return HAL_ERROR;
24009b98:	2301      	movs	r3, #1
24009b9a:	e000      	b.n	24009b9e <HAL_FLASHEx_Unlock_Bank1+0x2e>
    }
  }

  return HAL_OK;
24009b9c:	2300      	movs	r3, #0
}
24009b9e:	4618      	mov	r0, r3
24009ba0:	46bd      	mov	sp, r7
24009ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
24009ba6:	4770      	bx	lr
24009ba8:	52002000 	.word	0x52002000
24009bac:	45670123 	.word	0x45670123
24009bb0:	cdef89ab 	.word	0xcdef89ab

24009bb4 <HAL_FLASHEx_Lock_Bank1>:
/**
  * @brief  Locks the FLASH Bank1 control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Lock_Bank1(void)
{
24009bb4:	b480      	push	{r7}
24009bb6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Registers access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
24009bb8:	4b05      	ldr	r3, [pc, #20]	@ (24009bd0 <HAL_FLASHEx_Lock_Bank1+0x1c>)
24009bba:	68db      	ldr	r3, [r3, #12]
24009bbc:	4a04      	ldr	r2, [pc, #16]	@ (24009bd0 <HAL_FLASHEx_Lock_Bank1+0x1c>)
24009bbe:	f043 0301 	orr.w	r3, r3, #1
24009bc2:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
24009bc4:	2300      	movs	r3, #0
}
24009bc6:	4618      	mov	r0, r3
24009bc8:	46bd      	mov	sp, r7
24009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
24009bce:	4770      	bx	lr
24009bd0:	52002000 	.word	0x52002000

24009bd4 <HAL_FLASHEx_ComputeCRC>:
  *         A special error flag (CRC read error: CRCRDERR) can be used to
  *         detect such a case.
  * @retval HAL Status
*/
HAL_StatusTypeDef HAL_FLASHEx_ComputeCRC(FLASH_CRCInitTypeDef *pCRCInit, uint32_t *CRC_Result)
{
24009bd4:	b580      	push	{r7, lr}
24009bd6:	b084      	sub	sp, #16
24009bd8:	af00      	add	r7, sp, #0
24009bda:	6078      	str	r0, [r7, #4]
24009bdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK_EXCLUSIVE(pCRCInit->Bank));
  assert_param(IS_FLASH_TYPECRC(pCRCInit->TypeCRC));

  /* Wait for OB change operation to be completed */
  status = FLASH_OB_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
24009bde:	f24c 3050 	movw	r0, #50000	@ 0xc350
24009be2:	f7ff fd27 	bl	24009634 <FLASH_OB_WaitForLastOperation>
24009be6:	4603      	mov	r3, r0
24009be8:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
24009bea:	7bfb      	ldrb	r3, [r7, #15]
24009bec:	2b00      	cmp	r3, #0
24009bee:	d169      	bne.n	24009cc4 <HAL_FLASHEx_ComputeCRC+0xf0>
  {
    if (pCRCInit->Bank == FLASH_BANK_1)
24009bf0:	687b      	ldr	r3, [r7, #4]
24009bf2:	689b      	ldr	r3, [r3, #8]
24009bf4:	2b01      	cmp	r3, #1
24009bf6:	d165      	bne.n	24009cc4 <HAL_FLASHEx_ComputeCRC+0xf0>
    {
      /* Enable CRC feature */
      FLASH->CR1 |= FLASH_CR_CRC_EN;
24009bf8:	4b35      	ldr	r3, [pc, #212]	@ (24009cd0 <HAL_FLASHEx_ComputeCRC+0xfc>)
24009bfa:	68db      	ldr	r3, [r3, #12]
24009bfc:	4a34      	ldr	r2, [pc, #208]	@ (24009cd0 <HAL_FLASHEx_ComputeCRC+0xfc>)
24009bfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
24009c02:	60d3      	str	r3, [r2, #12]

      /* Clear CRC flags in Status Register: CRC end of calculation and CRC read error */
      FLASH->CCR1 |= (FLASH_CCR_CLR_CRCEND | FLASH_CCR_CLR_CRCRDERR);
24009c04:	4b32      	ldr	r3, [pc, #200]	@ (24009cd0 <HAL_FLASHEx_ComputeCRC+0xfc>)
24009c06:	695b      	ldr	r3, [r3, #20]
24009c08:	4a31      	ldr	r2, [pc, #196]	@ (24009cd0 <HAL_FLASHEx_ComputeCRC+0xfc>)
24009c0a:	f043 53c0 	orr.w	r3, r3, #402653184	@ 0x18000000
24009c0e:	6153      	str	r3, [r2, #20]

      /* Clear current CRC result, program burst size and define memory area on which CRC has to be computed */
      FLASH->CRCCR1 |= FLASH_CRCCR_CLEAN_CRC | pCRCInit->BurstSize | pCRCInit->TypeCRC;
24009c10:	4b2f      	ldr	r3, [pc, #188]	@ (24009cd0 <HAL_FLASHEx_ComputeCRC+0xfc>)
24009c12:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
24009c14:	687b      	ldr	r3, [r7, #4]
24009c16:	6859      	ldr	r1, [r3, #4]
24009c18:	687b      	ldr	r3, [r7, #4]
24009c1a:	681b      	ldr	r3, [r3, #0]
24009c1c:	430b      	orrs	r3, r1
24009c1e:	4313      	orrs	r3, r2
24009c20:	4a2b      	ldr	r2, [pc, #172]	@ (24009cd0 <HAL_FLASHEx_ComputeCRC+0xfc>)
24009c22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
24009c26:	6513      	str	r3, [r2, #80]	@ 0x50

      if (pCRCInit->TypeCRC == FLASH_CRC_SECTORS)
24009c28:	687b      	ldr	r3, [r7, #4]
24009c2a:	681b      	ldr	r3, [r3, #0]
24009c2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
24009c30:	d119      	bne.n	24009c66 <HAL_FLASHEx_ComputeCRC+0x92>
      {
        /* Clear sectors list */
        FLASH->CRCCR1 |= FLASH_CRCCR_CLEAN_SECT;
24009c32:	4b27      	ldr	r3, [pc, #156]	@ (24009cd0 <HAL_FLASHEx_ComputeCRC+0xfc>)
24009c34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
24009c36:	4a26      	ldr	r2, [pc, #152]	@ (24009cd0 <HAL_FLASHEx_ComputeCRC+0xfc>)
24009c38:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
24009c3c:	6513      	str	r3, [r2, #80]	@ 0x50

        /* Select CRC sectors */
        for(sector_index = pCRCInit->Sector; sector_index < (pCRCInit->NbSectors + pCRCInit->Sector); sector_index++)
24009c3e:	687b      	ldr	r3, [r7, #4]
24009c40:	68db      	ldr	r3, [r3, #12]
24009c42:	60bb      	str	r3, [r7, #8]
24009c44:	e006      	b.n	24009c54 <HAL_FLASHEx_ComputeCRC+0x80>
        {
          FLASH_CRC_AddSector(sector_index, FLASH_BANK_1);
24009c46:	2101      	movs	r1, #1
24009c48:	68b8      	ldr	r0, [r7, #8]
24009c4a:	f000 fafb 	bl	2400a244 <FLASH_CRC_AddSector>
        for(sector_index = pCRCInit->Sector; sector_index < (pCRCInit->NbSectors + pCRCInit->Sector); sector_index++)
24009c4e:	68bb      	ldr	r3, [r7, #8]
24009c50:	3301      	adds	r3, #1
24009c52:	60bb      	str	r3, [r7, #8]
24009c54:	687b      	ldr	r3, [r7, #4]
24009c56:	691a      	ldr	r2, [r3, #16]
24009c58:	687b      	ldr	r3, [r7, #4]
24009c5a:	68db      	ldr	r3, [r3, #12]
24009c5c:	4413      	add	r3, r2
24009c5e:	68ba      	ldr	r2, [r7, #8]
24009c60:	429a      	cmp	r2, r3
24009c62:	d3f0      	bcc.n	24009c46 <HAL_FLASHEx_ComputeCRC+0x72>
24009c64:	e013      	b.n	24009c8e <HAL_FLASHEx_ComputeCRC+0xba>
        }
      }
      else if (pCRCInit->TypeCRC == FLASH_CRC_BANK)
24009c66:	687b      	ldr	r3, [r7, #4]
24009c68:	681b      	ldr	r3, [r3, #0]
24009c6a:	4a1a      	ldr	r2, [pc, #104]	@ (24009cd4 <HAL_FLASHEx_ComputeCRC+0x100>)
24009c6c:	4293      	cmp	r3, r2
24009c6e:	d106      	bne.n	24009c7e <HAL_FLASHEx_ComputeCRC+0xaa>
      {
        /* Enable Bank 1 CRC select bit */
        FLASH->CRCCR1 |= FLASH_CRCCR_ALL_BANK;
24009c70:	4b17      	ldr	r3, [pc, #92]	@ (24009cd0 <HAL_FLASHEx_ComputeCRC+0xfc>)
24009c72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
24009c74:	4a16      	ldr	r2, [pc, #88]	@ (24009cd0 <HAL_FLASHEx_ComputeCRC+0xfc>)
24009c76:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
24009c7a:	6513      	str	r3, [r2, #80]	@ 0x50
24009c7c:	e007      	b.n	24009c8e <HAL_FLASHEx_ComputeCRC+0xba>
      }
      else
      {
        /* Select CRC start and end addresses */
        FLASH_CRC_SelectAddress(pCRCInit->CRCStartAddr, pCRCInit->CRCEndAddr, FLASH_BANK_1);
24009c7e:	687b      	ldr	r3, [r7, #4]
24009c80:	6958      	ldr	r0, [r3, #20]
24009c82:	687b      	ldr	r3, [r7, #4]
24009c84:	699b      	ldr	r3, [r3, #24]
24009c86:	2201      	movs	r2, #1
24009c88:	4619      	mov	r1, r3
24009c8a:	f000 faf9 	bl	2400a280 <FLASH_CRC_SelectAddress>
      }

      /* Start the CRC calculation */
      FLASH->CRCCR1 |= FLASH_CRCCR_START_CRC;
24009c8e:	4b10      	ldr	r3, [pc, #64]	@ (24009cd0 <HAL_FLASHEx_ComputeCRC+0xfc>)
24009c90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
24009c92:	4a0f      	ldr	r2, [pc, #60]	@ (24009cd0 <HAL_FLASHEx_ComputeCRC+0xfc>)
24009c94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
24009c98:	6513      	str	r3, [r2, #80]	@ 0x50

      /* Wait on CRC busy flag */
      status = FLASH_CRC_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
24009c9a:	2101      	movs	r1, #1
24009c9c:	f24c 3050 	movw	r0, #50000	@ 0xc350
24009ca0:	f7ff fd04 	bl	240096ac <FLASH_CRC_WaitForLastOperation>
24009ca4:	4603      	mov	r3, r0
24009ca6:	73fb      	strb	r3, [r7, #15]

      /* Return CRC result */
      (*CRC_Result) = FLASH->CRCDATA;
24009ca8:	4b09      	ldr	r3, [pc, #36]	@ (24009cd0 <HAL_FLASHEx_ComputeCRC+0xfc>)
24009caa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
24009cac:	683b      	ldr	r3, [r7, #0]
24009cae:	601a      	str	r2, [r3, #0]

      /* Disable CRC feature */
      FLASH->CR1 &= (~FLASH_CR_CRC_EN);
24009cb0:	4b07      	ldr	r3, [pc, #28]	@ (24009cd0 <HAL_FLASHEx_ComputeCRC+0xfc>)
24009cb2:	68db      	ldr	r3, [r3, #12]
24009cb4:	4a06      	ldr	r2, [pc, #24]	@ (24009cd0 <HAL_FLASHEx_ComputeCRC+0xfc>)
24009cb6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
24009cba:	60d3      	str	r3, [r2, #12]

      /* Clear CRC flags */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_CRCEND_BANK1 | FLASH_FLAG_CRCRDERR_BANK1);
24009cbc:	4b04      	ldr	r3, [pc, #16]	@ (24009cd0 <HAL_FLASHEx_ComputeCRC+0xfc>)
24009cbe:	f04f 52c0 	mov.w	r2, #402653184	@ 0x18000000
24009cc2:	615a      	str	r2, [r3, #20]
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_CRCEND_BANK2 | FLASH_FLAG_CRCRDERR_BANK2);
    }
#endif /* DUAL_BANK */
  }

  return status;
24009cc4:	7bfb      	ldrb	r3, [r7, #15]
}
24009cc6:	4618      	mov	r0, r3
24009cc8:	3710      	adds	r7, #16
24009cca:	46bd      	mov	sp, r7
24009ccc:	bd80      	pop	{r7, pc}
24009cce:	bf00      	nop
24009cd0:	52002000 	.word	0x52002000
24009cd4:	00400100 	.word	0x00400100

24009cd8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
24009cd8:	b480      	push	{r7}
24009cda:	b083      	sub	sp, #12
24009cdc:	af00      	add	r7, sp, #0
24009cde:	6078      	str	r0, [r7, #4]
24009ce0:	6039      	str	r1, [r7, #0]
  }
  else
#endif /* DUAL_BANK */
  {
    /* Proceed to erase Flash Bank  */
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
24009ce2:	683b      	ldr	r3, [r7, #0]
24009ce4:	f003 0301 	and.w	r3, r3, #1
24009ce8:	2b00      	cmp	r3, #0
24009cea:	d011      	beq.n	24009d10 <FLASH_MassErase+0x38>
    {
#if defined (FLASH_CR_PSIZE)
      /* Set Program/erase VoltageRange for Bank1 */
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
24009cec:	4b0b      	ldr	r3, [pc, #44]	@ (24009d1c <FLASH_MassErase+0x44>)
24009cee:	68db      	ldr	r3, [r3, #12]
24009cf0:	4a0a      	ldr	r2, [pc, #40]	@ (24009d1c <FLASH_MassErase+0x44>)
24009cf2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
24009cf6:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
24009cf8:	4b08      	ldr	r3, [pc, #32]	@ (24009d1c <FLASH_MassErase+0x44>)
24009cfa:	68da      	ldr	r2, [r3, #12]
24009cfc:	4907      	ldr	r1, [pc, #28]	@ (24009d1c <FLASH_MassErase+0x44>)
24009cfe:	687b      	ldr	r3, [r7, #4]
24009d00:	4313      	orrs	r3, r2
24009d02:	60cb      	str	r3, [r1, #12]
#endif /* FLASH_CR_PSIZE */

      /* Erase Bank1 */
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
24009d04:	4b05      	ldr	r3, [pc, #20]	@ (24009d1c <FLASH_MassErase+0x44>)
24009d06:	68db      	ldr	r3, [r3, #12]
24009d08:	4a04      	ldr	r2, [pc, #16]	@ (24009d1c <FLASH_MassErase+0x44>)
24009d0a:	f043 0388 	orr.w	r3, r3, #136	@ 0x88
24009d0e:	60d3      	str	r3, [r2, #12]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
24009d10:	bf00      	nop
24009d12:	370c      	adds	r7, #12
24009d14:	46bd      	mov	sp, r7
24009d16:	f85d 7b04 	ldr.w	r7, [sp], #4
24009d1a:	4770      	bx	lr
24009d1c:	52002000 	.word	0x52002000

24009d20 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
24009d20:	b480      	push	{r7}
24009d22:	b085      	sub	sp, #20
24009d24:	af00      	add	r7, sp, #0
24009d26:	60f8      	str	r0, [r7, #12]
24009d28:	60b9      	str	r1, [r7, #8]
24009d2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
24009d2c:	68bb      	ldr	r3, [r7, #8]
24009d2e:	f003 0301 	and.w	r3, r3, #1
24009d32:	2b00      	cmp	r3, #0
24009d34:	d010      	beq.n	24009d58 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
24009d36:	4b0b      	ldr	r3, [pc, #44]	@ (24009d64 <FLASH_Erase_Sector+0x44>)
24009d38:	68db      	ldr	r3, [r3, #12]
24009d3a:	4a0a      	ldr	r2, [pc, #40]	@ (24009d64 <FLASH_Erase_Sector+0x44>)
24009d3c:	f423 63e6 	bic.w	r3, r3, #1840	@ 0x730
24009d40:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
24009d42:	4b08      	ldr	r3, [pc, #32]	@ (24009d64 <FLASH_Erase_Sector+0x44>)
24009d44:	68da      	ldr	r2, [r3, #12]
24009d46:	68fb      	ldr	r3, [r7, #12]
24009d48:	0219      	lsls	r1, r3, #8
24009d4a:	687b      	ldr	r3, [r7, #4]
24009d4c:	430b      	orrs	r3, r1
24009d4e:	4313      	orrs	r3, r2
24009d50:	4a04      	ldr	r2, [pc, #16]	@ (24009d64 <FLASH_Erase_Sector+0x44>)
24009d52:	f043 0384 	orr.w	r3, r3, #132	@ 0x84
24009d56:	60d3      	str	r3, [r2, #12]

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
24009d58:	bf00      	nop
24009d5a:	3714      	adds	r7, #20
24009d5c:	46bd      	mov	sp, r7
24009d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
24009d62:	4770      	bx	lr
24009d64:	52002000 	.word	0x52002000

24009d68 <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_BOTH: enable WRP on both bank1 and bank2 specified sectors
  *
  * @retval HAL FLASH State
  */
static void FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
24009d68:	b480      	push	{r7}
24009d6a:	b083      	sub	sp, #12
24009d6c:	af00      	add	r7, sp, #0
24009d6e:	6078      	str	r0, [r7, #4]
24009d70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
24009d72:	683b      	ldr	r3, [r7, #0]
24009d74:	f003 0301 	and.w	r3, r3, #1
24009d78:	2b00      	cmp	r3, #0
24009d7a:	d007      	beq.n	24009d8c <FLASH_OB_EnableWRP+0x24>
  {
    /* Enable Write Protection for bank 1 */
    FLASH->WPSN_PRG1 &= (~(WRPSector & FLASH_WPSN_WRPSN));
24009d7c:	4b06      	ldr	r3, [pc, #24]	@ (24009d98 <FLASH_OB_EnableWRP+0x30>)
24009d7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
24009d80:	687b      	ldr	r3, [r7, #4]
24009d82:	b2db      	uxtb	r3, r3
24009d84:	43db      	mvns	r3, r3
24009d86:	4904      	ldr	r1, [pc, #16]	@ (24009d98 <FLASH_OB_EnableWRP+0x30>)
24009d88:	4013      	ands	r3, r2
24009d8a:	63cb      	str	r3, [r1, #60]	@ 0x3c
  {
    /* Enable Write Protection for bank 2 */
    FLASH->WPSN_PRG2 &= (~(WRPSector & FLASH_WPSN_WRPSN));
  }
#endif /* DUAL_BANK */
}
24009d8c:	bf00      	nop
24009d8e:	370c      	adds	r7, #12
24009d90:	46bd      	mov	sp, r7
24009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
24009d96:	4770      	bx	lr
24009d98:	52002000 	.word	0x52002000

24009d9c <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_BOTH: disable WRP on both bank1 and bank2 specified sectors
  *
  * @retval HAL FLASH State
  */
static void FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
24009d9c:	b480      	push	{r7}
24009d9e:	b083      	sub	sp, #12
24009da0:	af00      	add	r7, sp, #0
24009da2:	6078      	str	r0, [r7, #4]
24009da4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
24009da6:	683b      	ldr	r3, [r7, #0]
24009da8:	f003 0301 	and.w	r3, r3, #1
24009dac:	2b00      	cmp	r3, #0
24009dae:	d006      	beq.n	24009dbe <FLASH_OB_DisableWRP+0x22>
  {
    /* Disable Write Protection for bank 1 */
    FLASH->WPSN_PRG1 |= (WRPSector & FLASH_WPSN_WRPSN);
24009db0:	4b06      	ldr	r3, [pc, #24]	@ (24009dcc <FLASH_OB_DisableWRP+0x30>)
24009db2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
24009db4:	687b      	ldr	r3, [r7, #4]
24009db6:	b2db      	uxtb	r3, r3
24009db8:	4904      	ldr	r1, [pc, #16]	@ (24009dcc <FLASH_OB_DisableWRP+0x30>)
24009dba:	4313      	orrs	r3, r2
24009dbc:	63cb      	str	r3, [r1, #60]	@ 0x3c
  {
    /* Disable Write Protection for bank 2 */
    FLASH->WPSN_PRG2 |= (WRPSector & FLASH_WPSN_WRPSN);
  }
#endif /* DUAL_BANK */
}
24009dbe:	bf00      	nop
24009dc0:	370c      	adds	r7, #12
24009dc2:	46bd      	mov	sp, r7
24009dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
24009dc8:	4770      	bx	lr
24009dca:	bf00      	nop
24009dcc:	52002000 	.word	0x52002000

24009dd0 <FLASH_OB_GetWRP>:
  *            @arg FLASH_BANK_BOTH: note allowed in this functions
  *
  * @retval HAL FLASH State
  */
static void FLASH_OB_GetWRP(uint32_t *WRPState, uint32_t *WRPSector, uint32_t Bank)
{
24009dd0:	b480      	push	{r7}
24009dd2:	b087      	sub	sp, #28
24009dd4:	af00      	add	r7, sp, #0
24009dd6:	60f8      	str	r0, [r7, #12]
24009dd8:	60b9      	str	r1, [r7, #8]
24009dda:	607a      	str	r2, [r7, #4]
  uint32_t regvalue = 0U;
24009ddc:	2300      	movs	r3, #0
24009dde:	617b      	str	r3, [r7, #20]

  if(Bank == FLASH_BANK_1)
24009de0:	687b      	ldr	r3, [r7, #4]
24009de2:	2b01      	cmp	r3, #1
24009de4:	d102      	bne.n	24009dec <FLASH_OB_GetWRP+0x1c>
  {
    regvalue = FLASH->WPSN_CUR1;
24009de6:	4b0c      	ldr	r3, [pc, #48]	@ (24009e18 <FLASH_OB_GetWRP+0x48>)
24009de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
24009dea:	617b      	str	r3, [r7, #20]
  {
    regvalue = FLASH->WPSN_CUR2;
  }
#endif /* DUAL_BANK */

  (*WRPSector) = (~regvalue) & FLASH_WPSN_WRPSN;
24009dec:	697b      	ldr	r3, [r7, #20]
24009dee:	43db      	mvns	r3, r3
24009df0:	b2da      	uxtb	r2, r3
24009df2:	68bb      	ldr	r3, [r7, #8]
24009df4:	601a      	str	r2, [r3, #0]

  if(*WRPSector == 0U)
24009df6:	68bb      	ldr	r3, [r7, #8]
24009df8:	681b      	ldr	r3, [r3, #0]
24009dfa:	2b00      	cmp	r3, #0
24009dfc:	d103      	bne.n	24009e06 <FLASH_OB_GetWRP+0x36>
  {
    (*WRPState) = OB_WRPSTATE_DISABLE;
24009dfe:	68fb      	ldr	r3, [r7, #12]
24009e00:	2200      	movs	r2, #0
24009e02:	601a      	str	r2, [r3, #0]
  }
  else
  {
    (*WRPState) = OB_WRPSTATE_ENABLE;
  }
}
24009e04:	e002      	b.n	24009e0c <FLASH_OB_GetWRP+0x3c>
    (*WRPState) = OB_WRPSTATE_ENABLE;
24009e06:	68fb      	ldr	r3, [r7, #12]
24009e08:	2201      	movs	r2, #1
24009e0a:	601a      	str	r2, [r3, #0]
}
24009e0c:	bf00      	nop
24009e0e:	371c      	adds	r7, #28
24009e10:	46bd      	mov	sp, r7
24009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
24009e16:	4770      	bx	lr
24009e18:	52002000 	.word	0x52002000

24009e1c <FLASH_OB_RDPConfig>:
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  *
  * @retval HAL status
  */
static void FLASH_OB_RDPConfig(uint32_t RDPLevel)
{
24009e1c:	b480      	push	{r7}
24009e1e:	b083      	sub	sp, #12
24009e20:	af00      	add	r7, sp, #0
24009e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));

  /* Configure the RDP level in the option bytes register */
  MODIFY_REG(FLASH->OPTSR_PRG, FLASH_OPTSR_RDP, RDPLevel);
24009e24:	4b06      	ldr	r3, [pc, #24]	@ (24009e40 <FLASH_OB_RDPConfig+0x24>)
24009e26:	6a1b      	ldr	r3, [r3, #32]
24009e28:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
24009e2c:	4904      	ldr	r1, [pc, #16]	@ (24009e40 <FLASH_OB_RDPConfig+0x24>)
24009e2e:	687b      	ldr	r3, [r7, #4]
24009e30:	4313      	orrs	r3, r2
24009e32:	620b      	str	r3, [r1, #32]
}
24009e34:	bf00      	nop
24009e36:	370c      	adds	r7, #12
24009e38:	46bd      	mov	sp, r7
24009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
24009e3e:	4770      	bx	lr
24009e40:	52002000 	.word	0x52002000

24009e44 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
24009e44:	b480      	push	{r7}
24009e46:	b083      	sub	sp, #12
24009e48:	af00      	add	r7, sp, #0
  uint32_t rdp_level = READ_BIT(FLASH->OPTSR_CUR, FLASH_OPTSR_RDP);
24009e4a:	4b0b      	ldr	r3, [pc, #44]	@ (24009e78 <FLASH_OB_GetRDP+0x34>)
24009e4c:	69db      	ldr	r3, [r3, #28]
24009e4e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
24009e52:	607b      	str	r3, [r7, #4]
  
  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
24009e54:	687b      	ldr	r3, [r7, #4]
24009e56:	f5b3 4f2a 	cmp.w	r3, #43520	@ 0xaa00
24009e5a:	d006      	beq.n	24009e6a <FLASH_OB_GetRDP+0x26>
24009e5c:	687b      	ldr	r3, [r7, #4]
24009e5e:	f5b3 4f4c 	cmp.w	r3, #52224	@ 0xcc00
24009e62:	d002      	beq.n	24009e6a <FLASH_OB_GetRDP+0x26>
  {
    return (OB_RDP_LEVEL_1);
24009e64:	f44f 43aa 	mov.w	r3, #21760	@ 0x5500
24009e68:	e000      	b.n	24009e6c <FLASH_OB_GetRDP+0x28>
  }
  else
  {
    return rdp_level;
24009e6a:	687b      	ldr	r3, [r7, #4]
  }
}
24009e6c:	4618      	mov	r0, r3
24009e6e:	370c      	adds	r7, #12
24009e70:	46bd      	mov	sp, r7
24009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
24009e76:	4770      	bx	lr
24009e78:	52002000 	.word	0x52002000

24009e7c <FLASH_OB_UserConfig>:
  *
  * @retval HAL status
  */
#endif /*DUAL_CORE*/
static void FLASH_OB_UserConfig(uint32_t UserType, uint32_t UserConfig)
{
24009e7c:	b480      	push	{r7}
24009e7e:	b085      	sub	sp, #20
24009e80:	af00      	add	r7, sp, #0
24009e82:	6078      	str	r0, [r7, #4]
24009e84:	6039      	str	r1, [r7, #0]
  uint32_t optr_reg_val = 0;
24009e86:	2300      	movs	r3, #0
24009e88:	60fb      	str	r3, [r7, #12]
  uint32_t optr_reg_mask = 0;
24009e8a:	2300      	movs	r3, #0
24009e8c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_OB_USER_TYPE(UserType));

  if((UserType & OB_USER_IWDG1_SW) != 0U)
24009e8e:	687b      	ldr	r3, [r7, #4]
24009e90:	f003 0301 	and.w	r3, r3, #1
24009e94:	2b00      	cmp	r3, #0
24009e96:	d009      	beq.n	24009eac <FLASH_OB_UserConfig+0x30>
  {
    /* IWDG_HW option byte should be modified */
    assert_param(IS_OB_IWDG1_SOURCE(UserConfig & FLASH_OPTSR_IWDG1_SW));

    /* Set value and mask for IWDG_HW option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_IWDG1_SW);
24009e98:	683b      	ldr	r3, [r7, #0]
24009e9a:	f003 0310 	and.w	r3, r3, #16
24009e9e:	68fa      	ldr	r2, [r7, #12]
24009ea0:	4313      	orrs	r3, r2
24009ea2:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_IWDG1_SW;
24009ea4:	68bb      	ldr	r3, [r7, #8]
24009ea6:	f043 0310 	orr.w	r3, r3, #16
24009eaa:	60bb      	str	r3, [r7, #8]
    /* Set value and mask for IWDG2_SW option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_IWDG2_SW);
    optr_reg_mask |= FLASH_OPTSR_IWDG2_SW;
  }
#endif /*DUAL_CORE*/
  if((UserType & OB_USER_NRST_STOP_D1) != 0U)
24009eac:	687b      	ldr	r3, [r7, #4]
24009eae:	f003 0302 	and.w	r3, r3, #2
24009eb2:	2b00      	cmp	r3, #0
24009eb4:	d009      	beq.n	24009eca <FLASH_OB_UserConfig+0x4e>
  {
    /* NRST_STOP option byte should be modified */
    assert_param(IS_OB_STOP_D1_RESET(UserConfig & FLASH_OPTSR_NRST_STOP_D1));

    /* Set value and mask for NRST_STOP option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_NRST_STOP_D1);
24009eb6:	683b      	ldr	r3, [r7, #0]
24009eb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
24009ebc:	68fa      	ldr	r2, [r7, #12]
24009ebe:	4313      	orrs	r3, r2
24009ec0:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_NRST_STOP_D1;
24009ec2:	68bb      	ldr	r3, [r7, #8]
24009ec4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
24009ec8:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_NRST_STDBY_D1) != 0U)
24009eca:	687b      	ldr	r3, [r7, #4]
24009ecc:	f003 0304 	and.w	r3, r3, #4
24009ed0:	2b00      	cmp	r3, #0
24009ed2:	d009      	beq.n	24009ee8 <FLASH_OB_UserConfig+0x6c>
  {
    /* NRST_STDBY option byte should be modified */
    assert_param(IS_OB_STDBY_D1_RESET(UserConfig & FLASH_OPTSR_NRST_STBY_D1));

    /* Set value and mask for NRST_STDBY option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_NRST_STBY_D1);
24009ed4:	683b      	ldr	r3, [r7, #0]
24009ed6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
24009eda:	68fa      	ldr	r2, [r7, #12]
24009edc:	4313      	orrs	r3, r2
24009ede:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_NRST_STBY_D1;
24009ee0:	68bb      	ldr	r3, [r7, #8]
24009ee2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
24009ee6:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_IWDG_STOP) != 0U)
24009ee8:	687b      	ldr	r3, [r7, #4]
24009eea:	f003 0308 	and.w	r3, r3, #8
24009eee:	2b00      	cmp	r3, #0
24009ef0:	d009      	beq.n	24009f06 <FLASH_OB_UserConfig+0x8a>
  {
    /* IWDG_STOP option byte should be modified */
    assert_param(IS_OB_USER_IWDG_STOP(UserConfig & FLASH_OPTSR_FZ_IWDG_STOP));

    /* Set value and mask for IWDG_STOP option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_FZ_IWDG_STOP);
24009ef2:	683b      	ldr	r3, [r7, #0]
24009ef4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
24009ef8:	68fa      	ldr	r2, [r7, #12]
24009efa:	4313      	orrs	r3, r2
24009efc:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_FZ_IWDG_STOP;
24009efe:	68bb      	ldr	r3, [r7, #8]
24009f00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
24009f04:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_IWDG_STDBY) != 0U)
24009f06:	687b      	ldr	r3, [r7, #4]
24009f08:	f003 0310 	and.w	r3, r3, #16
24009f0c:	2b00      	cmp	r3, #0
24009f0e:	d009      	beq.n	24009f24 <FLASH_OB_UserConfig+0xa8>
  {
    /* IWDG_STDBY option byte should be modified */
    assert_param(IS_OB_USER_IWDG_STDBY(UserConfig & FLASH_OPTSR_FZ_IWDG_SDBY));

    /* Set value and mask for IWDG_STDBY option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_FZ_IWDG_SDBY);
24009f10:	683b      	ldr	r3, [r7, #0]
24009f12:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
24009f16:	68fa      	ldr	r2, [r7, #12]
24009f18:	4313      	orrs	r3, r2
24009f1a:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_FZ_IWDG_SDBY;
24009f1c:	68bb      	ldr	r3, [r7, #8]
24009f1e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
24009f22:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_ST_RAM_SIZE) != 0U)
24009f24:	687b      	ldr	r3, [r7, #4]
24009f26:	f003 0320 	and.w	r3, r3, #32
24009f2a:	2b00      	cmp	r3, #0
24009f2c:	d009      	beq.n	24009f42 <FLASH_OB_UserConfig+0xc6>
  {
    /* ST_RAM_SIZE option byte should be modified */
    assert_param(IS_OB_USER_ST_RAM_SIZE(UserConfig & FLASH_OPTSR_ST_RAM_SIZE));

    /* Set value and mask for ST_RAM_SIZE option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_ST_RAM_SIZE);
24009f2e:	683b      	ldr	r3, [r7, #0]
24009f30:	f403 13c0 	and.w	r3, r3, #1572864	@ 0x180000
24009f34:	68fa      	ldr	r2, [r7, #12]
24009f36:	4313      	orrs	r3, r2
24009f38:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_ST_RAM_SIZE;
24009f3a:	68bb      	ldr	r3, [r7, #8]
24009f3c:	f443 13c0 	orr.w	r3, r3, #1572864	@ 0x180000
24009f40:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_SECURITY) != 0U)
24009f42:	687b      	ldr	r3, [r7, #4]
24009f44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
24009f48:	2b00      	cmp	r3, #0
24009f4a:	d009      	beq.n	24009f60 <FLASH_OB_UserConfig+0xe4>
  {
    /* SECURITY option byte should be modified */
    assert_param(IS_OB_USER_SECURITY(UserConfig & FLASH_OPTSR_SECURITY));

    /* Set value and mask for SECURITY option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_SECURITY);
24009f4c:	683b      	ldr	r3, [r7, #0]
24009f4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
24009f52:	68fa      	ldr	r2, [r7, #12]
24009f54:	4313      	orrs	r3, r2
24009f56:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_SECURITY;
24009f58:	68bb      	ldr	r3, [r7, #8]
24009f5a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
24009f5e:	60bb      	str	r3, [r7, #8]
    optr_reg_mask |= FLASH_OPTSR_BCM7;
  }
#endif /* DUAL_CORE */

#if defined (FLASH_OPTSR_NRST_STOP_D2)
  if((UserType & OB_USER_NRST_STOP_D2) != 0U)
24009f60:	687b      	ldr	r3, [r7, #4]
24009f62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
24009f66:	2b00      	cmp	r3, #0
24009f68:	d009      	beq.n	24009f7e <FLASH_OB_UserConfig+0x102>
  {
    /* NRST_STOP option byte should be modified */
    assert_param(IS_OB_STOP_D2_RESET(UserConfig & FLASH_OPTSR_NRST_STOP_D2));

    /* Set value and mask for NRST_STOP option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_NRST_STOP_D2);
24009f6a:	683b      	ldr	r3, [r7, #0]
24009f6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
24009f70:	68fa      	ldr	r2, [r7, #12]
24009f72:	4313      	orrs	r3, r2
24009f74:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_NRST_STOP_D2;
24009f76:	68bb      	ldr	r3, [r7, #8]
24009f78:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
24009f7c:	60bb      	str	r3, [r7, #8]
  }

  if((UserType & OB_USER_NRST_STDBY_D2) != 0U)
24009f7e:	687b      	ldr	r3, [r7, #4]
24009f80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
24009f84:	2b00      	cmp	r3, #0
24009f86:	d009      	beq.n	24009f9c <FLASH_OB_UserConfig+0x120>
  {
    /* NRST_STDBY option byte should be modified */
    assert_param(IS_OB_STDBY_D2_RESET(UserConfig & FLASH_OPTSR_NRST_STBY_D2));

    /* Set value and mask for NRST_STDBY option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_NRST_STBY_D2);
24009f88:	683b      	ldr	r3, [r7, #0]
24009f8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
24009f8e:	68fa      	ldr	r2, [r7, #12]
24009f90:	4313      	orrs	r3, r2
24009f92:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_NRST_STBY_D2;
24009f94:	68bb      	ldr	r3, [r7, #8]
24009f96:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
24009f9a:	60bb      	str	r3, [r7, #8]
    optr_reg_val |= (UserConfig & FLASH_OPTSR_SWAP_BANK_OPT);
    optr_reg_mask |= FLASH_OPTSR_SWAP_BANK_OPT;
  }
#endif /* DUAL_BANK */

  if((UserType & OB_USER_IOHSLV) != 0U)
24009f9c:	687b      	ldr	r3, [r7, #4]
24009f9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
24009fa2:	2b00      	cmp	r3, #0
24009fa4:	d009      	beq.n	24009fba <FLASH_OB_UserConfig+0x13e>
  {
    /* IOHSLV_OPT option byte should be modified */
    assert_param(IS_OB_USER_IOHSLV(UserConfig & FLASH_OPTSR_IO_HSLV));

    /* Set value and mask for IOHSLV_OPT option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTSR_IO_HSLV);
24009fa6:	683b      	ldr	r3, [r7, #0]
24009fa8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
24009fac:	68fa      	ldr	r2, [r7, #12]
24009fae:	4313      	orrs	r3, r2
24009fb0:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTSR_IO_HSLV;
24009fb2:	68bb      	ldr	r3, [r7, #8]
24009fb4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
24009fb8:	60bb      	str	r3, [r7, #8]
    optr_reg_mask |= FLASH_OPTSR_VDDMMC_HSLV;
  }
#endif /* FLASH_OPTSR_VDDMMC_HSLV */

  /* Configure the option bytes register */
  MODIFY_REG(FLASH->OPTSR_PRG, optr_reg_mask, optr_reg_val);
24009fba:	4b07      	ldr	r3, [pc, #28]	@ (24009fd8 <FLASH_OB_UserConfig+0x15c>)
24009fbc:	6a1a      	ldr	r2, [r3, #32]
24009fbe:	68bb      	ldr	r3, [r7, #8]
24009fc0:	43db      	mvns	r3, r3
24009fc2:	401a      	ands	r2, r3
24009fc4:	4904      	ldr	r1, [pc, #16]	@ (24009fd8 <FLASH_OB_UserConfig+0x15c>)
24009fc6:	68fb      	ldr	r3, [r7, #12]
24009fc8:	4313      	orrs	r3, r2
24009fca:	620b      	str	r3, [r1, #32]
}
24009fcc:	bf00      	nop
24009fce:	3714      	adds	r7, #20
24009fd0:	46bd      	mov	sp, r7
24009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
24009fd6:	4770      	bx	lr
24009fd8:	52002000 	.word	0x52002000

24009fdc <FLASH_OB_GetUser>:
  *         FZ_IWDG_STOP(Bit 17), FZ_IWDG_SDBY(Bit 18), ST_RAM_SIZE(Bit[19:20]),
  *         SECURITY(Bit 21), IO_HSLV (Bit 29) and SWAP_BANK_OPT(Bit 31).
  */
#endif /*DUAL_CORE*/
static uint32_t FLASH_OB_GetUser(void)
{
24009fdc:	b480      	push	{r7}
24009fde:	b083      	sub	sp, #12
24009fe0:	af00      	add	r7, sp, #0
  uint32_t userConfig = READ_REG(FLASH->OPTSR_CUR);
24009fe2:	4b07      	ldr	r3, [pc, #28]	@ (2400a000 <FLASH_OB_GetUser+0x24>)
24009fe4:	69db      	ldr	r3, [r3, #28]
24009fe6:	607b      	str	r3, [r7, #4]
  userConfig &= (~(FLASH_OPTSR_BOR_LEV | FLASH_OPTSR_RDP));
24009fe8:	687a      	ldr	r2, [r7, #4]
24009fea:	4b06      	ldr	r3, [pc, #24]	@ (2400a004 <FLASH_OB_GetUser+0x28>)
24009fec:	4013      	ands	r3, r2
24009fee:	607b      	str	r3, [r7, #4]

  return userConfig;
24009ff0:	687b      	ldr	r3, [r7, #4]
}
24009ff2:	4618      	mov	r0, r3
24009ff4:	370c      	adds	r7, #12
24009ff6:	46bd      	mov	sp, r7
24009ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
24009ffc:	4770      	bx	lr
24009ffe:	bf00      	nop
2400a000:	52002000 	.word	0x52002000
2400a004:	ffff00f3 	.word	0xffff00f3

2400a008 <FLASH_OB_PCROPConfig>:
  *            @arg FLASH_BANK_BOTH: PCROP on specified bank1 and bank2 area (same config will be applied on both banks)
  *
  * @retval None
  */
static void FLASH_OB_PCROPConfig(uint32_t PCROPConfig, uint32_t PCROPStartAddr, uint32_t PCROPEndAddr, uint32_t Banks)
{
2400a008:	b480      	push	{r7}
2400a00a:	b085      	sub	sp, #20
2400a00c:	af00      	add	r7, sp, #0
2400a00e:	60f8      	str	r0, [r7, #12]
2400a010:	60b9      	str	r1, [r7, #8]
2400a012:	607a      	str	r2, [r7, #4]
2400a014:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_OB_PCROP_RDP(PCROPConfig));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
2400a016:	683b      	ldr	r3, [r7, #0]
2400a018:	f003 0301 	and.w	r3, r3, #1
2400a01c:	2b00      	cmp	r3, #0
2400a01e:	d00d      	beq.n	2400a03c <FLASH_OB_PCROPConfig+0x34>
  {
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(PCROPStartAddr));
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(PCROPEndAddr));

    /* Configure the Proprietary code readout protection */
    FLASH->PRAR_PRG1 = ((PCROPStartAddr - FLASH_BANK1_BASE) >> 8)                                 | \
2400a020:	68bb      	ldr	r3, [r7, #8]
2400a022:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
2400a026:	0a1a      	lsrs	r2, r3, #8
                       (((PCROPEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_PRAR_PROT_AREA_END_Pos) | \
2400a028:	687b      	ldr	r3, [r7, #4]
2400a02a:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
2400a02e:	0a1b      	lsrs	r3, r3, #8
2400a030:	041b      	lsls	r3, r3, #16
    FLASH->PRAR_PRG1 = ((PCROPStartAddr - FLASH_BANK1_BASE) >> 8)                                 | \
2400a032:	431a      	orrs	r2, r3
2400a034:	4904      	ldr	r1, [pc, #16]	@ (2400a048 <FLASH_OB_PCROPConfig+0x40>)
                       (((PCROPEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_PRAR_PROT_AREA_END_Pos) | \
2400a036:	68fb      	ldr	r3, [r7, #12]
2400a038:	4313      	orrs	r3, r2
    FLASH->PRAR_PRG1 = ((PCROPStartAddr - FLASH_BANK1_BASE) >> 8)                                 | \
2400a03a:	62cb      	str	r3, [r1, #44]	@ 0x2c
    FLASH->PRAR_PRG2 = ((PCROPStartAddr - FLASH_BANK2_BASE) >> 8)                                 | \
                       (((PCROPEndAddr - FLASH_BANK2_BASE) >> 8) << FLASH_PRAR_PROT_AREA_END_Pos) | \
                       PCROPConfig;
  }
#endif /* DUAL_BANK */
}
2400a03c:	bf00      	nop
2400a03e:	3714      	adds	r7, #20
2400a040:	46bd      	mov	sp, r7
2400a042:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a046:	4770      	bx	lr
2400a048:	52002000 	.word	0x52002000

2400a04c <FLASH_OB_GetPCROP>:
  *            @arg FLASH_BANK_BOTH: is  not allowed here
  *
  * @retval None
  */
static void FLASH_OB_GetPCROP(uint32_t *PCROPConfig, uint32_t *PCROPStartAddr, uint32_t *PCROPEndAddr, uint32_t Bank)
{
2400a04c:	b480      	push	{r7}
2400a04e:	b087      	sub	sp, #28
2400a050:	af00      	add	r7, sp, #0
2400a052:	60f8      	str	r0, [r7, #12]
2400a054:	60b9      	str	r1, [r7, #8]
2400a056:	607a      	str	r2, [r7, #4]
2400a058:	603b      	str	r3, [r7, #0]
  uint32_t regvalue = 0;
2400a05a:	2300      	movs	r3, #0
2400a05c:	617b      	str	r3, [r7, #20]
  uint32_t bankBase = 0;
2400a05e:	2300      	movs	r3, #0
2400a060:	613b      	str	r3, [r7, #16]

  if(Bank == FLASH_BANK_1)
2400a062:	683b      	ldr	r3, [r7, #0]
2400a064:	2b01      	cmp	r3, #1
2400a066:	d105      	bne.n	2400a074 <FLASH_OB_GetPCROP+0x28>
  {
    regvalue = FLASH->PRAR_CUR1;
2400a068:	4b12      	ldr	r3, [pc, #72]	@ (2400a0b4 <FLASH_OB_GetPCROP+0x68>)
2400a06a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
2400a06c:	617b      	str	r3, [r7, #20]
    bankBase = FLASH_BANK1_BASE;
2400a06e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
2400a072:	613b      	str	r3, [r7, #16]
    regvalue = FLASH->PRAR_CUR2;
    bankBase = FLASH_BANK2_BASE;
  }
#endif /* DUAL_BANK */

  (*PCROPConfig) =  (regvalue & FLASH_PRAR_DMEP);
2400a074:	697b      	ldr	r3, [r7, #20]
2400a076:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
2400a07a:	68fb      	ldr	r3, [r7, #12]
2400a07c:	601a      	str	r2, [r3, #0]

  (*PCROPStartAddr) = ((regvalue & FLASH_PRAR_PROT_AREA_START) << 8) + bankBase;
2400a07e:	697b      	ldr	r3, [r7, #20]
2400a080:	021a      	lsls	r2, r3, #8
2400a082:	4b0d      	ldr	r3, [pc, #52]	@ (2400a0b8 <FLASH_OB_GetPCROP+0x6c>)
2400a084:	4013      	ands	r3, r2
2400a086:	693a      	ldr	r2, [r7, #16]
2400a088:	441a      	add	r2, r3
2400a08a:	68bb      	ldr	r3, [r7, #8]
2400a08c:	601a      	str	r2, [r3, #0]
  (*PCROPEndAddr) = (regvalue & FLASH_PRAR_PROT_AREA_END) >> FLASH_PRAR_PROT_AREA_END_Pos;
2400a08e:	697b      	ldr	r3, [r7, #20]
2400a090:	0c1b      	lsrs	r3, r3, #16
2400a092:	f3c3 020b 	ubfx	r2, r3, #0, #12
2400a096:	687b      	ldr	r3, [r7, #4]
2400a098:	601a      	str	r2, [r3, #0]
  (*PCROPEndAddr) = ((*PCROPEndAddr) << 8) + bankBase;
2400a09a:	687b      	ldr	r3, [r7, #4]
2400a09c:	681b      	ldr	r3, [r3, #0]
2400a09e:	021a      	lsls	r2, r3, #8
2400a0a0:	693b      	ldr	r3, [r7, #16]
2400a0a2:	441a      	add	r2, r3
2400a0a4:	687b      	ldr	r3, [r7, #4]
2400a0a6:	601a      	str	r2, [r3, #0]
}
2400a0a8:	bf00      	nop
2400a0aa:	371c      	adds	r7, #28
2400a0ac:	46bd      	mov	sp, r7
2400a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a0b2:	4770      	bx	lr
2400a0b4:	52002000 	.word	0x52002000
2400a0b8:	000fff00 	.word	0x000fff00

2400a0bc <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL2: Reset level threshold is set to 2.4V
  *            @arg OB_BOR_LEVEL3: Reset level threshold is set to 2.7V
  * @retval None
  */
static void FLASH_OB_BOR_LevelConfig(uint32_t Level)
{
2400a0bc:	b480      	push	{r7}
2400a0be:	b083      	sub	sp, #12
2400a0c0:	af00      	add	r7, sp, #0
2400a0c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Configure BOR_LEV option byte */
  MODIFY_REG(FLASH->OPTSR_PRG, FLASH_OPTSR_BOR_LEV, Level);
2400a0c4:	4b06      	ldr	r3, [pc, #24]	@ (2400a0e0 <FLASH_OB_BOR_LevelConfig+0x24>)
2400a0c6:	6a1b      	ldr	r3, [r3, #32]
2400a0c8:	f023 020c 	bic.w	r2, r3, #12
2400a0cc:	4904      	ldr	r1, [pc, #16]	@ (2400a0e0 <FLASH_OB_BOR_LevelConfig+0x24>)
2400a0ce:	687b      	ldr	r3, [r7, #4]
2400a0d0:	4313      	orrs	r3, r2
2400a0d2:	620b      	str	r3, [r1, #32]
}
2400a0d4:	bf00      	nop
2400a0d6:	370c      	adds	r7, #12
2400a0d8:	46bd      	mov	sp, r7
2400a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a0de:	4770      	bx	lr
2400a0e0:	52002000 	.word	0x52002000

2400a0e4 <FLASH_OB_GetBOR>:
  *            @arg OB_BOR_LEVEL1: Reset level threshold is set to 2.1V
  *            @arg OB_BOR_LEVEL2: Reset level threshold is set to 2.4V
  *            @arg OB_BOR_LEVEL3: Reset level threshold is set to 2.7V
  */
static uint32_t FLASH_OB_GetBOR(void)
{
2400a0e4:	b480      	push	{r7}
2400a0e6:	af00      	add	r7, sp, #0
  return (FLASH->OPTSR_CUR & FLASH_OPTSR_BOR_LEV);
2400a0e8:	4b04      	ldr	r3, [pc, #16]	@ (2400a0fc <FLASH_OB_GetBOR+0x18>)
2400a0ea:	69db      	ldr	r3, [r3, #28]
2400a0ec:	f003 030c 	and.w	r3, r3, #12
}
2400a0f0:	4618      	mov	r0, r3
2400a0f2:	46bd      	mov	sp, r7
2400a0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a0f8:	4770      	bx	lr
2400a0fa:	bf00      	nop
2400a0fc:	52002000 	.word	0x52002000

2400a100 <FLASH_OB_BootAddConfig>:
  * @param  BootAddress0 Specifies the Boot Address 0
  * @param  BootAddress1 Specifies the Boot Address 1
  * @retval HAL Status
  */
static void FLASH_OB_BootAddConfig(uint32_t BootOption, uint32_t BootAddress0, uint32_t BootAddress1)
{
2400a100:	b480      	push	{r7}
2400a102:	b085      	sub	sp, #20
2400a104:	af00      	add	r7, sp, #0
2400a106:	60f8      	str	r0, [r7, #12]
2400a108:	60b9      	str	r1, [r7, #8]
2400a10a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_OB_BOOT_ADD_OPTION(BootOption));

  if((BootOption & OB_BOOT_ADD0) == OB_BOOT_ADD0)
2400a10c:	68fb      	ldr	r3, [r7, #12]
2400a10e:	f003 0301 	and.w	r3, r3, #1
2400a112:	2b00      	cmp	r3, #0
2400a114:	d008      	beq.n	2400a128 <FLASH_OB_BootAddConfig+0x28>

    /* Configure CM7 BOOT ADD0 */
#if defined(DUAL_CORE)
    MODIFY_REG(FLASH->BOOT7_PRG, FLASH_BOOT7_BCM7_ADD0, (BootAddress0 >> 16));
#else /* Single Core*/
    MODIFY_REG(FLASH->BOOT_PRG, FLASH_BOOT_ADD0, (BootAddress0 >> 16));
2400a116:	4b0d      	ldr	r3, [pc, #52]	@ (2400a14c <FLASH_OB_BootAddConfig+0x4c>)
2400a118:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
2400a11a:	4b0d      	ldr	r3, [pc, #52]	@ (2400a150 <FLASH_OB_BootAddConfig+0x50>)
2400a11c:	4013      	ands	r3, r2
2400a11e:	68ba      	ldr	r2, [r7, #8]
2400a120:	0c12      	lsrs	r2, r2, #16
2400a122:	490a      	ldr	r1, [pc, #40]	@ (2400a14c <FLASH_OB_BootAddConfig+0x4c>)
2400a124:	4313      	orrs	r3, r2
2400a126:	644b      	str	r3, [r1, #68]	@ 0x44
#endif /* DUAL_CORE */
  }

  if((BootOption & OB_BOOT_ADD1) == OB_BOOT_ADD1)
2400a128:	68fb      	ldr	r3, [r7, #12]
2400a12a:	f003 0302 	and.w	r3, r3, #2
2400a12e:	2b00      	cmp	r3, #0
2400a130:	d006      	beq.n	2400a140 <FLASH_OB_BootAddConfig+0x40>

    /* Configure CM7 BOOT ADD1 */
#if defined(DUAL_CORE)
    MODIFY_REG(FLASH->BOOT7_PRG, FLASH_BOOT7_BCM7_ADD1, BootAddress1);
#else /* Single Core*/
    MODIFY_REG(FLASH->BOOT_PRG, FLASH_BOOT_ADD1, BootAddress1);
2400a132:	4b06      	ldr	r3, [pc, #24]	@ (2400a14c <FLASH_OB_BootAddConfig+0x4c>)
2400a134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2400a136:	b29a      	uxth	r2, r3
2400a138:	4904      	ldr	r1, [pc, #16]	@ (2400a14c <FLASH_OB_BootAddConfig+0x4c>)
2400a13a:	687b      	ldr	r3, [r7, #4]
2400a13c:	4313      	orrs	r3, r2
2400a13e:	644b      	str	r3, [r1, #68]	@ 0x44
#endif /* DUAL_CORE */
  }
}
2400a140:	bf00      	nop
2400a142:	3714      	adds	r7, #20
2400a144:	46bd      	mov	sp, r7
2400a146:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a14a:	4770      	bx	lr
2400a14c:	52002000 	.word	0x52002000
2400a150:	ffff0000 	.word	0xffff0000

2400a154 <FLASH_OB_GetBootAdd>:
  * @param  BootAddress0 Specifies the Boot Address 0.
  * @param  BootAddress1 Specifies the Boot Address 1.
  * @retval HAL Status
  */
static void FLASH_OB_GetBootAdd(uint32_t *BootAddress0, uint32_t *BootAddress1)
{
2400a154:	b480      	push	{r7}
2400a156:	b085      	sub	sp, #20
2400a158:	af00      	add	r7, sp, #0
2400a15a:	6078      	str	r0, [r7, #4]
2400a15c:	6039      	str	r1, [r7, #0]
  regvalue = FLASH->BOOT7_CUR;

  (*BootAddress0) = (regvalue & FLASH_BOOT7_BCM7_ADD0) << 16;
  (*BootAddress1) = (regvalue & FLASH_BOOT7_BCM7_ADD1);
#else /* Single Core */
  regvalue = FLASH->BOOT_CUR;
2400a15e:	4b09      	ldr	r3, [pc, #36]	@ (2400a184 <FLASH_OB_GetBootAdd+0x30>)
2400a160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2400a162:	60fb      	str	r3, [r7, #12]

  (*BootAddress0) = (regvalue & FLASH_BOOT_ADD0) << 16;
2400a164:	68fb      	ldr	r3, [r7, #12]
2400a166:	041a      	lsls	r2, r3, #16
2400a168:	687b      	ldr	r3, [r7, #4]
2400a16a:	601a      	str	r2, [r3, #0]
  (*BootAddress1) = (regvalue & FLASH_BOOT_ADD1);
2400a16c:	68fa      	ldr	r2, [r7, #12]
2400a16e:	4b06      	ldr	r3, [pc, #24]	@ (2400a188 <FLASH_OB_GetBootAdd+0x34>)
2400a170:	4013      	ands	r3, r2
2400a172:	683a      	ldr	r2, [r7, #0]
2400a174:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE */
}
2400a176:	bf00      	nop
2400a178:	3714      	adds	r7, #20
2400a17a:	46bd      	mov	sp, r7
2400a17c:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a180:	4770      	bx	lr
2400a182:	bf00      	nop
2400a184:	52002000 	.word	0x52002000
2400a188:	ffff0000 	.word	0xffff0000

2400a18c <FLASH_OB_SecureAreaConfig>:
  *            @arg FLASH_BANK_2: Secure area on specified bank2 area
  *            @arg FLASH_BANK_BOTH: Secure area on specified bank1 and bank2 area (same config will be applied on both banks)
  * @retval None
  */
static void FLASH_OB_SecureAreaConfig(uint32_t SecureAreaConfig, uint32_t SecureAreaStartAddr, uint32_t SecureAreaEndAddr, uint32_t Banks)
{
2400a18c:	b480      	push	{r7}
2400a18e:	b085      	sub	sp, #20
2400a190:	af00      	add	r7, sp, #0
2400a192:	60f8      	str	r0, [r7, #12]
2400a194:	60b9      	str	r1, [r7, #8]
2400a196:	607a      	str	r2, [r7, #4]
2400a198:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_OB_SECURE_RDP(SecureAreaConfig));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
2400a19a:	683b      	ldr	r3, [r7, #0]
2400a19c:	f003 0301 	and.w	r3, r3, #1
2400a1a0:	2b00      	cmp	r3, #0
2400a1a2:	d00f      	beq.n	2400a1c4 <FLASH_OB_SecureAreaConfig+0x38>
    /* Check the parameters */
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(SecureAreaStartAddr));
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(SecureAreaEndAddr));

    /* Configure the secure area */
    FLASH->SCAR_PRG1 = ((SecureAreaStartAddr - FLASH_BANK1_BASE) >> 8)                                | \
2400a1a4:	68bb      	ldr	r3, [r7, #8]
2400a1a6:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
2400a1aa:	0a1a      	lsrs	r2, r3, #8
                       (((SecureAreaEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_SCAR_SEC_AREA_END_Pos) | \
2400a1ac:	687b      	ldr	r3, [r7, #4]
2400a1ae:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
2400a1b2:	0a1b      	lsrs	r3, r3, #8
2400a1b4:	041b      	lsls	r3, r3, #16
    FLASH->SCAR_PRG1 = ((SecureAreaStartAddr - FLASH_BANK1_BASE) >> 8)                                | \
2400a1b6:	431a      	orrs	r2, r3
                       (SecureAreaConfig & FLASH_SCAR_DMES);
2400a1b8:	68fb      	ldr	r3, [r7, #12]
2400a1ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
    FLASH->SCAR_PRG1 = ((SecureAreaStartAddr - FLASH_BANK1_BASE) >> 8)                                | \
2400a1be:	4904      	ldr	r1, [pc, #16]	@ (2400a1d0 <FLASH_OB_SecureAreaConfig+0x44>)
                       (((SecureAreaEndAddr - FLASH_BANK1_BASE) >> 8) << FLASH_SCAR_SEC_AREA_END_Pos) | \
2400a1c0:	4313      	orrs	r3, r2
    FLASH->SCAR_PRG1 = ((SecureAreaStartAddr - FLASH_BANK1_BASE) >> 8)                                | \
2400a1c2:	634b      	str	r3, [r1, #52]	@ 0x34
    FLASH->SCAR_PRG2 = ((SecureAreaStartAddr - FLASH_BANK2_BASE) >> 8)                                | \
                       (((SecureAreaEndAddr - FLASH_BANK2_BASE) >> 8) << FLASH_SCAR_SEC_AREA_END_Pos) | \
                       (SecureAreaConfig & FLASH_SCAR_DMES);
  }
#endif /* DUAL_BANK */
}
2400a1c4:	bf00      	nop
2400a1c6:	3714      	adds	r7, #20
2400a1c8:	46bd      	mov	sp, r7
2400a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a1ce:	4770      	bx	lr
2400a1d0:	52002000 	.word	0x52002000

2400a1d4 <FLASH_OB_GetSecureArea>:
  * @param  SecureAreaEndAddr gives the secure area end address
  * @param  Bank Specifies the Bank
  * @retval None
  */
static void FLASH_OB_GetSecureArea(uint32_t *SecureAreaConfig, uint32_t *SecureAreaStartAddr, uint32_t *SecureAreaEndAddr, uint32_t Bank)
{
2400a1d4:	b480      	push	{r7}
2400a1d6:	b087      	sub	sp, #28
2400a1d8:	af00      	add	r7, sp, #0
2400a1da:	60f8      	str	r0, [r7, #12]
2400a1dc:	60b9      	str	r1, [r7, #8]
2400a1de:	607a      	str	r2, [r7, #4]
2400a1e0:	603b      	str	r3, [r7, #0]
  uint32_t regvalue = 0;
2400a1e2:	2300      	movs	r3, #0
2400a1e4:	617b      	str	r3, [r7, #20]
  uint32_t bankBase = 0;
2400a1e6:	2300      	movs	r3, #0
2400a1e8:	613b      	str	r3, [r7, #16]

  /* Check Bank parameter value */
  if(Bank == FLASH_BANK_1)
2400a1ea:	683b      	ldr	r3, [r7, #0]
2400a1ec:	2b01      	cmp	r3, #1
2400a1ee:	d105      	bne.n	2400a1fc <FLASH_OB_GetSecureArea+0x28>
  {
    regvalue = FLASH->SCAR_CUR1;
2400a1f0:	4b12      	ldr	r3, [pc, #72]	@ (2400a23c <FLASH_OB_GetSecureArea+0x68>)
2400a1f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2400a1f4:	617b      	str	r3, [r7, #20]
    bankBase = FLASH_BANK1_BASE;
2400a1f6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
2400a1fa:	613b      	str	r3, [r7, #16]
    bankBase = FLASH_BANK2_BASE;
  }
#endif /* DUAL_BANK */

  /* Get the secure area settings */
  (*SecureAreaConfig) = (regvalue & FLASH_SCAR_DMES);
2400a1fc:	697b      	ldr	r3, [r7, #20]
2400a1fe:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
2400a202:	68fb      	ldr	r3, [r7, #12]
2400a204:	601a      	str	r2, [r3, #0]
  (*SecureAreaStartAddr) = ((regvalue & FLASH_SCAR_SEC_AREA_START) << 8) + bankBase;
2400a206:	697b      	ldr	r3, [r7, #20]
2400a208:	021a      	lsls	r2, r3, #8
2400a20a:	4b0d      	ldr	r3, [pc, #52]	@ (2400a240 <FLASH_OB_GetSecureArea+0x6c>)
2400a20c:	4013      	ands	r3, r2
2400a20e:	693a      	ldr	r2, [r7, #16]
2400a210:	441a      	add	r2, r3
2400a212:	68bb      	ldr	r3, [r7, #8]
2400a214:	601a      	str	r2, [r3, #0]
  (*SecureAreaEndAddr) = (regvalue & FLASH_SCAR_SEC_AREA_END) >> FLASH_SCAR_SEC_AREA_END_Pos;
2400a216:	697b      	ldr	r3, [r7, #20]
2400a218:	0c1b      	lsrs	r3, r3, #16
2400a21a:	f3c3 020b 	ubfx	r2, r3, #0, #12
2400a21e:	687b      	ldr	r3, [r7, #4]
2400a220:	601a      	str	r2, [r3, #0]
  (*SecureAreaEndAddr) = ((*SecureAreaEndAddr) << 8) + bankBase;
2400a222:	687b      	ldr	r3, [r7, #4]
2400a224:	681b      	ldr	r3, [r3, #0]
2400a226:	021a      	lsls	r2, r3, #8
2400a228:	693b      	ldr	r3, [r7, #16]
2400a22a:	441a      	add	r2, r3
2400a22c:	687b      	ldr	r3, [r7, #4]
2400a22e:	601a      	str	r2, [r3, #0]
}
2400a230:	bf00      	nop
2400a232:	371c      	adds	r7, #28
2400a234:	46bd      	mov	sp, r7
2400a236:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a23a:	4770      	bx	lr
2400a23c:	52002000 	.word	0x52002000
2400a240:	000fff00 	.word	0x000fff00

2400a244 <FLASH_CRC_AddSector>:
  * @param  Sector Specifies the CRC sector number
  * @param  Bank Specifies the Bank
  * @retval None
  */
static void FLASH_CRC_AddSector(uint32_t Sector, uint32_t Bank)
{
2400a244:	b480      	push	{r7}
2400a246:	b083      	sub	sp, #12
2400a248:	af00      	add	r7, sp, #0
2400a24a:	6078      	str	r0, [r7, #4]
2400a24c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));

  if (Bank == FLASH_BANK_1)
2400a24e:	683b      	ldr	r3, [r7, #0]
2400a250:	2b01      	cmp	r3, #1
2400a252:	d10d      	bne.n	2400a270 <FLASH_CRC_AddSector+0x2c>
  {
    /* Clear CRC sector */
    FLASH->CRCCR1 &= (~FLASH_CRCCR_CRC_SECT);
2400a254:	4b09      	ldr	r3, [pc, #36]	@ (2400a27c <FLASH_CRC_AddSector+0x38>)
2400a256:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2400a258:	4a08      	ldr	r2, [pc, #32]	@ (2400a27c <FLASH_CRC_AddSector+0x38>)
2400a25a:	f023 0307 	bic.w	r3, r3, #7
2400a25e:	6513      	str	r3, [r2, #80]	@ 0x50

    /* Select CRC Sector and activate ADD_SECT bit */
    FLASH->CRCCR1 |= Sector | FLASH_CRCCR_ADD_SECT;
2400a260:	4b06      	ldr	r3, [pc, #24]	@ (2400a27c <FLASH_CRC_AddSector+0x38>)
2400a262:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
2400a264:	687b      	ldr	r3, [r7, #4]
2400a266:	4313      	orrs	r3, r2
2400a268:	4a04      	ldr	r2, [pc, #16]	@ (2400a27c <FLASH_CRC_AddSector+0x38>)
2400a26a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
2400a26e:	6513      	str	r3, [r2, #80]	@ 0x50

    /* Select CRC Sector and activate ADD_SECT bit */
    FLASH->CRCCR2 |= Sector | FLASH_CRCCR_ADD_SECT;
  }
#endif /* DUAL_BANK */
}
2400a270:	bf00      	nop
2400a272:	370c      	adds	r7, #12
2400a274:	46bd      	mov	sp, r7
2400a276:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a27a:	4770      	bx	lr
2400a27c:	52002000 	.word	0x52002000

2400a280 <FLASH_CRC_SelectAddress>:
  * @param  CRCEndAddr Specifies the CRC end address
  * @param  Bank Specifies the Bank
  * @retval None
  */
static void FLASH_CRC_SelectAddress(uint32_t CRCStartAddr, uint32_t CRCEndAddr, uint32_t Bank)
{
2400a280:	b480      	push	{r7}
2400a282:	b085      	sub	sp, #20
2400a284:	af00      	add	r7, sp, #0
2400a286:	60f8      	str	r0, [r7, #12]
2400a288:	60b9      	str	r1, [r7, #8]
2400a28a:	607a      	str	r2, [r7, #4]
  if (Bank == FLASH_BANK_1)
2400a28c:	687b      	ldr	r3, [r7, #4]
2400a28e:	2b01      	cmp	r3, #1
2400a290:	d105      	bne.n	2400a29e <FLASH_CRC_SelectAddress+0x1e>
  {
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(CRCStartAddr));
    assert_param(IS_FLASH_PROGRAM_ADDRESS_BANK1(CRCEndAddr));

    /* Write CRC Start and End addresses */
    FLASH->CRCSADD1 = CRCStartAddr;
2400a292:	4a06      	ldr	r2, [pc, #24]	@ (2400a2ac <FLASH_CRC_SelectAddress+0x2c>)
2400a294:	68fb      	ldr	r3, [r7, #12]
2400a296:	6553      	str	r3, [r2, #84]	@ 0x54
    FLASH->CRCEADD1 = CRCEndAddr;
2400a298:	4a04      	ldr	r2, [pc, #16]	@ (2400a2ac <FLASH_CRC_SelectAddress+0x2c>)
2400a29a:	68bb      	ldr	r3, [r7, #8]
2400a29c:	6593      	str	r3, [r2, #88]	@ 0x58
    /* Write CRC Start and End addresses */
    FLASH->CRCSADD2 = CRCStartAddr;
    FLASH->CRCEADD2 = CRCEndAddr;
  }
#endif /* DUAL_BANK */
}
2400a29e:	bf00      	nop
2400a2a0:	3714      	adds	r7, #20
2400a2a2:	46bd      	mov	sp, r7
2400a2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a2a8:	4770      	bx	lr
2400a2aa:	bf00      	nop
2400a2ac:	52002000 	.word	0x52002000

2400a2b0 <FLASH_OB_SharedRAM_Config>:
  * @param  SharedRamConfig specifies the Shared RAM configuration.
  *         This parameter can be a value of @ref FLASHEx_OB_TCM_AXI_SHARED
  * @retval None
  */
static void FLASH_OB_SharedRAM_Config(uint32_t SharedRamConfig)
{
2400a2b0:	b480      	push	{r7}
2400a2b2:	b083      	sub	sp, #12
2400a2b4:	af00      	add	r7, sp, #0
2400a2b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_OB_USER_TCM_AXI_SHARED(SharedRamConfig));

  /* Configure the TCM / AXI Shared RAM in the option bytes register */
  MODIFY_REG(FLASH->OPTSR2_PRG, FLASH_OPTSR2_TCM_AXI_SHARED, SharedRamConfig);
2400a2b8:	4b06      	ldr	r3, [pc, #24]	@ (2400a2d4 <FLASH_OB_SharedRAM_Config+0x24>)
2400a2ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
2400a2bc:	f023 0203 	bic.w	r2, r3, #3
2400a2c0:	4904      	ldr	r1, [pc, #16]	@ (2400a2d4 <FLASH_OB_SharedRAM_Config+0x24>)
2400a2c2:	687b      	ldr	r3, [r7, #4]
2400a2c4:	4313      	orrs	r3, r2
2400a2c6:	674b      	str	r3, [r1, #116]	@ 0x74
}
2400a2c8:	bf00      	nop
2400a2ca:	370c      	adds	r7, #12
2400a2cc:	46bd      	mov	sp, r7
2400a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a2d2:	4770      	bx	lr
2400a2d4:	52002000 	.word	0x52002000

2400a2d8 <FLASH_OB_SharedRAM_GetConfig>:
  * @brief  Get the TCM / AXI Shared RAM configuration.
  * @retval SharedRamConfig returns the TCM / AXI Shared RAM configuration.
  *         This return value can be a value of @ref FLASHEx_OB_TCM_AXI_SHARED
  */
static uint32_t FLASH_OB_SharedRAM_GetConfig(void)
{
2400a2d8:	b480      	push	{r7}
2400a2da:	af00      	add	r7, sp, #0
  return (FLASH->OPTSR2_CUR & FLASH_OPTSR2_TCM_AXI_SHARED);
2400a2dc:	4b04      	ldr	r3, [pc, #16]	@ (2400a2f0 <FLASH_OB_SharedRAM_GetConfig+0x18>)
2400a2de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2400a2e0:	f003 0303 	and.w	r3, r3, #3
}
2400a2e4:	4618      	mov	r0, r3
2400a2e6:	46bd      	mov	sp, r7
2400a2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a2ec:	4770      	bx	lr
2400a2ee:	bf00      	nop
2400a2f0:	52002000 	.word	0x52002000

2400a2f4 <FLASH_OB_CPUFreq_BoostConfig>:
  * @param  FreqBoost specifies the CPU Frequency Boost state.
  *         This parameter can be a value of @ref FLASHEx_OB_CPUFREQ_BOOST
  * @retval None
  */
static void FLASH_OB_CPUFreq_BoostConfig(uint32_t FreqBoost)
{
2400a2f4:	b480      	push	{r7}
2400a2f6:	b083      	sub	sp, #12
2400a2f8:	af00      	add	r7, sp, #0
2400a2fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_OB_USER_CPUFREQ_BOOST(FreqBoost));

  /* Configure the CPU Frequency Boost in the option bytes register */
  MODIFY_REG(FLASH->OPTSR2_PRG, FLASH_OPTSR2_CPUFREQ_BOOST, FreqBoost);
2400a2fc:	4b06      	ldr	r3, [pc, #24]	@ (2400a318 <FLASH_OB_CPUFreq_BoostConfig+0x24>)
2400a2fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
2400a300:	f023 0204 	bic.w	r2, r3, #4
2400a304:	4904      	ldr	r1, [pc, #16]	@ (2400a318 <FLASH_OB_CPUFreq_BoostConfig+0x24>)
2400a306:	687b      	ldr	r3, [r7, #4]
2400a308:	4313      	orrs	r3, r2
2400a30a:	674b      	str	r3, [r1, #116]	@ 0x74
}
2400a30c:	bf00      	nop
2400a30e:	370c      	adds	r7, #12
2400a310:	46bd      	mov	sp, r7
2400a312:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a316:	4770      	bx	lr
2400a318:	52002000 	.word	0x52002000

2400a31c <FLASH_OB_CPUFreq_GetBoost>:
  * @brief  Get the CPU Frequency Boost state.
  * @retval FreqBoost returns the CPU Frequency Boost state.
  *         This return value can be a value of @ref FLASHEx_OB_CPUFREQ_BOOST
  */
static uint32_t FLASH_OB_CPUFreq_GetBoost(void)
{
2400a31c:	b480      	push	{r7}
2400a31e:	af00      	add	r7, sp, #0
  return (FLASH->OPTSR2_CUR & FLASH_OPTSR2_CPUFREQ_BOOST);
2400a320:	4b04      	ldr	r3, [pc, #16]	@ (2400a334 <FLASH_OB_CPUFreq_GetBoost+0x18>)
2400a322:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2400a324:	f003 0304 	and.w	r3, r3, #4
}
2400a328:	4618      	mov	r0, r3
2400a32a:	46bd      	mov	sp, r7
2400a32c:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a330:	4770      	bx	lr
2400a332:	bf00      	nop
2400a334:	52002000 	.word	0x52002000

2400a338 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
2400a338:	b480      	push	{r7}
2400a33a:	b089      	sub	sp, #36	@ 0x24
2400a33c:	af00      	add	r7, sp, #0
2400a33e:	6078      	str	r0, [r7, #4]
2400a340:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
2400a342:	2300      	movs	r3, #0
2400a344:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
2400a346:	4b86      	ldr	r3, [pc, #536]	@ (2400a560 <HAL_GPIO_Init+0x228>)
2400a348:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
2400a34a:	e18c      	b.n	2400a666 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
2400a34c:	683b      	ldr	r3, [r7, #0]
2400a34e:	681a      	ldr	r2, [r3, #0]
2400a350:	2101      	movs	r1, #1
2400a352:	69fb      	ldr	r3, [r7, #28]
2400a354:	fa01 f303 	lsl.w	r3, r1, r3
2400a358:	4013      	ands	r3, r2
2400a35a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
2400a35c:	693b      	ldr	r3, [r7, #16]
2400a35e:	2b00      	cmp	r3, #0
2400a360:	f000 817e 	beq.w	2400a660 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
2400a364:	683b      	ldr	r3, [r7, #0]
2400a366:	685b      	ldr	r3, [r3, #4]
2400a368:	f003 0303 	and.w	r3, r3, #3
2400a36c:	2b01      	cmp	r3, #1
2400a36e:	d005      	beq.n	2400a37c <HAL_GPIO_Init+0x44>
2400a370:	683b      	ldr	r3, [r7, #0]
2400a372:	685b      	ldr	r3, [r3, #4]
2400a374:	f003 0303 	and.w	r3, r3, #3
2400a378:	2b02      	cmp	r3, #2
2400a37a:	d130      	bne.n	2400a3de <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
2400a37c:	687b      	ldr	r3, [r7, #4]
2400a37e:	689b      	ldr	r3, [r3, #8]
2400a380:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
2400a382:	69fb      	ldr	r3, [r7, #28]
2400a384:	005b      	lsls	r3, r3, #1
2400a386:	2203      	movs	r2, #3
2400a388:	fa02 f303 	lsl.w	r3, r2, r3
2400a38c:	43db      	mvns	r3, r3
2400a38e:	69ba      	ldr	r2, [r7, #24]
2400a390:	4013      	ands	r3, r2
2400a392:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
2400a394:	683b      	ldr	r3, [r7, #0]
2400a396:	68da      	ldr	r2, [r3, #12]
2400a398:	69fb      	ldr	r3, [r7, #28]
2400a39a:	005b      	lsls	r3, r3, #1
2400a39c:	fa02 f303 	lsl.w	r3, r2, r3
2400a3a0:	69ba      	ldr	r2, [r7, #24]
2400a3a2:	4313      	orrs	r3, r2
2400a3a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
2400a3a6:	687b      	ldr	r3, [r7, #4]
2400a3a8:	69ba      	ldr	r2, [r7, #24]
2400a3aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
2400a3ac:	687b      	ldr	r3, [r7, #4]
2400a3ae:	685b      	ldr	r3, [r3, #4]
2400a3b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
2400a3b2:	2201      	movs	r2, #1
2400a3b4:	69fb      	ldr	r3, [r7, #28]
2400a3b6:	fa02 f303 	lsl.w	r3, r2, r3
2400a3ba:	43db      	mvns	r3, r3
2400a3bc:	69ba      	ldr	r2, [r7, #24]
2400a3be:	4013      	ands	r3, r2
2400a3c0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
2400a3c2:	683b      	ldr	r3, [r7, #0]
2400a3c4:	685b      	ldr	r3, [r3, #4]
2400a3c6:	091b      	lsrs	r3, r3, #4
2400a3c8:	f003 0201 	and.w	r2, r3, #1
2400a3cc:	69fb      	ldr	r3, [r7, #28]
2400a3ce:	fa02 f303 	lsl.w	r3, r2, r3
2400a3d2:	69ba      	ldr	r2, [r7, #24]
2400a3d4:	4313      	orrs	r3, r2
2400a3d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
2400a3d8:	687b      	ldr	r3, [r7, #4]
2400a3da:	69ba      	ldr	r2, [r7, #24]
2400a3dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
2400a3de:	683b      	ldr	r3, [r7, #0]
2400a3e0:	685b      	ldr	r3, [r3, #4]
2400a3e2:	f003 0303 	and.w	r3, r3, #3
2400a3e6:	2b03      	cmp	r3, #3
2400a3e8:	d017      	beq.n	2400a41a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
2400a3ea:	687b      	ldr	r3, [r7, #4]
2400a3ec:	68db      	ldr	r3, [r3, #12]
2400a3ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
2400a3f0:	69fb      	ldr	r3, [r7, #28]
2400a3f2:	005b      	lsls	r3, r3, #1
2400a3f4:	2203      	movs	r2, #3
2400a3f6:	fa02 f303 	lsl.w	r3, r2, r3
2400a3fa:	43db      	mvns	r3, r3
2400a3fc:	69ba      	ldr	r2, [r7, #24]
2400a3fe:	4013      	ands	r3, r2
2400a400:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
2400a402:	683b      	ldr	r3, [r7, #0]
2400a404:	689a      	ldr	r2, [r3, #8]
2400a406:	69fb      	ldr	r3, [r7, #28]
2400a408:	005b      	lsls	r3, r3, #1
2400a40a:	fa02 f303 	lsl.w	r3, r2, r3
2400a40e:	69ba      	ldr	r2, [r7, #24]
2400a410:	4313      	orrs	r3, r2
2400a412:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
2400a414:	687b      	ldr	r3, [r7, #4]
2400a416:	69ba      	ldr	r2, [r7, #24]
2400a418:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
2400a41a:	683b      	ldr	r3, [r7, #0]
2400a41c:	685b      	ldr	r3, [r3, #4]
2400a41e:	f003 0303 	and.w	r3, r3, #3
2400a422:	2b02      	cmp	r3, #2
2400a424:	d123      	bne.n	2400a46e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
2400a426:	69fb      	ldr	r3, [r7, #28]
2400a428:	08da      	lsrs	r2, r3, #3
2400a42a:	687b      	ldr	r3, [r7, #4]
2400a42c:	3208      	adds	r2, #8
2400a42e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2400a432:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
2400a434:	69fb      	ldr	r3, [r7, #28]
2400a436:	f003 0307 	and.w	r3, r3, #7
2400a43a:	009b      	lsls	r3, r3, #2
2400a43c:	220f      	movs	r2, #15
2400a43e:	fa02 f303 	lsl.w	r3, r2, r3
2400a442:	43db      	mvns	r3, r3
2400a444:	69ba      	ldr	r2, [r7, #24]
2400a446:	4013      	ands	r3, r2
2400a448:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
2400a44a:	683b      	ldr	r3, [r7, #0]
2400a44c:	691a      	ldr	r2, [r3, #16]
2400a44e:	69fb      	ldr	r3, [r7, #28]
2400a450:	f003 0307 	and.w	r3, r3, #7
2400a454:	009b      	lsls	r3, r3, #2
2400a456:	fa02 f303 	lsl.w	r3, r2, r3
2400a45a:	69ba      	ldr	r2, [r7, #24]
2400a45c:	4313      	orrs	r3, r2
2400a45e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
2400a460:	69fb      	ldr	r3, [r7, #28]
2400a462:	08da      	lsrs	r2, r3, #3
2400a464:	687b      	ldr	r3, [r7, #4]
2400a466:	3208      	adds	r2, #8
2400a468:	69b9      	ldr	r1, [r7, #24]
2400a46a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
2400a46e:	687b      	ldr	r3, [r7, #4]
2400a470:	681b      	ldr	r3, [r3, #0]
2400a472:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
2400a474:	69fb      	ldr	r3, [r7, #28]
2400a476:	005b      	lsls	r3, r3, #1
2400a478:	2203      	movs	r2, #3
2400a47a:	fa02 f303 	lsl.w	r3, r2, r3
2400a47e:	43db      	mvns	r3, r3
2400a480:	69ba      	ldr	r2, [r7, #24]
2400a482:	4013      	ands	r3, r2
2400a484:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
2400a486:	683b      	ldr	r3, [r7, #0]
2400a488:	685b      	ldr	r3, [r3, #4]
2400a48a:	f003 0203 	and.w	r2, r3, #3
2400a48e:	69fb      	ldr	r3, [r7, #28]
2400a490:	005b      	lsls	r3, r3, #1
2400a492:	fa02 f303 	lsl.w	r3, r2, r3
2400a496:	69ba      	ldr	r2, [r7, #24]
2400a498:	4313      	orrs	r3, r2
2400a49a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
2400a49c:	687b      	ldr	r3, [r7, #4]
2400a49e:	69ba      	ldr	r2, [r7, #24]
2400a4a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
2400a4a2:	683b      	ldr	r3, [r7, #0]
2400a4a4:	685b      	ldr	r3, [r3, #4]
2400a4a6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
2400a4aa:	2b00      	cmp	r3, #0
2400a4ac:	f000 80d8 	beq.w	2400a660 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
2400a4b0:	4b2c      	ldr	r3, [pc, #176]	@ (2400a564 <HAL_GPIO_Init+0x22c>)
2400a4b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
2400a4b6:	4a2b      	ldr	r2, [pc, #172]	@ (2400a564 <HAL_GPIO_Init+0x22c>)
2400a4b8:	f043 0302 	orr.w	r3, r3, #2
2400a4bc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
2400a4c0:	4b28      	ldr	r3, [pc, #160]	@ (2400a564 <HAL_GPIO_Init+0x22c>)
2400a4c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
2400a4c6:	f003 0302 	and.w	r3, r3, #2
2400a4ca:	60fb      	str	r3, [r7, #12]
2400a4cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
2400a4ce:	4a26      	ldr	r2, [pc, #152]	@ (2400a568 <HAL_GPIO_Init+0x230>)
2400a4d0:	69fb      	ldr	r3, [r7, #28]
2400a4d2:	089b      	lsrs	r3, r3, #2
2400a4d4:	3302      	adds	r3, #2
2400a4d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
2400a4da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
2400a4dc:	69fb      	ldr	r3, [r7, #28]
2400a4de:	f003 0303 	and.w	r3, r3, #3
2400a4e2:	009b      	lsls	r3, r3, #2
2400a4e4:	220f      	movs	r2, #15
2400a4e6:	fa02 f303 	lsl.w	r3, r2, r3
2400a4ea:	43db      	mvns	r3, r3
2400a4ec:	69ba      	ldr	r2, [r7, #24]
2400a4ee:	4013      	ands	r3, r2
2400a4f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
2400a4f2:	687b      	ldr	r3, [r7, #4]
2400a4f4:	4a1d      	ldr	r2, [pc, #116]	@ (2400a56c <HAL_GPIO_Init+0x234>)
2400a4f6:	4293      	cmp	r3, r2
2400a4f8:	d04a      	beq.n	2400a590 <HAL_GPIO_Init+0x258>
2400a4fa:	687b      	ldr	r3, [r7, #4]
2400a4fc:	4a1c      	ldr	r2, [pc, #112]	@ (2400a570 <HAL_GPIO_Init+0x238>)
2400a4fe:	4293      	cmp	r3, r2
2400a500:	d02b      	beq.n	2400a55a <HAL_GPIO_Init+0x222>
2400a502:	687b      	ldr	r3, [r7, #4]
2400a504:	4a1b      	ldr	r2, [pc, #108]	@ (2400a574 <HAL_GPIO_Init+0x23c>)
2400a506:	4293      	cmp	r3, r2
2400a508:	d025      	beq.n	2400a556 <HAL_GPIO_Init+0x21e>
2400a50a:	687b      	ldr	r3, [r7, #4]
2400a50c:	4a1a      	ldr	r2, [pc, #104]	@ (2400a578 <HAL_GPIO_Init+0x240>)
2400a50e:	4293      	cmp	r3, r2
2400a510:	d01f      	beq.n	2400a552 <HAL_GPIO_Init+0x21a>
2400a512:	687b      	ldr	r3, [r7, #4]
2400a514:	4a19      	ldr	r2, [pc, #100]	@ (2400a57c <HAL_GPIO_Init+0x244>)
2400a516:	4293      	cmp	r3, r2
2400a518:	d019      	beq.n	2400a54e <HAL_GPIO_Init+0x216>
2400a51a:	687b      	ldr	r3, [r7, #4]
2400a51c:	4a18      	ldr	r2, [pc, #96]	@ (2400a580 <HAL_GPIO_Init+0x248>)
2400a51e:	4293      	cmp	r3, r2
2400a520:	d013      	beq.n	2400a54a <HAL_GPIO_Init+0x212>
2400a522:	687b      	ldr	r3, [r7, #4]
2400a524:	4a17      	ldr	r2, [pc, #92]	@ (2400a584 <HAL_GPIO_Init+0x24c>)
2400a526:	4293      	cmp	r3, r2
2400a528:	d00d      	beq.n	2400a546 <HAL_GPIO_Init+0x20e>
2400a52a:	687b      	ldr	r3, [r7, #4]
2400a52c:	4a16      	ldr	r2, [pc, #88]	@ (2400a588 <HAL_GPIO_Init+0x250>)
2400a52e:	4293      	cmp	r3, r2
2400a530:	d007      	beq.n	2400a542 <HAL_GPIO_Init+0x20a>
2400a532:	687b      	ldr	r3, [r7, #4]
2400a534:	4a15      	ldr	r2, [pc, #84]	@ (2400a58c <HAL_GPIO_Init+0x254>)
2400a536:	4293      	cmp	r3, r2
2400a538:	d101      	bne.n	2400a53e <HAL_GPIO_Init+0x206>
2400a53a:	2309      	movs	r3, #9
2400a53c:	e029      	b.n	2400a592 <HAL_GPIO_Init+0x25a>
2400a53e:	230a      	movs	r3, #10
2400a540:	e027      	b.n	2400a592 <HAL_GPIO_Init+0x25a>
2400a542:	2307      	movs	r3, #7
2400a544:	e025      	b.n	2400a592 <HAL_GPIO_Init+0x25a>
2400a546:	2306      	movs	r3, #6
2400a548:	e023      	b.n	2400a592 <HAL_GPIO_Init+0x25a>
2400a54a:	2305      	movs	r3, #5
2400a54c:	e021      	b.n	2400a592 <HAL_GPIO_Init+0x25a>
2400a54e:	2304      	movs	r3, #4
2400a550:	e01f      	b.n	2400a592 <HAL_GPIO_Init+0x25a>
2400a552:	2303      	movs	r3, #3
2400a554:	e01d      	b.n	2400a592 <HAL_GPIO_Init+0x25a>
2400a556:	2302      	movs	r3, #2
2400a558:	e01b      	b.n	2400a592 <HAL_GPIO_Init+0x25a>
2400a55a:	2301      	movs	r3, #1
2400a55c:	e019      	b.n	2400a592 <HAL_GPIO_Init+0x25a>
2400a55e:	bf00      	nop
2400a560:	58000080 	.word	0x58000080
2400a564:	58024400 	.word	0x58024400
2400a568:	58000400 	.word	0x58000400
2400a56c:	58020000 	.word	0x58020000
2400a570:	58020400 	.word	0x58020400
2400a574:	58020800 	.word	0x58020800
2400a578:	58020c00 	.word	0x58020c00
2400a57c:	58021000 	.word	0x58021000
2400a580:	58021400 	.word	0x58021400
2400a584:	58021800 	.word	0x58021800
2400a588:	58021c00 	.word	0x58021c00
2400a58c:	58022400 	.word	0x58022400
2400a590:	2300      	movs	r3, #0
2400a592:	69fa      	ldr	r2, [r7, #28]
2400a594:	f002 0203 	and.w	r2, r2, #3
2400a598:	0092      	lsls	r2, r2, #2
2400a59a:	4093      	lsls	r3, r2
2400a59c:	69ba      	ldr	r2, [r7, #24]
2400a59e:	4313      	orrs	r3, r2
2400a5a0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
2400a5a2:	4938      	ldr	r1, [pc, #224]	@ (2400a684 <HAL_GPIO_Init+0x34c>)
2400a5a4:	69fb      	ldr	r3, [r7, #28]
2400a5a6:	089b      	lsrs	r3, r3, #2
2400a5a8:	3302      	adds	r3, #2
2400a5aa:	69ba      	ldr	r2, [r7, #24]
2400a5ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
2400a5b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
2400a5b4:	681b      	ldr	r3, [r3, #0]
2400a5b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
2400a5b8:	693b      	ldr	r3, [r7, #16]
2400a5ba:	43db      	mvns	r3, r3
2400a5bc:	69ba      	ldr	r2, [r7, #24]
2400a5be:	4013      	ands	r3, r2
2400a5c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
2400a5c2:	683b      	ldr	r3, [r7, #0]
2400a5c4:	685b      	ldr	r3, [r3, #4]
2400a5c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
2400a5ca:	2b00      	cmp	r3, #0
2400a5cc:	d003      	beq.n	2400a5d6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
2400a5ce:	69ba      	ldr	r2, [r7, #24]
2400a5d0:	693b      	ldr	r3, [r7, #16]
2400a5d2:	4313      	orrs	r3, r2
2400a5d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
2400a5d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
2400a5da:	69bb      	ldr	r3, [r7, #24]
2400a5dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
2400a5de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
2400a5e2:	685b      	ldr	r3, [r3, #4]
2400a5e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
2400a5e6:	693b      	ldr	r3, [r7, #16]
2400a5e8:	43db      	mvns	r3, r3
2400a5ea:	69ba      	ldr	r2, [r7, #24]
2400a5ec:	4013      	ands	r3, r2
2400a5ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
2400a5f0:	683b      	ldr	r3, [r7, #0]
2400a5f2:	685b      	ldr	r3, [r3, #4]
2400a5f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
2400a5f8:	2b00      	cmp	r3, #0
2400a5fa:	d003      	beq.n	2400a604 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
2400a5fc:	69ba      	ldr	r2, [r7, #24]
2400a5fe:	693b      	ldr	r3, [r7, #16]
2400a600:	4313      	orrs	r3, r2
2400a602:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
2400a604:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
2400a608:	69bb      	ldr	r3, [r7, #24]
2400a60a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
2400a60c:	697b      	ldr	r3, [r7, #20]
2400a60e:	685b      	ldr	r3, [r3, #4]
2400a610:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
2400a612:	693b      	ldr	r3, [r7, #16]
2400a614:	43db      	mvns	r3, r3
2400a616:	69ba      	ldr	r2, [r7, #24]
2400a618:	4013      	ands	r3, r2
2400a61a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
2400a61c:	683b      	ldr	r3, [r7, #0]
2400a61e:	685b      	ldr	r3, [r3, #4]
2400a620:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
2400a624:	2b00      	cmp	r3, #0
2400a626:	d003      	beq.n	2400a630 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
2400a628:	69ba      	ldr	r2, [r7, #24]
2400a62a:	693b      	ldr	r3, [r7, #16]
2400a62c:	4313      	orrs	r3, r2
2400a62e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
2400a630:	697b      	ldr	r3, [r7, #20]
2400a632:	69ba      	ldr	r2, [r7, #24]
2400a634:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
2400a636:	697b      	ldr	r3, [r7, #20]
2400a638:	681b      	ldr	r3, [r3, #0]
2400a63a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
2400a63c:	693b      	ldr	r3, [r7, #16]
2400a63e:	43db      	mvns	r3, r3
2400a640:	69ba      	ldr	r2, [r7, #24]
2400a642:	4013      	ands	r3, r2
2400a644:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
2400a646:	683b      	ldr	r3, [r7, #0]
2400a648:	685b      	ldr	r3, [r3, #4]
2400a64a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
2400a64e:	2b00      	cmp	r3, #0
2400a650:	d003      	beq.n	2400a65a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
2400a652:	69ba      	ldr	r2, [r7, #24]
2400a654:	693b      	ldr	r3, [r7, #16]
2400a656:	4313      	orrs	r3, r2
2400a658:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
2400a65a:	697b      	ldr	r3, [r7, #20]
2400a65c:	69ba      	ldr	r2, [r7, #24]
2400a65e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
2400a660:	69fb      	ldr	r3, [r7, #28]
2400a662:	3301      	adds	r3, #1
2400a664:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
2400a666:	683b      	ldr	r3, [r7, #0]
2400a668:	681a      	ldr	r2, [r3, #0]
2400a66a:	69fb      	ldr	r3, [r7, #28]
2400a66c:	fa22 f303 	lsr.w	r3, r2, r3
2400a670:	2b00      	cmp	r3, #0
2400a672:	f47f ae6b 	bne.w	2400a34c <HAL_GPIO_Init+0x14>
  }
}
2400a676:	bf00      	nop
2400a678:	bf00      	nop
2400a67a:	3724      	adds	r7, #36	@ 0x24
2400a67c:	46bd      	mov	sp, r7
2400a67e:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a682:	4770      	bx	lr
2400a684:	58000400 	.word	0x58000400

2400a688 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
2400a688:	b480      	push	{r7}
2400a68a:	b087      	sub	sp, #28
2400a68c:	af00      	add	r7, sp, #0
2400a68e:	6078      	str	r0, [r7, #4]
2400a690:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
2400a692:	2300      	movs	r3, #0
2400a694:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
2400a696:	4b72      	ldr	r3, [pc, #456]	@ (2400a860 <HAL_GPIO_DeInit+0x1d8>)
2400a698:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
2400a69a:	e0d3      	b.n	2400a844 <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
2400a69c:	2201      	movs	r2, #1
2400a69e:	697b      	ldr	r3, [r7, #20]
2400a6a0:	fa02 f303 	lsl.w	r3, r2, r3
2400a6a4:	683a      	ldr	r2, [r7, #0]
2400a6a6:	4013      	ands	r3, r2
2400a6a8:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
2400a6aa:	68fb      	ldr	r3, [r7, #12]
2400a6ac:	2b00      	cmp	r3, #0
2400a6ae:	f000 80c6 	beq.w	2400a83e <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
2400a6b2:	4a6c      	ldr	r2, [pc, #432]	@ (2400a864 <HAL_GPIO_DeInit+0x1dc>)
2400a6b4:	697b      	ldr	r3, [r7, #20]
2400a6b6:	089b      	lsrs	r3, r3, #2
2400a6b8:	3302      	adds	r3, #2
2400a6ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
2400a6be:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
2400a6c0:	697b      	ldr	r3, [r7, #20]
2400a6c2:	f003 0303 	and.w	r3, r3, #3
2400a6c6:	009b      	lsls	r3, r3, #2
2400a6c8:	220f      	movs	r2, #15
2400a6ca:	fa02 f303 	lsl.w	r3, r2, r3
2400a6ce:	68ba      	ldr	r2, [r7, #8]
2400a6d0:	4013      	ands	r3, r2
2400a6d2:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
2400a6d4:	687b      	ldr	r3, [r7, #4]
2400a6d6:	4a64      	ldr	r2, [pc, #400]	@ (2400a868 <HAL_GPIO_DeInit+0x1e0>)
2400a6d8:	4293      	cmp	r3, r2
2400a6da:	d031      	beq.n	2400a740 <HAL_GPIO_DeInit+0xb8>
2400a6dc:	687b      	ldr	r3, [r7, #4]
2400a6de:	4a63      	ldr	r2, [pc, #396]	@ (2400a86c <HAL_GPIO_DeInit+0x1e4>)
2400a6e0:	4293      	cmp	r3, r2
2400a6e2:	d02b      	beq.n	2400a73c <HAL_GPIO_DeInit+0xb4>
2400a6e4:	687b      	ldr	r3, [r7, #4]
2400a6e6:	4a62      	ldr	r2, [pc, #392]	@ (2400a870 <HAL_GPIO_DeInit+0x1e8>)
2400a6e8:	4293      	cmp	r3, r2
2400a6ea:	d025      	beq.n	2400a738 <HAL_GPIO_DeInit+0xb0>
2400a6ec:	687b      	ldr	r3, [r7, #4]
2400a6ee:	4a61      	ldr	r2, [pc, #388]	@ (2400a874 <HAL_GPIO_DeInit+0x1ec>)
2400a6f0:	4293      	cmp	r3, r2
2400a6f2:	d01f      	beq.n	2400a734 <HAL_GPIO_DeInit+0xac>
2400a6f4:	687b      	ldr	r3, [r7, #4]
2400a6f6:	4a60      	ldr	r2, [pc, #384]	@ (2400a878 <HAL_GPIO_DeInit+0x1f0>)
2400a6f8:	4293      	cmp	r3, r2
2400a6fa:	d019      	beq.n	2400a730 <HAL_GPIO_DeInit+0xa8>
2400a6fc:	687b      	ldr	r3, [r7, #4]
2400a6fe:	4a5f      	ldr	r2, [pc, #380]	@ (2400a87c <HAL_GPIO_DeInit+0x1f4>)
2400a700:	4293      	cmp	r3, r2
2400a702:	d013      	beq.n	2400a72c <HAL_GPIO_DeInit+0xa4>
2400a704:	687b      	ldr	r3, [r7, #4]
2400a706:	4a5e      	ldr	r2, [pc, #376]	@ (2400a880 <HAL_GPIO_DeInit+0x1f8>)
2400a708:	4293      	cmp	r3, r2
2400a70a:	d00d      	beq.n	2400a728 <HAL_GPIO_DeInit+0xa0>
2400a70c:	687b      	ldr	r3, [r7, #4]
2400a70e:	4a5d      	ldr	r2, [pc, #372]	@ (2400a884 <HAL_GPIO_DeInit+0x1fc>)
2400a710:	4293      	cmp	r3, r2
2400a712:	d007      	beq.n	2400a724 <HAL_GPIO_DeInit+0x9c>
2400a714:	687b      	ldr	r3, [r7, #4]
2400a716:	4a5c      	ldr	r2, [pc, #368]	@ (2400a888 <HAL_GPIO_DeInit+0x200>)
2400a718:	4293      	cmp	r3, r2
2400a71a:	d101      	bne.n	2400a720 <HAL_GPIO_DeInit+0x98>
2400a71c:	2309      	movs	r3, #9
2400a71e:	e010      	b.n	2400a742 <HAL_GPIO_DeInit+0xba>
2400a720:	230a      	movs	r3, #10
2400a722:	e00e      	b.n	2400a742 <HAL_GPIO_DeInit+0xba>
2400a724:	2307      	movs	r3, #7
2400a726:	e00c      	b.n	2400a742 <HAL_GPIO_DeInit+0xba>
2400a728:	2306      	movs	r3, #6
2400a72a:	e00a      	b.n	2400a742 <HAL_GPIO_DeInit+0xba>
2400a72c:	2305      	movs	r3, #5
2400a72e:	e008      	b.n	2400a742 <HAL_GPIO_DeInit+0xba>
2400a730:	2304      	movs	r3, #4
2400a732:	e006      	b.n	2400a742 <HAL_GPIO_DeInit+0xba>
2400a734:	2303      	movs	r3, #3
2400a736:	e004      	b.n	2400a742 <HAL_GPIO_DeInit+0xba>
2400a738:	2302      	movs	r3, #2
2400a73a:	e002      	b.n	2400a742 <HAL_GPIO_DeInit+0xba>
2400a73c:	2301      	movs	r3, #1
2400a73e:	e000      	b.n	2400a742 <HAL_GPIO_DeInit+0xba>
2400a740:	2300      	movs	r3, #0
2400a742:	697a      	ldr	r2, [r7, #20]
2400a744:	f002 0203 	and.w	r2, r2, #3
2400a748:	0092      	lsls	r2, r2, #2
2400a74a:	4093      	lsls	r3, r2
2400a74c:	68ba      	ldr	r2, [r7, #8]
2400a74e:	429a      	cmp	r2, r3
2400a750:	d136      	bne.n	2400a7c0 <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
2400a752:	693b      	ldr	r3, [r7, #16]
2400a754:	681a      	ldr	r2, [r3, #0]
2400a756:	68fb      	ldr	r3, [r7, #12]
2400a758:	43db      	mvns	r3, r3
2400a75a:	401a      	ands	r2, r3
2400a75c:	693b      	ldr	r3, [r7, #16]
2400a75e:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
2400a760:	693b      	ldr	r3, [r7, #16]
2400a762:	685a      	ldr	r2, [r3, #4]
2400a764:	68fb      	ldr	r3, [r7, #12]
2400a766:	43db      	mvns	r3, r3
2400a768:	401a      	ands	r2, r3
2400a76a:	693b      	ldr	r3, [r7, #16]
2400a76c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
2400a76e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
2400a772:	685a      	ldr	r2, [r3, #4]
2400a774:	68fb      	ldr	r3, [r7, #12]
2400a776:	43db      	mvns	r3, r3
2400a778:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
2400a77c:	4013      	ands	r3, r2
2400a77e:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
2400a780:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
2400a784:	681a      	ldr	r2, [r3, #0]
2400a786:	68fb      	ldr	r3, [r7, #12]
2400a788:	43db      	mvns	r3, r3
2400a78a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
2400a78e:	4013      	ands	r3, r2
2400a790:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
2400a792:	697b      	ldr	r3, [r7, #20]
2400a794:	f003 0303 	and.w	r3, r3, #3
2400a798:	009b      	lsls	r3, r3, #2
2400a79a:	220f      	movs	r2, #15
2400a79c:	fa02 f303 	lsl.w	r3, r2, r3
2400a7a0:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
2400a7a2:	4a30      	ldr	r2, [pc, #192]	@ (2400a864 <HAL_GPIO_DeInit+0x1dc>)
2400a7a4:	697b      	ldr	r3, [r7, #20]
2400a7a6:	089b      	lsrs	r3, r3, #2
2400a7a8:	3302      	adds	r3, #2
2400a7aa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
2400a7ae:	68bb      	ldr	r3, [r7, #8]
2400a7b0:	43da      	mvns	r2, r3
2400a7b2:	482c      	ldr	r0, [pc, #176]	@ (2400a864 <HAL_GPIO_DeInit+0x1dc>)
2400a7b4:	697b      	ldr	r3, [r7, #20]
2400a7b6:	089b      	lsrs	r3, r3, #2
2400a7b8:	400a      	ands	r2, r1
2400a7ba:	3302      	adds	r3, #2
2400a7bc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
2400a7c0:	687b      	ldr	r3, [r7, #4]
2400a7c2:	681a      	ldr	r2, [r3, #0]
2400a7c4:	697b      	ldr	r3, [r7, #20]
2400a7c6:	005b      	lsls	r3, r3, #1
2400a7c8:	2103      	movs	r1, #3
2400a7ca:	fa01 f303 	lsl.w	r3, r1, r3
2400a7ce:	431a      	orrs	r2, r3
2400a7d0:	687b      	ldr	r3, [r7, #4]
2400a7d2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
2400a7d4:	697b      	ldr	r3, [r7, #20]
2400a7d6:	08da      	lsrs	r2, r3, #3
2400a7d8:	687b      	ldr	r3, [r7, #4]
2400a7da:	3208      	adds	r2, #8
2400a7dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
2400a7e0:	697b      	ldr	r3, [r7, #20]
2400a7e2:	f003 0307 	and.w	r3, r3, #7
2400a7e6:	009b      	lsls	r3, r3, #2
2400a7e8:	220f      	movs	r2, #15
2400a7ea:	fa02 f303 	lsl.w	r3, r2, r3
2400a7ee:	43db      	mvns	r3, r3
2400a7f0:	697a      	ldr	r2, [r7, #20]
2400a7f2:	08d2      	lsrs	r2, r2, #3
2400a7f4:	4019      	ands	r1, r3
2400a7f6:	687b      	ldr	r3, [r7, #4]
2400a7f8:	3208      	adds	r2, #8
2400a7fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
2400a7fe:	687b      	ldr	r3, [r7, #4]
2400a800:	68da      	ldr	r2, [r3, #12]
2400a802:	697b      	ldr	r3, [r7, #20]
2400a804:	005b      	lsls	r3, r3, #1
2400a806:	2103      	movs	r1, #3
2400a808:	fa01 f303 	lsl.w	r3, r1, r3
2400a80c:	43db      	mvns	r3, r3
2400a80e:	401a      	ands	r2, r3
2400a810:	687b      	ldr	r3, [r7, #4]
2400a812:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
2400a814:	687b      	ldr	r3, [r7, #4]
2400a816:	685a      	ldr	r2, [r3, #4]
2400a818:	2101      	movs	r1, #1
2400a81a:	697b      	ldr	r3, [r7, #20]
2400a81c:	fa01 f303 	lsl.w	r3, r1, r3
2400a820:	43db      	mvns	r3, r3
2400a822:	401a      	ands	r2, r3
2400a824:	687b      	ldr	r3, [r7, #4]
2400a826:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
2400a828:	687b      	ldr	r3, [r7, #4]
2400a82a:	689a      	ldr	r2, [r3, #8]
2400a82c:	697b      	ldr	r3, [r7, #20]
2400a82e:	005b      	lsls	r3, r3, #1
2400a830:	2103      	movs	r1, #3
2400a832:	fa01 f303 	lsl.w	r3, r1, r3
2400a836:	43db      	mvns	r3, r3
2400a838:	401a      	ands	r2, r3
2400a83a:	687b      	ldr	r3, [r7, #4]
2400a83c:	609a      	str	r2, [r3, #8]
    }

    position++;
2400a83e:	697b      	ldr	r3, [r7, #20]
2400a840:	3301      	adds	r3, #1
2400a842:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
2400a844:	683a      	ldr	r2, [r7, #0]
2400a846:	697b      	ldr	r3, [r7, #20]
2400a848:	fa22 f303 	lsr.w	r3, r2, r3
2400a84c:	2b00      	cmp	r3, #0
2400a84e:	f47f af25 	bne.w	2400a69c <HAL_GPIO_DeInit+0x14>
  }
}
2400a852:	bf00      	nop
2400a854:	bf00      	nop
2400a856:	371c      	adds	r7, #28
2400a858:	46bd      	mov	sp, r7
2400a85a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a85e:	4770      	bx	lr
2400a860:	58000080 	.word	0x58000080
2400a864:	58000400 	.word	0x58000400
2400a868:	58020000 	.word	0x58020000
2400a86c:	58020400 	.word	0x58020400
2400a870:	58020800 	.word	0x58020800
2400a874:	58020c00 	.word	0x58020c00
2400a878:	58021000 	.word	0x58021000
2400a87c:	58021400 	.word	0x58021400
2400a880:	58021800 	.word	0x58021800
2400a884:	58021c00 	.word	0x58021c00
2400a888:	58022400 	.word	0x58022400

2400a88c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
2400a88c:	b480      	push	{r7}
2400a88e:	b085      	sub	sp, #20
2400a890:	af00      	add	r7, sp, #0
2400a892:	6078      	str	r0, [r7, #4]
2400a894:	460b      	mov	r3, r1
2400a896:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
2400a898:	687b      	ldr	r3, [r7, #4]
2400a89a:	691a      	ldr	r2, [r3, #16]
2400a89c:	887b      	ldrh	r3, [r7, #2]
2400a89e:	4013      	ands	r3, r2
2400a8a0:	2b00      	cmp	r3, #0
2400a8a2:	d002      	beq.n	2400a8aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
2400a8a4:	2301      	movs	r3, #1
2400a8a6:	73fb      	strb	r3, [r7, #15]
2400a8a8:	e001      	b.n	2400a8ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
2400a8aa:	2300      	movs	r3, #0
2400a8ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
2400a8ae:	7bfb      	ldrb	r3, [r7, #15]
}
2400a8b0:	4618      	mov	r0, r3
2400a8b2:	3714      	adds	r7, #20
2400a8b4:	46bd      	mov	sp, r7
2400a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a8ba:	4770      	bx	lr

2400a8bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
2400a8bc:	b480      	push	{r7}
2400a8be:	b083      	sub	sp, #12
2400a8c0:	af00      	add	r7, sp, #0
2400a8c2:	6078      	str	r0, [r7, #4]
2400a8c4:	460b      	mov	r3, r1
2400a8c6:	807b      	strh	r3, [r7, #2]
2400a8c8:	4613      	mov	r3, r2
2400a8ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
2400a8cc:	787b      	ldrb	r3, [r7, #1]
2400a8ce:	2b00      	cmp	r3, #0
2400a8d0:	d003      	beq.n	2400a8da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
2400a8d2:	887a      	ldrh	r2, [r7, #2]
2400a8d4:	687b      	ldr	r3, [r7, #4]
2400a8d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
2400a8d8:	e003      	b.n	2400a8e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
2400a8da:	887b      	ldrh	r3, [r7, #2]
2400a8dc:	041a      	lsls	r2, r3, #16
2400a8de:	687b      	ldr	r3, [r7, #4]
2400a8e0:	619a      	str	r2, [r3, #24]
}
2400a8e2:	bf00      	nop
2400a8e4:	370c      	adds	r7, #12
2400a8e6:	46bd      	mov	sp, r7
2400a8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a8ec:	4770      	bx	lr

2400a8ee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
2400a8ee:	b480      	push	{r7}
2400a8f0:	b085      	sub	sp, #20
2400a8f2:	af00      	add	r7, sp, #0
2400a8f4:	6078      	str	r0, [r7, #4]
2400a8f6:	460b      	mov	r3, r1
2400a8f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
2400a8fa:	687b      	ldr	r3, [r7, #4]
2400a8fc:	695b      	ldr	r3, [r3, #20]
2400a8fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
2400a900:	887a      	ldrh	r2, [r7, #2]
2400a902:	68fb      	ldr	r3, [r7, #12]
2400a904:	4013      	ands	r3, r2
2400a906:	041a      	lsls	r2, r3, #16
2400a908:	68fb      	ldr	r3, [r7, #12]
2400a90a:	43d9      	mvns	r1, r3
2400a90c:	887b      	ldrh	r3, [r7, #2]
2400a90e:	400b      	ands	r3, r1
2400a910:	431a      	orrs	r2, r3
2400a912:	687b      	ldr	r3, [r7, #4]
2400a914:	619a      	str	r2, [r3, #24]
}
2400a916:	bf00      	nop
2400a918:	3714      	adds	r7, #20
2400a91a:	46bd      	mov	sp, r7
2400a91c:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a920:	4770      	bx	lr

2400a922 <HAL_GPIO_LockPin>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
2400a922:	b480      	push	{r7}
2400a924:	b085      	sub	sp, #20
2400a926:	af00      	add	r7, sp, #0
2400a928:	6078      	str	r0, [r7, #4]
2400a92a:	460b      	mov	r3, r1
2400a92c:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
2400a92e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
2400a932:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_LOCK_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  tmp |= GPIO_Pin;
2400a934:	887a      	ldrh	r2, [r7, #2]
2400a936:	68fb      	ldr	r3, [r7, #12]
2400a938:	4313      	orrs	r3, r2
2400a93a:	60fb      	str	r3, [r7, #12]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
2400a93c:	68fa      	ldr	r2, [r7, #12]
2400a93e:	687b      	ldr	r3, [r7, #4]
2400a940:	61da      	str	r2, [r3, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
2400a942:	887a      	ldrh	r2, [r7, #2]
2400a944:	687b      	ldr	r3, [r7, #4]
2400a946:	61da      	str	r2, [r3, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
2400a948:	68fa      	ldr	r2, [r7, #12]
2400a94a:	687b      	ldr	r3, [r7, #4]
2400a94c:	61da      	str	r2, [r3, #28]
  /* Read LCKK register. This read is mandatory to complete key lock sequence*/
  tmp = GPIOx->LCKR;
2400a94e:	687b      	ldr	r3, [r7, #4]
2400a950:	69db      	ldr	r3, [r3, #28]
2400a952:	60fb      	str	r3, [r7, #12]

  /* read again in order to confirm lock is active */
  if ((GPIOx->LCKR & GPIO_LCKR_LCKK) != 0x00U)
2400a954:	687b      	ldr	r3, [r7, #4]
2400a956:	69db      	ldr	r3, [r3, #28]
2400a958:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
2400a95c:	2b00      	cmp	r3, #0
2400a95e:	d001      	beq.n	2400a964 <HAL_GPIO_LockPin+0x42>
  {
    return HAL_OK;
2400a960:	2300      	movs	r3, #0
2400a962:	e000      	b.n	2400a966 <HAL_GPIO_LockPin+0x44>
  }
  else
  {
    return HAL_ERROR;
2400a964:	2301      	movs	r3, #1
  }
}
2400a966:	4618      	mov	r0, r3
2400a968:	3714      	adds	r7, #20
2400a96a:	46bd      	mov	sp, r7
2400a96c:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a970:	4770      	bx	lr

2400a972 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
2400a972:	b580      	push	{r7, lr}
2400a974:	b082      	sub	sp, #8
2400a976:	af00      	add	r7, sp, #0
2400a978:	4603      	mov	r3, r0
2400a97a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
2400a97c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
2400a980:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
2400a984:	88fb      	ldrh	r3, [r7, #6]
2400a986:	4013      	ands	r3, r2
2400a988:	2b00      	cmp	r3, #0
2400a98a:	d008      	beq.n	2400a99e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
2400a98c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
2400a990:	88fb      	ldrh	r3, [r7, #6]
2400a992:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
2400a996:	88fb      	ldrh	r3, [r7, #6]
2400a998:	4618      	mov	r0, r3
2400a99a:	f000 f804 	bl	2400a9a6 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
2400a99e:	bf00      	nop
2400a9a0:	3708      	adds	r7, #8
2400a9a2:	46bd      	mov	sp, r7
2400a9a4:	bd80      	pop	{r7, pc}

2400a9a6 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
2400a9a6:	b480      	push	{r7}
2400a9a8:	b083      	sub	sp, #12
2400a9aa:	af00      	add	r7, sp, #0
2400a9ac:	4603      	mov	r3, r0
2400a9ae:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
2400a9b0:	bf00      	nop
2400a9b2:	370c      	adds	r7, #12
2400a9b4:	46bd      	mov	sp, r7
2400a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a9ba:	4770      	bx	lr

2400a9bc <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
2400a9bc:	b480      	push	{r7}
2400a9be:	b083      	sub	sp, #12
2400a9c0:	af00      	add	r7, sp, #0
2400a9c2:	6078      	str	r0, [r7, #4]
2400a9c4:	6039      	str	r1, [r7, #0]
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
  }
#else
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK);
2400a9c6:	490c      	ldr	r1, [pc, #48]	@ (2400a9f8 <HAL_HSEM_Take+0x3c>)
2400a9c8:	683a      	ldr	r2, [r7, #0]
2400a9ca:	4b0c      	ldr	r3, [pc, #48]	@ (2400a9fc <HAL_HSEM_Take+0x40>)
2400a9cc:	4313      	orrs	r3, r2
2400a9ce:	687a      	ldr	r2, [r7, #4]
2400a9d0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK))
2400a9d4:	4a08      	ldr	r2, [pc, #32]	@ (2400a9f8 <HAL_HSEM_Take+0x3c>)
2400a9d6:	687b      	ldr	r3, [r7, #4]
2400a9d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
2400a9dc:	6839      	ldr	r1, [r7, #0]
2400a9de:	4b07      	ldr	r3, [pc, #28]	@ (2400a9fc <HAL_HSEM_Take+0x40>)
2400a9e0:	430b      	orrs	r3, r1
2400a9e2:	429a      	cmp	r2, r3
2400a9e4:	d101      	bne.n	2400a9ea <HAL_HSEM_Take+0x2e>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
2400a9e6:	2300      	movs	r3, #0
2400a9e8:	e000      	b.n	2400a9ec <HAL_HSEM_Take+0x30>
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
2400a9ea:	2301      	movs	r3, #1
}
2400a9ec:	4618      	mov	r0, r3
2400a9ee:	370c      	adds	r7, #12
2400a9f0:	46bd      	mov	sp, r7
2400a9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a9f6:	4770      	bx	lr
2400a9f8:	58026400 	.word	0x58026400
2400a9fc:	80000300 	.word	0x80000300

2400aa00 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
2400aa00:	b480      	push	{r7}
2400aa02:	b083      	sub	sp, #12
2400aa04:	af00      	add	r7, sp, #0
2400aa06:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
2400aa08:	4a08      	ldr	r2, [pc, #32]	@ (2400aa2c <HAL_HSEM_FastTake+0x2c>)
2400aa0a:	687b      	ldr	r3, [r7, #4]
2400aa0c:	3320      	adds	r3, #32
2400aa0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
2400aa12:	4a07      	ldr	r2, [pc, #28]	@ (2400aa30 <HAL_HSEM_FastTake+0x30>)
2400aa14:	4293      	cmp	r3, r2
2400aa16:	d101      	bne.n	2400aa1c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
2400aa18:	2300      	movs	r3, #0
2400aa1a:	e000      	b.n	2400aa1e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
2400aa1c:	2301      	movs	r3, #1
}
2400aa1e:	4618      	mov	r0, r3
2400aa20:	370c      	adds	r7, #12
2400aa22:	46bd      	mov	sp, r7
2400aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
2400aa28:	4770      	bx	lr
2400aa2a:	bf00      	nop
2400aa2c:	58026400 	.word	0x58026400
2400aa30:	80000300 	.word	0x80000300

2400aa34 <HAL_HSEM_IsSemTaken>:
  * @brief  Check semaphore state Taken or not.
  * @param  SemID: semaphore ID
  * @retval HAL HSEM state
  */
uint32_t HAL_HSEM_IsSemTaken(uint32_t SemID)
{
2400aa34:	b480      	push	{r7}
2400aa36:	b083      	sub	sp, #12
2400aa38:	af00      	add	r7, sp, #0
2400aa3a:	6078      	str	r0, [r7, #4]
  return (((HSEM->R[SemID] & HSEM_R_LOCK) != 0U) ? 1UL : 0UL);
2400aa3c:	4a07      	ldr	r2, [pc, #28]	@ (2400aa5c <HAL_HSEM_IsSemTaken+0x28>)
2400aa3e:	687b      	ldr	r3, [r7, #4]
2400aa40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
2400aa44:	2b00      	cmp	r3, #0
2400aa46:	da01      	bge.n	2400aa4c <HAL_HSEM_IsSemTaken+0x18>
2400aa48:	2301      	movs	r3, #1
2400aa4a:	e000      	b.n	2400aa4e <HAL_HSEM_IsSemTaken+0x1a>
2400aa4c:	2300      	movs	r3, #0
}
2400aa4e:	4618      	mov	r0, r3
2400aa50:	370c      	adds	r7, #12
2400aa52:	46bd      	mov	sp, r7
2400aa54:	f85d 7b04 	ldr.w	r7, [sp], #4
2400aa58:	4770      	bx	lr
2400aa5a:	bf00      	nop
2400aa5c:	58026400 	.word	0x58026400

2400aa60 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
2400aa60:	b480      	push	{r7}
2400aa62:	b083      	sub	sp, #12
2400aa64:	af00      	add	r7, sp, #0
2400aa66:	6078      	str	r0, [r7, #4]
2400aa68:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
2400aa6a:	4906      	ldr	r1, [pc, #24]	@ (2400aa84 <HAL_HSEM_Release+0x24>)
2400aa6c:	683b      	ldr	r3, [r7, #0]
2400aa6e:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
2400aa72:	687b      	ldr	r3, [r7, #4]
2400aa74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
2400aa78:	bf00      	nop
2400aa7a:	370c      	adds	r7, #12
2400aa7c:	46bd      	mov	sp, r7
2400aa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
2400aa82:	4770      	bx	lr
2400aa84:	58026400 	.word	0x58026400

2400aa88 <HAL_HSEM_ReleaseAll>:
  * @param  Key: Semaphore Key , value from 0 to 0xFFFF
  * @param  CoreID: CoreID of the CPU that is using semaphores to be released
  * @retval None
  */
void HAL_HSEM_ReleaseAll(uint32_t Key, uint32_t CoreID)
{
2400aa88:	b480      	push	{r7}
2400aa8a:	b083      	sub	sp, #12
2400aa8c:	af00      	add	r7, sp, #0
2400aa8e:	6078      	str	r0, [r7, #4]
2400aa90:	6039      	str	r1, [r7, #0]
  assert_param(IS_HSEM_KEY(Key));
  assert_param(IS_HSEM_COREID(CoreID));

  HSEM->CR = ((Key << HSEM_CR_KEY_Pos) | (CoreID << HSEM_CR_COREID_Pos));
2400aa92:	687b      	ldr	r3, [r7, #4]
2400aa94:	041a      	lsls	r2, r3, #16
2400aa96:	683b      	ldr	r3, [r7, #0]
2400aa98:	021b      	lsls	r3, r3, #8
2400aa9a:	4905      	ldr	r1, [pc, #20]	@ (2400aab0 <HAL_HSEM_ReleaseAll+0x28>)
2400aa9c:	4313      	orrs	r3, r2
2400aa9e:	f8c1 3140 	str.w	r3, [r1, #320]	@ 0x140
}
2400aaa2:	bf00      	nop
2400aaa4:	370c      	adds	r7, #12
2400aaa6:	46bd      	mov	sp, r7
2400aaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
2400aaac:	4770      	bx	lr
2400aaae:	bf00      	nop
2400aab0:	58026400 	.word	0x58026400

2400aab4 <HAL_HSEM_SetClearKey>:
  * @brief  Set semaphore Key .
  * @param  Key: Semaphore Key , value from 0 to 0xFFFF
  * @retval None
  */
void  HAL_HSEM_SetClearKey(uint32_t Key)
{
2400aab4:	b480      	push	{r7}
2400aab6:	b083      	sub	sp, #12
2400aab8:	af00      	add	r7, sp, #0
2400aaba:	6078      	str	r0, [r7, #4]
  assert_param(IS_HSEM_KEY(Key));

  MODIFY_REG(HSEM->KEYR, HSEM_KEYR_KEY, (Key << HSEM_KEYR_KEY_Pos));
2400aabc:	4b07      	ldr	r3, [pc, #28]	@ (2400aadc <HAL_HSEM_SetClearKey+0x28>)
2400aabe:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
2400aac2:	b29a      	uxth	r2, r3
2400aac4:	687b      	ldr	r3, [r7, #4]
2400aac6:	041b      	lsls	r3, r3, #16
2400aac8:	4904      	ldr	r1, [pc, #16]	@ (2400aadc <HAL_HSEM_SetClearKey+0x28>)
2400aaca:	4313      	orrs	r3, r2
2400aacc:	f8c1 3144 	str.w	r3, [r1, #324]	@ 0x144

}
2400aad0:	bf00      	nop
2400aad2:	370c      	adds	r7, #12
2400aad4:	46bd      	mov	sp, r7
2400aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
2400aada:	4770      	bx	lr
2400aadc:	58026400 	.word	0x58026400

2400aae0 <HAL_HSEM_GetClearKey>:
/**
  * @brief  Get semaphore Key .
  * @retval Semaphore Key , value from 0 to 0xFFFF
  */
uint32_t HAL_HSEM_GetClearKey(void)
{
2400aae0:	b480      	push	{r7}
2400aae2:	af00      	add	r7, sp, #0
  return (HSEM->KEYR >> HSEM_KEYR_KEY_Pos);
2400aae4:	4b04      	ldr	r3, [pc, #16]	@ (2400aaf8 <HAL_HSEM_GetClearKey+0x18>)
2400aae6:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
2400aaea:	0c1b      	lsrs	r3, r3, #16
}
2400aaec:	4618      	mov	r0, r3
2400aaee:	46bd      	mov	sp, r7
2400aaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
2400aaf4:	4770      	bx	lr
2400aaf6:	bf00      	nop
2400aaf8:	58026400 	.word	0x58026400

2400aafc <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
2400aafc:	b480      	push	{r7}
2400aafe:	b083      	sub	sp, #12
2400ab00:	af00      	add	r7, sp, #0
2400ab02:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
2400ab04:	4b05      	ldr	r3, [pc, #20]	@ (2400ab1c <HAL_HSEM_ActivateNotification+0x20>)
2400ab06:	681a      	ldr	r2, [r3, #0]
2400ab08:	4904      	ldr	r1, [pc, #16]	@ (2400ab1c <HAL_HSEM_ActivateNotification+0x20>)
2400ab0a:	687b      	ldr	r3, [r7, #4]
2400ab0c:	4313      	orrs	r3, r2
2400ab0e:	600b      	str	r3, [r1, #0]
#endif
}
2400ab10:	bf00      	nop
2400ab12:	370c      	adds	r7, #12
2400ab14:	46bd      	mov	sp, r7
2400ab16:	f85d 7b04 	ldr.w	r7, [sp], #4
2400ab1a:	4770      	bx	lr
2400ab1c:	58026500 	.word	0x58026500

2400ab20 <HAL_HSEM_DeactivateNotification>:
  * @brief  Deactivate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_DeactivateNotification(uint32_t SemMask)
{
2400ab20:	b480      	push	{r7}
2400ab22:	b083      	sub	sp, #12
2400ab24:	af00      	add	r7, sp, #0
2400ab26:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER &= ~SemMask;
  }
#else
  HSEM_COMMON->IER &= ~SemMask;
2400ab28:	4b06      	ldr	r3, [pc, #24]	@ (2400ab44 <HAL_HSEM_DeactivateNotification+0x24>)
2400ab2a:	681a      	ldr	r2, [r3, #0]
2400ab2c:	687b      	ldr	r3, [r7, #4]
2400ab2e:	43db      	mvns	r3, r3
2400ab30:	4904      	ldr	r1, [pc, #16]	@ (2400ab44 <HAL_HSEM_DeactivateNotification+0x24>)
2400ab32:	4013      	ands	r3, r2
2400ab34:	600b      	str	r3, [r1, #0]
#endif
}
2400ab36:	bf00      	nop
2400ab38:	370c      	adds	r7, #12
2400ab3a:	46bd      	mov	sp, r7
2400ab3c:	f85d 7b04 	ldr.w	r7, [sp], #4
2400ab40:	4770      	bx	lr
2400ab42:	bf00      	nop
2400ab44:	58026500 	.word	0x58026500

2400ab48 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
2400ab48:	b580      	push	{r7, lr}
2400ab4a:	b082      	sub	sp, #8
2400ab4c:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
2400ab4e:	4b0a      	ldr	r3, [pc, #40]	@ (2400ab78 <HAL_HSEM_IRQHandler+0x30>)
2400ab50:	68db      	ldr	r3, [r3, #12]
2400ab52:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
2400ab54:	4b08      	ldr	r3, [pc, #32]	@ (2400ab78 <HAL_HSEM_IRQHandler+0x30>)
2400ab56:	681a      	ldr	r2, [r3, #0]
2400ab58:	687b      	ldr	r3, [r7, #4]
2400ab5a:	43db      	mvns	r3, r3
2400ab5c:	4906      	ldr	r1, [pc, #24]	@ (2400ab78 <HAL_HSEM_IRQHandler+0x30>)
2400ab5e:	4013      	ands	r3, r2
2400ab60:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
2400ab62:	4a05      	ldr	r2, [pc, #20]	@ (2400ab78 <HAL_HSEM_IRQHandler+0x30>)
2400ab64:	687b      	ldr	r3, [r7, #4]
2400ab66:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
2400ab68:	6878      	ldr	r0, [r7, #4]
2400ab6a:	f000 f807 	bl	2400ab7c <HAL_HSEM_FreeCallback>
}
2400ab6e:	bf00      	nop
2400ab70:	3708      	adds	r7, #8
2400ab72:	46bd      	mov	sp, r7
2400ab74:	bd80      	pop	{r7, pc}
2400ab76:	bf00      	nop
2400ab78:	58026500 	.word	0x58026500

2400ab7c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
2400ab7c:	b480      	push	{r7}
2400ab7e:	b083      	sub	sp, #12
2400ab80:	af00      	add	r7, sp, #0
2400ab82:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
2400ab84:	bf00      	nop
2400ab86:	370c      	adds	r7, #12
2400ab88:	46bd      	mov	sp, r7
2400ab8a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400ab8e:	4770      	bx	lr

2400ab90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
2400ab90:	b580      	push	{r7, lr}
2400ab92:	b082      	sub	sp, #8
2400ab94:	af00      	add	r7, sp, #0
2400ab96:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
2400ab98:	687b      	ldr	r3, [r7, #4]
2400ab9a:	2b00      	cmp	r3, #0
2400ab9c:	d101      	bne.n	2400aba2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
2400ab9e:	2301      	movs	r3, #1
2400aba0:	e08b      	b.n	2400acba <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
2400aba2:	687b      	ldr	r3, [r7, #4]
2400aba4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400aba8:	b2db      	uxtb	r3, r3
2400abaa:	2b00      	cmp	r3, #0
2400abac:	d106      	bne.n	2400abbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
2400abae:	687b      	ldr	r3, [r7, #4]
2400abb0:	2200      	movs	r2, #0
2400abb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
2400abb6:	6878      	ldr	r0, [r7, #4]
2400abb8:	f000 f8b5 	bl	2400ad26 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
2400abbc:	687b      	ldr	r3, [r7, #4]
2400abbe:	2224      	movs	r2, #36	@ 0x24
2400abc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
2400abc4:	687b      	ldr	r3, [r7, #4]
2400abc6:	681b      	ldr	r3, [r3, #0]
2400abc8:	681a      	ldr	r2, [r3, #0]
2400abca:	687b      	ldr	r3, [r7, #4]
2400abcc:	681b      	ldr	r3, [r3, #0]
2400abce:	f022 0201 	bic.w	r2, r2, #1
2400abd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
2400abd4:	687b      	ldr	r3, [r7, #4]
2400abd6:	685a      	ldr	r2, [r3, #4]
2400abd8:	687b      	ldr	r3, [r7, #4]
2400abda:	681b      	ldr	r3, [r3, #0]
2400abdc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
2400abe0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
2400abe2:	687b      	ldr	r3, [r7, #4]
2400abe4:	681b      	ldr	r3, [r3, #0]
2400abe6:	689a      	ldr	r2, [r3, #8]
2400abe8:	687b      	ldr	r3, [r7, #4]
2400abea:	681b      	ldr	r3, [r3, #0]
2400abec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
2400abf0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
2400abf2:	687b      	ldr	r3, [r7, #4]
2400abf4:	68db      	ldr	r3, [r3, #12]
2400abf6:	2b01      	cmp	r3, #1
2400abf8:	d107      	bne.n	2400ac0a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
2400abfa:	687b      	ldr	r3, [r7, #4]
2400abfc:	689a      	ldr	r2, [r3, #8]
2400abfe:	687b      	ldr	r3, [r7, #4]
2400ac00:	681b      	ldr	r3, [r3, #0]
2400ac02:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
2400ac06:	609a      	str	r2, [r3, #8]
2400ac08:	e006      	b.n	2400ac18 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
2400ac0a:	687b      	ldr	r3, [r7, #4]
2400ac0c:	689a      	ldr	r2, [r3, #8]
2400ac0e:	687b      	ldr	r3, [r7, #4]
2400ac10:	681b      	ldr	r3, [r3, #0]
2400ac12:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
2400ac16:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
2400ac18:	687b      	ldr	r3, [r7, #4]
2400ac1a:	68db      	ldr	r3, [r3, #12]
2400ac1c:	2b02      	cmp	r3, #2
2400ac1e:	d108      	bne.n	2400ac32 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
2400ac20:	687b      	ldr	r3, [r7, #4]
2400ac22:	681b      	ldr	r3, [r3, #0]
2400ac24:	685a      	ldr	r2, [r3, #4]
2400ac26:	687b      	ldr	r3, [r7, #4]
2400ac28:	681b      	ldr	r3, [r3, #0]
2400ac2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
2400ac2e:	605a      	str	r2, [r3, #4]
2400ac30:	e007      	b.n	2400ac42 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
2400ac32:	687b      	ldr	r3, [r7, #4]
2400ac34:	681b      	ldr	r3, [r3, #0]
2400ac36:	685a      	ldr	r2, [r3, #4]
2400ac38:	687b      	ldr	r3, [r7, #4]
2400ac3a:	681b      	ldr	r3, [r3, #0]
2400ac3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
2400ac40:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
2400ac42:	687b      	ldr	r3, [r7, #4]
2400ac44:	681b      	ldr	r3, [r3, #0]
2400ac46:	6859      	ldr	r1, [r3, #4]
2400ac48:	687b      	ldr	r3, [r7, #4]
2400ac4a:	681a      	ldr	r2, [r3, #0]
2400ac4c:	4b1d      	ldr	r3, [pc, #116]	@ (2400acc4 <HAL_I2C_Init+0x134>)
2400ac4e:	430b      	orrs	r3, r1
2400ac50:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
2400ac52:	687b      	ldr	r3, [r7, #4]
2400ac54:	681b      	ldr	r3, [r3, #0]
2400ac56:	68da      	ldr	r2, [r3, #12]
2400ac58:	687b      	ldr	r3, [r7, #4]
2400ac5a:	681b      	ldr	r3, [r3, #0]
2400ac5c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
2400ac60:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
2400ac62:	687b      	ldr	r3, [r7, #4]
2400ac64:	691a      	ldr	r2, [r3, #16]
2400ac66:	687b      	ldr	r3, [r7, #4]
2400ac68:	695b      	ldr	r3, [r3, #20]
2400ac6a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
2400ac6e:	687b      	ldr	r3, [r7, #4]
2400ac70:	699b      	ldr	r3, [r3, #24]
2400ac72:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
2400ac74:	687b      	ldr	r3, [r7, #4]
2400ac76:	681b      	ldr	r3, [r3, #0]
2400ac78:	430a      	orrs	r2, r1
2400ac7a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
2400ac7c:	687b      	ldr	r3, [r7, #4]
2400ac7e:	69d9      	ldr	r1, [r3, #28]
2400ac80:	687b      	ldr	r3, [r7, #4]
2400ac82:	6a1a      	ldr	r2, [r3, #32]
2400ac84:	687b      	ldr	r3, [r7, #4]
2400ac86:	681b      	ldr	r3, [r3, #0]
2400ac88:	430a      	orrs	r2, r1
2400ac8a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
2400ac8c:	687b      	ldr	r3, [r7, #4]
2400ac8e:	681b      	ldr	r3, [r3, #0]
2400ac90:	681a      	ldr	r2, [r3, #0]
2400ac92:	687b      	ldr	r3, [r7, #4]
2400ac94:	681b      	ldr	r3, [r3, #0]
2400ac96:	f042 0201 	orr.w	r2, r2, #1
2400ac9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400ac9c:	687b      	ldr	r3, [r7, #4]
2400ac9e:	2200      	movs	r2, #0
2400aca0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
2400aca2:	687b      	ldr	r3, [r7, #4]
2400aca4:	2220      	movs	r2, #32
2400aca6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
2400acaa:	687b      	ldr	r3, [r7, #4]
2400acac:	2200      	movs	r2, #0
2400acae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
2400acb0:	687b      	ldr	r3, [r7, #4]
2400acb2:	2200      	movs	r2, #0
2400acb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
2400acb8:	2300      	movs	r3, #0
}
2400acba:	4618      	mov	r0, r3
2400acbc:	3708      	adds	r7, #8
2400acbe:	46bd      	mov	sp, r7
2400acc0:	bd80      	pop	{r7, pc}
2400acc2:	bf00      	nop
2400acc4:	02008000 	.word	0x02008000

2400acc8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
2400acc8:	b580      	push	{r7, lr}
2400acca:	b082      	sub	sp, #8
2400accc:	af00      	add	r7, sp, #0
2400acce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
2400acd0:	687b      	ldr	r3, [r7, #4]
2400acd2:	2b00      	cmp	r3, #0
2400acd4:	d101      	bne.n	2400acda <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
2400acd6:	2301      	movs	r3, #1
2400acd8:	e021      	b.n	2400ad1e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
2400acda:	687b      	ldr	r3, [r7, #4]
2400acdc:	2224      	movs	r2, #36	@ 0x24
2400acde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
2400ace2:	687b      	ldr	r3, [r7, #4]
2400ace4:	681b      	ldr	r3, [r3, #0]
2400ace6:	681a      	ldr	r2, [r3, #0]
2400ace8:	687b      	ldr	r3, [r7, #4]
2400acea:	681b      	ldr	r3, [r3, #0]
2400acec:	f022 0201 	bic.w	r2, r2, #1
2400acf0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
2400acf2:	6878      	ldr	r0, [r7, #4]
2400acf4:	f000 f821 	bl	2400ad3a <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400acf8:	687b      	ldr	r3, [r7, #4]
2400acfa:	2200      	movs	r2, #0
2400acfc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
2400acfe:	687b      	ldr	r3, [r7, #4]
2400ad00:	2200      	movs	r2, #0
2400ad02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
2400ad06:	687b      	ldr	r3, [r7, #4]
2400ad08:	2200      	movs	r2, #0
2400ad0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
2400ad0c:	687b      	ldr	r3, [r7, #4]
2400ad0e:	2200      	movs	r2, #0
2400ad10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
2400ad14:	687b      	ldr	r3, [r7, #4]
2400ad16:	2200      	movs	r2, #0
2400ad18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
2400ad1c:	2300      	movs	r3, #0
}
2400ad1e:	4618      	mov	r0, r3
2400ad20:	3708      	adds	r7, #8
2400ad22:	46bd      	mov	sp, r7
2400ad24:	bd80      	pop	{r7, pc}

2400ad26 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
2400ad26:	b480      	push	{r7}
2400ad28:	b083      	sub	sp, #12
2400ad2a:	af00      	add	r7, sp, #0
2400ad2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
2400ad2e:	bf00      	nop
2400ad30:	370c      	adds	r7, #12
2400ad32:	46bd      	mov	sp, r7
2400ad34:	f85d 7b04 	ldr.w	r7, [sp], #4
2400ad38:	4770      	bx	lr

2400ad3a <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
2400ad3a:	b480      	push	{r7}
2400ad3c:	b083      	sub	sp, #12
2400ad3e:	af00      	add	r7, sp, #0
2400ad40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
2400ad42:	bf00      	nop
2400ad44:	370c      	adds	r7, #12
2400ad46:	46bd      	mov	sp, r7
2400ad48:	f85d 7b04 	ldr.w	r7, [sp], #4
2400ad4c:	4770      	bx	lr
	...

2400ad50 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
2400ad50:	b580      	push	{r7, lr}
2400ad52:	b088      	sub	sp, #32
2400ad54:	af02      	add	r7, sp, #8
2400ad56:	60f8      	str	r0, [r7, #12]
2400ad58:	607a      	str	r2, [r7, #4]
2400ad5a:	461a      	mov	r2, r3
2400ad5c:	460b      	mov	r3, r1
2400ad5e:	817b      	strh	r3, [r7, #10]
2400ad60:	4613      	mov	r3, r2
2400ad62:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
2400ad64:	68fb      	ldr	r3, [r7, #12]
2400ad66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400ad6a:	b2db      	uxtb	r3, r3
2400ad6c:	2b20      	cmp	r3, #32
2400ad6e:	f040 80fd 	bne.w	2400af6c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400ad72:	68fb      	ldr	r3, [r7, #12]
2400ad74:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2400ad78:	2b01      	cmp	r3, #1
2400ad7a:	d101      	bne.n	2400ad80 <HAL_I2C_Master_Transmit+0x30>
2400ad7c:	2302      	movs	r3, #2
2400ad7e:	e0f6      	b.n	2400af6e <HAL_I2C_Master_Transmit+0x21e>
2400ad80:	68fb      	ldr	r3, [r7, #12]
2400ad82:	2201      	movs	r2, #1
2400ad84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
2400ad88:	f7f7 ffb2 	bl	24002cf0 <HAL_GetTick>
2400ad8c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
2400ad8e:	693b      	ldr	r3, [r7, #16]
2400ad90:	9300      	str	r3, [sp, #0]
2400ad92:	2319      	movs	r3, #25
2400ad94:	2201      	movs	r2, #1
2400ad96:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
2400ad9a:	68f8      	ldr	r0, [r7, #12]
2400ad9c:	f005 f92c 	bl	2400fff8 <I2C_WaitOnFlagUntilTimeout>
2400ada0:	4603      	mov	r3, r0
2400ada2:	2b00      	cmp	r3, #0
2400ada4:	d001      	beq.n	2400adaa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
2400ada6:	2301      	movs	r3, #1
2400ada8:	e0e1      	b.n	2400af6e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
2400adaa:	68fb      	ldr	r3, [r7, #12]
2400adac:	2221      	movs	r2, #33	@ 0x21
2400adae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
2400adb2:	68fb      	ldr	r3, [r7, #12]
2400adb4:	2210      	movs	r2, #16
2400adb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400adba:	68fb      	ldr	r3, [r7, #12]
2400adbc:	2200      	movs	r2, #0
2400adbe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
2400adc0:	68fb      	ldr	r3, [r7, #12]
2400adc2:	687a      	ldr	r2, [r7, #4]
2400adc4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
2400adc6:	68fb      	ldr	r3, [r7, #12]
2400adc8:	893a      	ldrh	r2, [r7, #8]
2400adca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
2400adcc:	68fb      	ldr	r3, [r7, #12]
2400adce:	2200      	movs	r2, #0
2400add0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400add2:	68fb      	ldr	r3, [r7, #12]
2400add4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400add6:	b29b      	uxth	r3, r3
2400add8:	2bff      	cmp	r3, #255	@ 0xff
2400adda:	d906      	bls.n	2400adea <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400addc:	68fb      	ldr	r3, [r7, #12]
2400adde:	22ff      	movs	r2, #255	@ 0xff
2400ade0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
2400ade2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
2400ade6:	617b      	str	r3, [r7, #20]
2400ade8:	e007      	b.n	2400adfa <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400adea:	68fb      	ldr	r3, [r7, #12]
2400adec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400adee:	b29a      	uxth	r2, r3
2400adf0:	68fb      	ldr	r3, [r7, #12]
2400adf2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
2400adf4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
2400adf8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
2400adfa:	68fb      	ldr	r3, [r7, #12]
2400adfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400adfe:	2b00      	cmp	r3, #0
2400ae00:	d024      	beq.n	2400ae4c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2400ae02:	68fb      	ldr	r3, [r7, #12]
2400ae04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2400ae06:	781a      	ldrb	r2, [r3, #0]
2400ae08:	68fb      	ldr	r3, [r7, #12]
2400ae0a:	681b      	ldr	r3, [r3, #0]
2400ae0c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2400ae0e:	68fb      	ldr	r3, [r7, #12]
2400ae10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2400ae12:	1c5a      	adds	r2, r3, #1
2400ae14:	68fb      	ldr	r3, [r7, #12]
2400ae16:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
2400ae18:	68fb      	ldr	r3, [r7, #12]
2400ae1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400ae1c:	b29b      	uxth	r3, r3
2400ae1e:	3b01      	subs	r3, #1
2400ae20:	b29a      	uxth	r2, r3
2400ae22:	68fb      	ldr	r3, [r7, #12]
2400ae24:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
2400ae26:	68fb      	ldr	r3, [r7, #12]
2400ae28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400ae2a:	3b01      	subs	r3, #1
2400ae2c:	b29a      	uxth	r2, r3
2400ae2e:	68fb      	ldr	r3, [r7, #12]
2400ae30:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
2400ae32:	68fb      	ldr	r3, [r7, #12]
2400ae34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400ae36:	b2db      	uxtb	r3, r3
2400ae38:	3301      	adds	r3, #1
2400ae3a:	b2da      	uxtb	r2, r3
2400ae3c:	8979      	ldrh	r1, [r7, #10]
2400ae3e:	4b4e      	ldr	r3, [pc, #312]	@ (2400af78 <HAL_I2C_Master_Transmit+0x228>)
2400ae40:	9300      	str	r3, [sp, #0]
2400ae42:	697b      	ldr	r3, [r7, #20]
2400ae44:	68f8      	ldr	r0, [r7, #12]
2400ae46:	f005 fb27 	bl	24010498 <I2C_TransferConfig>
2400ae4a:	e066      	b.n	2400af1a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
2400ae4c:	68fb      	ldr	r3, [r7, #12]
2400ae4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400ae50:	b2da      	uxtb	r2, r3
2400ae52:	8979      	ldrh	r1, [r7, #10]
2400ae54:	4b48      	ldr	r3, [pc, #288]	@ (2400af78 <HAL_I2C_Master_Transmit+0x228>)
2400ae56:	9300      	str	r3, [sp, #0]
2400ae58:	697b      	ldr	r3, [r7, #20]
2400ae5a:	68f8      	ldr	r0, [r7, #12]
2400ae5c:	f005 fb1c 	bl	24010498 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
2400ae60:	e05b      	b.n	2400af1a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400ae62:	693a      	ldr	r2, [r7, #16]
2400ae64:	6a39      	ldr	r1, [r7, #32]
2400ae66:	68f8      	ldr	r0, [r7, #12]
2400ae68:	f005 f91f 	bl	240100aa <I2C_WaitOnTXISFlagUntilTimeout>
2400ae6c:	4603      	mov	r3, r0
2400ae6e:	2b00      	cmp	r3, #0
2400ae70:	d001      	beq.n	2400ae76 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
2400ae72:	2301      	movs	r3, #1
2400ae74:	e07b      	b.n	2400af6e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2400ae76:	68fb      	ldr	r3, [r7, #12]
2400ae78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2400ae7a:	781a      	ldrb	r2, [r3, #0]
2400ae7c:	68fb      	ldr	r3, [r7, #12]
2400ae7e:	681b      	ldr	r3, [r3, #0]
2400ae80:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2400ae82:	68fb      	ldr	r3, [r7, #12]
2400ae84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2400ae86:	1c5a      	adds	r2, r3, #1
2400ae88:	68fb      	ldr	r3, [r7, #12]
2400ae8a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
2400ae8c:	68fb      	ldr	r3, [r7, #12]
2400ae8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400ae90:	b29b      	uxth	r3, r3
2400ae92:	3b01      	subs	r3, #1
2400ae94:	b29a      	uxth	r2, r3
2400ae96:	68fb      	ldr	r3, [r7, #12]
2400ae98:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
2400ae9a:	68fb      	ldr	r3, [r7, #12]
2400ae9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400ae9e:	3b01      	subs	r3, #1
2400aea0:	b29a      	uxth	r2, r3
2400aea2:	68fb      	ldr	r3, [r7, #12]
2400aea4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
2400aea6:	68fb      	ldr	r3, [r7, #12]
2400aea8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400aeaa:	b29b      	uxth	r3, r3
2400aeac:	2b00      	cmp	r3, #0
2400aeae:	d034      	beq.n	2400af1a <HAL_I2C_Master_Transmit+0x1ca>
2400aeb0:	68fb      	ldr	r3, [r7, #12]
2400aeb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400aeb4:	2b00      	cmp	r3, #0
2400aeb6:	d130      	bne.n	2400af1a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
2400aeb8:	693b      	ldr	r3, [r7, #16]
2400aeba:	9300      	str	r3, [sp, #0]
2400aebc:	6a3b      	ldr	r3, [r7, #32]
2400aebe:	2200      	movs	r2, #0
2400aec0:	2180      	movs	r1, #128	@ 0x80
2400aec2:	68f8      	ldr	r0, [r7, #12]
2400aec4:	f005 f898 	bl	2400fff8 <I2C_WaitOnFlagUntilTimeout>
2400aec8:	4603      	mov	r3, r0
2400aeca:	2b00      	cmp	r3, #0
2400aecc:	d001      	beq.n	2400aed2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
2400aece:	2301      	movs	r3, #1
2400aed0:	e04d      	b.n	2400af6e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400aed2:	68fb      	ldr	r3, [r7, #12]
2400aed4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400aed6:	b29b      	uxth	r3, r3
2400aed8:	2bff      	cmp	r3, #255	@ 0xff
2400aeda:	d90e      	bls.n	2400aefa <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
2400aedc:	68fb      	ldr	r3, [r7, #12]
2400aede:	22ff      	movs	r2, #255	@ 0xff
2400aee0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
2400aee2:	68fb      	ldr	r3, [r7, #12]
2400aee4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400aee6:	b2da      	uxtb	r2, r3
2400aee8:	8979      	ldrh	r1, [r7, #10]
2400aeea:	2300      	movs	r3, #0
2400aeec:	9300      	str	r3, [sp, #0]
2400aeee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
2400aef2:	68f8      	ldr	r0, [r7, #12]
2400aef4:	f005 fad0 	bl	24010498 <I2C_TransferConfig>
2400aef8:	e00f      	b.n	2400af1a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
2400aefa:	68fb      	ldr	r3, [r7, #12]
2400aefc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400aefe:	b29a      	uxth	r2, r3
2400af00:	68fb      	ldr	r3, [r7, #12]
2400af02:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2400af04:	68fb      	ldr	r3, [r7, #12]
2400af06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400af08:	b2da      	uxtb	r2, r3
2400af0a:	8979      	ldrh	r1, [r7, #10]
2400af0c:	2300      	movs	r3, #0
2400af0e:	9300      	str	r3, [sp, #0]
2400af10:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
2400af14:	68f8      	ldr	r0, [r7, #12]
2400af16:	f005 fabf 	bl	24010498 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
2400af1a:	68fb      	ldr	r3, [r7, #12]
2400af1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400af1e:	b29b      	uxth	r3, r3
2400af20:	2b00      	cmp	r3, #0
2400af22:	d19e      	bne.n	2400ae62 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400af24:	693a      	ldr	r2, [r7, #16]
2400af26:	6a39      	ldr	r1, [r7, #32]
2400af28:	68f8      	ldr	r0, [r7, #12]
2400af2a:	f005 f905 	bl	24010138 <I2C_WaitOnSTOPFlagUntilTimeout>
2400af2e:	4603      	mov	r3, r0
2400af30:	2b00      	cmp	r3, #0
2400af32:	d001      	beq.n	2400af38 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
2400af34:	2301      	movs	r3, #1
2400af36:	e01a      	b.n	2400af6e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400af38:	68fb      	ldr	r3, [r7, #12]
2400af3a:	681b      	ldr	r3, [r3, #0]
2400af3c:	2220      	movs	r2, #32
2400af3e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
2400af40:	68fb      	ldr	r3, [r7, #12]
2400af42:	681b      	ldr	r3, [r3, #0]
2400af44:	6859      	ldr	r1, [r3, #4]
2400af46:	68fb      	ldr	r3, [r7, #12]
2400af48:	681a      	ldr	r2, [r3, #0]
2400af4a:	4b0c      	ldr	r3, [pc, #48]	@ (2400af7c <HAL_I2C_Master_Transmit+0x22c>)
2400af4c:	400b      	ands	r3, r1
2400af4e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
2400af50:	68fb      	ldr	r3, [r7, #12]
2400af52:	2220      	movs	r2, #32
2400af54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
2400af58:	68fb      	ldr	r3, [r7, #12]
2400af5a:	2200      	movs	r2, #0
2400af5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400af60:	68fb      	ldr	r3, [r7, #12]
2400af62:	2200      	movs	r2, #0
2400af64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
2400af68:	2300      	movs	r3, #0
2400af6a:	e000      	b.n	2400af6e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
2400af6c:	2302      	movs	r3, #2
  }
}
2400af6e:	4618      	mov	r0, r3
2400af70:	3718      	adds	r7, #24
2400af72:	46bd      	mov	sp, r7
2400af74:	bd80      	pop	{r7, pc}
2400af76:	bf00      	nop
2400af78:	80002000 	.word	0x80002000
2400af7c:	fe00e800 	.word	0xfe00e800

2400af80 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
2400af80:	b580      	push	{r7, lr}
2400af82:	b088      	sub	sp, #32
2400af84:	af02      	add	r7, sp, #8
2400af86:	60f8      	str	r0, [r7, #12]
2400af88:	607a      	str	r2, [r7, #4]
2400af8a:	461a      	mov	r2, r3
2400af8c:	460b      	mov	r3, r1
2400af8e:	817b      	strh	r3, [r7, #10]
2400af90:	4613      	mov	r3, r2
2400af92:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
2400af94:	68fb      	ldr	r3, [r7, #12]
2400af96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400af9a:	b2db      	uxtb	r3, r3
2400af9c:	2b20      	cmp	r3, #32
2400af9e:	f040 80db 	bne.w	2400b158 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400afa2:	68fb      	ldr	r3, [r7, #12]
2400afa4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2400afa8:	2b01      	cmp	r3, #1
2400afaa:	d101      	bne.n	2400afb0 <HAL_I2C_Master_Receive+0x30>
2400afac:	2302      	movs	r3, #2
2400afae:	e0d4      	b.n	2400b15a <HAL_I2C_Master_Receive+0x1da>
2400afb0:	68fb      	ldr	r3, [r7, #12]
2400afb2:	2201      	movs	r2, #1
2400afb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
2400afb8:	f7f7 fe9a 	bl	24002cf0 <HAL_GetTick>
2400afbc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
2400afbe:	697b      	ldr	r3, [r7, #20]
2400afc0:	9300      	str	r3, [sp, #0]
2400afc2:	2319      	movs	r3, #25
2400afc4:	2201      	movs	r2, #1
2400afc6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
2400afca:	68f8      	ldr	r0, [r7, #12]
2400afcc:	f005 f814 	bl	2400fff8 <I2C_WaitOnFlagUntilTimeout>
2400afd0:	4603      	mov	r3, r0
2400afd2:	2b00      	cmp	r3, #0
2400afd4:	d001      	beq.n	2400afda <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
2400afd6:	2301      	movs	r3, #1
2400afd8:	e0bf      	b.n	2400b15a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
2400afda:	68fb      	ldr	r3, [r7, #12]
2400afdc:	2222      	movs	r2, #34	@ 0x22
2400afde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
2400afe2:	68fb      	ldr	r3, [r7, #12]
2400afe4:	2210      	movs	r2, #16
2400afe6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400afea:	68fb      	ldr	r3, [r7, #12]
2400afec:	2200      	movs	r2, #0
2400afee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
2400aff0:	68fb      	ldr	r3, [r7, #12]
2400aff2:	687a      	ldr	r2, [r7, #4]
2400aff4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
2400aff6:	68fb      	ldr	r3, [r7, #12]
2400aff8:	893a      	ldrh	r2, [r7, #8]
2400affa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
2400affc:	68fb      	ldr	r3, [r7, #12]
2400affe:	2200      	movs	r2, #0
2400b000:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400b002:	68fb      	ldr	r3, [r7, #12]
2400b004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400b006:	b29b      	uxth	r3, r3
2400b008:	2bff      	cmp	r3, #255	@ 0xff
2400b00a:	d90e      	bls.n	2400b02a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400b00c:	68fb      	ldr	r3, [r7, #12]
2400b00e:	22ff      	movs	r2, #255	@ 0xff
2400b010:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
2400b012:	68fb      	ldr	r3, [r7, #12]
2400b014:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400b016:	b2da      	uxtb	r2, r3
2400b018:	8979      	ldrh	r1, [r7, #10]
2400b01a:	4b52      	ldr	r3, [pc, #328]	@ (2400b164 <HAL_I2C_Master_Receive+0x1e4>)
2400b01c:	9300      	str	r3, [sp, #0]
2400b01e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
2400b022:	68f8      	ldr	r0, [r7, #12]
2400b024:	f005 fa38 	bl	24010498 <I2C_TransferConfig>
2400b028:	e06d      	b.n	2400b106 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400b02a:	68fb      	ldr	r3, [r7, #12]
2400b02c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400b02e:	b29a      	uxth	r2, r3
2400b030:	68fb      	ldr	r3, [r7, #12]
2400b032:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2400b034:	68fb      	ldr	r3, [r7, #12]
2400b036:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400b038:	b2da      	uxtb	r2, r3
2400b03a:	8979      	ldrh	r1, [r7, #10]
2400b03c:	4b49      	ldr	r3, [pc, #292]	@ (2400b164 <HAL_I2C_Master_Receive+0x1e4>)
2400b03e:	9300      	str	r3, [sp, #0]
2400b040:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
2400b044:	68f8      	ldr	r0, [r7, #12]
2400b046:	f005 fa27 	bl	24010498 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
2400b04a:	e05c      	b.n	2400b106 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400b04c:	697a      	ldr	r2, [r7, #20]
2400b04e:	6a39      	ldr	r1, [r7, #32]
2400b050:	68f8      	ldr	r0, [r7, #12]
2400b052:	f005 f8b5 	bl	240101c0 <I2C_WaitOnRXNEFlagUntilTimeout>
2400b056:	4603      	mov	r3, r0
2400b058:	2b00      	cmp	r3, #0
2400b05a:	d001      	beq.n	2400b060 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
2400b05c:	2301      	movs	r3, #1
2400b05e:	e07c      	b.n	2400b15a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2400b060:	68fb      	ldr	r3, [r7, #12]
2400b062:	681b      	ldr	r3, [r3, #0]
2400b064:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
2400b066:	68fb      	ldr	r3, [r7, #12]
2400b068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2400b06a:	b2d2      	uxtb	r2, r2
2400b06c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2400b06e:	68fb      	ldr	r3, [r7, #12]
2400b070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2400b072:	1c5a      	adds	r2, r3, #1
2400b074:	68fb      	ldr	r3, [r7, #12]
2400b076:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
2400b078:	68fb      	ldr	r3, [r7, #12]
2400b07a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400b07c:	3b01      	subs	r3, #1
2400b07e:	b29a      	uxth	r2, r3
2400b080:	68fb      	ldr	r3, [r7, #12]
2400b082:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
2400b084:	68fb      	ldr	r3, [r7, #12]
2400b086:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400b088:	b29b      	uxth	r3, r3
2400b08a:	3b01      	subs	r3, #1
2400b08c:	b29a      	uxth	r2, r3
2400b08e:	68fb      	ldr	r3, [r7, #12]
2400b090:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
2400b092:	68fb      	ldr	r3, [r7, #12]
2400b094:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400b096:	b29b      	uxth	r3, r3
2400b098:	2b00      	cmp	r3, #0
2400b09a:	d034      	beq.n	2400b106 <HAL_I2C_Master_Receive+0x186>
2400b09c:	68fb      	ldr	r3, [r7, #12]
2400b09e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400b0a0:	2b00      	cmp	r3, #0
2400b0a2:	d130      	bne.n	2400b106 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
2400b0a4:	697b      	ldr	r3, [r7, #20]
2400b0a6:	9300      	str	r3, [sp, #0]
2400b0a8:	6a3b      	ldr	r3, [r7, #32]
2400b0aa:	2200      	movs	r2, #0
2400b0ac:	2180      	movs	r1, #128	@ 0x80
2400b0ae:	68f8      	ldr	r0, [r7, #12]
2400b0b0:	f004 ffa2 	bl	2400fff8 <I2C_WaitOnFlagUntilTimeout>
2400b0b4:	4603      	mov	r3, r0
2400b0b6:	2b00      	cmp	r3, #0
2400b0b8:	d001      	beq.n	2400b0be <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
2400b0ba:	2301      	movs	r3, #1
2400b0bc:	e04d      	b.n	2400b15a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400b0be:	68fb      	ldr	r3, [r7, #12]
2400b0c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400b0c2:	b29b      	uxth	r3, r3
2400b0c4:	2bff      	cmp	r3, #255	@ 0xff
2400b0c6:	d90e      	bls.n	2400b0e6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
2400b0c8:	68fb      	ldr	r3, [r7, #12]
2400b0ca:	22ff      	movs	r2, #255	@ 0xff
2400b0cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
2400b0ce:	68fb      	ldr	r3, [r7, #12]
2400b0d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400b0d2:	b2da      	uxtb	r2, r3
2400b0d4:	8979      	ldrh	r1, [r7, #10]
2400b0d6:	2300      	movs	r3, #0
2400b0d8:	9300      	str	r3, [sp, #0]
2400b0da:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
2400b0de:	68f8      	ldr	r0, [r7, #12]
2400b0e0:	f005 f9da 	bl	24010498 <I2C_TransferConfig>
2400b0e4:	e00f      	b.n	2400b106 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
2400b0e6:	68fb      	ldr	r3, [r7, #12]
2400b0e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400b0ea:	b29a      	uxth	r2, r3
2400b0ec:	68fb      	ldr	r3, [r7, #12]
2400b0ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2400b0f0:	68fb      	ldr	r3, [r7, #12]
2400b0f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400b0f4:	b2da      	uxtb	r2, r3
2400b0f6:	8979      	ldrh	r1, [r7, #10]
2400b0f8:	2300      	movs	r3, #0
2400b0fa:	9300      	str	r3, [sp, #0]
2400b0fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
2400b100:	68f8      	ldr	r0, [r7, #12]
2400b102:	f005 f9c9 	bl	24010498 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
2400b106:	68fb      	ldr	r3, [r7, #12]
2400b108:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400b10a:	b29b      	uxth	r3, r3
2400b10c:	2b00      	cmp	r3, #0
2400b10e:	d19d      	bne.n	2400b04c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400b110:	697a      	ldr	r2, [r7, #20]
2400b112:	6a39      	ldr	r1, [r7, #32]
2400b114:	68f8      	ldr	r0, [r7, #12]
2400b116:	f005 f80f 	bl	24010138 <I2C_WaitOnSTOPFlagUntilTimeout>
2400b11a:	4603      	mov	r3, r0
2400b11c:	2b00      	cmp	r3, #0
2400b11e:	d001      	beq.n	2400b124 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
2400b120:	2301      	movs	r3, #1
2400b122:	e01a      	b.n	2400b15a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400b124:	68fb      	ldr	r3, [r7, #12]
2400b126:	681b      	ldr	r3, [r3, #0]
2400b128:	2220      	movs	r2, #32
2400b12a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
2400b12c:	68fb      	ldr	r3, [r7, #12]
2400b12e:	681b      	ldr	r3, [r3, #0]
2400b130:	6859      	ldr	r1, [r3, #4]
2400b132:	68fb      	ldr	r3, [r7, #12]
2400b134:	681a      	ldr	r2, [r3, #0]
2400b136:	4b0c      	ldr	r3, [pc, #48]	@ (2400b168 <HAL_I2C_Master_Receive+0x1e8>)
2400b138:	400b      	ands	r3, r1
2400b13a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
2400b13c:	68fb      	ldr	r3, [r7, #12]
2400b13e:	2220      	movs	r2, #32
2400b140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
2400b144:	68fb      	ldr	r3, [r7, #12]
2400b146:	2200      	movs	r2, #0
2400b148:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400b14c:	68fb      	ldr	r3, [r7, #12]
2400b14e:	2200      	movs	r2, #0
2400b150:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
2400b154:	2300      	movs	r3, #0
2400b156:	e000      	b.n	2400b15a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
2400b158:	2302      	movs	r3, #2
  }
}
2400b15a:	4618      	mov	r0, r3
2400b15c:	3718      	adds	r7, #24
2400b15e:	46bd      	mov	sp, r7
2400b160:	bd80      	pop	{r7, pc}
2400b162:	bf00      	nop
2400b164:	80002400 	.word	0x80002400
2400b168:	fe00e800 	.word	0xfe00e800

2400b16c <HAL_I2C_Slave_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
2400b16c:	b580      	push	{r7, lr}
2400b16e:	b088      	sub	sp, #32
2400b170:	af02      	add	r7, sp, #8
2400b172:	60f8      	str	r0, [r7, #12]
2400b174:	60b9      	str	r1, [r7, #8]
2400b176:	603b      	str	r3, [r7, #0]
2400b178:	4613      	mov	r3, r2
2400b17a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint16_t tmpXferCount;
  HAL_StatusTypeDef error;

  if (hi2c->State == HAL_I2C_STATE_READY)
2400b17c:	68fb      	ldr	r3, [r7, #12]
2400b17e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400b182:	b2db      	uxtb	r3, r3
2400b184:	2b20      	cmp	r3, #32
2400b186:	f040 8130 	bne.w	2400b3ea <HAL_I2C_Slave_Transmit+0x27e>
  {
    if ((pData == NULL) || (Size == 0U))
2400b18a:	68bb      	ldr	r3, [r7, #8]
2400b18c:	2b00      	cmp	r3, #0
2400b18e:	d002      	beq.n	2400b196 <HAL_I2C_Slave_Transmit+0x2a>
2400b190:	88fb      	ldrh	r3, [r7, #6]
2400b192:	2b00      	cmp	r3, #0
2400b194:	d105      	bne.n	2400b1a2 <HAL_I2C_Slave_Transmit+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400b196:	68fb      	ldr	r3, [r7, #12]
2400b198:	f44f 7200 	mov.w	r2, #512	@ 0x200
2400b19c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
2400b19e:	2301      	movs	r3, #1
2400b1a0:	e124      	b.n	2400b3ec <HAL_I2C_Slave_Transmit+0x280>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400b1a2:	68fb      	ldr	r3, [r7, #12]
2400b1a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2400b1a8:	2b01      	cmp	r3, #1
2400b1aa:	d101      	bne.n	2400b1b0 <HAL_I2C_Slave_Transmit+0x44>
2400b1ac:	2302      	movs	r3, #2
2400b1ae:	e11d      	b.n	2400b3ec <HAL_I2C_Slave_Transmit+0x280>
2400b1b0:	68fb      	ldr	r3, [r7, #12]
2400b1b2:	2201      	movs	r2, #1
2400b1b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
2400b1b8:	f7f7 fd9a 	bl	24002cf0 <HAL_GetTick>
2400b1bc:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
2400b1be:	68fb      	ldr	r3, [r7, #12]
2400b1c0:	2221      	movs	r2, #33	@ 0x21
2400b1c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
2400b1c6:	68fb      	ldr	r3, [r7, #12]
2400b1c8:	2220      	movs	r2, #32
2400b1ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400b1ce:	68fb      	ldr	r3, [r7, #12]
2400b1d0:	2200      	movs	r2, #0
2400b1d2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
2400b1d4:	68fb      	ldr	r3, [r7, #12]
2400b1d6:	68ba      	ldr	r2, [r7, #8]
2400b1d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
2400b1da:	68fb      	ldr	r3, [r7, #12]
2400b1dc:	88fa      	ldrh	r2, [r7, #6]
2400b1de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
2400b1e0:	68fb      	ldr	r3, [r7, #12]
2400b1e2:	2200      	movs	r2, #0
2400b1e4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2400b1e6:	68fb      	ldr	r3, [r7, #12]
2400b1e8:	681b      	ldr	r3, [r3, #0]
2400b1ea:	685a      	ldr	r2, [r3, #4]
2400b1ec:	68fb      	ldr	r3, [r7, #12]
2400b1ee:	681b      	ldr	r3, [r3, #0]
2400b1f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
2400b1f4:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
2400b1f6:	697b      	ldr	r3, [r7, #20]
2400b1f8:	9300      	str	r3, [sp, #0]
2400b1fa:	683b      	ldr	r3, [r7, #0]
2400b1fc:	2200      	movs	r2, #0
2400b1fe:	2108      	movs	r1, #8
2400b200:	68f8      	ldr	r0, [r7, #12]
2400b202:	f004 fef9 	bl	2400fff8 <I2C_WaitOnFlagUntilTimeout>
2400b206:	4603      	mov	r3, r0
2400b208:	2b00      	cmp	r3, #0
2400b20a:	d009      	beq.n	2400b220 <HAL_I2C_Slave_Transmit+0xb4>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400b20c:	68fb      	ldr	r3, [r7, #12]
2400b20e:	681b      	ldr	r3, [r3, #0]
2400b210:	685a      	ldr	r2, [r3, #4]
2400b212:	68fb      	ldr	r3, [r7, #12]
2400b214:	681b      	ldr	r3, [r3, #0]
2400b216:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
2400b21a:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
2400b21c:	2301      	movs	r3, #1
2400b21e:	e0e5      	b.n	2400b3ec <HAL_I2C_Slave_Transmit+0x280>
    }

    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
2400b220:	68fb      	ldr	r3, [r7, #12]
2400b222:	6a1b      	ldr	r3, [r3, #32]
2400b224:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
2400b228:	d111      	bne.n	2400b24e <HAL_I2C_Slave_Transmit+0xe2>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2400b22a:	68fb      	ldr	r3, [r7, #12]
2400b22c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2400b22e:	781a      	ldrb	r2, [r3, #0]
2400b230:	68fb      	ldr	r3, [r7, #12]
2400b232:	681b      	ldr	r3, [r3, #0]
2400b234:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2400b236:	68fb      	ldr	r3, [r7, #12]
2400b238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2400b23a:	1c5a      	adds	r2, r3, #1
2400b23c:	68fb      	ldr	r3, [r7, #12]
2400b23e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
2400b240:	68fb      	ldr	r3, [r7, #12]
2400b242:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400b244:	b29b      	uxth	r3, r3
2400b246:	3b01      	subs	r3, #1
2400b248:	b29a      	uxth	r2, r3
2400b24a:	68fb      	ldr	r3, [r7, #12]
2400b24c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2400b24e:	68fb      	ldr	r3, [r7, #12]
2400b250:	681b      	ldr	r3, [r3, #0]
2400b252:	2208      	movs	r2, #8
2400b254:	61da      	str	r2, [r3, #28]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
2400b256:	68fb      	ldr	r3, [r7, #12]
2400b258:	68db      	ldr	r3, [r3, #12]
2400b25a:	2b02      	cmp	r3, #2
2400b25c:	d118      	bne.n	2400b290 <HAL_I2C_Slave_Transmit+0x124>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
2400b25e:	697b      	ldr	r3, [r7, #20]
2400b260:	9300      	str	r3, [sp, #0]
2400b262:	683b      	ldr	r3, [r7, #0]
2400b264:	2200      	movs	r2, #0
2400b266:	2108      	movs	r1, #8
2400b268:	68f8      	ldr	r0, [r7, #12]
2400b26a:	f004 fec5 	bl	2400fff8 <I2C_WaitOnFlagUntilTimeout>
2400b26e:	4603      	mov	r3, r0
2400b270:	2b00      	cmp	r3, #0
2400b272:	d009      	beq.n	2400b288 <HAL_I2C_Slave_Transmit+0x11c>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400b274:	68fb      	ldr	r3, [r7, #12]
2400b276:	681b      	ldr	r3, [r3, #0]
2400b278:	685a      	ldr	r2, [r3, #4]
2400b27a:	68fb      	ldr	r3, [r7, #12]
2400b27c:	681b      	ldr	r3, [r3, #0]
2400b27e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
2400b282:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
2400b284:	2301      	movs	r3, #1
2400b286:	e0b1      	b.n	2400b3ec <HAL_I2C_Slave_Transmit+0x280>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2400b288:	68fb      	ldr	r3, [r7, #12]
2400b28a:	681b      	ldr	r3, [r3, #0]
2400b28c:	2208      	movs	r2, #8
2400b28e:	61da      	str	r2, [r3, #28]
    }

    /* Wait until DIR flag is set Transmitter mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, RESET, Timeout, tickstart) != HAL_OK)
2400b290:	697b      	ldr	r3, [r7, #20]
2400b292:	9300      	str	r3, [sp, #0]
2400b294:	683b      	ldr	r3, [r7, #0]
2400b296:	2200      	movs	r2, #0
2400b298:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
2400b29c:	68f8      	ldr	r0, [r7, #12]
2400b29e:	f004 feab 	bl	2400fff8 <I2C_WaitOnFlagUntilTimeout>
2400b2a2:	4603      	mov	r3, r0
2400b2a4:	2b00      	cmp	r3, #0
2400b2a6:	d02d      	beq.n	2400b304 <HAL_I2C_Slave_Transmit+0x198>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400b2a8:	68fb      	ldr	r3, [r7, #12]
2400b2aa:	681b      	ldr	r3, [r3, #0]
2400b2ac:	685a      	ldr	r2, [r3, #4]
2400b2ae:	68fb      	ldr	r3, [r7, #12]
2400b2b0:	681b      	ldr	r3, [r3, #0]
2400b2b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
2400b2b6:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
2400b2b8:	2301      	movs	r3, #1
2400b2ba:	e097      	b.n	2400b3ec <HAL_I2C_Slave_Transmit+0x280>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400b2bc:	697a      	ldr	r2, [r7, #20]
2400b2be:	6839      	ldr	r1, [r7, #0]
2400b2c0:	68f8      	ldr	r0, [r7, #12]
2400b2c2:	f004 fef2 	bl	240100aa <I2C_WaitOnTXISFlagUntilTimeout>
2400b2c6:	4603      	mov	r3, r0
2400b2c8:	2b00      	cmp	r3, #0
2400b2ca:	d009      	beq.n	2400b2e0 <HAL_I2C_Slave_Transmit+0x174>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400b2cc:	68fb      	ldr	r3, [r7, #12]
2400b2ce:	681b      	ldr	r3, [r3, #0]
2400b2d0:	685a      	ldr	r2, [r3, #4]
2400b2d2:	68fb      	ldr	r3, [r7, #12]
2400b2d4:	681b      	ldr	r3, [r3, #0]
2400b2d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
2400b2da:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
2400b2dc:	2301      	movs	r3, #1
2400b2de:	e085      	b.n	2400b3ec <HAL_I2C_Slave_Transmit+0x280>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2400b2e0:	68fb      	ldr	r3, [r7, #12]
2400b2e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2400b2e4:	781a      	ldrb	r2, [r3, #0]
2400b2e6:	68fb      	ldr	r3, [r7, #12]
2400b2e8:	681b      	ldr	r3, [r3, #0]
2400b2ea:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2400b2ec:	68fb      	ldr	r3, [r7, #12]
2400b2ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2400b2f0:	1c5a      	adds	r2, r3, #1
2400b2f2:	68fb      	ldr	r3, [r7, #12]
2400b2f4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
2400b2f6:	68fb      	ldr	r3, [r7, #12]
2400b2f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400b2fa:	b29b      	uxth	r3, r3
2400b2fc:	3b01      	subs	r3, #1
2400b2fe:	b29a      	uxth	r2, r3
2400b300:	68fb      	ldr	r3, [r7, #12]
2400b302:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferCount > 0U)
2400b304:	68fb      	ldr	r3, [r7, #12]
2400b306:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400b308:	b29b      	uxth	r3, r3
2400b30a:	2b00      	cmp	r3, #0
2400b30c:	d1d6      	bne.n	2400b2bc <HAL_I2C_Slave_Transmit+0x150>
    }

    /* Wait until AF flag is set */
    error = I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_AF, RESET, Timeout, tickstart);
2400b30e:	697b      	ldr	r3, [r7, #20]
2400b310:	9300      	str	r3, [sp, #0]
2400b312:	683b      	ldr	r3, [r7, #0]
2400b314:	2200      	movs	r2, #0
2400b316:	2110      	movs	r1, #16
2400b318:	68f8      	ldr	r0, [r7, #12]
2400b31a:	f004 fe6d 	bl	2400fff8 <I2C_WaitOnFlagUntilTimeout>
2400b31e:	4603      	mov	r3, r0
2400b320:	74fb      	strb	r3, [r7, #19]

    if (error != HAL_OK)
2400b322:	7cfb      	ldrb	r3, [r7, #19]
2400b324:	2b00      	cmp	r3, #0
2400b326:	d017      	beq.n	2400b358 <HAL_I2C_Slave_Transmit+0x1ec>
    {
      /* Check that I2C transfer finished */
      /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
      /* Mean XferCount == 0 */

      tmpXferCount = hi2c->XferCount;
2400b328:	68fb      	ldr	r3, [r7, #12]
2400b32a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400b32c:	823b      	strh	r3, [r7, #16]
      if ((hi2c->ErrorCode == HAL_I2C_ERROR_AF) && (tmpXferCount == 0U))
2400b32e:	68fb      	ldr	r3, [r7, #12]
2400b330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2400b332:	2b04      	cmp	r3, #4
2400b334:	d106      	bne.n	2400b344 <HAL_I2C_Slave_Transmit+0x1d8>
2400b336:	8a3b      	ldrh	r3, [r7, #16]
2400b338:	2b00      	cmp	r3, #0
2400b33a:	d103      	bne.n	2400b344 <HAL_I2C_Slave_Transmit+0x1d8>
      {
        /* Reset ErrorCode to NONE */
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400b33c:	68fb      	ldr	r3, [r7, #12]
2400b33e:	2200      	movs	r2, #0
2400b340:	645a      	str	r2, [r3, #68]	@ 0x44
2400b342:	e026      	b.n	2400b392 <HAL_I2C_Slave_Transmit+0x226>
      }
      else
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400b344:	68fb      	ldr	r3, [r7, #12]
2400b346:	681b      	ldr	r3, [r3, #0]
2400b348:	685a      	ldr	r2, [r3, #4]
2400b34a:	68fb      	ldr	r3, [r7, #12]
2400b34c:	681b      	ldr	r3, [r3, #0]
2400b34e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
2400b352:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
2400b354:	2301      	movs	r3, #1
2400b356:	e049      	b.n	2400b3ec <HAL_I2C_Slave_Transmit+0x280>
      }
    }
    else
    {
      /* Flush TX register */
      I2C_Flush_TXDR(hi2c);
2400b358:	68f8      	ldr	r0, [r7, #12]
2400b35a:	f004 fb68 	bl	2400fa2e <I2C_Flush_TXDR>

      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400b35e:	68fb      	ldr	r3, [r7, #12]
2400b360:	681b      	ldr	r3, [r3, #0]
2400b362:	2210      	movs	r2, #16
2400b364:	61da      	str	r2, [r3, #28]

      /* Wait until STOP flag is set */
      if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400b366:	697a      	ldr	r2, [r7, #20]
2400b368:	6839      	ldr	r1, [r7, #0]
2400b36a:	68f8      	ldr	r0, [r7, #12]
2400b36c:	f004 fee4 	bl	24010138 <I2C_WaitOnSTOPFlagUntilTimeout>
2400b370:	4603      	mov	r3, r0
2400b372:	2b00      	cmp	r3, #0
2400b374:	d009      	beq.n	2400b38a <HAL_I2C_Slave_Transmit+0x21e>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400b376:	68fb      	ldr	r3, [r7, #12]
2400b378:	681b      	ldr	r3, [r3, #0]
2400b37a:	685a      	ldr	r2, [r3, #4]
2400b37c:	68fb      	ldr	r3, [r7, #12]
2400b37e:	681b      	ldr	r3, [r3, #0]
2400b380:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
2400b384:	605a      	str	r2, [r3, #4]

        return HAL_ERROR;
2400b386:	2301      	movs	r3, #1
2400b388:	e030      	b.n	2400b3ec <HAL_I2C_Slave_Transmit+0x280>
      }

      /* Clear STOP flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400b38a:	68fb      	ldr	r3, [r7, #12]
2400b38c:	681b      	ldr	r3, [r3, #0]
2400b38e:	2220      	movs	r2, #32
2400b390:	61da      	str	r2, [r3, #28]
    }

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
2400b392:	697b      	ldr	r3, [r7, #20]
2400b394:	9300      	str	r3, [sp, #0]
2400b396:	683b      	ldr	r3, [r7, #0]
2400b398:	2201      	movs	r2, #1
2400b39a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
2400b39e:	68f8      	ldr	r0, [r7, #12]
2400b3a0:	f004 fe2a 	bl	2400fff8 <I2C_WaitOnFlagUntilTimeout>
2400b3a4:	4603      	mov	r3, r0
2400b3a6:	2b00      	cmp	r3, #0
2400b3a8:	d009      	beq.n	2400b3be <HAL_I2C_Slave_Transmit+0x252>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400b3aa:	68fb      	ldr	r3, [r7, #12]
2400b3ac:	681b      	ldr	r3, [r3, #0]
2400b3ae:	685a      	ldr	r2, [r3, #4]
2400b3b0:	68fb      	ldr	r3, [r7, #12]
2400b3b2:	681b      	ldr	r3, [r3, #0]
2400b3b4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
2400b3b8:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
2400b3ba:	2301      	movs	r3, #1
2400b3bc:	e016      	b.n	2400b3ec <HAL_I2C_Slave_Transmit+0x280>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400b3be:	68fb      	ldr	r3, [r7, #12]
2400b3c0:	681b      	ldr	r3, [r3, #0]
2400b3c2:	685a      	ldr	r2, [r3, #4]
2400b3c4:	68fb      	ldr	r3, [r7, #12]
2400b3c6:	681b      	ldr	r3, [r3, #0]
2400b3c8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
2400b3cc:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
2400b3ce:	68fb      	ldr	r3, [r7, #12]
2400b3d0:	2220      	movs	r2, #32
2400b3d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
2400b3d6:	68fb      	ldr	r3, [r7, #12]
2400b3d8:	2200      	movs	r2, #0
2400b3da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400b3de:	68fb      	ldr	r3, [r7, #12]
2400b3e0:	2200      	movs	r2, #0
2400b3e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
2400b3e6:	2300      	movs	r3, #0
2400b3e8:	e000      	b.n	2400b3ec <HAL_I2C_Slave_Transmit+0x280>
  }
  else
  {
    return HAL_BUSY;
2400b3ea:	2302      	movs	r3, #2
  }
}
2400b3ec:	4618      	mov	r0, r3
2400b3ee:	3718      	adds	r7, #24
2400b3f0:	46bd      	mov	sp, r7
2400b3f2:	bd80      	pop	{r7, pc}

2400b3f4 <HAL_I2C_Slave_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                        uint32_t Timeout)
{
2400b3f4:	b580      	push	{r7, lr}
2400b3f6:	b088      	sub	sp, #32
2400b3f8:	af02      	add	r7, sp, #8
2400b3fa:	60f8      	str	r0, [r7, #12]
2400b3fc:	60b9      	str	r1, [r7, #8]
2400b3fe:	603b      	str	r3, [r7, #0]
2400b400:	4613      	mov	r3, r2
2400b402:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
2400b404:	68fb      	ldr	r3, [r7, #12]
2400b406:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400b40a:	b2db      	uxtb	r3, r3
2400b40c:	2b20      	cmp	r3, #32
2400b40e:	f040 80fc 	bne.w	2400b60a <HAL_I2C_Slave_Receive+0x216>
  {
    if ((pData == NULL) || (Size == 0U))
2400b412:	68bb      	ldr	r3, [r7, #8]
2400b414:	2b00      	cmp	r3, #0
2400b416:	d002      	beq.n	2400b41e <HAL_I2C_Slave_Receive+0x2a>
2400b418:	88fb      	ldrh	r3, [r7, #6]
2400b41a:	2b00      	cmp	r3, #0
2400b41c:	d105      	bne.n	2400b42a <HAL_I2C_Slave_Receive+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400b41e:	68fb      	ldr	r3, [r7, #12]
2400b420:	f44f 7200 	mov.w	r2, #512	@ 0x200
2400b424:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
2400b426:	2301      	movs	r3, #1
2400b428:	e0f0      	b.n	2400b60c <HAL_I2C_Slave_Receive+0x218>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400b42a:	68fb      	ldr	r3, [r7, #12]
2400b42c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2400b430:	2b01      	cmp	r3, #1
2400b432:	d101      	bne.n	2400b438 <HAL_I2C_Slave_Receive+0x44>
2400b434:	2302      	movs	r3, #2
2400b436:	e0e9      	b.n	2400b60c <HAL_I2C_Slave_Receive+0x218>
2400b438:	68fb      	ldr	r3, [r7, #12]
2400b43a:	2201      	movs	r2, #1
2400b43c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
2400b440:	f7f7 fc56 	bl	24002cf0 <HAL_GetTick>
2400b444:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
2400b446:	68fb      	ldr	r3, [r7, #12]
2400b448:	2222      	movs	r2, #34	@ 0x22
2400b44a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
2400b44e:	68fb      	ldr	r3, [r7, #12]
2400b450:	2220      	movs	r2, #32
2400b452:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400b456:	68fb      	ldr	r3, [r7, #12]
2400b458:	2200      	movs	r2, #0
2400b45a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
2400b45c:	68fb      	ldr	r3, [r7, #12]
2400b45e:	68ba      	ldr	r2, [r7, #8]
2400b460:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
2400b462:	68fb      	ldr	r3, [r7, #12]
2400b464:	88fa      	ldrh	r2, [r7, #6]
2400b466:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize = hi2c->XferCount;
2400b468:	68fb      	ldr	r3, [r7, #12]
2400b46a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400b46c:	b29a      	uxth	r2, r3
2400b46e:	68fb      	ldr	r3, [r7, #12]
2400b470:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferISR   = NULL;
2400b472:	68fb      	ldr	r3, [r7, #12]
2400b474:	2200      	movs	r2, #0
2400b476:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2400b478:	68fb      	ldr	r3, [r7, #12]
2400b47a:	681b      	ldr	r3, [r3, #0]
2400b47c:	685a      	ldr	r2, [r3, #4]
2400b47e:	68fb      	ldr	r3, [r7, #12]
2400b480:	681b      	ldr	r3, [r3, #0]
2400b482:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
2400b486:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
2400b488:	697b      	ldr	r3, [r7, #20]
2400b48a:	9300      	str	r3, [sp, #0]
2400b48c:	683b      	ldr	r3, [r7, #0]
2400b48e:	2200      	movs	r2, #0
2400b490:	2108      	movs	r1, #8
2400b492:	68f8      	ldr	r0, [r7, #12]
2400b494:	f004 fdb0 	bl	2400fff8 <I2C_WaitOnFlagUntilTimeout>
2400b498:	4603      	mov	r3, r0
2400b49a:	2b00      	cmp	r3, #0
2400b49c:	d009      	beq.n	2400b4b2 <HAL_I2C_Slave_Receive+0xbe>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400b49e:	68fb      	ldr	r3, [r7, #12]
2400b4a0:	681b      	ldr	r3, [r3, #0]
2400b4a2:	685a      	ldr	r2, [r3, #4]
2400b4a4:	68fb      	ldr	r3, [r7, #12]
2400b4a6:	681b      	ldr	r3, [r3, #0]
2400b4a8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
2400b4ac:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
2400b4ae:	2301      	movs	r3, #1
2400b4b0:	e0ac      	b.n	2400b60c <HAL_I2C_Slave_Receive+0x218>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2400b4b2:	68fb      	ldr	r3, [r7, #12]
2400b4b4:	681b      	ldr	r3, [r3, #0]
2400b4b6:	2208      	movs	r2, #8
2400b4b8:	61da      	str	r2, [r3, #28]

    /* Wait until DIR flag is reset Receiver mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, SET, Timeout, tickstart) != HAL_OK)
2400b4ba:	697b      	ldr	r3, [r7, #20]
2400b4bc:	9300      	str	r3, [sp, #0]
2400b4be:	683b      	ldr	r3, [r7, #0]
2400b4c0:	2201      	movs	r2, #1
2400b4c2:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
2400b4c6:	68f8      	ldr	r0, [r7, #12]
2400b4c8:	f004 fd96 	bl	2400fff8 <I2C_WaitOnFlagUntilTimeout>
2400b4cc:	4603      	mov	r3, r0
2400b4ce:	2b00      	cmp	r3, #0
2400b4d0:	d054      	beq.n	2400b57c <HAL_I2C_Slave_Receive+0x188>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400b4d2:	68fb      	ldr	r3, [r7, #12]
2400b4d4:	681b      	ldr	r3, [r3, #0]
2400b4d6:	685a      	ldr	r2, [r3, #4]
2400b4d8:	68fb      	ldr	r3, [r7, #12]
2400b4da:	681b      	ldr	r3, [r3, #0]
2400b4dc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
2400b4e0:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
2400b4e2:	2301      	movs	r3, #1
2400b4e4:	e092      	b.n	2400b60c <HAL_I2C_Slave_Receive+0x218>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400b4e6:	697a      	ldr	r2, [r7, #20]
2400b4e8:	6839      	ldr	r1, [r7, #0]
2400b4ea:	68f8      	ldr	r0, [r7, #12]
2400b4ec:	f004 fe68 	bl	240101c0 <I2C_WaitOnRXNEFlagUntilTimeout>
2400b4f0:	4603      	mov	r3, r0
2400b4f2:	2b00      	cmp	r3, #0
2400b4f4:	d029      	beq.n	2400b54a <HAL_I2C_Slave_Receive+0x156>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400b4f6:	68fb      	ldr	r3, [r7, #12]
2400b4f8:	681b      	ldr	r3, [r3, #0]
2400b4fa:	685a      	ldr	r2, [r3, #4]
2400b4fc:	68fb      	ldr	r3, [r7, #12]
2400b4fe:	681b      	ldr	r3, [r3, #0]
2400b500:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
2400b504:	605a      	str	r2, [r3, #4]

        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
2400b506:	68fb      	ldr	r3, [r7, #12]
2400b508:	681b      	ldr	r3, [r3, #0]
2400b50a:	699b      	ldr	r3, [r3, #24]
2400b50c:	f003 0304 	and.w	r3, r3, #4
2400b510:	2b04      	cmp	r3, #4
2400b512:	d118      	bne.n	2400b546 <HAL_I2C_Slave_Receive+0x152>
        {
          /* Read data from RXDR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2400b514:	68fb      	ldr	r3, [r7, #12]
2400b516:	681b      	ldr	r3, [r3, #0]
2400b518:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
2400b51a:	68fb      	ldr	r3, [r7, #12]
2400b51c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2400b51e:	b2d2      	uxtb	r2, r2
2400b520:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
2400b522:	68fb      	ldr	r3, [r7, #12]
2400b524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2400b526:	1c5a      	adds	r2, r3, #1
2400b528:	68fb      	ldr	r3, [r7, #12]
2400b52a:	625a      	str	r2, [r3, #36]	@ 0x24

          hi2c->XferCount--;
2400b52c:	68fb      	ldr	r3, [r7, #12]
2400b52e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400b530:	b29b      	uxth	r3, r3
2400b532:	3b01      	subs	r3, #1
2400b534:	b29a      	uxth	r2, r3
2400b536:	68fb      	ldr	r3, [r7, #12]
2400b538:	855a      	strh	r2, [r3, #42]	@ 0x2a
          hi2c->XferSize--;
2400b53a:	68fb      	ldr	r3, [r7, #12]
2400b53c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400b53e:	3b01      	subs	r3, #1
2400b540:	b29a      	uxth	r2, r3
2400b542:	68fb      	ldr	r3, [r7, #12]
2400b544:	851a      	strh	r2, [r3, #40]	@ 0x28
        }

        return HAL_ERROR;
2400b546:	2301      	movs	r3, #1
2400b548:	e060      	b.n	2400b60c <HAL_I2C_Slave_Receive+0x218>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2400b54a:	68fb      	ldr	r3, [r7, #12]
2400b54c:	681b      	ldr	r3, [r3, #0]
2400b54e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
2400b550:	68fb      	ldr	r3, [r7, #12]
2400b552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2400b554:	b2d2      	uxtb	r2, r2
2400b556:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2400b558:	68fb      	ldr	r3, [r7, #12]
2400b55a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2400b55c:	1c5a      	adds	r2, r3, #1
2400b55e:	68fb      	ldr	r3, [r7, #12]
2400b560:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
2400b562:	68fb      	ldr	r3, [r7, #12]
2400b564:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400b566:	b29b      	uxth	r3, r3
2400b568:	3b01      	subs	r3, #1
2400b56a:	b29a      	uxth	r2, r3
2400b56c:	68fb      	ldr	r3, [r7, #12]
2400b56e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
2400b570:	68fb      	ldr	r3, [r7, #12]
2400b572:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400b574:	3b01      	subs	r3, #1
2400b576:	b29a      	uxth	r2, r3
2400b578:	68fb      	ldr	r3, [r7, #12]
2400b57a:	851a      	strh	r2, [r3, #40]	@ 0x28
    while (hi2c->XferCount > 0U)
2400b57c:	68fb      	ldr	r3, [r7, #12]
2400b57e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400b580:	b29b      	uxth	r3, r3
2400b582:	2b00      	cmp	r3, #0
2400b584:	d1af      	bne.n	2400b4e6 <HAL_I2C_Slave_Receive+0xf2>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400b586:	697a      	ldr	r2, [r7, #20]
2400b588:	6839      	ldr	r1, [r7, #0]
2400b58a:	68f8      	ldr	r0, [r7, #12]
2400b58c:	f004 fdd4 	bl	24010138 <I2C_WaitOnSTOPFlagUntilTimeout>
2400b590:	4603      	mov	r3, r0
2400b592:	2b00      	cmp	r3, #0
2400b594:	d009      	beq.n	2400b5aa <HAL_I2C_Slave_Receive+0x1b6>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400b596:	68fb      	ldr	r3, [r7, #12]
2400b598:	681b      	ldr	r3, [r3, #0]
2400b59a:	685a      	ldr	r2, [r3, #4]
2400b59c:	68fb      	ldr	r3, [r7, #12]
2400b59e:	681b      	ldr	r3, [r3, #0]
2400b5a0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
2400b5a4:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
2400b5a6:	2301      	movs	r3, #1
2400b5a8:	e030      	b.n	2400b60c <HAL_I2C_Slave_Receive+0x218>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400b5aa:	68fb      	ldr	r3, [r7, #12]
2400b5ac:	681b      	ldr	r3, [r3, #0]
2400b5ae:	2220      	movs	r2, #32
2400b5b0:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
2400b5b2:	697b      	ldr	r3, [r7, #20]
2400b5b4:	9300      	str	r3, [sp, #0]
2400b5b6:	683b      	ldr	r3, [r7, #0]
2400b5b8:	2201      	movs	r2, #1
2400b5ba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
2400b5be:	68f8      	ldr	r0, [r7, #12]
2400b5c0:	f004 fd1a 	bl	2400fff8 <I2C_WaitOnFlagUntilTimeout>
2400b5c4:	4603      	mov	r3, r0
2400b5c6:	2b00      	cmp	r3, #0
2400b5c8:	d009      	beq.n	2400b5de <HAL_I2C_Slave_Receive+0x1ea>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400b5ca:	68fb      	ldr	r3, [r7, #12]
2400b5cc:	681b      	ldr	r3, [r3, #0]
2400b5ce:	685a      	ldr	r2, [r3, #4]
2400b5d0:	68fb      	ldr	r3, [r7, #12]
2400b5d2:	681b      	ldr	r3, [r3, #0]
2400b5d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
2400b5d8:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
2400b5da:	2301      	movs	r3, #1
2400b5dc:	e016      	b.n	2400b60c <HAL_I2C_Slave_Receive+0x218>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400b5de:	68fb      	ldr	r3, [r7, #12]
2400b5e0:	681b      	ldr	r3, [r3, #0]
2400b5e2:	685a      	ldr	r2, [r3, #4]
2400b5e4:	68fb      	ldr	r3, [r7, #12]
2400b5e6:	681b      	ldr	r3, [r3, #0]
2400b5e8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
2400b5ec:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
2400b5ee:	68fb      	ldr	r3, [r7, #12]
2400b5f0:	2220      	movs	r2, #32
2400b5f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
2400b5f6:	68fb      	ldr	r3, [r7, #12]
2400b5f8:	2200      	movs	r2, #0
2400b5fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400b5fe:	68fb      	ldr	r3, [r7, #12]
2400b600:	2200      	movs	r2, #0
2400b602:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
2400b606:	2300      	movs	r3, #0
2400b608:	e000      	b.n	2400b60c <HAL_I2C_Slave_Receive+0x218>
  }
  else
  {
    return HAL_BUSY;
2400b60a:	2302      	movs	r3, #2
  }
}
2400b60c:	4618      	mov	r0, r3
2400b60e:	3718      	adds	r7, #24
2400b610:	46bd      	mov	sp, r7
2400b612:	bd80      	pop	{r7, pc}

2400b614 <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
2400b614:	b580      	push	{r7, lr}
2400b616:	b088      	sub	sp, #32
2400b618:	af02      	add	r7, sp, #8
2400b61a:	60f8      	str	r0, [r7, #12]
2400b61c:	607a      	str	r2, [r7, #4]
2400b61e:	461a      	mov	r2, r3
2400b620:	460b      	mov	r3, r1
2400b622:	817b      	strh	r3, [r7, #10]
2400b624:	4613      	mov	r3, r2
2400b626:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
2400b628:	68fb      	ldr	r3, [r7, #12]
2400b62a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400b62e:	b2db      	uxtb	r3, r3
2400b630:	2b20      	cmp	r3, #32
2400b632:	d17c      	bne.n	2400b72e <HAL_I2C_Master_Transmit_IT+0x11a>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2400b634:	68fb      	ldr	r3, [r7, #12]
2400b636:	681b      	ldr	r3, [r3, #0]
2400b638:	699b      	ldr	r3, [r3, #24]
2400b63a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
2400b63e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
2400b642:	d101      	bne.n	2400b648 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
2400b644:	2302      	movs	r3, #2
2400b646:	e073      	b.n	2400b730 <HAL_I2C_Master_Transmit_IT+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400b648:	68fb      	ldr	r3, [r7, #12]
2400b64a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2400b64e:	2b01      	cmp	r3, #1
2400b650:	d101      	bne.n	2400b656 <HAL_I2C_Master_Transmit_IT+0x42>
2400b652:	2302      	movs	r3, #2
2400b654:	e06c      	b.n	2400b730 <HAL_I2C_Master_Transmit_IT+0x11c>
2400b656:	68fb      	ldr	r3, [r7, #12]
2400b658:	2201      	movs	r2, #1
2400b65a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
2400b65e:	68fb      	ldr	r3, [r7, #12]
2400b660:	2221      	movs	r2, #33	@ 0x21
2400b662:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
2400b666:	68fb      	ldr	r3, [r7, #12]
2400b668:	2210      	movs	r2, #16
2400b66a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400b66e:	68fb      	ldr	r3, [r7, #12]
2400b670:	2200      	movs	r2, #0
2400b672:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400b674:	68fb      	ldr	r3, [r7, #12]
2400b676:	687a      	ldr	r2, [r7, #4]
2400b678:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
2400b67a:	68fb      	ldr	r3, [r7, #12]
2400b67c:	893a      	ldrh	r2, [r7, #8]
2400b67e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400b680:	68fb      	ldr	r3, [r7, #12]
2400b682:	4a2d      	ldr	r2, [pc, #180]	@ (2400b738 <HAL_I2C_Master_Transmit_IT+0x124>)
2400b684:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
2400b686:	68fb      	ldr	r3, [r7, #12]
2400b688:	4a2c      	ldr	r2, [pc, #176]	@ (2400b73c <HAL_I2C_Master_Transmit_IT+0x128>)
2400b68a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400b68c:	68fb      	ldr	r3, [r7, #12]
2400b68e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400b690:	b29b      	uxth	r3, r3
2400b692:	2bff      	cmp	r3, #255	@ 0xff
2400b694:	d906      	bls.n	2400b6a4 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400b696:	68fb      	ldr	r3, [r7, #12]
2400b698:	22ff      	movs	r2, #255	@ 0xff
2400b69a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
2400b69c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
2400b6a0:	617b      	str	r3, [r7, #20]
2400b6a2:	e007      	b.n	2400b6b4 <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400b6a4:	68fb      	ldr	r3, [r7, #12]
2400b6a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400b6a8:	b29a      	uxth	r2, r3
2400b6aa:	68fb      	ldr	r3, [r7, #12]
2400b6ac:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
2400b6ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
2400b6b2:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferSize > 0U)
2400b6b4:	68fb      	ldr	r3, [r7, #12]
2400b6b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400b6b8:	2b00      	cmp	r3, #0
2400b6ba:	d024      	beq.n	2400b706 <HAL_I2C_Master_Transmit_IT+0xf2>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2400b6bc:	68fb      	ldr	r3, [r7, #12]
2400b6be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2400b6c0:	781a      	ldrb	r2, [r3, #0]
2400b6c2:	68fb      	ldr	r3, [r7, #12]
2400b6c4:	681b      	ldr	r3, [r3, #0]
2400b6c6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2400b6c8:	68fb      	ldr	r3, [r7, #12]
2400b6ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2400b6cc:	1c5a      	adds	r2, r3, #1
2400b6ce:	68fb      	ldr	r3, [r7, #12]
2400b6d0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
2400b6d2:	68fb      	ldr	r3, [r7, #12]
2400b6d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400b6d6:	b29b      	uxth	r3, r3
2400b6d8:	3b01      	subs	r3, #1
2400b6da:	b29a      	uxth	r2, r3
2400b6dc:	68fb      	ldr	r3, [r7, #12]
2400b6de:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
2400b6e0:	68fb      	ldr	r3, [r7, #12]
2400b6e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400b6e4:	3b01      	subs	r3, #1
2400b6e6:	b29a      	uxth	r2, r3
2400b6e8:	68fb      	ldr	r3, [r7, #12]
2400b6ea:	851a      	strh	r2, [r3, #40]	@ 0x28

      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
2400b6ec:	68fb      	ldr	r3, [r7, #12]
2400b6ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400b6f0:	b2db      	uxtb	r3, r3
2400b6f2:	3301      	adds	r3, #1
2400b6f4:	b2da      	uxtb	r2, r3
2400b6f6:	8979      	ldrh	r1, [r7, #10]
2400b6f8:	4b11      	ldr	r3, [pc, #68]	@ (2400b740 <HAL_I2C_Master_Transmit_IT+0x12c>)
2400b6fa:	9300      	str	r3, [sp, #0]
2400b6fc:	697b      	ldr	r3, [r7, #20]
2400b6fe:	68f8      	ldr	r0, [r7, #12]
2400b700:	f004 feca 	bl	24010498 <I2C_TransferConfig>
2400b704:	e009      	b.n	2400b71a <HAL_I2C_Master_Transmit_IT+0x106>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
2400b706:	68fb      	ldr	r3, [r7, #12]
2400b708:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400b70a:	b2da      	uxtb	r2, r3
2400b70c:	8979      	ldrh	r1, [r7, #10]
2400b70e:	4b0c      	ldr	r3, [pc, #48]	@ (2400b740 <HAL_I2C_Master_Transmit_IT+0x12c>)
2400b710:	9300      	str	r3, [sp, #0]
2400b712:	697b      	ldr	r3, [r7, #20]
2400b714:	68f8      	ldr	r0, [r7, #12]
2400b716:	f004 febf 	bl	24010498 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400b71a:	68fb      	ldr	r3, [r7, #12]
2400b71c:	2200      	movs	r2, #0
2400b71e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
2400b722:	2101      	movs	r1, #1
2400b724:	68f8      	ldr	r0, [r7, #12]
2400b726:	f004 fee9 	bl	240104fc <I2C_Enable_IRQ>

    return HAL_OK;
2400b72a:	2300      	movs	r3, #0
2400b72c:	e000      	b.n	2400b730 <HAL_I2C_Master_Transmit_IT+0x11c>
  }
  else
  {
    return HAL_BUSY;
2400b72e:	2302      	movs	r3, #2
  }
}
2400b730:	4618      	mov	r0, r3
2400b732:	3718      	adds	r7, #24
2400b734:	46bd      	mov	sp, r7
2400b736:	bd80      	pop	{r7, pc}
2400b738:	ffff0000 	.word	0xffff0000
2400b73c:	2400df33 	.word	0x2400df33
2400b740:	80002000 	.word	0x80002000

2400b744 <HAL_I2C_Master_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size)
{
2400b744:	b580      	push	{r7, lr}
2400b746:	b088      	sub	sp, #32
2400b748:	af02      	add	r7, sp, #8
2400b74a:	60f8      	str	r0, [r7, #12]
2400b74c:	607a      	str	r2, [r7, #4]
2400b74e:	461a      	mov	r2, r3
2400b750:	460b      	mov	r3, r1
2400b752:	817b      	strh	r3, [r7, #10]
2400b754:	4613      	mov	r3, r2
2400b756:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
2400b758:	68fb      	ldr	r3, [r7, #12]
2400b75a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400b75e:	b2db      	uxtb	r3, r3
2400b760:	2b20      	cmp	r3, #32
2400b762:	d153      	bne.n	2400b80c <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2400b764:	68fb      	ldr	r3, [r7, #12]
2400b766:	681b      	ldr	r3, [r3, #0]
2400b768:	699b      	ldr	r3, [r3, #24]
2400b76a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
2400b76e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
2400b772:	d101      	bne.n	2400b778 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
2400b774:	2302      	movs	r3, #2
2400b776:	e04a      	b.n	2400b80e <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400b778:	68fb      	ldr	r3, [r7, #12]
2400b77a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2400b77e:	2b01      	cmp	r3, #1
2400b780:	d101      	bne.n	2400b786 <HAL_I2C_Master_Receive_IT+0x42>
2400b782:	2302      	movs	r3, #2
2400b784:	e043      	b.n	2400b80e <HAL_I2C_Master_Receive_IT+0xca>
2400b786:	68fb      	ldr	r3, [r7, #12]
2400b788:	2201      	movs	r2, #1
2400b78a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
2400b78e:	68fb      	ldr	r3, [r7, #12]
2400b790:	2222      	movs	r2, #34	@ 0x22
2400b792:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
2400b796:	68fb      	ldr	r3, [r7, #12]
2400b798:	2210      	movs	r2, #16
2400b79a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400b79e:	68fb      	ldr	r3, [r7, #12]
2400b7a0:	2200      	movs	r2, #0
2400b7a2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400b7a4:	68fb      	ldr	r3, [r7, #12]
2400b7a6:	687a      	ldr	r2, [r7, #4]
2400b7a8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
2400b7aa:	68fb      	ldr	r3, [r7, #12]
2400b7ac:	893a      	ldrh	r2, [r7, #8]
2400b7ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400b7b0:	68fb      	ldr	r3, [r7, #12]
2400b7b2:	4a19      	ldr	r2, [pc, #100]	@ (2400b818 <HAL_I2C_Master_Receive_IT+0xd4>)
2400b7b4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
2400b7b6:	68fb      	ldr	r3, [r7, #12]
2400b7b8:	4a18      	ldr	r2, [pc, #96]	@ (2400b81c <HAL_I2C_Master_Receive_IT+0xd8>)
2400b7ba:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400b7bc:	68fb      	ldr	r3, [r7, #12]
2400b7be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400b7c0:	b29b      	uxth	r3, r3
2400b7c2:	2bff      	cmp	r3, #255	@ 0xff
2400b7c4:	d906      	bls.n	2400b7d4 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400b7c6:	68fb      	ldr	r3, [r7, #12]
2400b7c8:	22ff      	movs	r2, #255	@ 0xff
2400b7ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
2400b7cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
2400b7d0:	617b      	str	r3, [r7, #20]
2400b7d2:	e007      	b.n	2400b7e4 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400b7d4:	68fb      	ldr	r3, [r7, #12]
2400b7d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400b7d8:	b29a      	uxth	r2, r3
2400b7da:	68fb      	ldr	r3, [r7, #12]
2400b7dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
2400b7de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
2400b7e2:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
2400b7e4:	68fb      	ldr	r3, [r7, #12]
2400b7e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400b7e8:	b2da      	uxtb	r2, r3
2400b7ea:	8979      	ldrh	r1, [r7, #10]
2400b7ec:	4b0c      	ldr	r3, [pc, #48]	@ (2400b820 <HAL_I2C_Master_Receive_IT+0xdc>)
2400b7ee:	9300      	str	r3, [sp, #0]
2400b7f0:	697b      	ldr	r3, [r7, #20]
2400b7f2:	68f8      	ldr	r0, [r7, #12]
2400b7f4:	f004 fe50 	bl	24010498 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400b7f8:	68fb      	ldr	r3, [r7, #12]
2400b7fa:	2200      	movs	r2, #0
2400b7fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
2400b800:	2102      	movs	r1, #2
2400b802:	68f8      	ldr	r0, [r7, #12]
2400b804:	f004 fe7a 	bl	240104fc <I2C_Enable_IRQ>

    return HAL_OK;
2400b808:	2300      	movs	r3, #0
2400b80a:	e000      	b.n	2400b80e <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
2400b80c:	2302      	movs	r3, #2
  }
}
2400b80e:	4618      	mov	r0, r3
2400b810:	3718      	adds	r7, #24
2400b812:	46bd      	mov	sp, r7
2400b814:	bd80      	pop	{r7, pc}
2400b816:	bf00      	nop
2400b818:	ffff0000 	.word	0xffff0000
2400b81c:	2400df33 	.word	0x2400df33
2400b820:	80002400 	.word	0x80002400

2400b824 <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
2400b824:	b580      	push	{r7, lr}
2400b826:	b084      	sub	sp, #16
2400b828:	af00      	add	r7, sp, #0
2400b82a:	60f8      	str	r0, [r7, #12]
2400b82c:	60b9      	str	r1, [r7, #8]
2400b82e:	4613      	mov	r3, r2
2400b830:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
2400b832:	68fb      	ldr	r3, [r7, #12]
2400b834:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400b838:	b2db      	uxtb	r3, r3
2400b83a:	2b20      	cmp	r3, #32
2400b83c:	d156      	bne.n	2400b8ec <HAL_I2C_Slave_Transmit_IT+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400b83e:	68fb      	ldr	r3, [r7, #12]
2400b840:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2400b844:	2b01      	cmp	r3, #1
2400b846:	d101      	bne.n	2400b84c <HAL_I2C_Slave_Transmit_IT+0x28>
2400b848:	2302      	movs	r3, #2
2400b84a:	e050      	b.n	2400b8ee <HAL_I2C_Slave_Transmit_IT+0xca>
2400b84c:	68fb      	ldr	r3, [r7, #12]
2400b84e:	2201      	movs	r2, #1
2400b850:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
2400b854:	68fb      	ldr	r3, [r7, #12]
2400b856:	2221      	movs	r2, #33	@ 0x21
2400b858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
2400b85c:	68fb      	ldr	r3, [r7, #12]
2400b85e:	2220      	movs	r2, #32
2400b860:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400b864:	68fb      	ldr	r3, [r7, #12]
2400b866:	2200      	movs	r2, #0
2400b868:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2400b86a:	68fb      	ldr	r3, [r7, #12]
2400b86c:	681b      	ldr	r3, [r3, #0]
2400b86e:	685a      	ldr	r2, [r3, #4]
2400b870:	68fb      	ldr	r3, [r7, #12]
2400b872:	681b      	ldr	r3, [r3, #0]
2400b874:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
2400b878:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400b87a:	68fb      	ldr	r3, [r7, #12]
2400b87c:	68ba      	ldr	r2, [r7, #8]
2400b87e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
2400b880:	68fb      	ldr	r3, [r7, #12]
2400b882:	88fa      	ldrh	r2, [r7, #6]
2400b884:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
2400b886:	68fb      	ldr	r3, [r7, #12]
2400b888:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400b88a:	b29a      	uxth	r2, r3
2400b88c:	68fb      	ldr	r3, [r7, #12]
2400b88e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400b890:	68fb      	ldr	r3, [r7, #12]
2400b892:	4a19      	ldr	r2, [pc, #100]	@ (2400b8f8 <HAL_I2C_Slave_Transmit_IT+0xd4>)
2400b894:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
2400b896:	68fb      	ldr	r3, [r7, #12]
2400b898:	4a18      	ldr	r2, [pc, #96]	@ (2400b8fc <HAL_I2C_Slave_Transmit_IT+0xd8>)
2400b89a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
2400b89c:	68fb      	ldr	r3, [r7, #12]
2400b89e:	6a1b      	ldr	r3, [r3, #32]
2400b8a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
2400b8a4:	d117      	bne.n	2400b8d6 <HAL_I2C_Slave_Transmit_IT+0xb2>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2400b8a6:	68fb      	ldr	r3, [r7, #12]
2400b8a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2400b8aa:	781a      	ldrb	r2, [r3, #0]
2400b8ac:	68fb      	ldr	r3, [r7, #12]
2400b8ae:	681b      	ldr	r3, [r3, #0]
2400b8b0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2400b8b2:	68fb      	ldr	r3, [r7, #12]
2400b8b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2400b8b6:	1c5a      	adds	r2, r3, #1
2400b8b8:	68fb      	ldr	r3, [r7, #12]
2400b8ba:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
2400b8bc:	68fb      	ldr	r3, [r7, #12]
2400b8be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400b8c0:	b29b      	uxth	r3, r3
2400b8c2:	3b01      	subs	r3, #1
2400b8c4:	b29a      	uxth	r2, r3
2400b8c6:	68fb      	ldr	r3, [r7, #12]
2400b8c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
2400b8ca:	68fb      	ldr	r3, [r7, #12]
2400b8cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400b8ce:	3b01      	subs	r3, #1
2400b8d0:	b29a      	uxth	r2, r3
2400b8d2:	68fb      	ldr	r3, [r7, #12]
2400b8d4:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400b8d6:	68fb      	ldr	r3, [r7, #12]
2400b8d8:	2200      	movs	r2, #0
2400b8da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
2400b8de:	f248 0101 	movw	r1, #32769	@ 0x8001
2400b8e2:	68f8      	ldr	r0, [r7, #12]
2400b8e4:	f004 fe0a 	bl	240104fc <I2C_Enable_IRQ>

    return HAL_OK;
2400b8e8:	2300      	movs	r3, #0
2400b8ea:	e000      	b.n	2400b8ee <HAL_I2C_Slave_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
2400b8ec:	2302      	movs	r3, #2
  }
}
2400b8ee:	4618      	mov	r0, r3
2400b8f0:	3710      	adds	r7, #16
2400b8f2:	46bd      	mov	sp, r7
2400b8f4:	bd80      	pop	{r7, pc}
2400b8f6:	bf00      	nop
2400b8f8:	ffff0000 	.word	0xffff0000
2400b8fc:	2400e3cd 	.word	0x2400e3cd

2400b900 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
2400b900:	b580      	push	{r7, lr}
2400b902:	b084      	sub	sp, #16
2400b904:	af00      	add	r7, sp, #0
2400b906:	60f8      	str	r0, [r7, #12]
2400b908:	60b9      	str	r1, [r7, #8]
2400b90a:	4613      	mov	r3, r2
2400b90c:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
2400b90e:	68fb      	ldr	r3, [r7, #12]
2400b910:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400b914:	b2db      	uxtb	r3, r3
2400b916:	2b20      	cmp	r3, #32
2400b918:	d139      	bne.n	2400b98e <HAL_I2C_Slave_Receive_IT+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400b91a:	68fb      	ldr	r3, [r7, #12]
2400b91c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2400b920:	2b01      	cmp	r3, #1
2400b922:	d101      	bne.n	2400b928 <HAL_I2C_Slave_Receive_IT+0x28>
2400b924:	2302      	movs	r3, #2
2400b926:	e033      	b.n	2400b990 <HAL_I2C_Slave_Receive_IT+0x90>
2400b928:	68fb      	ldr	r3, [r7, #12]
2400b92a:	2201      	movs	r2, #1
2400b92c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
2400b930:	68fb      	ldr	r3, [r7, #12]
2400b932:	2222      	movs	r2, #34	@ 0x22
2400b934:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
2400b938:	68fb      	ldr	r3, [r7, #12]
2400b93a:	2220      	movs	r2, #32
2400b93c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400b940:	68fb      	ldr	r3, [r7, #12]
2400b942:	2200      	movs	r2, #0
2400b944:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2400b946:	68fb      	ldr	r3, [r7, #12]
2400b948:	681b      	ldr	r3, [r3, #0]
2400b94a:	685a      	ldr	r2, [r3, #4]
2400b94c:	68fb      	ldr	r3, [r7, #12]
2400b94e:	681b      	ldr	r3, [r3, #0]
2400b950:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
2400b954:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400b956:	68fb      	ldr	r3, [r7, #12]
2400b958:	68ba      	ldr	r2, [r7, #8]
2400b95a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
2400b95c:	68fb      	ldr	r3, [r7, #12]
2400b95e:	88fa      	ldrh	r2, [r7, #6]
2400b960:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
2400b962:	68fb      	ldr	r3, [r7, #12]
2400b964:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400b966:	b29a      	uxth	r2, r3
2400b968:	68fb      	ldr	r3, [r7, #12]
2400b96a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400b96c:	68fb      	ldr	r3, [r7, #12]
2400b96e:	4a0a      	ldr	r2, [pc, #40]	@ (2400b998 <HAL_I2C_Slave_Receive_IT+0x98>)
2400b970:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
2400b972:	68fb      	ldr	r3, [r7, #12]
2400b974:	4a09      	ldr	r2, [pc, #36]	@ (2400b99c <HAL_I2C_Slave_Receive_IT+0x9c>)
2400b976:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400b978:	68fb      	ldr	r3, [r7, #12]
2400b97a:	2200      	movs	r2, #0
2400b97c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
2400b980:	f248 0102 	movw	r1, #32770	@ 0x8002
2400b984:	68f8      	ldr	r0, [r7, #12]
2400b986:	f004 fdb9 	bl	240104fc <I2C_Enable_IRQ>

    return HAL_OK;
2400b98a:	2300      	movs	r3, #0
2400b98c:	e000      	b.n	2400b990 <HAL_I2C_Slave_Receive_IT+0x90>
  }
  else
  {
    return HAL_BUSY;
2400b98e:	2302      	movs	r3, #2
  }
}
2400b990:	4618      	mov	r0, r3
2400b992:	3710      	adds	r7, #16
2400b994:	46bd      	mov	sp, r7
2400b996:	bd80      	pop	{r7, pc}
2400b998:	ffff0000 	.word	0xffff0000
2400b99c:	2400e3cd 	.word	0x2400e3cd

2400b9a0 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
2400b9a0:	b580      	push	{r7, lr}
2400b9a2:	b08a      	sub	sp, #40	@ 0x28
2400b9a4:	af02      	add	r7, sp, #8
2400b9a6:	60f8      	str	r0, [r7, #12]
2400b9a8:	607a      	str	r2, [r7, #4]
2400b9aa:	461a      	mov	r2, r3
2400b9ac:	460b      	mov	r3, r1
2400b9ae:	817b      	strh	r3, [r7, #10]
2400b9b0:	4613      	mov	r3, r2
2400b9b2:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
2400b9b4:	2300      	movs	r3, #0
2400b9b6:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
2400b9b8:	68fb      	ldr	r3, [r7, #12]
2400b9ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400b9be:	b2db      	uxtb	r3, r3
2400b9c0:	2b20      	cmp	r3, #32
2400b9c2:	f040 80ef 	bne.w	2400bba4 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2400b9c6:	68fb      	ldr	r3, [r7, #12]
2400b9c8:	681b      	ldr	r3, [r3, #0]
2400b9ca:	699b      	ldr	r3, [r3, #24]
2400b9cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
2400b9d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
2400b9d4:	d101      	bne.n	2400b9da <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
2400b9d6:	2302      	movs	r3, #2
2400b9d8:	e0e5      	b.n	2400bba6 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400b9da:	68fb      	ldr	r3, [r7, #12]
2400b9dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2400b9e0:	2b01      	cmp	r3, #1
2400b9e2:	d101      	bne.n	2400b9e8 <HAL_I2C_Master_Transmit_DMA+0x48>
2400b9e4:	2302      	movs	r3, #2
2400b9e6:	e0de      	b.n	2400bba6 <HAL_I2C_Master_Transmit_DMA+0x206>
2400b9e8:	68fb      	ldr	r3, [r7, #12]
2400b9ea:	2201      	movs	r2, #1
2400b9ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
2400b9f0:	68fb      	ldr	r3, [r7, #12]
2400b9f2:	2221      	movs	r2, #33	@ 0x21
2400b9f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
2400b9f8:	68fb      	ldr	r3, [r7, #12]
2400b9fa:	2210      	movs	r2, #16
2400b9fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400ba00:	68fb      	ldr	r3, [r7, #12]
2400ba02:	2200      	movs	r2, #0
2400ba04:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400ba06:	68fb      	ldr	r3, [r7, #12]
2400ba08:	687a      	ldr	r2, [r7, #4]
2400ba0a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
2400ba0c:	68fb      	ldr	r3, [r7, #12]
2400ba0e:	893a      	ldrh	r2, [r7, #8]
2400ba10:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400ba12:	68fb      	ldr	r3, [r7, #12]
2400ba14:	4a66      	ldr	r2, [pc, #408]	@ (2400bbb0 <HAL_I2C_Master_Transmit_DMA+0x210>)
2400ba16:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
2400ba18:	68fb      	ldr	r3, [r7, #12]
2400ba1a:	4a66      	ldr	r2, [pc, #408]	@ (2400bbb4 <HAL_I2C_Master_Transmit_DMA+0x214>)
2400ba1c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400ba1e:	68fb      	ldr	r3, [r7, #12]
2400ba20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400ba22:	b29b      	uxth	r3, r3
2400ba24:	2bff      	cmp	r3, #255	@ 0xff
2400ba26:	d906      	bls.n	2400ba36 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400ba28:	68fb      	ldr	r3, [r7, #12]
2400ba2a:	22ff      	movs	r2, #255	@ 0xff
2400ba2c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
2400ba2e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
2400ba32:	61fb      	str	r3, [r7, #28]
2400ba34:	e007      	b.n	2400ba46 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400ba36:	68fb      	ldr	r3, [r7, #12]
2400ba38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400ba3a:	b29a      	uxth	r2, r3
2400ba3c:	68fb      	ldr	r3, [r7, #12]
2400ba3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
2400ba40:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
2400ba44:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
2400ba46:	68fb      	ldr	r3, [r7, #12]
2400ba48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400ba4a:	2b00      	cmp	r3, #0
2400ba4c:	d01a      	beq.n	2400ba84 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2400ba4e:	68fb      	ldr	r3, [r7, #12]
2400ba50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2400ba52:	781a      	ldrb	r2, [r3, #0]
2400ba54:	68fb      	ldr	r3, [r7, #12]
2400ba56:	681b      	ldr	r3, [r3, #0]
2400ba58:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2400ba5a:	68fb      	ldr	r3, [r7, #12]
2400ba5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2400ba5e:	1c5a      	adds	r2, r3, #1
2400ba60:	68fb      	ldr	r3, [r7, #12]
2400ba62:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
2400ba64:	68fb      	ldr	r3, [r7, #12]
2400ba66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400ba68:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
2400ba6a:	68fb      	ldr	r3, [r7, #12]
2400ba6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400ba6e:	b29b      	uxth	r3, r3
2400ba70:	3b01      	subs	r3, #1
2400ba72:	b29a      	uxth	r2, r3
2400ba74:	68fb      	ldr	r3, [r7, #12]
2400ba76:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
2400ba78:	68fb      	ldr	r3, [r7, #12]
2400ba7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400ba7c:	3b01      	subs	r3, #1
2400ba7e:	b29a      	uxth	r2, r3
2400ba80:	68fb      	ldr	r3, [r7, #12]
2400ba82:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
2400ba84:	68fb      	ldr	r3, [r7, #12]
2400ba86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400ba88:	2b00      	cmp	r3, #0
2400ba8a:	d074      	beq.n	2400bb76 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
2400ba8c:	68fb      	ldr	r3, [r7, #12]
2400ba8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400ba90:	2b00      	cmp	r3, #0
2400ba92:	d022      	beq.n	2400bada <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
2400ba94:	68fb      	ldr	r3, [r7, #12]
2400ba96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400ba98:	4a47      	ldr	r2, [pc, #284]	@ (2400bbb8 <HAL_I2C_Master_Transmit_DMA+0x218>)
2400ba9a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
2400ba9c:	68fb      	ldr	r3, [r7, #12]
2400ba9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400baa0:	4a46      	ldr	r2, [pc, #280]	@ (2400bbbc <HAL_I2C_Master_Transmit_DMA+0x21c>)
2400baa2:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
2400baa4:	68fb      	ldr	r3, [r7, #12]
2400baa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400baa8:	2200      	movs	r2, #0
2400baaa:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
2400baac:	68fb      	ldr	r3, [r7, #12]
2400baae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400bab0:	2200      	movs	r2, #0
2400bab2:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
2400bab4:	68fb      	ldr	r3, [r7, #12]
2400bab6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
2400bab8:	68fb      	ldr	r3, [r7, #12]
2400baba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2400babc:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
2400babe:	68fb      	ldr	r3, [r7, #12]
2400bac0:	681b      	ldr	r3, [r3, #0]
2400bac2:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
2400bac4:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
2400bac6:	68fb      	ldr	r3, [r7, #12]
2400bac8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
2400baca:	f7f8 ff37 	bl	2400493c <HAL_DMA_Start_IT>
2400bace:	4603      	mov	r3, r0
2400bad0:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
2400bad2:	7dfb      	ldrb	r3, [r7, #23]
2400bad4:	2b00      	cmp	r3, #0
2400bad6:	d13a      	bne.n	2400bb4e <HAL_I2C_Master_Transmit_DMA+0x1ae>
2400bad8:	e013      	b.n	2400bb02 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
2400bada:	68fb      	ldr	r3, [r7, #12]
2400badc:	2220      	movs	r2, #32
2400bade:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2400bae2:	68fb      	ldr	r3, [r7, #12]
2400bae4:	2200      	movs	r2, #0
2400bae6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2400baea:	68fb      	ldr	r3, [r7, #12]
2400baec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2400baee:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
2400baf2:	68fb      	ldr	r3, [r7, #12]
2400baf4:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
2400baf6:	68fb      	ldr	r3, [r7, #12]
2400baf8:	2200      	movs	r2, #0
2400bafa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
2400bafe:	2301      	movs	r3, #1
2400bb00:	e051      	b.n	2400bba6 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
2400bb02:	68fb      	ldr	r3, [r7, #12]
2400bb04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400bb06:	b2db      	uxtb	r3, r3
2400bb08:	3301      	adds	r3, #1
2400bb0a:	b2da      	uxtb	r2, r3
2400bb0c:	8979      	ldrh	r1, [r7, #10]
2400bb0e:	4b2c      	ldr	r3, [pc, #176]	@ (2400bbc0 <HAL_I2C_Master_Transmit_DMA+0x220>)
2400bb10:	9300      	str	r3, [sp, #0]
2400bb12:	69fb      	ldr	r3, [r7, #28]
2400bb14:	68f8      	ldr	r0, [r7, #12]
2400bb16:	f004 fcbf 	bl	24010498 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
2400bb1a:	68fb      	ldr	r3, [r7, #12]
2400bb1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400bb1e:	b29a      	uxth	r2, r3
2400bb20:	68fb      	ldr	r3, [r7, #12]
2400bb22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400bb24:	1ad3      	subs	r3, r2, r3
2400bb26:	b29a      	uxth	r2, r3
2400bb28:	68fb      	ldr	r3, [r7, #12]
2400bb2a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400bb2c:	68fb      	ldr	r3, [r7, #12]
2400bb2e:	2200      	movs	r2, #0
2400bb30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
2400bb34:	2110      	movs	r1, #16
2400bb36:	68f8      	ldr	r0, [r7, #12]
2400bb38:	f004 fce0 	bl	240104fc <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
2400bb3c:	68fb      	ldr	r3, [r7, #12]
2400bb3e:	681b      	ldr	r3, [r3, #0]
2400bb40:	681a      	ldr	r2, [r3, #0]
2400bb42:	68fb      	ldr	r3, [r7, #12]
2400bb44:	681b      	ldr	r3, [r3, #0]
2400bb46:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
2400bb4a:	601a      	str	r2, [r3, #0]
2400bb4c:	e028      	b.n	2400bba0 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
2400bb4e:	68fb      	ldr	r3, [r7, #12]
2400bb50:	2220      	movs	r2, #32
2400bb52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2400bb56:	68fb      	ldr	r3, [r7, #12]
2400bb58:	2200      	movs	r2, #0
2400bb5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2400bb5e:	68fb      	ldr	r3, [r7, #12]
2400bb60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2400bb62:	f043 0210 	orr.w	r2, r3, #16
2400bb66:	68fb      	ldr	r3, [r7, #12]
2400bb68:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400bb6a:	68fb      	ldr	r3, [r7, #12]
2400bb6c:	2200      	movs	r2, #0
2400bb6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
2400bb72:	2301      	movs	r3, #1
2400bb74:	e017      	b.n	2400bba6 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
2400bb76:	68fb      	ldr	r3, [r7, #12]
2400bb78:	4a12      	ldr	r2, [pc, #72]	@ (2400bbc4 <HAL_I2C_Master_Transmit_DMA+0x224>)
2400bb7a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
2400bb7c:	69bb      	ldr	r3, [r7, #24]
2400bb7e:	b2da      	uxtb	r2, r3
2400bb80:	8979      	ldrh	r1, [r7, #10]
2400bb82:	4b0f      	ldr	r3, [pc, #60]	@ (2400bbc0 <HAL_I2C_Master_Transmit_DMA+0x220>)
2400bb84:	9300      	str	r3, [sp, #0]
2400bb86:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
2400bb8a:	68f8      	ldr	r0, [r7, #12]
2400bb8c:	f004 fc84 	bl	24010498 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400bb90:	68fb      	ldr	r3, [r7, #12]
2400bb92:	2200      	movs	r2, #0
2400bb94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
2400bb98:	2101      	movs	r1, #1
2400bb9a:	68f8      	ldr	r0, [r7, #12]
2400bb9c:	f004 fcae 	bl	240104fc <I2C_Enable_IRQ>
    }

    return HAL_OK;
2400bba0:	2300      	movs	r3, #0
2400bba2:	e000      	b.n	2400bba6 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
2400bba4:	2302      	movs	r3, #2
  }
}
2400bba6:	4618      	mov	r0, r3
2400bba8:	3720      	adds	r7, #32
2400bbaa:	46bd      	mov	sp, r7
2400bbac:	bd80      	pop	{r7, pc}
2400bbae:	bf00      	nop
2400bbb0:	ffff0000 	.word	0xffff0000
2400bbb4:	2400e5bf 	.word	0x2400e5bf
2400bbb8:	2400fa77 	.word	0x2400fa77
2400bbbc:	2400fd49 	.word	0x2400fd49
2400bbc0:	80002000 	.word	0x80002000
2400bbc4:	2400df33 	.word	0x2400df33

2400bbc8 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
2400bbc8:	b580      	push	{r7, lr}
2400bbca:	b088      	sub	sp, #32
2400bbcc:	af02      	add	r7, sp, #8
2400bbce:	60f8      	str	r0, [r7, #12]
2400bbd0:	607a      	str	r2, [r7, #4]
2400bbd2:	461a      	mov	r2, r3
2400bbd4:	460b      	mov	r3, r1
2400bbd6:	817b      	strh	r3, [r7, #10]
2400bbd8:	4613      	mov	r3, r2
2400bbda:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
2400bbdc:	68fb      	ldr	r3, [r7, #12]
2400bbde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400bbe2:	b2db      	uxtb	r3, r3
2400bbe4:	2b20      	cmp	r3, #32
2400bbe6:	f040 80cd 	bne.w	2400bd84 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2400bbea:	68fb      	ldr	r3, [r7, #12]
2400bbec:	681b      	ldr	r3, [r3, #0]
2400bbee:	699b      	ldr	r3, [r3, #24]
2400bbf0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
2400bbf4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
2400bbf8:	d101      	bne.n	2400bbfe <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
2400bbfa:	2302      	movs	r3, #2
2400bbfc:	e0c3      	b.n	2400bd86 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400bbfe:	68fb      	ldr	r3, [r7, #12]
2400bc00:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2400bc04:	2b01      	cmp	r3, #1
2400bc06:	d101      	bne.n	2400bc0c <HAL_I2C_Master_Receive_DMA+0x44>
2400bc08:	2302      	movs	r3, #2
2400bc0a:	e0bc      	b.n	2400bd86 <HAL_I2C_Master_Receive_DMA+0x1be>
2400bc0c:	68fb      	ldr	r3, [r7, #12]
2400bc0e:	2201      	movs	r2, #1
2400bc10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
2400bc14:	68fb      	ldr	r3, [r7, #12]
2400bc16:	2222      	movs	r2, #34	@ 0x22
2400bc18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
2400bc1c:	68fb      	ldr	r3, [r7, #12]
2400bc1e:	2210      	movs	r2, #16
2400bc20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400bc24:	68fb      	ldr	r3, [r7, #12]
2400bc26:	2200      	movs	r2, #0
2400bc28:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400bc2a:	68fb      	ldr	r3, [r7, #12]
2400bc2c:	687a      	ldr	r2, [r7, #4]
2400bc2e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
2400bc30:	68fb      	ldr	r3, [r7, #12]
2400bc32:	893a      	ldrh	r2, [r7, #8]
2400bc34:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400bc36:	68fb      	ldr	r3, [r7, #12]
2400bc38:	4a55      	ldr	r2, [pc, #340]	@ (2400bd90 <HAL_I2C_Master_Receive_DMA+0x1c8>)
2400bc3a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
2400bc3c:	68fb      	ldr	r3, [r7, #12]
2400bc3e:	4a55      	ldr	r2, [pc, #340]	@ (2400bd94 <HAL_I2C_Master_Receive_DMA+0x1cc>)
2400bc40:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400bc42:	68fb      	ldr	r3, [r7, #12]
2400bc44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400bc46:	b29b      	uxth	r3, r3
2400bc48:	2bff      	cmp	r3, #255	@ 0xff
2400bc4a:	d906      	bls.n	2400bc5a <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400bc4c:	68fb      	ldr	r3, [r7, #12]
2400bc4e:	22ff      	movs	r2, #255	@ 0xff
2400bc50:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
2400bc52:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
2400bc56:	617b      	str	r3, [r7, #20]
2400bc58:	e007      	b.n	2400bc6a <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400bc5a:	68fb      	ldr	r3, [r7, #12]
2400bc5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400bc5e:	b29a      	uxth	r2, r3
2400bc60:	68fb      	ldr	r3, [r7, #12]
2400bc62:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
2400bc64:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
2400bc68:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
2400bc6a:	68fb      	ldr	r3, [r7, #12]
2400bc6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400bc6e:	2b00      	cmp	r3, #0
2400bc70:	d070      	beq.n	2400bd54 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
2400bc72:	68fb      	ldr	r3, [r7, #12]
2400bc74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400bc76:	2b00      	cmp	r3, #0
2400bc78:	d020      	beq.n	2400bcbc <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
2400bc7a:	68fb      	ldr	r3, [r7, #12]
2400bc7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400bc7e:	4a46      	ldr	r2, [pc, #280]	@ (2400bd98 <HAL_I2C_Master_Receive_DMA+0x1d0>)
2400bc80:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
2400bc82:	68fb      	ldr	r3, [r7, #12]
2400bc84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400bc86:	4a45      	ldr	r2, [pc, #276]	@ (2400bd9c <HAL_I2C_Master_Receive_DMA+0x1d4>)
2400bc88:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
2400bc8a:	68fb      	ldr	r3, [r7, #12]
2400bc8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400bc8e:	2200      	movs	r2, #0
2400bc90:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
2400bc92:	68fb      	ldr	r3, [r7, #12]
2400bc94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400bc96:	2200      	movs	r2, #0
2400bc98:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
2400bc9a:	68fb      	ldr	r3, [r7, #12]
2400bc9c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
2400bc9e:	68fb      	ldr	r3, [r7, #12]
2400bca0:	681b      	ldr	r3, [r3, #0]
2400bca2:	3324      	adds	r3, #36	@ 0x24
2400bca4:	4619      	mov	r1, r3
2400bca6:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
2400bca8:	68fb      	ldr	r3, [r7, #12]
2400bcaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
2400bcac:	f7f8 fe46 	bl	2400493c <HAL_DMA_Start_IT>
2400bcb0:	4603      	mov	r3, r0
2400bcb2:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
2400bcb4:	7cfb      	ldrb	r3, [r7, #19]
2400bcb6:	2b00      	cmp	r3, #0
2400bcb8:	d138      	bne.n	2400bd2c <HAL_I2C_Master_Receive_DMA+0x164>
2400bcba:	e013      	b.n	2400bce4 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
2400bcbc:	68fb      	ldr	r3, [r7, #12]
2400bcbe:	2220      	movs	r2, #32
2400bcc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2400bcc4:	68fb      	ldr	r3, [r7, #12]
2400bcc6:	2200      	movs	r2, #0
2400bcc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2400bccc:	68fb      	ldr	r3, [r7, #12]
2400bcce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2400bcd0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
2400bcd4:	68fb      	ldr	r3, [r7, #12]
2400bcd6:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
2400bcd8:	68fb      	ldr	r3, [r7, #12]
2400bcda:	2200      	movs	r2, #0
2400bcdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
2400bce0:	2301      	movs	r3, #1
2400bce2:	e050      	b.n	2400bd86 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
2400bce4:	68fb      	ldr	r3, [r7, #12]
2400bce6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400bce8:	b2da      	uxtb	r2, r3
2400bcea:	8979      	ldrh	r1, [r7, #10]
2400bcec:	4b2c      	ldr	r3, [pc, #176]	@ (2400bda0 <HAL_I2C_Master_Receive_DMA+0x1d8>)
2400bcee:	9300      	str	r3, [sp, #0]
2400bcf0:	697b      	ldr	r3, [r7, #20]
2400bcf2:	68f8      	ldr	r0, [r7, #12]
2400bcf4:	f004 fbd0 	bl	24010498 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
2400bcf8:	68fb      	ldr	r3, [r7, #12]
2400bcfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400bcfc:	b29a      	uxth	r2, r3
2400bcfe:	68fb      	ldr	r3, [r7, #12]
2400bd00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400bd02:	1ad3      	subs	r3, r2, r3
2400bd04:	b29a      	uxth	r2, r3
2400bd06:	68fb      	ldr	r3, [r7, #12]
2400bd08:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400bd0a:	68fb      	ldr	r3, [r7, #12]
2400bd0c:	2200      	movs	r2, #0
2400bd0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
2400bd12:	2110      	movs	r1, #16
2400bd14:	68f8      	ldr	r0, [r7, #12]
2400bd16:	f004 fbf1 	bl	240104fc <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
2400bd1a:	68fb      	ldr	r3, [r7, #12]
2400bd1c:	681b      	ldr	r3, [r3, #0]
2400bd1e:	681a      	ldr	r2, [r3, #0]
2400bd20:	68fb      	ldr	r3, [r7, #12]
2400bd22:	681b      	ldr	r3, [r3, #0]
2400bd24:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
2400bd28:	601a      	str	r2, [r3, #0]
2400bd2a:	e029      	b.n	2400bd80 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
2400bd2c:	68fb      	ldr	r3, [r7, #12]
2400bd2e:	2220      	movs	r2, #32
2400bd30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2400bd34:	68fb      	ldr	r3, [r7, #12]
2400bd36:	2200      	movs	r2, #0
2400bd38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2400bd3c:	68fb      	ldr	r3, [r7, #12]
2400bd3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2400bd40:	f043 0210 	orr.w	r2, r3, #16
2400bd44:	68fb      	ldr	r3, [r7, #12]
2400bd46:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400bd48:	68fb      	ldr	r3, [r7, #12]
2400bd4a:	2200      	movs	r2, #0
2400bd4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
2400bd50:	2301      	movs	r3, #1
2400bd52:	e018      	b.n	2400bd86 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
2400bd54:	68fb      	ldr	r3, [r7, #12]
2400bd56:	4a13      	ldr	r2, [pc, #76]	@ (2400bda4 <HAL_I2C_Master_Receive_DMA+0x1dc>)
2400bd58:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2400bd5a:	68fb      	ldr	r3, [r7, #12]
2400bd5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400bd5e:	b2da      	uxtb	r2, r3
2400bd60:	8979      	ldrh	r1, [r7, #10]
2400bd62:	4b0f      	ldr	r3, [pc, #60]	@ (2400bda0 <HAL_I2C_Master_Receive_DMA+0x1d8>)
2400bd64:	9300      	str	r3, [sp, #0]
2400bd66:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
2400bd6a:	68f8      	ldr	r0, [r7, #12]
2400bd6c:	f004 fb94 	bl	24010498 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400bd70:	68fb      	ldr	r3, [r7, #12]
2400bd72:	2200      	movs	r2, #0
2400bd74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
2400bd78:	2102      	movs	r1, #2
2400bd7a:	68f8      	ldr	r0, [r7, #12]
2400bd7c:	f004 fbbe 	bl	240104fc <I2C_Enable_IRQ>
    }

    return HAL_OK;
2400bd80:	2300      	movs	r3, #0
2400bd82:	e000      	b.n	2400bd86 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
2400bd84:	2302      	movs	r3, #2
  }
}
2400bd86:	4618      	mov	r0, r3
2400bd88:	3718      	adds	r7, #24
2400bd8a:	46bd      	mov	sp, r7
2400bd8c:	bd80      	pop	{r7, pc}
2400bd8e:	bf00      	nop
2400bd90:	ffff0000 	.word	0xffff0000
2400bd94:	2400e5bf 	.word	0x2400e5bf
2400bd98:	2400fb4d 	.word	0x2400fb4d
2400bd9c:	2400fd49 	.word	0x2400fd49
2400bda0:	80002400 	.word	0x80002400
2400bda4:	2400df33 	.word	0x2400df33

2400bda8 <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
2400bda8:	b580      	push	{r7, lr}
2400bdaa:	b086      	sub	sp, #24
2400bdac:	af00      	add	r7, sp, #0
2400bdae:	60f8      	str	r0, [r7, #12]
2400bdb0:	60b9      	str	r1, [r7, #8]
2400bdb2:	4613      	mov	r3, r2
2400bdb4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
2400bdb6:	68fb      	ldr	r3, [r7, #12]
2400bdb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400bdbc:	b2db      	uxtb	r3, r3
2400bdbe:	2b20      	cmp	r3, #32
2400bdc0:	f040 80d1 	bne.w	2400bf66 <HAL_I2C_Slave_Transmit_DMA+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
2400bdc4:	68bb      	ldr	r3, [r7, #8]
2400bdc6:	2b00      	cmp	r3, #0
2400bdc8:	d002      	beq.n	2400bdd0 <HAL_I2C_Slave_Transmit_DMA+0x28>
2400bdca:	88fb      	ldrh	r3, [r7, #6]
2400bdcc:	2b00      	cmp	r3, #0
2400bdce:	d105      	bne.n	2400bddc <HAL_I2C_Slave_Transmit_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400bdd0:	68fb      	ldr	r3, [r7, #12]
2400bdd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
2400bdd6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
2400bdd8:	2301      	movs	r3, #1
2400bdda:	e0c5      	b.n	2400bf68 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400bddc:	68fb      	ldr	r3, [r7, #12]
2400bdde:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2400bde2:	2b01      	cmp	r3, #1
2400bde4:	d101      	bne.n	2400bdea <HAL_I2C_Slave_Transmit_DMA+0x42>
2400bde6:	2302      	movs	r3, #2
2400bde8:	e0be      	b.n	2400bf68 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
2400bdea:	68fb      	ldr	r3, [r7, #12]
2400bdec:	2201      	movs	r2, #1
2400bdee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
2400bdf2:	68fb      	ldr	r3, [r7, #12]
2400bdf4:	2221      	movs	r2, #33	@ 0x21
2400bdf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
2400bdfa:	68fb      	ldr	r3, [r7, #12]
2400bdfc:	2220      	movs	r2, #32
2400bdfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400be02:	68fb      	ldr	r3, [r7, #12]
2400be04:	2200      	movs	r2, #0
2400be06:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400be08:	68fb      	ldr	r3, [r7, #12]
2400be0a:	68ba      	ldr	r2, [r7, #8]
2400be0c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
2400be0e:	68fb      	ldr	r3, [r7, #12]
2400be10:	88fa      	ldrh	r2, [r7, #6]
2400be12:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
2400be14:	68fb      	ldr	r3, [r7, #12]
2400be16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400be18:	b29a      	uxth	r2, r3
2400be1a:	68fb      	ldr	r3, [r7, #12]
2400be1c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400be1e:	68fb      	ldr	r3, [r7, #12]
2400be20:	4a53      	ldr	r2, [pc, #332]	@ (2400bf70 <HAL_I2C_Slave_Transmit_DMA+0x1c8>)
2400be22:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
2400be24:	68fb      	ldr	r3, [r7, #12]
2400be26:	4a53      	ldr	r2, [pc, #332]	@ (2400bf74 <HAL_I2C_Slave_Transmit_DMA+0x1cc>)
2400be28:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
2400be2a:	68fb      	ldr	r3, [r7, #12]
2400be2c:	6a1b      	ldr	r3, [r3, #32]
2400be2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
2400be32:	d117      	bne.n	2400be64 <HAL_I2C_Slave_Transmit_DMA+0xbc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2400be34:	68fb      	ldr	r3, [r7, #12]
2400be36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2400be38:	781a      	ldrb	r2, [r3, #0]
2400be3a:	68fb      	ldr	r3, [r7, #12]
2400be3c:	681b      	ldr	r3, [r3, #0]
2400be3e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2400be40:	68fb      	ldr	r3, [r7, #12]
2400be42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2400be44:	1c5a      	adds	r2, r3, #1
2400be46:	68fb      	ldr	r3, [r7, #12]
2400be48:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
2400be4a:	68fb      	ldr	r3, [r7, #12]
2400be4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400be4e:	b29b      	uxth	r3, r3
2400be50:	3b01      	subs	r3, #1
2400be52:	b29a      	uxth	r2, r3
2400be54:	68fb      	ldr	r3, [r7, #12]
2400be56:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
2400be58:	68fb      	ldr	r3, [r7, #12]
2400be5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400be5c:	3b01      	subs	r3, #1
2400be5e:	b29a      	uxth	r2, r3
2400be60:	68fb      	ldr	r3, [r7, #12]
2400be62:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferCount != 0U)
2400be64:	68fb      	ldr	r3, [r7, #12]
2400be66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400be68:	b29b      	uxth	r3, r3
2400be6a:	2b00      	cmp	r3, #0
2400be6c:	d068      	beq.n	2400bf40 <HAL_I2C_Slave_Transmit_DMA+0x198>
    {
      if (hi2c->hdmatx != NULL)
2400be6e:	68fb      	ldr	r3, [r7, #12]
2400be70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400be72:	2b00      	cmp	r3, #0
2400be74:	d022      	beq.n	2400bebc <HAL_I2C_Slave_Transmit_DMA+0x114>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
2400be76:	68fb      	ldr	r3, [r7, #12]
2400be78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400be7a:	4a3f      	ldr	r2, [pc, #252]	@ (2400bf78 <HAL_I2C_Slave_Transmit_DMA+0x1d0>)
2400be7c:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
2400be7e:	68fb      	ldr	r3, [r7, #12]
2400be80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400be82:	4a3e      	ldr	r2, [pc, #248]	@ (2400bf7c <HAL_I2C_Slave_Transmit_DMA+0x1d4>)
2400be84:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
2400be86:	68fb      	ldr	r3, [r7, #12]
2400be88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400be8a:	2200      	movs	r2, #0
2400be8c:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
2400be8e:	68fb      	ldr	r3, [r7, #12]
2400be90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400be92:	2200      	movs	r2, #0
2400be94:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
2400be96:	68fb      	ldr	r3, [r7, #12]
2400be98:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                         (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
2400be9a:	68fb      	ldr	r3, [r7, #12]
2400be9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
2400be9e:	4619      	mov	r1, r3
                                         (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
2400bea0:	68fb      	ldr	r3, [r7, #12]
2400bea2:	681b      	ldr	r3, [r3, #0]
2400bea4:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
2400bea6:	461a      	mov	r2, r3
                                         hi2c->XferSize);
2400bea8:	68fb      	ldr	r3, [r7, #12]
2400beaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
2400beac:	f7f8 fd46 	bl	2400493c <HAL_DMA_Start_IT>
2400beb0:	4603      	mov	r3, r0
2400beb2:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
2400beb4:	7dfb      	ldrb	r3, [r7, #23]
2400beb6:	2b00      	cmp	r3, #0
2400beb8:	d12e      	bne.n	2400bf18 <HAL_I2C_Slave_Transmit_DMA+0x170>
2400beba:	e013      	b.n	2400bee4 <HAL_I2C_Slave_Transmit_DMA+0x13c>
        hi2c->State     = HAL_I2C_STATE_LISTEN;
2400bebc:	68fb      	ldr	r3, [r7, #12]
2400bebe:	2228      	movs	r2, #40	@ 0x28
2400bec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2400bec4:	68fb      	ldr	r3, [r7, #12]
2400bec6:	2200      	movs	r2, #0
2400bec8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2400becc:	68fb      	ldr	r3, [r7, #12]
2400bece:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2400bed0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
2400bed4:	68fb      	ldr	r3, [r7, #12]
2400bed6:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
2400bed8:	68fb      	ldr	r3, [r7, #12]
2400beda:	2200      	movs	r2, #0
2400bedc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
2400bee0:	2301      	movs	r3, #1
2400bee2:	e041      	b.n	2400bf68 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
      {
        /* Enable Address Acknowledge */
        hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2400bee4:	68fb      	ldr	r3, [r7, #12]
2400bee6:	681b      	ldr	r3, [r3, #0]
2400bee8:	685a      	ldr	r2, [r3, #4]
2400beea:	68fb      	ldr	r3, [r7, #12]
2400beec:	681b      	ldr	r3, [r3, #0]
2400beee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
2400bef2:	605a      	str	r2, [r3, #4]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400bef4:	68fb      	ldr	r3, [r7, #12]
2400bef6:	2200      	movs	r2, #0
2400bef8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR, STOP, NACK, ADDR interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
2400befc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
2400bf00:	68f8      	ldr	r0, [r7, #12]
2400bf02:	f004 fafb 	bl	240104fc <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
2400bf06:	68fb      	ldr	r3, [r7, #12]
2400bf08:	681b      	ldr	r3, [r3, #0]
2400bf0a:	681a      	ldr	r2, [r3, #0]
2400bf0c:	68fb      	ldr	r3, [r7, #12]
2400bf0e:	681b      	ldr	r3, [r3, #0]
2400bf10:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
2400bf14:	601a      	str	r2, [r3, #0]
2400bf16:	e024      	b.n	2400bf62 <HAL_I2C_Slave_Transmit_DMA+0x1ba>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_LISTEN;
2400bf18:	68fb      	ldr	r3, [r7, #12]
2400bf1a:	2228      	movs	r2, #40	@ 0x28
2400bf1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2400bf20:	68fb      	ldr	r3, [r7, #12]
2400bf22:	2200      	movs	r2, #0
2400bf24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2400bf28:	68fb      	ldr	r3, [r7, #12]
2400bf2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2400bf2c:	f043 0210 	orr.w	r2, r3, #16
2400bf30:	68fb      	ldr	r3, [r7, #12]
2400bf32:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400bf34:	68fb      	ldr	r3, [r7, #12]
2400bf36:	2200      	movs	r2, #0
2400bf38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
2400bf3c:	2301      	movs	r3, #1
2400bf3e:	e013      	b.n	2400bf68 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
      }
    }
    else
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2400bf40:	68fb      	ldr	r3, [r7, #12]
2400bf42:	681b      	ldr	r3, [r3, #0]
2400bf44:	685a      	ldr	r2, [r3, #4]
2400bf46:	68fb      	ldr	r3, [r7, #12]
2400bf48:	681b      	ldr	r3, [r3, #0]
2400bf4a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
2400bf4e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400bf50:	68fb      	ldr	r3, [r7, #12]
2400bf52:	2200      	movs	r2, #0
2400bf54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
2400bf58:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
2400bf5c:	68f8      	ldr	r0, [r7, #12]
2400bf5e:	f004 facd 	bl	240104fc <I2C_Enable_IRQ>
    }

    return HAL_OK;
2400bf62:	2300      	movs	r3, #0
2400bf64:	e000      	b.n	2400bf68 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
  }
  else
  {
    return HAL_BUSY;
2400bf66:	2302      	movs	r3, #2
  }
}
2400bf68:	4618      	mov	r0, r3
2400bf6a:	3718      	adds	r7, #24
2400bf6c:	46bd      	mov	sp, r7
2400bf6e:	bd80      	pop	{r7, pc}
2400bf70:	ffff0000 	.word	0xffff0000
2400bf74:	2400e9e1 	.word	0x2400e9e1
2400bf78:	2400fb0d 	.word	0x2400fb0d
2400bf7c:	2400fd49 	.word	0x2400fd49

2400bf80 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
2400bf80:	b580      	push	{r7, lr}
2400bf82:	b086      	sub	sp, #24
2400bf84:	af00      	add	r7, sp, #0
2400bf86:	60f8      	str	r0, [r7, #12]
2400bf88:	60b9      	str	r1, [r7, #8]
2400bf8a:	4613      	mov	r3, r2
2400bf8c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
2400bf8e:	68fb      	ldr	r3, [r7, #12]
2400bf90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400bf94:	b2db      	uxtb	r3, r3
2400bf96:	2b20      	cmp	r3, #32
2400bf98:	f040 809b 	bne.w	2400c0d2 <HAL_I2C_Slave_Receive_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
2400bf9c:	68bb      	ldr	r3, [r7, #8]
2400bf9e:	2b00      	cmp	r3, #0
2400bfa0:	d002      	beq.n	2400bfa8 <HAL_I2C_Slave_Receive_DMA+0x28>
2400bfa2:	88fb      	ldrh	r3, [r7, #6]
2400bfa4:	2b00      	cmp	r3, #0
2400bfa6:	d105      	bne.n	2400bfb4 <HAL_I2C_Slave_Receive_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400bfa8:	68fb      	ldr	r3, [r7, #12]
2400bfaa:	f44f 7200 	mov.w	r2, #512	@ 0x200
2400bfae:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
2400bfb0:	2301      	movs	r3, #1
2400bfb2:	e08f      	b.n	2400c0d4 <HAL_I2C_Slave_Receive_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400bfb4:	68fb      	ldr	r3, [r7, #12]
2400bfb6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2400bfba:	2b01      	cmp	r3, #1
2400bfbc:	d101      	bne.n	2400bfc2 <HAL_I2C_Slave_Receive_DMA+0x42>
2400bfbe:	2302      	movs	r3, #2
2400bfc0:	e088      	b.n	2400c0d4 <HAL_I2C_Slave_Receive_DMA+0x154>
2400bfc2:	68fb      	ldr	r3, [r7, #12]
2400bfc4:	2201      	movs	r2, #1
2400bfc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
2400bfca:	68fb      	ldr	r3, [r7, #12]
2400bfcc:	2222      	movs	r2, #34	@ 0x22
2400bfce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
2400bfd2:	68fb      	ldr	r3, [r7, #12]
2400bfd4:	2220      	movs	r2, #32
2400bfd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400bfda:	68fb      	ldr	r3, [r7, #12]
2400bfdc:	2200      	movs	r2, #0
2400bfde:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400bfe0:	68fb      	ldr	r3, [r7, #12]
2400bfe2:	68ba      	ldr	r2, [r7, #8]
2400bfe4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
2400bfe6:	68fb      	ldr	r3, [r7, #12]
2400bfe8:	88fa      	ldrh	r2, [r7, #6]
2400bfea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
2400bfec:	68fb      	ldr	r3, [r7, #12]
2400bfee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400bff0:	b29a      	uxth	r2, r3
2400bff2:	68fb      	ldr	r3, [r7, #12]
2400bff4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400bff6:	68fb      	ldr	r3, [r7, #12]
2400bff8:	4a38      	ldr	r2, [pc, #224]	@ (2400c0dc <HAL_I2C_Slave_Receive_DMA+0x15c>)
2400bffa:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
2400bffc:	68fb      	ldr	r3, [r7, #12]
2400bffe:	4a38      	ldr	r2, [pc, #224]	@ (2400c0e0 <HAL_I2C_Slave_Receive_DMA+0x160>)
2400c000:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->hdmarx != NULL)
2400c002:	68fb      	ldr	r3, [r7, #12]
2400c004:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400c006:	2b00      	cmp	r3, #0
2400c008:	d020      	beq.n	2400c04c <HAL_I2C_Slave_Receive_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
2400c00a:	68fb      	ldr	r3, [r7, #12]
2400c00c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400c00e:	4a35      	ldr	r2, [pc, #212]	@ (2400c0e4 <HAL_I2C_Slave_Receive_DMA+0x164>)
2400c010:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
2400c012:	68fb      	ldr	r3, [r7, #12]
2400c014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400c016:	4a34      	ldr	r2, [pc, #208]	@ (2400c0e8 <HAL_I2C_Slave_Receive_DMA+0x168>)
2400c018:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
2400c01a:	68fb      	ldr	r3, [r7, #12]
2400c01c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400c01e:	2200      	movs	r2, #0
2400c020:	641a      	str	r2, [r3, #64]	@ 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
2400c022:	68fb      	ldr	r3, [r7, #12]
2400c024:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400c026:	2200      	movs	r2, #0
2400c028:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
2400c02a:	68fb      	ldr	r3, [r7, #12]
2400c02c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
2400c02e:	68fb      	ldr	r3, [r7, #12]
2400c030:	681b      	ldr	r3, [r3, #0]
2400c032:	3324      	adds	r3, #36	@ 0x24
2400c034:	4619      	mov	r1, r3
2400c036:	68ba      	ldr	r2, [r7, #8]
                                       hi2c->XferSize);
2400c038:	68fb      	ldr	r3, [r7, #12]
2400c03a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
2400c03c:	f7f8 fc7e 	bl	2400493c <HAL_DMA_Start_IT>
2400c040:	4603      	mov	r3, r0
2400c042:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
2400c044:	7dfb      	ldrb	r3, [r7, #23]
2400c046:	2b00      	cmp	r3, #0
2400c048:	d12f      	bne.n	2400c0aa <HAL_I2C_Slave_Receive_DMA+0x12a>
2400c04a:	e013      	b.n	2400c074 <HAL_I2C_Slave_Receive_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
2400c04c:	68fb      	ldr	r3, [r7, #12]
2400c04e:	2228      	movs	r2, #40	@ 0x28
2400c050:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400c054:	68fb      	ldr	r3, [r7, #12]
2400c056:	2200      	movs	r2, #0
2400c058:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2400c05c:	68fb      	ldr	r3, [r7, #12]
2400c05e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2400c060:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
2400c064:	68fb      	ldr	r3, [r7, #12]
2400c066:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
2400c068:	68fb      	ldr	r3, [r7, #12]
2400c06a:	2200      	movs	r2, #0
2400c06c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
2400c070:	2301      	movs	r3, #1
2400c072:	e02f      	b.n	2400c0d4 <HAL_I2C_Slave_Receive_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2400c074:	68fb      	ldr	r3, [r7, #12]
2400c076:	681b      	ldr	r3, [r3, #0]
2400c078:	685a      	ldr	r2, [r3, #4]
2400c07a:	68fb      	ldr	r3, [r7, #12]
2400c07c:	681b      	ldr	r3, [r3, #0]
2400c07e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
2400c082:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400c084:	68fb      	ldr	r3, [r7, #12]
2400c086:	2200      	movs	r2, #0
2400c088:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
2400c08c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
2400c090:	68f8      	ldr	r0, [r7, #12]
2400c092:	f004 fa33 	bl	240104fc <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
2400c096:	68fb      	ldr	r3, [r7, #12]
2400c098:	681b      	ldr	r3, [r3, #0]
2400c09a:	681a      	ldr	r2, [r3, #0]
2400c09c:	68fb      	ldr	r3, [r7, #12]
2400c09e:	681b      	ldr	r3, [r3, #0]
2400c0a0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
2400c0a4:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
2400c0a6:	2300      	movs	r3, #0
2400c0a8:	e014      	b.n	2400c0d4 <HAL_I2C_Slave_Receive_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
2400c0aa:	68fb      	ldr	r3, [r7, #12]
2400c0ac:	2228      	movs	r2, #40	@ 0x28
2400c0ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400c0b2:	68fb      	ldr	r3, [r7, #12]
2400c0b4:	2200      	movs	r2, #0
2400c0b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2400c0ba:	68fb      	ldr	r3, [r7, #12]
2400c0bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2400c0be:	f043 0210 	orr.w	r2, r3, #16
2400c0c2:	68fb      	ldr	r3, [r7, #12]
2400c0c4:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
2400c0c6:	68fb      	ldr	r3, [r7, #12]
2400c0c8:	2200      	movs	r2, #0
2400c0ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
2400c0ce:	2301      	movs	r3, #1
2400c0d0:	e000      	b.n	2400c0d4 <HAL_I2C_Slave_Receive_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
2400c0d2:	2302      	movs	r3, #2
  }
}
2400c0d4:	4618      	mov	r0, r3
2400c0d6:	3718      	adds	r7, #24
2400c0d8:	46bd      	mov	sp, r7
2400c0da:	bd80      	pop	{r7, pc}
2400c0dc:	ffff0000 	.word	0xffff0000
2400c0e0:	2400e9e1 	.word	0x2400e9e1
2400c0e4:	2400fbe5 	.word	0x2400fbe5
2400c0e8:	2400fd49 	.word	0x2400fd49

2400c0ec <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
2400c0ec:	b580      	push	{r7, lr}
2400c0ee:	b088      	sub	sp, #32
2400c0f0:	af02      	add	r7, sp, #8
2400c0f2:	60f8      	str	r0, [r7, #12]
2400c0f4:	4608      	mov	r0, r1
2400c0f6:	4611      	mov	r1, r2
2400c0f8:	461a      	mov	r2, r3
2400c0fa:	4603      	mov	r3, r0
2400c0fc:	817b      	strh	r3, [r7, #10]
2400c0fe:	460b      	mov	r3, r1
2400c100:	813b      	strh	r3, [r7, #8]
2400c102:	4613      	mov	r3, r2
2400c104:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400c106:	68fb      	ldr	r3, [r7, #12]
2400c108:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400c10c:	b2db      	uxtb	r3, r3
2400c10e:	2b20      	cmp	r3, #32
2400c110:	f040 80f9 	bne.w	2400c306 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
2400c114:	6a3b      	ldr	r3, [r7, #32]
2400c116:	2b00      	cmp	r3, #0
2400c118:	d002      	beq.n	2400c120 <HAL_I2C_Mem_Write+0x34>
2400c11a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
2400c11c:	2b00      	cmp	r3, #0
2400c11e:	d105      	bne.n	2400c12c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400c120:	68fb      	ldr	r3, [r7, #12]
2400c122:	f44f 7200 	mov.w	r2, #512	@ 0x200
2400c126:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
2400c128:	2301      	movs	r3, #1
2400c12a:	e0ed      	b.n	2400c308 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400c12c:	68fb      	ldr	r3, [r7, #12]
2400c12e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2400c132:	2b01      	cmp	r3, #1
2400c134:	d101      	bne.n	2400c13a <HAL_I2C_Mem_Write+0x4e>
2400c136:	2302      	movs	r3, #2
2400c138:	e0e6      	b.n	2400c308 <HAL_I2C_Mem_Write+0x21c>
2400c13a:	68fb      	ldr	r3, [r7, #12]
2400c13c:	2201      	movs	r2, #1
2400c13e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
2400c142:	f7f6 fdd5 	bl	24002cf0 <HAL_GetTick>
2400c146:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
2400c148:	697b      	ldr	r3, [r7, #20]
2400c14a:	9300      	str	r3, [sp, #0]
2400c14c:	2319      	movs	r3, #25
2400c14e:	2201      	movs	r2, #1
2400c150:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
2400c154:	68f8      	ldr	r0, [r7, #12]
2400c156:	f003 ff4f 	bl	2400fff8 <I2C_WaitOnFlagUntilTimeout>
2400c15a:	4603      	mov	r3, r0
2400c15c:	2b00      	cmp	r3, #0
2400c15e:	d001      	beq.n	2400c164 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
2400c160:	2301      	movs	r3, #1
2400c162:	e0d1      	b.n	2400c308 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
2400c164:	68fb      	ldr	r3, [r7, #12]
2400c166:	2221      	movs	r2, #33	@ 0x21
2400c168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
2400c16c:	68fb      	ldr	r3, [r7, #12]
2400c16e:	2240      	movs	r2, #64	@ 0x40
2400c170:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400c174:	68fb      	ldr	r3, [r7, #12]
2400c176:	2200      	movs	r2, #0
2400c178:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
2400c17a:	68fb      	ldr	r3, [r7, #12]
2400c17c:	6a3a      	ldr	r2, [r7, #32]
2400c17e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
2400c180:	68fb      	ldr	r3, [r7, #12]
2400c182:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
2400c184:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
2400c186:	68fb      	ldr	r3, [r7, #12]
2400c188:	2200      	movs	r2, #0
2400c18a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
2400c18c:	88f8      	ldrh	r0, [r7, #6]
2400c18e:	893a      	ldrh	r2, [r7, #8]
2400c190:	8979      	ldrh	r1, [r7, #10]
2400c192:	697b      	ldr	r3, [r7, #20]
2400c194:	9301      	str	r3, [sp, #4]
2400c196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2400c198:	9300      	str	r3, [sp, #0]
2400c19a:	4603      	mov	r3, r0
2400c19c:	68f8      	ldr	r0, [r7, #12]
2400c19e:	f002 fdf9 	bl	2400ed94 <I2C_RequestMemoryWrite>
2400c1a2:	4603      	mov	r3, r0
2400c1a4:	2b00      	cmp	r3, #0
2400c1a6:	d005      	beq.n	2400c1b4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400c1a8:	68fb      	ldr	r3, [r7, #12]
2400c1aa:	2200      	movs	r2, #0
2400c1ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
2400c1b0:	2301      	movs	r3, #1
2400c1b2:	e0a9      	b.n	2400c308 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400c1b4:	68fb      	ldr	r3, [r7, #12]
2400c1b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400c1b8:	b29b      	uxth	r3, r3
2400c1ba:	2bff      	cmp	r3, #255	@ 0xff
2400c1bc:	d90e      	bls.n	2400c1dc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400c1be:	68fb      	ldr	r3, [r7, #12]
2400c1c0:	22ff      	movs	r2, #255	@ 0xff
2400c1c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
2400c1c4:	68fb      	ldr	r3, [r7, #12]
2400c1c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400c1c8:	b2da      	uxtb	r2, r3
2400c1ca:	8979      	ldrh	r1, [r7, #10]
2400c1cc:	2300      	movs	r3, #0
2400c1ce:	9300      	str	r3, [sp, #0]
2400c1d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
2400c1d4:	68f8      	ldr	r0, [r7, #12]
2400c1d6:	f004 f95f 	bl	24010498 <I2C_TransferConfig>
2400c1da:	e00f      	b.n	2400c1fc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400c1dc:	68fb      	ldr	r3, [r7, #12]
2400c1de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400c1e0:	b29a      	uxth	r2, r3
2400c1e2:	68fb      	ldr	r3, [r7, #12]
2400c1e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
2400c1e6:	68fb      	ldr	r3, [r7, #12]
2400c1e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400c1ea:	b2da      	uxtb	r2, r3
2400c1ec:	8979      	ldrh	r1, [r7, #10]
2400c1ee:	2300      	movs	r3, #0
2400c1f0:	9300      	str	r3, [sp, #0]
2400c1f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
2400c1f6:	68f8      	ldr	r0, [r7, #12]
2400c1f8:	f004 f94e 	bl	24010498 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400c1fc:	697a      	ldr	r2, [r7, #20]
2400c1fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
2400c200:	68f8      	ldr	r0, [r7, #12]
2400c202:	f003 ff52 	bl	240100aa <I2C_WaitOnTXISFlagUntilTimeout>
2400c206:	4603      	mov	r3, r0
2400c208:	2b00      	cmp	r3, #0
2400c20a:	d001      	beq.n	2400c210 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
2400c20c:	2301      	movs	r3, #1
2400c20e:	e07b      	b.n	2400c308 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2400c210:	68fb      	ldr	r3, [r7, #12]
2400c212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2400c214:	781a      	ldrb	r2, [r3, #0]
2400c216:	68fb      	ldr	r3, [r7, #12]
2400c218:	681b      	ldr	r3, [r3, #0]
2400c21a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2400c21c:	68fb      	ldr	r3, [r7, #12]
2400c21e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2400c220:	1c5a      	adds	r2, r3, #1
2400c222:	68fb      	ldr	r3, [r7, #12]
2400c224:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
2400c226:	68fb      	ldr	r3, [r7, #12]
2400c228:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400c22a:	b29b      	uxth	r3, r3
2400c22c:	3b01      	subs	r3, #1
2400c22e:	b29a      	uxth	r2, r3
2400c230:	68fb      	ldr	r3, [r7, #12]
2400c232:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
2400c234:	68fb      	ldr	r3, [r7, #12]
2400c236:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400c238:	3b01      	subs	r3, #1
2400c23a:	b29a      	uxth	r2, r3
2400c23c:	68fb      	ldr	r3, [r7, #12]
2400c23e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
2400c240:	68fb      	ldr	r3, [r7, #12]
2400c242:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400c244:	b29b      	uxth	r3, r3
2400c246:	2b00      	cmp	r3, #0
2400c248:	d034      	beq.n	2400c2b4 <HAL_I2C_Mem_Write+0x1c8>
2400c24a:	68fb      	ldr	r3, [r7, #12]
2400c24c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400c24e:	2b00      	cmp	r3, #0
2400c250:	d130      	bne.n	2400c2b4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
2400c252:	697b      	ldr	r3, [r7, #20]
2400c254:	9300      	str	r3, [sp, #0]
2400c256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2400c258:	2200      	movs	r2, #0
2400c25a:	2180      	movs	r1, #128	@ 0x80
2400c25c:	68f8      	ldr	r0, [r7, #12]
2400c25e:	f003 fecb 	bl	2400fff8 <I2C_WaitOnFlagUntilTimeout>
2400c262:	4603      	mov	r3, r0
2400c264:	2b00      	cmp	r3, #0
2400c266:	d001      	beq.n	2400c26c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
2400c268:	2301      	movs	r3, #1
2400c26a:	e04d      	b.n	2400c308 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400c26c:	68fb      	ldr	r3, [r7, #12]
2400c26e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400c270:	b29b      	uxth	r3, r3
2400c272:	2bff      	cmp	r3, #255	@ 0xff
2400c274:	d90e      	bls.n	2400c294 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
2400c276:	68fb      	ldr	r3, [r7, #12]
2400c278:	22ff      	movs	r2, #255	@ 0xff
2400c27a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
2400c27c:	68fb      	ldr	r3, [r7, #12]
2400c27e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400c280:	b2da      	uxtb	r2, r3
2400c282:	8979      	ldrh	r1, [r7, #10]
2400c284:	2300      	movs	r3, #0
2400c286:	9300      	str	r3, [sp, #0]
2400c288:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
2400c28c:	68f8      	ldr	r0, [r7, #12]
2400c28e:	f004 f903 	bl	24010498 <I2C_TransferConfig>
2400c292:	e00f      	b.n	2400c2b4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
2400c294:	68fb      	ldr	r3, [r7, #12]
2400c296:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400c298:	b29a      	uxth	r2, r3
2400c29a:	68fb      	ldr	r3, [r7, #12]
2400c29c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2400c29e:	68fb      	ldr	r3, [r7, #12]
2400c2a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400c2a2:	b2da      	uxtb	r2, r3
2400c2a4:	8979      	ldrh	r1, [r7, #10]
2400c2a6:	2300      	movs	r3, #0
2400c2a8:	9300      	str	r3, [sp, #0]
2400c2aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
2400c2ae:	68f8      	ldr	r0, [r7, #12]
2400c2b0:	f004 f8f2 	bl	24010498 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
2400c2b4:	68fb      	ldr	r3, [r7, #12]
2400c2b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400c2b8:	b29b      	uxth	r3, r3
2400c2ba:	2b00      	cmp	r3, #0
2400c2bc:	d19e      	bne.n	2400c1fc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400c2be:	697a      	ldr	r2, [r7, #20]
2400c2c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
2400c2c2:	68f8      	ldr	r0, [r7, #12]
2400c2c4:	f003 ff38 	bl	24010138 <I2C_WaitOnSTOPFlagUntilTimeout>
2400c2c8:	4603      	mov	r3, r0
2400c2ca:	2b00      	cmp	r3, #0
2400c2cc:	d001      	beq.n	2400c2d2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
2400c2ce:	2301      	movs	r3, #1
2400c2d0:	e01a      	b.n	2400c308 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400c2d2:	68fb      	ldr	r3, [r7, #12]
2400c2d4:	681b      	ldr	r3, [r3, #0]
2400c2d6:	2220      	movs	r2, #32
2400c2d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
2400c2da:	68fb      	ldr	r3, [r7, #12]
2400c2dc:	681b      	ldr	r3, [r3, #0]
2400c2de:	6859      	ldr	r1, [r3, #4]
2400c2e0:	68fb      	ldr	r3, [r7, #12]
2400c2e2:	681a      	ldr	r2, [r3, #0]
2400c2e4:	4b0a      	ldr	r3, [pc, #40]	@ (2400c310 <HAL_I2C_Mem_Write+0x224>)
2400c2e6:	400b      	ands	r3, r1
2400c2e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
2400c2ea:	68fb      	ldr	r3, [r7, #12]
2400c2ec:	2220      	movs	r2, #32
2400c2ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
2400c2f2:	68fb      	ldr	r3, [r7, #12]
2400c2f4:	2200      	movs	r2, #0
2400c2f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400c2fa:	68fb      	ldr	r3, [r7, #12]
2400c2fc:	2200      	movs	r2, #0
2400c2fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
2400c302:	2300      	movs	r3, #0
2400c304:	e000      	b.n	2400c308 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
2400c306:	2302      	movs	r3, #2
  }
}
2400c308:	4618      	mov	r0, r3
2400c30a:	3718      	adds	r7, #24
2400c30c:	46bd      	mov	sp, r7
2400c30e:	bd80      	pop	{r7, pc}
2400c310:	fe00e800 	.word	0xfe00e800

2400c314 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
2400c314:	b580      	push	{r7, lr}
2400c316:	b088      	sub	sp, #32
2400c318:	af02      	add	r7, sp, #8
2400c31a:	60f8      	str	r0, [r7, #12]
2400c31c:	4608      	mov	r0, r1
2400c31e:	4611      	mov	r1, r2
2400c320:	461a      	mov	r2, r3
2400c322:	4603      	mov	r3, r0
2400c324:	817b      	strh	r3, [r7, #10]
2400c326:	460b      	mov	r3, r1
2400c328:	813b      	strh	r3, [r7, #8]
2400c32a:	4613      	mov	r3, r2
2400c32c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400c32e:	68fb      	ldr	r3, [r7, #12]
2400c330:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400c334:	b2db      	uxtb	r3, r3
2400c336:	2b20      	cmp	r3, #32
2400c338:	f040 80fd 	bne.w	2400c536 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
2400c33c:	6a3b      	ldr	r3, [r7, #32]
2400c33e:	2b00      	cmp	r3, #0
2400c340:	d002      	beq.n	2400c348 <HAL_I2C_Mem_Read+0x34>
2400c342:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
2400c344:	2b00      	cmp	r3, #0
2400c346:	d105      	bne.n	2400c354 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400c348:	68fb      	ldr	r3, [r7, #12]
2400c34a:	f44f 7200 	mov.w	r2, #512	@ 0x200
2400c34e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
2400c350:	2301      	movs	r3, #1
2400c352:	e0f1      	b.n	2400c538 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400c354:	68fb      	ldr	r3, [r7, #12]
2400c356:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2400c35a:	2b01      	cmp	r3, #1
2400c35c:	d101      	bne.n	2400c362 <HAL_I2C_Mem_Read+0x4e>
2400c35e:	2302      	movs	r3, #2
2400c360:	e0ea      	b.n	2400c538 <HAL_I2C_Mem_Read+0x224>
2400c362:	68fb      	ldr	r3, [r7, #12]
2400c364:	2201      	movs	r2, #1
2400c366:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
2400c36a:	f7f6 fcc1 	bl	24002cf0 <HAL_GetTick>
2400c36e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
2400c370:	697b      	ldr	r3, [r7, #20]
2400c372:	9300      	str	r3, [sp, #0]
2400c374:	2319      	movs	r3, #25
2400c376:	2201      	movs	r2, #1
2400c378:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
2400c37c:	68f8      	ldr	r0, [r7, #12]
2400c37e:	f003 fe3b 	bl	2400fff8 <I2C_WaitOnFlagUntilTimeout>
2400c382:	4603      	mov	r3, r0
2400c384:	2b00      	cmp	r3, #0
2400c386:	d001      	beq.n	2400c38c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
2400c388:	2301      	movs	r3, #1
2400c38a:	e0d5      	b.n	2400c538 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
2400c38c:	68fb      	ldr	r3, [r7, #12]
2400c38e:	2222      	movs	r2, #34	@ 0x22
2400c390:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
2400c394:	68fb      	ldr	r3, [r7, #12]
2400c396:	2240      	movs	r2, #64	@ 0x40
2400c398:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400c39c:	68fb      	ldr	r3, [r7, #12]
2400c39e:	2200      	movs	r2, #0
2400c3a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
2400c3a2:	68fb      	ldr	r3, [r7, #12]
2400c3a4:	6a3a      	ldr	r2, [r7, #32]
2400c3a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
2400c3a8:	68fb      	ldr	r3, [r7, #12]
2400c3aa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
2400c3ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
2400c3ae:	68fb      	ldr	r3, [r7, #12]
2400c3b0:	2200      	movs	r2, #0
2400c3b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
2400c3b4:	88f8      	ldrh	r0, [r7, #6]
2400c3b6:	893a      	ldrh	r2, [r7, #8]
2400c3b8:	8979      	ldrh	r1, [r7, #10]
2400c3ba:	697b      	ldr	r3, [r7, #20]
2400c3bc:	9301      	str	r3, [sp, #4]
2400c3be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2400c3c0:	9300      	str	r3, [sp, #0]
2400c3c2:	4603      	mov	r3, r0
2400c3c4:	68f8      	ldr	r0, [r7, #12]
2400c3c6:	f002 fd39 	bl	2400ee3c <I2C_RequestMemoryRead>
2400c3ca:	4603      	mov	r3, r0
2400c3cc:	2b00      	cmp	r3, #0
2400c3ce:	d005      	beq.n	2400c3dc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400c3d0:	68fb      	ldr	r3, [r7, #12]
2400c3d2:	2200      	movs	r2, #0
2400c3d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
2400c3d8:	2301      	movs	r3, #1
2400c3da:	e0ad      	b.n	2400c538 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400c3dc:	68fb      	ldr	r3, [r7, #12]
2400c3de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400c3e0:	b29b      	uxth	r3, r3
2400c3e2:	2bff      	cmp	r3, #255	@ 0xff
2400c3e4:	d90e      	bls.n	2400c404 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400c3e6:	68fb      	ldr	r3, [r7, #12]
2400c3e8:	22ff      	movs	r2, #255	@ 0xff
2400c3ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
2400c3ec:	68fb      	ldr	r3, [r7, #12]
2400c3ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400c3f0:	b2da      	uxtb	r2, r3
2400c3f2:	8979      	ldrh	r1, [r7, #10]
2400c3f4:	4b52      	ldr	r3, [pc, #328]	@ (2400c540 <HAL_I2C_Mem_Read+0x22c>)
2400c3f6:	9300      	str	r3, [sp, #0]
2400c3f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
2400c3fc:	68f8      	ldr	r0, [r7, #12]
2400c3fe:	f004 f84b 	bl	24010498 <I2C_TransferConfig>
2400c402:	e00f      	b.n	2400c424 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400c404:	68fb      	ldr	r3, [r7, #12]
2400c406:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400c408:	b29a      	uxth	r2, r3
2400c40a:	68fb      	ldr	r3, [r7, #12]
2400c40c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2400c40e:	68fb      	ldr	r3, [r7, #12]
2400c410:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400c412:	b2da      	uxtb	r2, r3
2400c414:	8979      	ldrh	r1, [r7, #10]
2400c416:	4b4a      	ldr	r3, [pc, #296]	@ (2400c540 <HAL_I2C_Mem_Read+0x22c>)
2400c418:	9300      	str	r3, [sp, #0]
2400c41a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
2400c41e:	68f8      	ldr	r0, [r7, #12]
2400c420:	f004 f83a 	bl	24010498 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
2400c424:	697b      	ldr	r3, [r7, #20]
2400c426:	9300      	str	r3, [sp, #0]
2400c428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2400c42a:	2200      	movs	r2, #0
2400c42c:	2104      	movs	r1, #4
2400c42e:	68f8      	ldr	r0, [r7, #12]
2400c430:	f003 fde2 	bl	2400fff8 <I2C_WaitOnFlagUntilTimeout>
2400c434:	4603      	mov	r3, r0
2400c436:	2b00      	cmp	r3, #0
2400c438:	d001      	beq.n	2400c43e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
2400c43a:	2301      	movs	r3, #1
2400c43c:	e07c      	b.n	2400c538 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2400c43e:	68fb      	ldr	r3, [r7, #12]
2400c440:	681b      	ldr	r3, [r3, #0]
2400c442:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
2400c444:	68fb      	ldr	r3, [r7, #12]
2400c446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2400c448:	b2d2      	uxtb	r2, r2
2400c44a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2400c44c:	68fb      	ldr	r3, [r7, #12]
2400c44e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2400c450:	1c5a      	adds	r2, r3, #1
2400c452:	68fb      	ldr	r3, [r7, #12]
2400c454:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
2400c456:	68fb      	ldr	r3, [r7, #12]
2400c458:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400c45a:	3b01      	subs	r3, #1
2400c45c:	b29a      	uxth	r2, r3
2400c45e:	68fb      	ldr	r3, [r7, #12]
2400c460:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
2400c462:	68fb      	ldr	r3, [r7, #12]
2400c464:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400c466:	b29b      	uxth	r3, r3
2400c468:	3b01      	subs	r3, #1
2400c46a:	b29a      	uxth	r2, r3
2400c46c:	68fb      	ldr	r3, [r7, #12]
2400c46e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
2400c470:	68fb      	ldr	r3, [r7, #12]
2400c472:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400c474:	b29b      	uxth	r3, r3
2400c476:	2b00      	cmp	r3, #0
2400c478:	d034      	beq.n	2400c4e4 <HAL_I2C_Mem_Read+0x1d0>
2400c47a:	68fb      	ldr	r3, [r7, #12]
2400c47c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400c47e:	2b00      	cmp	r3, #0
2400c480:	d130      	bne.n	2400c4e4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
2400c482:	697b      	ldr	r3, [r7, #20]
2400c484:	9300      	str	r3, [sp, #0]
2400c486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2400c488:	2200      	movs	r2, #0
2400c48a:	2180      	movs	r1, #128	@ 0x80
2400c48c:	68f8      	ldr	r0, [r7, #12]
2400c48e:	f003 fdb3 	bl	2400fff8 <I2C_WaitOnFlagUntilTimeout>
2400c492:	4603      	mov	r3, r0
2400c494:	2b00      	cmp	r3, #0
2400c496:	d001      	beq.n	2400c49c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
2400c498:	2301      	movs	r3, #1
2400c49a:	e04d      	b.n	2400c538 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400c49c:	68fb      	ldr	r3, [r7, #12]
2400c49e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400c4a0:	b29b      	uxth	r3, r3
2400c4a2:	2bff      	cmp	r3, #255	@ 0xff
2400c4a4:	d90e      	bls.n	2400c4c4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
2400c4a6:	68fb      	ldr	r3, [r7, #12]
2400c4a8:	22ff      	movs	r2, #255	@ 0xff
2400c4aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
2400c4ac:	68fb      	ldr	r3, [r7, #12]
2400c4ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400c4b0:	b2da      	uxtb	r2, r3
2400c4b2:	8979      	ldrh	r1, [r7, #10]
2400c4b4:	2300      	movs	r3, #0
2400c4b6:	9300      	str	r3, [sp, #0]
2400c4b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
2400c4bc:	68f8      	ldr	r0, [r7, #12]
2400c4be:	f003 ffeb 	bl	24010498 <I2C_TransferConfig>
2400c4c2:	e00f      	b.n	2400c4e4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
2400c4c4:	68fb      	ldr	r3, [r7, #12]
2400c4c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400c4c8:	b29a      	uxth	r2, r3
2400c4ca:	68fb      	ldr	r3, [r7, #12]
2400c4cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2400c4ce:	68fb      	ldr	r3, [r7, #12]
2400c4d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400c4d2:	b2da      	uxtb	r2, r3
2400c4d4:	8979      	ldrh	r1, [r7, #10]
2400c4d6:	2300      	movs	r3, #0
2400c4d8:	9300      	str	r3, [sp, #0]
2400c4da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
2400c4de:	68f8      	ldr	r0, [r7, #12]
2400c4e0:	f003 ffda 	bl	24010498 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
2400c4e4:	68fb      	ldr	r3, [r7, #12]
2400c4e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400c4e8:	b29b      	uxth	r3, r3
2400c4ea:	2b00      	cmp	r3, #0
2400c4ec:	d19a      	bne.n	2400c424 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400c4ee:	697a      	ldr	r2, [r7, #20]
2400c4f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
2400c4f2:	68f8      	ldr	r0, [r7, #12]
2400c4f4:	f003 fe20 	bl	24010138 <I2C_WaitOnSTOPFlagUntilTimeout>
2400c4f8:	4603      	mov	r3, r0
2400c4fa:	2b00      	cmp	r3, #0
2400c4fc:	d001      	beq.n	2400c502 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
2400c4fe:	2301      	movs	r3, #1
2400c500:	e01a      	b.n	2400c538 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400c502:	68fb      	ldr	r3, [r7, #12]
2400c504:	681b      	ldr	r3, [r3, #0]
2400c506:	2220      	movs	r2, #32
2400c508:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
2400c50a:	68fb      	ldr	r3, [r7, #12]
2400c50c:	681b      	ldr	r3, [r3, #0]
2400c50e:	6859      	ldr	r1, [r3, #4]
2400c510:	68fb      	ldr	r3, [r7, #12]
2400c512:	681a      	ldr	r2, [r3, #0]
2400c514:	4b0b      	ldr	r3, [pc, #44]	@ (2400c544 <HAL_I2C_Mem_Read+0x230>)
2400c516:	400b      	ands	r3, r1
2400c518:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
2400c51a:	68fb      	ldr	r3, [r7, #12]
2400c51c:	2220      	movs	r2, #32
2400c51e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
2400c522:	68fb      	ldr	r3, [r7, #12]
2400c524:	2200      	movs	r2, #0
2400c526:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400c52a:	68fb      	ldr	r3, [r7, #12]
2400c52c:	2200      	movs	r2, #0
2400c52e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
2400c532:	2300      	movs	r3, #0
2400c534:	e000      	b.n	2400c538 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
2400c536:	2302      	movs	r3, #2
  }
}
2400c538:	4618      	mov	r0, r3
2400c53a:	3718      	adds	r7, #24
2400c53c:	46bd      	mov	sp, r7
2400c53e:	bd80      	pop	{r7, pc}
2400c540:	80002400 	.word	0x80002400
2400c544:	fe00e800 	.word	0xfe00e800

2400c548 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
2400c548:	b580      	push	{r7, lr}
2400c54a:	b086      	sub	sp, #24
2400c54c:	af02      	add	r7, sp, #8
2400c54e:	60f8      	str	r0, [r7, #12]
2400c550:	4608      	mov	r0, r1
2400c552:	4611      	mov	r1, r2
2400c554:	461a      	mov	r2, r3
2400c556:	4603      	mov	r3, r0
2400c558:	817b      	strh	r3, [r7, #10]
2400c55a:	460b      	mov	r3, r1
2400c55c:	813b      	strh	r3, [r7, #8]
2400c55e:	4613      	mov	r3, r2
2400c560:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400c562:	68fb      	ldr	r3, [r7, #12]
2400c564:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400c568:	b2db      	uxtb	r3, r3
2400c56a:	2b20      	cmp	r3, #32
2400c56c:	d16a      	bne.n	2400c644 <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
2400c56e:	69bb      	ldr	r3, [r7, #24]
2400c570:	2b00      	cmp	r3, #0
2400c572:	d002      	beq.n	2400c57a <HAL_I2C_Mem_Write_IT+0x32>
2400c574:	8bbb      	ldrh	r3, [r7, #28]
2400c576:	2b00      	cmp	r3, #0
2400c578:	d105      	bne.n	2400c586 <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400c57a:	68fb      	ldr	r3, [r7, #12]
2400c57c:	f44f 7200 	mov.w	r2, #512	@ 0x200
2400c580:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
2400c582:	2301      	movs	r3, #1
2400c584:	e05f      	b.n	2400c646 <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2400c586:	68fb      	ldr	r3, [r7, #12]
2400c588:	681b      	ldr	r3, [r3, #0]
2400c58a:	699b      	ldr	r3, [r3, #24]
2400c58c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
2400c590:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
2400c594:	d101      	bne.n	2400c59a <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
2400c596:	2302      	movs	r3, #2
2400c598:	e055      	b.n	2400c646 <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400c59a:	68fb      	ldr	r3, [r7, #12]
2400c59c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2400c5a0:	2b01      	cmp	r3, #1
2400c5a2:	d101      	bne.n	2400c5a8 <HAL_I2C_Mem_Write_IT+0x60>
2400c5a4:	2302      	movs	r3, #2
2400c5a6:	e04e      	b.n	2400c646 <HAL_I2C_Mem_Write_IT+0xfe>
2400c5a8:	68fb      	ldr	r3, [r7, #12]
2400c5aa:	2201      	movs	r2, #1
2400c5ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
2400c5b0:	68fb      	ldr	r3, [r7, #12]
2400c5b2:	2221      	movs	r2, #33	@ 0x21
2400c5b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
2400c5b8:	68fb      	ldr	r3, [r7, #12]
2400c5ba:	2240      	movs	r2, #64	@ 0x40
2400c5bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400c5c0:	68fb      	ldr	r3, [r7, #12]
2400c5c2:	2200      	movs	r2, #0
2400c5c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
2400c5c6:	68fb      	ldr	r3, [r7, #12]
2400c5c8:	2200      	movs	r2, #0
2400c5ca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->pBuffPtr    = pData;
2400c5cc:	68fb      	ldr	r3, [r7, #12]
2400c5ce:	69ba      	ldr	r2, [r7, #24]
2400c5d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
2400c5d2:	68fb      	ldr	r3, [r7, #12]
2400c5d4:	8bba      	ldrh	r2, [r7, #28]
2400c5d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400c5d8:	68fb      	ldr	r3, [r7, #12]
2400c5da:	4a1d      	ldr	r2, [pc, #116]	@ (2400c650 <HAL_I2C_Mem_Write_IT+0x108>)
2400c5dc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
2400c5de:	68fb      	ldr	r3, [r7, #12]
2400c5e0:	4a1c      	ldr	r2, [pc, #112]	@ (2400c654 <HAL_I2C_Mem_Write_IT+0x10c>)
2400c5e2:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
2400c5e4:	897a      	ldrh	r2, [r7, #10]
2400c5e6:	68fb      	ldr	r3, [r7, #12]
2400c5e8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
2400c5ea:	88fb      	ldrh	r3, [r7, #6]
2400c5ec:	2b01      	cmp	r3, #1
2400c5ee:	d109      	bne.n	2400c604 <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
2400c5f0:	893b      	ldrh	r3, [r7, #8]
2400c5f2:	b2da      	uxtb	r2, r3
2400c5f4:	68fb      	ldr	r3, [r7, #12]
2400c5f6:	681b      	ldr	r3, [r3, #0]
2400c5f8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
2400c5fa:	68fb      	ldr	r3, [r7, #12]
2400c5fc:	f04f 32ff 	mov.w	r2, #4294967295
2400c600:	651a      	str	r2, [r3, #80]	@ 0x50
2400c602:	e00b      	b.n	2400c61c <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
2400c604:	893b      	ldrh	r3, [r7, #8]
2400c606:	0a1b      	lsrs	r3, r3, #8
2400c608:	b29b      	uxth	r3, r3
2400c60a:	b2da      	uxtb	r2, r3
2400c60c:	68fb      	ldr	r3, [r7, #12]
2400c60e:	681b      	ldr	r3, [r3, #0]
2400c610:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
2400c612:	893b      	ldrh	r3, [r7, #8]
2400c614:	b2db      	uxtb	r3, r3
2400c616:	461a      	mov	r2, r3
2400c618:	68fb      	ldr	r3, [r7, #12]
2400c61a:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
2400c61c:	88fb      	ldrh	r3, [r7, #6]
2400c61e:	b2da      	uxtb	r2, r3
2400c620:	8979      	ldrh	r1, [r7, #10]
2400c622:	4b0d      	ldr	r3, [pc, #52]	@ (2400c658 <HAL_I2C_Mem_Write_IT+0x110>)
2400c624:	9300      	str	r3, [sp, #0]
2400c626:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
2400c62a:	68f8      	ldr	r0, [r7, #12]
2400c62c:	f003 ff34 	bl	24010498 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400c630:	68fb      	ldr	r3, [r7, #12]
2400c632:	2200      	movs	r2, #0
2400c634:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
2400c638:	2101      	movs	r1, #1
2400c63a:	68f8      	ldr	r0, [r7, #12]
2400c63c:	f003 ff5e 	bl	240104fc <I2C_Enable_IRQ>

    return HAL_OK;
2400c640:	2300      	movs	r3, #0
2400c642:	e000      	b.n	2400c646 <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
2400c644:	2302      	movs	r3, #2
  }
}
2400c646:	4618      	mov	r0, r3
2400c648:	3710      	adds	r7, #16
2400c64a:	46bd      	mov	sp, r7
2400c64c:	bd80      	pop	{r7, pc}
2400c64e:	bf00      	nop
2400c650:	ffff0000 	.word	0xffff0000
2400c654:	2400e181 	.word	0x2400e181
2400c658:	80002000 	.word	0x80002000

2400c65c <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
2400c65c:	b580      	push	{r7, lr}
2400c65e:	b086      	sub	sp, #24
2400c660:	af02      	add	r7, sp, #8
2400c662:	60f8      	str	r0, [r7, #12]
2400c664:	4608      	mov	r0, r1
2400c666:	4611      	mov	r1, r2
2400c668:	461a      	mov	r2, r3
2400c66a:	4603      	mov	r3, r0
2400c66c:	817b      	strh	r3, [r7, #10]
2400c66e:	460b      	mov	r3, r1
2400c670:	813b      	strh	r3, [r7, #8]
2400c672:	4613      	mov	r3, r2
2400c674:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400c676:	68fb      	ldr	r3, [r7, #12]
2400c678:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400c67c:	b2db      	uxtb	r3, r3
2400c67e:	2b20      	cmp	r3, #32
2400c680:	d166      	bne.n	2400c750 <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
2400c682:	69bb      	ldr	r3, [r7, #24]
2400c684:	2b00      	cmp	r3, #0
2400c686:	d002      	beq.n	2400c68e <HAL_I2C_Mem_Read_IT+0x32>
2400c688:	8bbb      	ldrh	r3, [r7, #28]
2400c68a:	2b00      	cmp	r3, #0
2400c68c:	d105      	bne.n	2400c69a <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400c68e:	68fb      	ldr	r3, [r7, #12]
2400c690:	f44f 7200 	mov.w	r2, #512	@ 0x200
2400c694:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
2400c696:	2301      	movs	r3, #1
2400c698:	e05b      	b.n	2400c752 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2400c69a:	68fb      	ldr	r3, [r7, #12]
2400c69c:	681b      	ldr	r3, [r3, #0]
2400c69e:	699b      	ldr	r3, [r3, #24]
2400c6a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
2400c6a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
2400c6a8:	d101      	bne.n	2400c6ae <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
2400c6aa:	2302      	movs	r3, #2
2400c6ac:	e051      	b.n	2400c752 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400c6ae:	68fb      	ldr	r3, [r7, #12]
2400c6b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2400c6b4:	2b01      	cmp	r3, #1
2400c6b6:	d101      	bne.n	2400c6bc <HAL_I2C_Mem_Read_IT+0x60>
2400c6b8:	2302      	movs	r3, #2
2400c6ba:	e04a      	b.n	2400c752 <HAL_I2C_Mem_Read_IT+0xf6>
2400c6bc:	68fb      	ldr	r3, [r7, #12]
2400c6be:	2201      	movs	r2, #1
2400c6c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
2400c6c4:	68fb      	ldr	r3, [r7, #12]
2400c6c6:	2222      	movs	r2, #34	@ 0x22
2400c6c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
2400c6cc:	68fb      	ldr	r3, [r7, #12]
2400c6ce:	2240      	movs	r2, #64	@ 0x40
2400c6d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400c6d4:	68fb      	ldr	r3, [r7, #12]
2400c6d6:	2200      	movs	r2, #0
2400c6d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400c6da:	68fb      	ldr	r3, [r7, #12]
2400c6dc:	69ba      	ldr	r2, [r7, #24]
2400c6de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
2400c6e0:	68fb      	ldr	r3, [r7, #12]
2400c6e2:	8bba      	ldrh	r2, [r7, #28]
2400c6e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400c6e6:	68fb      	ldr	r3, [r7, #12]
2400c6e8:	4a1c      	ldr	r2, [pc, #112]	@ (2400c75c <HAL_I2C_Mem_Read_IT+0x100>)
2400c6ea:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
2400c6ec:	68fb      	ldr	r3, [r7, #12]
2400c6ee:	4a1c      	ldr	r2, [pc, #112]	@ (2400c760 <HAL_I2C_Mem_Read_IT+0x104>)
2400c6f0:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
2400c6f2:	897a      	ldrh	r2, [r7, #10]
2400c6f4:	68fb      	ldr	r3, [r7, #12]
2400c6f6:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
2400c6f8:	88fb      	ldrh	r3, [r7, #6]
2400c6fa:	2b01      	cmp	r3, #1
2400c6fc:	d109      	bne.n	2400c712 <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
2400c6fe:	893b      	ldrh	r3, [r7, #8]
2400c700:	b2da      	uxtb	r2, r3
2400c702:	68fb      	ldr	r3, [r7, #12]
2400c704:	681b      	ldr	r3, [r3, #0]
2400c706:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
2400c708:	68fb      	ldr	r3, [r7, #12]
2400c70a:	f04f 32ff 	mov.w	r2, #4294967295
2400c70e:	651a      	str	r2, [r3, #80]	@ 0x50
2400c710:	e00b      	b.n	2400c72a <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
2400c712:	893b      	ldrh	r3, [r7, #8]
2400c714:	0a1b      	lsrs	r3, r3, #8
2400c716:	b29b      	uxth	r3, r3
2400c718:	b2da      	uxtb	r2, r3
2400c71a:	68fb      	ldr	r3, [r7, #12]
2400c71c:	681b      	ldr	r3, [r3, #0]
2400c71e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
2400c720:	893b      	ldrh	r3, [r7, #8]
2400c722:	b2db      	uxtb	r3, r3
2400c724:	461a      	mov	r2, r3
2400c726:	68fb      	ldr	r3, [r7, #12]
2400c728:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
2400c72a:	88fb      	ldrh	r3, [r7, #6]
2400c72c:	b2da      	uxtb	r2, r3
2400c72e:	8979      	ldrh	r1, [r7, #10]
2400c730:	4b0c      	ldr	r3, [pc, #48]	@ (2400c764 <HAL_I2C_Mem_Read_IT+0x108>)
2400c732:	9300      	str	r3, [sp, #0]
2400c734:	2300      	movs	r3, #0
2400c736:	68f8      	ldr	r0, [r7, #12]
2400c738:	f003 feae 	bl	24010498 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400c73c:	68fb      	ldr	r3, [r7, #12]
2400c73e:	2200      	movs	r2, #0
2400c740:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
2400c744:	2101      	movs	r1, #1
2400c746:	68f8      	ldr	r0, [r7, #12]
2400c748:	f003 fed8 	bl	240104fc <I2C_Enable_IRQ>

    return HAL_OK;
2400c74c:	2300      	movs	r3, #0
2400c74e:	e000      	b.n	2400c752 <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
2400c750:	2302      	movs	r3, #2
  }
}
2400c752:	4618      	mov	r0, r3
2400c754:	3710      	adds	r7, #16
2400c756:	46bd      	mov	sp, r7
2400c758:	bd80      	pop	{r7, pc}
2400c75a:	bf00      	nop
2400c75c:	ffff0000 	.word	0xffff0000
2400c760:	2400e181 	.word	0x2400e181
2400c764:	80002000 	.word	0x80002000

2400c768 <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
2400c768:	b580      	push	{r7, lr}
2400c76a:	b088      	sub	sp, #32
2400c76c:	af02      	add	r7, sp, #8
2400c76e:	60f8      	str	r0, [r7, #12]
2400c770:	4608      	mov	r0, r1
2400c772:	4611      	mov	r1, r2
2400c774:	461a      	mov	r2, r3
2400c776:	4603      	mov	r3, r0
2400c778:	817b      	strh	r3, [r7, #10]
2400c77a:	460b      	mov	r3, r1
2400c77c:	813b      	strh	r3, [r7, #8]
2400c77e:	4613      	mov	r3, r2
2400c780:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400c782:	68fb      	ldr	r3, [r7, #12]
2400c784:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400c788:	b2db      	uxtb	r3, r3
2400c78a:	2b20      	cmp	r3, #32
2400c78c:	f040 80c3 	bne.w	2400c916 <HAL_I2C_Mem_Write_DMA+0x1ae>
  {
    if ((pData == NULL) || (Size == 0U))
2400c790:	6a3b      	ldr	r3, [r7, #32]
2400c792:	2b00      	cmp	r3, #0
2400c794:	d002      	beq.n	2400c79c <HAL_I2C_Mem_Write_DMA+0x34>
2400c796:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
2400c798:	2b00      	cmp	r3, #0
2400c79a:	d105      	bne.n	2400c7a8 <HAL_I2C_Mem_Write_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400c79c:	68fb      	ldr	r3, [r7, #12]
2400c79e:	f44f 7200 	mov.w	r2, #512	@ 0x200
2400c7a2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
2400c7a4:	2301      	movs	r3, #1
2400c7a6:	e0b7      	b.n	2400c918 <HAL_I2C_Mem_Write_DMA+0x1b0>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2400c7a8:	68fb      	ldr	r3, [r7, #12]
2400c7aa:	681b      	ldr	r3, [r3, #0]
2400c7ac:	699b      	ldr	r3, [r3, #24]
2400c7ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
2400c7b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
2400c7b6:	d101      	bne.n	2400c7bc <HAL_I2C_Mem_Write_DMA+0x54>
    {
      return HAL_BUSY;
2400c7b8:	2302      	movs	r3, #2
2400c7ba:	e0ad      	b.n	2400c918 <HAL_I2C_Mem_Write_DMA+0x1b0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400c7bc:	68fb      	ldr	r3, [r7, #12]
2400c7be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2400c7c2:	2b01      	cmp	r3, #1
2400c7c4:	d101      	bne.n	2400c7ca <HAL_I2C_Mem_Write_DMA+0x62>
2400c7c6:	2302      	movs	r3, #2
2400c7c8:	e0a6      	b.n	2400c918 <HAL_I2C_Mem_Write_DMA+0x1b0>
2400c7ca:	68fb      	ldr	r3, [r7, #12]
2400c7cc:	2201      	movs	r2, #1
2400c7ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
2400c7d2:	68fb      	ldr	r3, [r7, #12]
2400c7d4:	2221      	movs	r2, #33	@ 0x21
2400c7d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
2400c7da:	68fb      	ldr	r3, [r7, #12]
2400c7dc:	2240      	movs	r2, #64	@ 0x40
2400c7de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400c7e2:	68fb      	ldr	r3, [r7, #12]
2400c7e4:	2200      	movs	r2, #0
2400c7e6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400c7e8:	68fb      	ldr	r3, [r7, #12]
2400c7ea:	6a3a      	ldr	r2, [r7, #32]
2400c7ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
2400c7ee:	68fb      	ldr	r3, [r7, #12]
2400c7f0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
2400c7f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400c7f4:	68fb      	ldr	r3, [r7, #12]
2400c7f6:	4a4a      	ldr	r2, [pc, #296]	@ (2400c920 <HAL_I2C_Mem_Write_DMA+0x1b8>)
2400c7f8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
2400c7fa:	68fb      	ldr	r3, [r7, #12]
2400c7fc:	4a49      	ldr	r2, [pc, #292]	@ (2400c924 <HAL_I2C_Mem_Write_DMA+0x1bc>)
2400c7fe:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
2400c800:	897a      	ldrh	r2, [r7, #10]
2400c802:	68fb      	ldr	r3, [r7, #12]
2400c804:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400c806:	68fb      	ldr	r3, [r7, #12]
2400c808:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400c80a:	b29b      	uxth	r3, r3
2400c80c:	2bff      	cmp	r3, #255	@ 0xff
2400c80e:	d903      	bls.n	2400c818 <HAL_I2C_Mem_Write_DMA+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400c810:	68fb      	ldr	r3, [r7, #12]
2400c812:	22ff      	movs	r2, #255	@ 0xff
2400c814:	851a      	strh	r2, [r3, #40]	@ 0x28
2400c816:	e004      	b.n	2400c822 <HAL_I2C_Mem_Write_DMA+0xba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400c818:	68fb      	ldr	r3, [r7, #12]
2400c81a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400c81c:	b29a      	uxth	r2, r3
2400c81e:	68fb      	ldr	r3, [r7, #12]
2400c820:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
2400c822:	88fb      	ldrh	r3, [r7, #6]
2400c824:	2b01      	cmp	r3, #1
2400c826:	d109      	bne.n	2400c83c <HAL_I2C_Mem_Write_DMA+0xd4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
2400c828:	893b      	ldrh	r3, [r7, #8]
2400c82a:	b2da      	uxtb	r2, r3
2400c82c:	68fb      	ldr	r3, [r7, #12]
2400c82e:	681b      	ldr	r3, [r3, #0]
2400c830:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
2400c832:	68fb      	ldr	r3, [r7, #12]
2400c834:	f04f 32ff 	mov.w	r2, #4294967295
2400c838:	651a      	str	r2, [r3, #80]	@ 0x50
2400c83a:	e00b      	b.n	2400c854 <HAL_I2C_Mem_Write_DMA+0xec>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
2400c83c:	893b      	ldrh	r3, [r7, #8]
2400c83e:	0a1b      	lsrs	r3, r3, #8
2400c840:	b29b      	uxth	r3, r3
2400c842:	b2da      	uxtb	r2, r3
2400c844:	68fb      	ldr	r3, [r7, #12]
2400c846:	681b      	ldr	r3, [r3, #0]
2400c848:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
2400c84a:	893b      	ldrh	r3, [r7, #8]
2400c84c:	b2db      	uxtb	r3, r3
2400c84e:	461a      	mov	r2, r3
2400c850:	68fb      	ldr	r3, [r7, #12]
2400c852:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmatx != NULL)
2400c854:	68fb      	ldr	r3, [r7, #12]
2400c856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400c858:	2b00      	cmp	r3, #0
2400c85a:	d020      	beq.n	2400c89e <HAL_I2C_Mem_Write_DMA+0x136>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
2400c85c:	68fb      	ldr	r3, [r7, #12]
2400c85e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400c860:	4a31      	ldr	r2, [pc, #196]	@ (2400c928 <HAL_I2C_Mem_Write_DMA+0x1c0>)
2400c862:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
2400c864:	68fb      	ldr	r3, [r7, #12]
2400c866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400c868:	4a30      	ldr	r2, [pc, #192]	@ (2400c92c <HAL_I2C_Mem_Write_DMA+0x1c4>)
2400c86a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
2400c86c:	68fb      	ldr	r3, [r7, #12]
2400c86e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400c870:	2200      	movs	r2, #0
2400c872:	641a      	str	r2, [r3, #64]	@ 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
2400c874:	68fb      	ldr	r3, [r7, #12]
2400c876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400c878:	2200      	movs	r2, #0
2400c87a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
2400c87c:	68fb      	ldr	r3, [r7, #12]
2400c87e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
2400c880:	6a39      	ldr	r1, [r7, #32]
2400c882:	68fb      	ldr	r3, [r7, #12]
2400c884:	681b      	ldr	r3, [r3, #0]
2400c886:	3328      	adds	r3, #40	@ 0x28
2400c888:	461a      	mov	r2, r3
                                       hi2c->XferSize);
2400c88a:	68fb      	ldr	r3, [r7, #12]
2400c88c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
2400c88e:	f7f8 f855 	bl	2400493c <HAL_DMA_Start_IT>
2400c892:	4603      	mov	r3, r0
2400c894:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
2400c896:	7dfb      	ldrb	r3, [r7, #23]
2400c898:	2b00      	cmp	r3, #0
2400c89a:	d128      	bne.n	2400c8ee <HAL_I2C_Mem_Write_DMA+0x186>
2400c89c:	e013      	b.n	2400c8c6 <HAL_I2C_Mem_Write_DMA+0x15e>
      hi2c->State     = HAL_I2C_STATE_READY;
2400c89e:	68fb      	ldr	r3, [r7, #12]
2400c8a0:	2220      	movs	r2, #32
2400c8a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400c8a6:	68fb      	ldr	r3, [r7, #12]
2400c8a8:	2200      	movs	r2, #0
2400c8aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2400c8ae:	68fb      	ldr	r3, [r7, #12]
2400c8b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2400c8b2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
2400c8b6:	68fb      	ldr	r3, [r7, #12]
2400c8b8:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
2400c8ba:	68fb      	ldr	r3, [r7, #12]
2400c8bc:	2200      	movs	r2, #0
2400c8be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
2400c8c2:	2301      	movs	r3, #1
2400c8c4:	e028      	b.n	2400c918 <HAL_I2C_Mem_Write_DMA+0x1b0>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
2400c8c6:	88fb      	ldrh	r3, [r7, #6]
2400c8c8:	b2da      	uxtb	r2, r3
2400c8ca:	8979      	ldrh	r1, [r7, #10]
2400c8cc:	4b18      	ldr	r3, [pc, #96]	@ (2400c930 <HAL_I2C_Mem_Write_DMA+0x1c8>)
2400c8ce:	9300      	str	r3, [sp, #0]
2400c8d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
2400c8d4:	68f8      	ldr	r0, [r7, #12]
2400c8d6:	f003 fddf 	bl	24010498 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400c8da:	68fb      	ldr	r3, [r7, #12]
2400c8dc:	2200      	movs	r2, #0
2400c8de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
2400c8e2:	2101      	movs	r1, #1
2400c8e4:	68f8      	ldr	r0, [r7, #12]
2400c8e6:	f003 fe09 	bl	240104fc <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
2400c8ea:	2300      	movs	r3, #0
2400c8ec:	e014      	b.n	2400c918 <HAL_I2C_Mem_Write_DMA+0x1b0>
      hi2c->State     = HAL_I2C_STATE_READY;
2400c8ee:	68fb      	ldr	r3, [r7, #12]
2400c8f0:	2220      	movs	r2, #32
2400c8f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400c8f6:	68fb      	ldr	r3, [r7, #12]
2400c8f8:	2200      	movs	r2, #0
2400c8fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2400c8fe:	68fb      	ldr	r3, [r7, #12]
2400c900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2400c902:	f043 0210 	orr.w	r2, r3, #16
2400c906:	68fb      	ldr	r3, [r7, #12]
2400c908:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
2400c90a:	68fb      	ldr	r3, [r7, #12]
2400c90c:	2200      	movs	r2, #0
2400c90e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
2400c912:	2301      	movs	r3, #1
2400c914:	e000      	b.n	2400c918 <HAL_I2C_Mem_Write_DMA+0x1b0>
  }
  else
  {
    return HAL_BUSY;
2400c916:	2302      	movs	r3, #2
  }
}
2400c918:	4618      	mov	r0, r3
2400c91a:	3718      	adds	r7, #24
2400c91c:	46bd      	mov	sp, r7
2400c91e:	bd80      	pop	{r7, pc}
2400c920:	ffff0000 	.word	0xffff0000
2400c924:	2400e795 	.word	0x2400e795
2400c928:	2400fa77 	.word	0x2400fa77
2400c92c:	2400fd49 	.word	0x2400fd49
2400c930:	80002000 	.word	0x80002000

2400c934 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
2400c934:	b580      	push	{r7, lr}
2400c936:	b088      	sub	sp, #32
2400c938:	af02      	add	r7, sp, #8
2400c93a:	60f8      	str	r0, [r7, #12]
2400c93c:	4608      	mov	r0, r1
2400c93e:	4611      	mov	r1, r2
2400c940:	461a      	mov	r2, r3
2400c942:	4603      	mov	r3, r0
2400c944:	817b      	strh	r3, [r7, #10]
2400c946:	460b      	mov	r3, r1
2400c948:	813b      	strh	r3, [r7, #8]
2400c94a:	4613      	mov	r3, r2
2400c94c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400c94e:	68fb      	ldr	r3, [r7, #12]
2400c950:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400c954:	b2db      	uxtb	r3, r3
2400c956:	2b20      	cmp	r3, #32
2400c958:	f040 80c2 	bne.w	2400cae0 <HAL_I2C_Mem_Read_DMA+0x1ac>
  {
    if ((pData == NULL) || (Size == 0U))
2400c95c:	6a3b      	ldr	r3, [r7, #32]
2400c95e:	2b00      	cmp	r3, #0
2400c960:	d002      	beq.n	2400c968 <HAL_I2C_Mem_Read_DMA+0x34>
2400c962:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
2400c964:	2b00      	cmp	r3, #0
2400c966:	d105      	bne.n	2400c974 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400c968:	68fb      	ldr	r3, [r7, #12]
2400c96a:	f44f 7200 	mov.w	r2, #512	@ 0x200
2400c96e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
2400c970:	2301      	movs	r3, #1
2400c972:	e0b6      	b.n	2400cae2 <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2400c974:	68fb      	ldr	r3, [r7, #12]
2400c976:	681b      	ldr	r3, [r3, #0]
2400c978:	699b      	ldr	r3, [r3, #24]
2400c97a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
2400c97e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
2400c982:	d101      	bne.n	2400c988 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
2400c984:	2302      	movs	r3, #2
2400c986:	e0ac      	b.n	2400cae2 <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400c988:	68fb      	ldr	r3, [r7, #12]
2400c98a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2400c98e:	2b01      	cmp	r3, #1
2400c990:	d101      	bne.n	2400c996 <HAL_I2C_Mem_Read_DMA+0x62>
2400c992:	2302      	movs	r3, #2
2400c994:	e0a5      	b.n	2400cae2 <HAL_I2C_Mem_Read_DMA+0x1ae>
2400c996:	68fb      	ldr	r3, [r7, #12]
2400c998:	2201      	movs	r2, #1
2400c99a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
2400c99e:	68fb      	ldr	r3, [r7, #12]
2400c9a0:	2222      	movs	r2, #34	@ 0x22
2400c9a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
2400c9a6:	68fb      	ldr	r3, [r7, #12]
2400c9a8:	2240      	movs	r2, #64	@ 0x40
2400c9aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
2400c9ae:	68fb      	ldr	r3, [r7, #12]
2400c9b0:	2200      	movs	r2, #0
2400c9b2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400c9b4:	68fb      	ldr	r3, [r7, #12]
2400c9b6:	6a3a      	ldr	r2, [r7, #32]
2400c9b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
2400c9ba:	68fb      	ldr	r3, [r7, #12]
2400c9bc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
2400c9be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400c9c0:	68fb      	ldr	r3, [r7, #12]
2400c9c2:	4a4a      	ldr	r2, [pc, #296]	@ (2400caec <HAL_I2C_Mem_Read_DMA+0x1b8>)
2400c9c4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
2400c9c6:	68fb      	ldr	r3, [r7, #12]
2400c9c8:	4a49      	ldr	r2, [pc, #292]	@ (2400caf0 <HAL_I2C_Mem_Read_DMA+0x1bc>)
2400c9ca:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
2400c9cc:	897a      	ldrh	r2, [r7, #10]
2400c9ce:	68fb      	ldr	r3, [r7, #12]
2400c9d0:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400c9d2:	68fb      	ldr	r3, [r7, #12]
2400c9d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400c9d6:	b29b      	uxth	r3, r3
2400c9d8:	2bff      	cmp	r3, #255	@ 0xff
2400c9da:	d903      	bls.n	2400c9e4 <HAL_I2C_Mem_Read_DMA+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400c9dc:	68fb      	ldr	r3, [r7, #12]
2400c9de:	22ff      	movs	r2, #255	@ 0xff
2400c9e0:	851a      	strh	r2, [r3, #40]	@ 0x28
2400c9e2:	e004      	b.n	2400c9ee <HAL_I2C_Mem_Read_DMA+0xba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400c9e4:	68fb      	ldr	r3, [r7, #12]
2400c9e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400c9e8:	b29a      	uxth	r2, r3
2400c9ea:	68fb      	ldr	r3, [r7, #12]
2400c9ec:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
2400c9ee:	88fb      	ldrh	r3, [r7, #6]
2400c9f0:	2b01      	cmp	r3, #1
2400c9f2:	d109      	bne.n	2400ca08 <HAL_I2C_Mem_Read_DMA+0xd4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
2400c9f4:	893b      	ldrh	r3, [r7, #8]
2400c9f6:	b2da      	uxtb	r2, r3
2400c9f8:	68fb      	ldr	r3, [r7, #12]
2400c9fa:	681b      	ldr	r3, [r3, #0]
2400c9fc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
2400c9fe:	68fb      	ldr	r3, [r7, #12]
2400ca00:	f04f 32ff 	mov.w	r2, #4294967295
2400ca04:	651a      	str	r2, [r3, #80]	@ 0x50
2400ca06:	e00b      	b.n	2400ca20 <HAL_I2C_Mem_Read_DMA+0xec>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
2400ca08:	893b      	ldrh	r3, [r7, #8]
2400ca0a:	0a1b      	lsrs	r3, r3, #8
2400ca0c:	b29b      	uxth	r3, r3
2400ca0e:	b2da      	uxtb	r2, r3
2400ca10:	68fb      	ldr	r3, [r7, #12]
2400ca12:	681b      	ldr	r3, [r3, #0]
2400ca14:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
2400ca16:	893b      	ldrh	r3, [r7, #8]
2400ca18:	b2db      	uxtb	r3, r3
2400ca1a:	461a      	mov	r2, r3
2400ca1c:	68fb      	ldr	r3, [r7, #12]
2400ca1e:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmarx != NULL)
2400ca20:	68fb      	ldr	r3, [r7, #12]
2400ca22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400ca24:	2b00      	cmp	r3, #0
2400ca26:	d020      	beq.n	2400ca6a <HAL_I2C_Mem_Read_DMA+0x136>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
2400ca28:	68fb      	ldr	r3, [r7, #12]
2400ca2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400ca2c:	4a31      	ldr	r2, [pc, #196]	@ (2400caf4 <HAL_I2C_Mem_Read_DMA+0x1c0>)
2400ca2e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
2400ca30:	68fb      	ldr	r3, [r7, #12]
2400ca32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400ca34:	4a30      	ldr	r2, [pc, #192]	@ (2400caf8 <HAL_I2C_Mem_Read_DMA+0x1c4>)
2400ca36:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
2400ca38:	68fb      	ldr	r3, [r7, #12]
2400ca3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400ca3c:	2200      	movs	r2, #0
2400ca3e:	641a      	str	r2, [r3, #64]	@ 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
2400ca40:	68fb      	ldr	r3, [r7, #12]
2400ca42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400ca44:	2200      	movs	r2, #0
2400ca46:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
2400ca48:	68fb      	ldr	r3, [r7, #12]
2400ca4a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
2400ca4c:	68fb      	ldr	r3, [r7, #12]
2400ca4e:	681b      	ldr	r3, [r3, #0]
2400ca50:	3324      	adds	r3, #36	@ 0x24
2400ca52:	4619      	mov	r1, r3
2400ca54:	6a3a      	ldr	r2, [r7, #32]
                                       hi2c->XferSize);
2400ca56:	68fb      	ldr	r3, [r7, #12]
2400ca58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
2400ca5a:	f7f7 ff6f 	bl	2400493c <HAL_DMA_Start_IT>
2400ca5e:	4603      	mov	r3, r0
2400ca60:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
2400ca62:	7dfb      	ldrb	r3, [r7, #23]
2400ca64:	2b00      	cmp	r3, #0
2400ca66:	d127      	bne.n	2400cab8 <HAL_I2C_Mem_Read_DMA+0x184>
2400ca68:	e013      	b.n	2400ca92 <HAL_I2C_Mem_Read_DMA+0x15e>
      hi2c->State     = HAL_I2C_STATE_READY;
2400ca6a:	68fb      	ldr	r3, [r7, #12]
2400ca6c:	2220      	movs	r2, #32
2400ca6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400ca72:	68fb      	ldr	r3, [r7, #12]
2400ca74:	2200      	movs	r2, #0
2400ca76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2400ca7a:	68fb      	ldr	r3, [r7, #12]
2400ca7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2400ca7e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
2400ca82:	68fb      	ldr	r3, [r7, #12]
2400ca84:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
2400ca86:	68fb      	ldr	r3, [r7, #12]
2400ca88:	2200      	movs	r2, #0
2400ca8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
2400ca8e:	2301      	movs	r3, #1
2400ca90:	e027      	b.n	2400cae2 <HAL_I2C_Mem_Read_DMA+0x1ae>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
2400ca92:	88fb      	ldrh	r3, [r7, #6]
2400ca94:	b2da      	uxtb	r2, r3
2400ca96:	8979      	ldrh	r1, [r7, #10]
2400ca98:	4b18      	ldr	r3, [pc, #96]	@ (2400cafc <HAL_I2C_Mem_Read_DMA+0x1c8>)
2400ca9a:	9300      	str	r3, [sp, #0]
2400ca9c:	2300      	movs	r3, #0
2400ca9e:	68f8      	ldr	r0, [r7, #12]
2400caa0:	f003 fcfa 	bl	24010498 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400caa4:	68fb      	ldr	r3, [r7, #12]
2400caa6:	2200      	movs	r2, #0
2400caa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
2400caac:	2101      	movs	r1, #1
2400caae:	68f8      	ldr	r0, [r7, #12]
2400cab0:	f003 fd24 	bl	240104fc <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
2400cab4:	2300      	movs	r3, #0
2400cab6:	e014      	b.n	2400cae2 <HAL_I2C_Mem_Read_DMA+0x1ae>
      hi2c->State     = HAL_I2C_STATE_READY;
2400cab8:	68fb      	ldr	r3, [r7, #12]
2400caba:	2220      	movs	r2, #32
2400cabc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400cac0:	68fb      	ldr	r3, [r7, #12]
2400cac2:	2200      	movs	r2, #0
2400cac4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2400cac8:	68fb      	ldr	r3, [r7, #12]
2400caca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2400cacc:	f043 0210 	orr.w	r2, r3, #16
2400cad0:	68fb      	ldr	r3, [r7, #12]
2400cad2:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
2400cad4:	68fb      	ldr	r3, [r7, #12]
2400cad6:	2200      	movs	r2, #0
2400cad8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
2400cadc:	2301      	movs	r3, #1
2400cade:	e000      	b.n	2400cae2 <HAL_I2C_Mem_Read_DMA+0x1ae>
  }
  else
  {
    return HAL_BUSY;
2400cae0:	2302      	movs	r3, #2
  }
}
2400cae2:	4618      	mov	r0, r3
2400cae4:	3718      	adds	r7, #24
2400cae6:	46bd      	mov	sp, r7
2400cae8:	bd80      	pop	{r7, pc}
2400caea:	bf00      	nop
2400caec:	ffff0000 	.word	0xffff0000
2400caf0:	2400e795 	.word	0x2400e795
2400caf4:	2400fb4d 	.word	0x2400fb4d
2400caf8:	2400fd49 	.word	0x2400fd49
2400cafc:	80002000 	.word	0x80002000

2400cb00 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
2400cb00:	b580      	push	{r7, lr}
2400cb02:	b08a      	sub	sp, #40	@ 0x28
2400cb04:	af02      	add	r7, sp, #8
2400cb06:	60f8      	str	r0, [r7, #12]
2400cb08:	607a      	str	r2, [r7, #4]
2400cb0a:	603b      	str	r3, [r7, #0]
2400cb0c:	460b      	mov	r3, r1
2400cb0e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
2400cb10:	2300      	movs	r3, #0
2400cb12:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
2400cb14:	68fb      	ldr	r3, [r7, #12]
2400cb16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400cb1a:	b2db      	uxtb	r3, r3
2400cb1c:	2b20      	cmp	r3, #32
2400cb1e:	f040 80d2 	bne.w	2400ccc6 <HAL_I2C_IsDeviceReady+0x1c6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
2400cb22:	68fb      	ldr	r3, [r7, #12]
2400cb24:	681b      	ldr	r3, [r3, #0]
2400cb26:	699b      	ldr	r3, [r3, #24]
2400cb28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
2400cb2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
2400cb30:	d101      	bne.n	2400cb36 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
2400cb32:	2302      	movs	r3, #2
2400cb34:	e0c8      	b.n	2400ccc8 <HAL_I2C_IsDeviceReady+0x1c8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400cb36:	68fb      	ldr	r3, [r7, #12]
2400cb38:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2400cb3c:	2b01      	cmp	r3, #1
2400cb3e:	d101      	bne.n	2400cb44 <HAL_I2C_IsDeviceReady+0x44>
2400cb40:	2302      	movs	r3, #2
2400cb42:	e0c1      	b.n	2400ccc8 <HAL_I2C_IsDeviceReady+0x1c8>
2400cb44:	68fb      	ldr	r3, [r7, #12]
2400cb46:	2201      	movs	r2, #1
2400cb48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
2400cb4c:	68fb      	ldr	r3, [r7, #12]
2400cb4e:	2224      	movs	r2, #36	@ 0x24
2400cb50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400cb54:	68fb      	ldr	r3, [r7, #12]
2400cb56:	2200      	movs	r2, #0
2400cb58:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
2400cb5a:	68fb      	ldr	r3, [r7, #12]
2400cb5c:	68db      	ldr	r3, [r3, #12]
2400cb5e:	2b01      	cmp	r3, #1
2400cb60:	d105      	bne.n	2400cb6e <HAL_I2C_IsDeviceReady+0x6e>
2400cb62:	897b      	ldrh	r3, [r7, #10]
2400cb64:	f3c3 0209 	ubfx	r2, r3, #0, #10
2400cb68:	4b59      	ldr	r3, [pc, #356]	@ (2400ccd0 <HAL_I2C_IsDeviceReady+0x1d0>)
2400cb6a:	4313      	orrs	r3, r2
2400cb6c:	e004      	b.n	2400cb78 <HAL_I2C_IsDeviceReady+0x78>
2400cb6e:	897b      	ldrh	r3, [r7, #10]
2400cb70:	f3c3 0209 	ubfx	r2, r3, #0, #10
2400cb74:	4b57      	ldr	r3, [pc, #348]	@ (2400ccd4 <HAL_I2C_IsDeviceReady+0x1d4>)
2400cb76:	4313      	orrs	r3, r2
2400cb78:	68fa      	ldr	r2, [r7, #12]
2400cb7a:	6812      	ldr	r2, [r2, #0]
2400cb7c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
2400cb7e:	f7f6 f8b7 	bl	24002cf0 <HAL_GetTick>
2400cb82:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
2400cb84:	68fb      	ldr	r3, [r7, #12]
2400cb86:	681b      	ldr	r3, [r3, #0]
2400cb88:	699b      	ldr	r3, [r3, #24]
2400cb8a:	f003 0320 	and.w	r3, r3, #32
2400cb8e:	2b20      	cmp	r3, #32
2400cb90:	bf0c      	ite	eq
2400cb92:	2301      	moveq	r3, #1
2400cb94:	2300      	movne	r3, #0
2400cb96:	b2db      	uxtb	r3, r3
2400cb98:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
2400cb9a:	68fb      	ldr	r3, [r7, #12]
2400cb9c:	681b      	ldr	r3, [r3, #0]
2400cb9e:	699b      	ldr	r3, [r3, #24]
2400cba0:	f003 0310 	and.w	r3, r3, #16
2400cba4:	2b10      	cmp	r3, #16
2400cba6:	bf0c      	ite	eq
2400cba8:	2301      	moveq	r3, #1
2400cbaa:	2300      	movne	r3, #0
2400cbac:	b2db      	uxtb	r3, r3
2400cbae:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
2400cbb0:	e034      	b.n	2400cc1c <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
2400cbb2:	683b      	ldr	r3, [r7, #0]
2400cbb4:	f1b3 3fff 	cmp.w	r3, #4294967295
2400cbb8:	d01a      	beq.n	2400cbf0 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
2400cbba:	f7f6 f899 	bl	24002cf0 <HAL_GetTick>
2400cbbe:	4602      	mov	r2, r0
2400cbc0:	69bb      	ldr	r3, [r7, #24]
2400cbc2:	1ad3      	subs	r3, r2, r3
2400cbc4:	683a      	ldr	r2, [r7, #0]
2400cbc6:	429a      	cmp	r2, r3
2400cbc8:	d302      	bcc.n	2400cbd0 <HAL_I2C_IsDeviceReady+0xd0>
2400cbca:	683b      	ldr	r3, [r7, #0]
2400cbcc:	2b00      	cmp	r3, #0
2400cbce:	d10f      	bne.n	2400cbf0 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
2400cbd0:	68fb      	ldr	r3, [r7, #12]
2400cbd2:	2220      	movs	r2, #32
2400cbd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2400cbd8:	68fb      	ldr	r3, [r7, #12]
2400cbda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2400cbdc:	f043 0220 	orr.w	r2, r3, #32
2400cbe0:	68fb      	ldr	r3, [r7, #12]
2400cbe2:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
2400cbe4:	68fb      	ldr	r3, [r7, #12]
2400cbe6:	2200      	movs	r2, #0
2400cbe8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
2400cbec:	2301      	movs	r3, #1
2400cbee:	e06b      	b.n	2400ccc8 <HAL_I2C_IsDeviceReady+0x1c8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
2400cbf0:	68fb      	ldr	r3, [r7, #12]
2400cbf2:	681b      	ldr	r3, [r3, #0]
2400cbf4:	699b      	ldr	r3, [r3, #24]
2400cbf6:	f003 0320 	and.w	r3, r3, #32
2400cbfa:	2b20      	cmp	r3, #32
2400cbfc:	bf0c      	ite	eq
2400cbfe:	2301      	moveq	r3, #1
2400cc00:	2300      	movne	r3, #0
2400cc02:	b2db      	uxtb	r3, r3
2400cc04:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
2400cc06:	68fb      	ldr	r3, [r7, #12]
2400cc08:	681b      	ldr	r3, [r3, #0]
2400cc0a:	699b      	ldr	r3, [r3, #24]
2400cc0c:	f003 0310 	and.w	r3, r3, #16
2400cc10:	2b10      	cmp	r3, #16
2400cc12:	bf0c      	ite	eq
2400cc14:	2301      	moveq	r3, #1
2400cc16:	2300      	movne	r3, #0
2400cc18:	b2db      	uxtb	r3, r3
2400cc1a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
2400cc1c:	7ffb      	ldrb	r3, [r7, #31]
2400cc1e:	2b00      	cmp	r3, #0
2400cc20:	d102      	bne.n	2400cc28 <HAL_I2C_IsDeviceReady+0x128>
2400cc22:	7fbb      	ldrb	r3, [r7, #30]
2400cc24:	2b00      	cmp	r3, #0
2400cc26:	d0c4      	beq.n	2400cbb2 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
2400cc28:	68fb      	ldr	r3, [r7, #12]
2400cc2a:	681b      	ldr	r3, [r3, #0]
2400cc2c:	699b      	ldr	r3, [r3, #24]
2400cc2e:	f003 0310 	and.w	r3, r3, #16
2400cc32:	2b10      	cmp	r3, #16
2400cc34:	d01a      	beq.n	2400cc6c <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
2400cc36:	69bb      	ldr	r3, [r7, #24]
2400cc38:	9300      	str	r3, [sp, #0]
2400cc3a:	683b      	ldr	r3, [r7, #0]
2400cc3c:	2200      	movs	r2, #0
2400cc3e:	2120      	movs	r1, #32
2400cc40:	68f8      	ldr	r0, [r7, #12]
2400cc42:	f003 f9d9 	bl	2400fff8 <I2C_WaitOnFlagUntilTimeout>
2400cc46:	4603      	mov	r3, r0
2400cc48:	2b00      	cmp	r3, #0
2400cc4a:	d001      	beq.n	2400cc50 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
2400cc4c:	2301      	movs	r3, #1
2400cc4e:	e03b      	b.n	2400ccc8 <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400cc50:	68fb      	ldr	r3, [r7, #12]
2400cc52:	681b      	ldr	r3, [r3, #0]
2400cc54:	2220      	movs	r2, #32
2400cc56:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
2400cc58:	68fb      	ldr	r3, [r7, #12]
2400cc5a:	2220      	movs	r2, #32
2400cc5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400cc60:	68fb      	ldr	r3, [r7, #12]
2400cc62:	2200      	movs	r2, #0
2400cc64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
2400cc68:	2300      	movs	r3, #0
2400cc6a:	e02d      	b.n	2400ccc8 <HAL_I2C_IsDeviceReady+0x1c8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
2400cc6c:	69bb      	ldr	r3, [r7, #24]
2400cc6e:	9300      	str	r3, [sp, #0]
2400cc70:	683b      	ldr	r3, [r7, #0]
2400cc72:	2200      	movs	r2, #0
2400cc74:	2120      	movs	r1, #32
2400cc76:	68f8      	ldr	r0, [r7, #12]
2400cc78:	f003 f9be 	bl	2400fff8 <I2C_WaitOnFlagUntilTimeout>
2400cc7c:	4603      	mov	r3, r0
2400cc7e:	2b00      	cmp	r3, #0
2400cc80:	d001      	beq.n	2400cc86 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
2400cc82:	2301      	movs	r3, #1
2400cc84:	e020      	b.n	2400ccc8 <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400cc86:	68fb      	ldr	r3, [r7, #12]
2400cc88:	681b      	ldr	r3, [r3, #0]
2400cc8a:	2210      	movs	r2, #16
2400cc8c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400cc8e:	68fb      	ldr	r3, [r7, #12]
2400cc90:	681b      	ldr	r3, [r3, #0]
2400cc92:	2220      	movs	r2, #32
2400cc94:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
2400cc96:	697b      	ldr	r3, [r7, #20]
2400cc98:	3301      	adds	r3, #1
2400cc9a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
2400cc9c:	697b      	ldr	r3, [r7, #20]
2400cc9e:	687a      	ldr	r2, [r7, #4]
2400cca0:	429a      	cmp	r2, r3
2400cca2:	f63f af5a 	bhi.w	2400cb5a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
2400cca6:	68fb      	ldr	r3, [r7, #12]
2400cca8:	2220      	movs	r2, #32
2400ccaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2400ccae:	68fb      	ldr	r3, [r7, #12]
2400ccb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2400ccb2:	f043 0220 	orr.w	r2, r3, #32
2400ccb6:	68fb      	ldr	r3, [r7, #12]
2400ccb8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400ccba:	68fb      	ldr	r3, [r7, #12]
2400ccbc:	2200      	movs	r2, #0
2400ccbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
2400ccc2:	2301      	movs	r3, #1
2400ccc4:	e000      	b.n	2400ccc8 <HAL_I2C_IsDeviceReady+0x1c8>
  }
  else
  {
    return HAL_BUSY;
2400ccc6:	2302      	movs	r3, #2
  }
}
2400ccc8:	4618      	mov	r0, r3
2400ccca:	3720      	adds	r7, #32
2400cccc:	46bd      	mov	sp, r7
2400ccce:	bd80      	pop	{r7, pc}
2400ccd0:	02002000 	.word	0x02002000
2400ccd4:	02002800 	.word	0x02002800

2400ccd8 <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                 uint16_t Size, uint32_t XferOptions)
{
2400ccd8:	b580      	push	{r7, lr}
2400ccda:	b08a      	sub	sp, #40	@ 0x28
2400ccdc:	af02      	add	r7, sp, #8
2400ccde:	60f8      	str	r0, [r7, #12]
2400cce0:	607a      	str	r2, [r7, #4]
2400cce2:	461a      	mov	r2, r3
2400cce4:	460b      	mov	r3, r1
2400cce6:	817b      	strh	r3, [r7, #10]
2400cce8:	4613      	mov	r3, r2
2400ccea:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_WRITE;
2400ccec:	4b57      	ldr	r3, [pc, #348]	@ (2400ce4c <HAL_I2C_Master_Seq_Transmit_IT+0x174>)
2400ccee:	61bb      	str	r3, [r7, #24]
  uint32_t sizetoxfer = 0U;
2400ccf0:	2300      	movs	r3, #0
2400ccf2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400ccf4:	68fb      	ldr	r3, [r7, #12]
2400ccf6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400ccfa:	b2db      	uxtb	r3, r3
2400ccfc:	2b20      	cmp	r3, #32
2400ccfe:	f040 809f 	bne.w	2400ce40 <HAL_I2C_Master_Seq_Transmit_IT+0x168>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400cd02:	68fb      	ldr	r3, [r7, #12]
2400cd04:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2400cd08:	2b01      	cmp	r3, #1
2400cd0a:	d101      	bne.n	2400cd10 <HAL_I2C_Master_Seq_Transmit_IT+0x38>
2400cd0c:	2302      	movs	r3, #2
2400cd0e:	e098      	b.n	2400ce42 <HAL_I2C_Master_Seq_Transmit_IT+0x16a>
2400cd10:	68fb      	ldr	r3, [r7, #12]
2400cd12:	2201      	movs	r2, #1
2400cd14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
2400cd18:	68fb      	ldr	r3, [r7, #12]
2400cd1a:	2221      	movs	r2, #33	@ 0x21
2400cd1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
2400cd20:	68fb      	ldr	r3, [r7, #12]
2400cd22:	2210      	movs	r2, #16
2400cd24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400cd28:	68fb      	ldr	r3, [r7, #12]
2400cd2a:	2200      	movs	r2, #0
2400cd2c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400cd2e:	68fb      	ldr	r3, [r7, #12]
2400cd30:	687a      	ldr	r2, [r7, #4]
2400cd32:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
2400cd34:	68fb      	ldr	r3, [r7, #12]
2400cd36:	893a      	ldrh	r2, [r7, #8]
2400cd38:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = XferOptions;
2400cd3a:	68fb      	ldr	r3, [r7, #12]
2400cd3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
2400cd3e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
2400cd40:	68fb      	ldr	r3, [r7, #12]
2400cd42:	4a43      	ldr	r2, [pc, #268]	@ (2400ce50 <HAL_I2C_Master_Seq_Transmit_IT+0x178>)
2400cd44:	635a      	str	r2, [r3, #52]	@ 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400cd46:	68fb      	ldr	r3, [r7, #12]
2400cd48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400cd4a:	b29b      	uxth	r3, r3
2400cd4c:	2bff      	cmp	r3, #255	@ 0xff
2400cd4e:	d906      	bls.n	2400cd5e <HAL_I2C_Master_Seq_Transmit_IT+0x86>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400cd50:	68fb      	ldr	r3, [r7, #12]
2400cd52:	22ff      	movs	r2, #255	@ 0xff
2400cd54:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
2400cd56:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
2400cd5a:	61fb      	str	r3, [r7, #28]
2400cd5c:	e007      	b.n	2400cd6e <HAL_I2C_Master_Seq_Transmit_IT+0x96>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400cd5e:	68fb      	ldr	r3, [r7, #12]
2400cd60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400cd62:	b29a      	uxth	r2, r3
2400cd64:	68fb      	ldr	r3, [r7, #12]
2400cd66:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = hi2c->XferOptions;
2400cd68:	68fb      	ldr	r3, [r7, #12]
2400cd6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2400cd6c:	61fb      	str	r3, [r7, #28]
    }

    if ((hi2c->XferSize > 0U) && ((XferOptions == I2C_FIRST_FRAME) || \
2400cd6e:	68fb      	ldr	r3, [r7, #12]
2400cd70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400cd72:	2b00      	cmp	r3, #0
2400cd74:	d021      	beq.n	2400cdba <HAL_I2C_Master_Seq_Transmit_IT+0xe2>
2400cd76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2400cd78:	2b00      	cmp	r3, #0
2400cd7a:	d003      	beq.n	2400cd84 <HAL_I2C_Master_Seq_Transmit_IT+0xac>
2400cd7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2400cd7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
2400cd82:	d11a      	bne.n	2400cdba <HAL_I2C_Master_Seq_Transmit_IT+0xe2>
                                  (XferOptions == I2C_FIRST_AND_LAST_FRAME)))
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2400cd84:	68fb      	ldr	r3, [r7, #12]
2400cd86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2400cd88:	781a      	ldrb	r2, [r3, #0]
2400cd8a:	68fb      	ldr	r3, [r7, #12]
2400cd8c:	681b      	ldr	r3, [r3, #0]
2400cd8e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2400cd90:	68fb      	ldr	r3, [r7, #12]
2400cd92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2400cd94:	1c5a      	adds	r2, r3, #1
2400cd96:	68fb      	ldr	r3, [r7, #12]
2400cd98:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
2400cd9a:	68fb      	ldr	r3, [r7, #12]
2400cd9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400cd9e:	617b      	str	r3, [r7, #20]
      hi2c->XferCount--;
2400cda0:	68fb      	ldr	r3, [r7, #12]
2400cda2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400cda4:	b29b      	uxth	r3, r3
2400cda6:	3b01      	subs	r3, #1
2400cda8:	b29a      	uxth	r2, r3
2400cdaa:	68fb      	ldr	r3, [r7, #12]
2400cdac:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
2400cdae:	68fb      	ldr	r3, [r7, #12]
2400cdb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400cdb2:	3b01      	subs	r3, #1
2400cdb4:	b29a      	uxth	r2, r3
2400cdb6:	68fb      	ldr	r3, [r7, #12]
2400cdb8:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If transfer direction not change and there is no request to start another frame,
       do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && \
2400cdba:	68fb      	ldr	r3, [r7, #12]
2400cdbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2400cdbe:	2b11      	cmp	r3, #17
2400cdc0:	d10e      	bne.n	2400cde0 <HAL_I2C_Master_Seq_Transmit_IT+0x108>
        (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
2400cdc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2400cdc4:	2baa      	cmp	r3, #170	@ 0xaa
2400cdc6:	d003      	beq.n	2400cdd0 <HAL_I2C_Master_Seq_Transmit_IT+0xf8>
2400cdc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2400cdca:	f5b3 4f2a 	cmp.w	r3, #43520	@ 0xaa00
2400cdce:	d101      	bne.n	2400cdd4 <HAL_I2C_Master_Seq_Transmit_IT+0xfc>
2400cdd0:	2301      	movs	r3, #1
2400cdd2:	e000      	b.n	2400cdd6 <HAL_I2C_Master_Seq_Transmit_IT+0xfe>
2400cdd4:	2300      	movs	r3, #0
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && \
2400cdd6:	2b00      	cmp	r3, #0
2400cdd8:	d102      	bne.n	2400cde0 <HAL_I2C_Master_Seq_Transmit_IT+0x108>
    {
      xferrequest = I2C_NO_STARTSTOP;
2400cdda:	2300      	movs	r3, #0
2400cddc:	61bb      	str	r3, [r7, #24]
2400cdde:	e00a      	b.n	2400cdf6 <HAL_I2C_Master_Seq_Transmit_IT+0x11e>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
2400cde0:	68f8      	ldr	r0, [r7, #12]
2400cde2:	f003 fc6d 	bl	240106c0 <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
2400cde6:	68fb      	ldr	r3, [r7, #12]
2400cde8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400cdea:	b29b      	uxth	r3, r3
2400cdec:	2bff      	cmp	r3, #255	@ 0xff
2400cdee:	d802      	bhi.n	2400cdf6 <HAL_I2C_Master_Seq_Transmit_IT+0x11e>
      {
        xfermode = hi2c->XferOptions;
2400cdf0:	68fb      	ldr	r3, [r7, #12]
2400cdf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2400cdf4:	61fb      	str	r3, [r7, #28]
      }
    }

    /* Send Slave Address and set NBYTES to write */
    if ((XferOptions == I2C_FIRST_FRAME) || (XferOptions == I2C_FIRST_AND_LAST_FRAME))
2400cdf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2400cdf8:	2b00      	cmp	r3, #0
2400cdfa:	d003      	beq.n	2400ce04 <HAL_I2C_Master_Seq_Transmit_IT+0x12c>
2400cdfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2400cdfe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
2400ce02:	d109      	bne.n	2400ce18 <HAL_I2C_Master_Seq_Transmit_IT+0x140>
    {
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, xfermode, xferrequest);
2400ce04:	697b      	ldr	r3, [r7, #20]
2400ce06:	b2da      	uxtb	r2, r3
2400ce08:	8979      	ldrh	r1, [r7, #10]
2400ce0a:	69bb      	ldr	r3, [r7, #24]
2400ce0c:	9300      	str	r3, [sp, #0]
2400ce0e:	69fb      	ldr	r3, [r7, #28]
2400ce10:	68f8      	ldr	r0, [r7, #12]
2400ce12:	f003 fb41 	bl	24010498 <I2C_TransferConfig>
2400ce16:	e009      	b.n	2400ce2c <HAL_I2C_Master_Seq_Transmit_IT+0x154>
    }
    else
    {
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
2400ce18:	68fb      	ldr	r3, [r7, #12]
2400ce1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400ce1c:	b2da      	uxtb	r2, r3
2400ce1e:	8979      	ldrh	r1, [r7, #10]
2400ce20:	69bb      	ldr	r3, [r7, #24]
2400ce22:	9300      	str	r3, [sp, #0]
2400ce24:	69fb      	ldr	r3, [r7, #28]
2400ce26:	68f8      	ldr	r0, [r7, #12]
2400ce28:	f003 fb36 	bl	24010498 <I2C_TransferConfig>
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400ce2c:	68fb      	ldr	r3, [r7, #12]
2400ce2e:	2200      	movs	r2, #0
2400ce30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
              process unlock */
    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
       I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
2400ce34:	2101      	movs	r1, #1
2400ce36:	68f8      	ldr	r0, [r7, #12]
2400ce38:	f003 fb60 	bl	240104fc <I2C_Enable_IRQ>

    return HAL_OK;
2400ce3c:	2300      	movs	r3, #0
2400ce3e:	e000      	b.n	2400ce42 <HAL_I2C_Master_Seq_Transmit_IT+0x16a>
  }
  else
  {
    return HAL_BUSY;
2400ce40:	2302      	movs	r3, #2
  }
}
2400ce42:	4618      	mov	r0, r3
2400ce44:	3720      	adds	r7, #32
2400ce46:	46bd      	mov	sp, r7
2400ce48:	bd80      	pop	{r7, pc}
2400ce4a:	bf00      	nop
2400ce4c:	80002000 	.word	0x80002000
2400ce50:	2400df33 	.word	0x2400df33

2400ce54 <HAL_I2C_Master_Seq_Transmit_DMA>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                  uint16_t Size, uint32_t XferOptions)
{
2400ce54:	b580      	push	{r7, lr}
2400ce56:	b08a      	sub	sp, #40	@ 0x28
2400ce58:	af02      	add	r7, sp, #8
2400ce5a:	60f8      	str	r0, [r7, #12]
2400ce5c:	607a      	str	r2, [r7, #4]
2400ce5e:	461a      	mov	r2, r3
2400ce60:	460b      	mov	r3, r1
2400ce62:	817b      	strh	r3, [r7, #10]
2400ce64:	4613      	mov	r3, r2
2400ce66:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_WRITE;
2400ce68:	4b90      	ldr	r3, [pc, #576]	@ (2400d0ac <HAL_I2C_Master_Seq_Transmit_DMA+0x258>)
2400ce6a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
2400ce6c:	2300      	movs	r3, #0
2400ce6e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400ce70:	68fb      	ldr	r3, [r7, #12]
2400ce72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400ce76:	b2db      	uxtb	r3, r3
2400ce78:	2b20      	cmp	r3, #32
2400ce7a:	f040 8135 	bne.w	2400d0e8 <HAL_I2C_Master_Seq_Transmit_DMA+0x294>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400ce7e:	68fb      	ldr	r3, [r7, #12]
2400ce80:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2400ce84:	2b01      	cmp	r3, #1
2400ce86:	d101      	bne.n	2400ce8c <HAL_I2C_Master_Seq_Transmit_DMA+0x38>
2400ce88:	2302      	movs	r3, #2
2400ce8a:	e12e      	b.n	2400d0ea <HAL_I2C_Master_Seq_Transmit_DMA+0x296>
2400ce8c:	68fb      	ldr	r3, [r7, #12]
2400ce8e:	2201      	movs	r2, #1
2400ce90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
2400ce94:	68fb      	ldr	r3, [r7, #12]
2400ce96:	2221      	movs	r2, #33	@ 0x21
2400ce98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
2400ce9c:	68fb      	ldr	r3, [r7, #12]
2400ce9e:	2210      	movs	r2, #16
2400cea0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400cea4:	68fb      	ldr	r3, [r7, #12]
2400cea6:	2200      	movs	r2, #0
2400cea8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400ceaa:	68fb      	ldr	r3, [r7, #12]
2400ceac:	687a      	ldr	r2, [r7, #4]
2400ceae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
2400ceb0:	68fb      	ldr	r3, [r7, #12]
2400ceb2:	893a      	ldrh	r2, [r7, #8]
2400ceb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = XferOptions;
2400ceb6:	68fb      	ldr	r3, [r7, #12]
2400ceb8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
2400ceba:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
2400cebc:	68fb      	ldr	r3, [r7, #12]
2400cebe:	4a7c      	ldr	r2, [pc, #496]	@ (2400d0b0 <HAL_I2C_Master_Seq_Transmit_DMA+0x25c>)
2400cec0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400cec2:	68fb      	ldr	r3, [r7, #12]
2400cec4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400cec6:	b29b      	uxth	r3, r3
2400cec8:	2bff      	cmp	r3, #255	@ 0xff
2400ceca:	d906      	bls.n	2400ceda <HAL_I2C_Master_Seq_Transmit_DMA+0x86>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400cecc:	68fb      	ldr	r3, [r7, #12]
2400cece:	22ff      	movs	r2, #255	@ 0xff
2400ced0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
2400ced2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
2400ced6:	61fb      	str	r3, [r7, #28]
2400ced8:	e007      	b.n	2400ceea <HAL_I2C_Master_Seq_Transmit_DMA+0x96>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400ceda:	68fb      	ldr	r3, [r7, #12]
2400cedc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400cede:	b29a      	uxth	r2, r3
2400cee0:	68fb      	ldr	r3, [r7, #12]
2400cee2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = hi2c->XferOptions;
2400cee4:	68fb      	ldr	r3, [r7, #12]
2400cee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2400cee8:	61fb      	str	r3, [r7, #28]
    }

    if ((hi2c->XferSize > 0U) && ((XferOptions == I2C_FIRST_FRAME) || \
2400ceea:	68fb      	ldr	r3, [r7, #12]
2400ceec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400ceee:	2b00      	cmp	r3, #0
2400cef0:	d021      	beq.n	2400cf36 <HAL_I2C_Master_Seq_Transmit_DMA+0xe2>
2400cef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2400cef4:	2b00      	cmp	r3, #0
2400cef6:	d003      	beq.n	2400cf00 <HAL_I2C_Master_Seq_Transmit_DMA+0xac>
2400cef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2400cefa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
2400cefe:	d11a      	bne.n	2400cf36 <HAL_I2C_Master_Seq_Transmit_DMA+0xe2>
                                  (XferOptions == I2C_FIRST_AND_LAST_FRAME)))
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2400cf00:	68fb      	ldr	r3, [r7, #12]
2400cf02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2400cf04:	781a      	ldrb	r2, [r3, #0]
2400cf06:	68fb      	ldr	r3, [r7, #12]
2400cf08:	681b      	ldr	r3, [r3, #0]
2400cf0a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2400cf0c:	68fb      	ldr	r3, [r7, #12]
2400cf0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2400cf10:	1c5a      	adds	r2, r3, #1
2400cf12:	68fb      	ldr	r3, [r7, #12]
2400cf14:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
2400cf16:	68fb      	ldr	r3, [r7, #12]
2400cf18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400cf1a:	617b      	str	r3, [r7, #20]
      hi2c->XferCount--;
2400cf1c:	68fb      	ldr	r3, [r7, #12]
2400cf1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400cf20:	b29b      	uxth	r3, r3
2400cf22:	3b01      	subs	r3, #1
2400cf24:	b29a      	uxth	r2, r3
2400cf26:	68fb      	ldr	r3, [r7, #12]
2400cf28:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
2400cf2a:	68fb      	ldr	r3, [r7, #12]
2400cf2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400cf2e:	3b01      	subs	r3, #1
2400cf30:	b29a      	uxth	r2, r3
2400cf32:	68fb      	ldr	r3, [r7, #12]
2400cf34:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If transfer direction not change and there is no request to start another frame,
       do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && \
2400cf36:	68fb      	ldr	r3, [r7, #12]
2400cf38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2400cf3a:	2b11      	cmp	r3, #17
2400cf3c:	d10e      	bne.n	2400cf5c <HAL_I2C_Master_Seq_Transmit_DMA+0x108>
        (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
2400cf3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2400cf40:	2baa      	cmp	r3, #170	@ 0xaa
2400cf42:	d003      	beq.n	2400cf4c <HAL_I2C_Master_Seq_Transmit_DMA+0xf8>
2400cf44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2400cf46:	f5b3 4f2a 	cmp.w	r3, #43520	@ 0xaa00
2400cf4a:	d101      	bne.n	2400cf50 <HAL_I2C_Master_Seq_Transmit_DMA+0xfc>
2400cf4c:	2301      	movs	r3, #1
2400cf4e:	e000      	b.n	2400cf52 <HAL_I2C_Master_Seq_Transmit_DMA+0xfe>
2400cf50:	2300      	movs	r3, #0
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && \
2400cf52:	2b00      	cmp	r3, #0
2400cf54:	d102      	bne.n	2400cf5c <HAL_I2C_Master_Seq_Transmit_DMA+0x108>
    {
      xferrequest = I2C_NO_STARTSTOP;
2400cf56:	2300      	movs	r3, #0
2400cf58:	61bb      	str	r3, [r7, #24]
2400cf5a:	e00a      	b.n	2400cf72 <HAL_I2C_Master_Seq_Transmit_DMA+0x11e>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
2400cf5c:	68f8      	ldr	r0, [r7, #12]
2400cf5e:	f003 fbaf 	bl	240106c0 <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
2400cf62:	68fb      	ldr	r3, [r7, #12]
2400cf64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400cf66:	b29b      	uxth	r3, r3
2400cf68:	2bff      	cmp	r3, #255	@ 0xff
2400cf6a:	d802      	bhi.n	2400cf72 <HAL_I2C_Master_Seq_Transmit_DMA+0x11e>
      {
        xfermode = hi2c->XferOptions;
2400cf6c:	68fb      	ldr	r3, [r7, #12]
2400cf6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2400cf70:	61fb      	str	r3, [r7, #28]
      }
    }

    if (hi2c->XferSize > 0U)
2400cf72:	68fb      	ldr	r3, [r7, #12]
2400cf74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400cf76:	2b00      	cmp	r3, #0
2400cf78:	f000 8084 	beq.w	2400d084 <HAL_I2C_Master_Seq_Transmit_DMA+0x230>
    {
      if (hi2c->hdmatx != NULL)
2400cf7c:	68fb      	ldr	r3, [r7, #12]
2400cf7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400cf80:	2b00      	cmp	r3, #0
2400cf82:	d022      	beq.n	2400cfca <HAL_I2C_Master_Seq_Transmit_DMA+0x176>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
2400cf84:	68fb      	ldr	r3, [r7, #12]
2400cf86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400cf88:	4a4a      	ldr	r2, [pc, #296]	@ (2400d0b4 <HAL_I2C_Master_Seq_Transmit_DMA+0x260>)
2400cf8a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
2400cf8c:	68fb      	ldr	r3, [r7, #12]
2400cf8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400cf90:	4a49      	ldr	r2, [pc, #292]	@ (2400d0b8 <HAL_I2C_Master_Seq_Transmit_DMA+0x264>)
2400cf92:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
2400cf94:	68fb      	ldr	r3, [r7, #12]
2400cf96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400cf98:	2200      	movs	r2, #0
2400cf9a:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
2400cf9c:	68fb      	ldr	r3, [r7, #12]
2400cf9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400cfa0:	2200      	movs	r2, #0
2400cfa2:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
2400cfa4:	68fb      	ldr	r3, [r7, #12]
2400cfa6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
2400cfa8:	68fb      	ldr	r3, [r7, #12]
2400cfaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2400cfac:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
2400cfae:	68fb      	ldr	r3, [r7, #12]
2400cfb0:	681b      	ldr	r3, [r3, #0]
2400cfb2:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
2400cfb4:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
2400cfb6:	68fb      	ldr	r3, [r7, #12]
2400cfb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
2400cfba:	f7f7 fcbf 	bl	2400493c <HAL_DMA_Start_IT>
2400cfbe:	4603      	mov	r3, r0
2400cfc0:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
2400cfc2:	7cfb      	ldrb	r3, [r7, #19]
2400cfc4:	2b00      	cmp	r3, #0
2400cfc6:	d149      	bne.n	2400d05c <HAL_I2C_Master_Seq_Transmit_DMA+0x208>
2400cfc8:	e013      	b.n	2400cff2 <HAL_I2C_Master_Seq_Transmit_DMA+0x19e>
        hi2c->State     = HAL_I2C_STATE_READY;
2400cfca:	68fb      	ldr	r3, [r7, #12]
2400cfcc:	2220      	movs	r2, #32
2400cfce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2400cfd2:	68fb      	ldr	r3, [r7, #12]
2400cfd4:	2200      	movs	r2, #0
2400cfd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2400cfda:	68fb      	ldr	r3, [r7, #12]
2400cfdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2400cfde:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
2400cfe2:	68fb      	ldr	r3, [r7, #12]
2400cfe4:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
2400cfe6:	68fb      	ldr	r3, [r7, #12]
2400cfe8:	2200      	movs	r2, #0
2400cfea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
2400cfee:	2301      	movs	r3, #1
2400cff0:	e07b      	b.n	2400d0ea <HAL_I2C_Master_Seq_Transmit_DMA+0x296>
      {
        /* Send Slave Address and set NBYTES to write */
        if ((XferOptions == I2C_FIRST_FRAME) || (XferOptions == I2C_FIRST_AND_LAST_FRAME))
2400cff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2400cff4:	2b00      	cmp	r3, #0
2400cff6:	d003      	beq.n	2400d000 <HAL_I2C_Master_Seq_Transmit_DMA+0x1ac>
2400cff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2400cffa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
2400cffe:	d109      	bne.n	2400d014 <HAL_I2C_Master_Seq_Transmit_DMA+0x1c0>
        {
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, xfermode, xferrequest);
2400d000:	697b      	ldr	r3, [r7, #20]
2400d002:	b2da      	uxtb	r2, r3
2400d004:	8979      	ldrh	r1, [r7, #10]
2400d006:	69bb      	ldr	r3, [r7, #24]
2400d008:	9300      	str	r3, [sp, #0]
2400d00a:	69fb      	ldr	r3, [r7, #28]
2400d00c:	68f8      	ldr	r0, [r7, #12]
2400d00e:	f003 fa43 	bl	24010498 <I2C_TransferConfig>
2400d012:	e009      	b.n	2400d028 <HAL_I2C_Master_Seq_Transmit_DMA+0x1d4>
        }
        else
        {
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
2400d014:	68fb      	ldr	r3, [r7, #12]
2400d016:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400d018:	b2da      	uxtb	r2, r3
2400d01a:	8979      	ldrh	r1, [r7, #10]
2400d01c:	69bb      	ldr	r3, [r7, #24]
2400d01e:	9300      	str	r3, [sp, #0]
2400d020:	69fb      	ldr	r3, [r7, #28]
2400d022:	68f8      	ldr	r0, [r7, #12]
2400d024:	f003 fa38 	bl	24010498 <I2C_TransferConfig>
        }

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
2400d028:	68fb      	ldr	r3, [r7, #12]
2400d02a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400d02c:	b29a      	uxth	r2, r3
2400d02e:	68fb      	ldr	r3, [r7, #12]
2400d030:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400d032:	1ad3      	subs	r3, r2, r3
2400d034:	b29a      	uxth	r2, r3
2400d036:	68fb      	ldr	r3, [r7, #12]
2400d038:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400d03a:	68fb      	ldr	r3, [r7, #12]
2400d03c:	2200      	movs	r2, #0
2400d03e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
2400d042:	2110      	movs	r1, #16
2400d044:	68f8      	ldr	r0, [r7, #12]
2400d046:	f003 fa59 	bl	240104fc <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
2400d04a:	68fb      	ldr	r3, [r7, #12]
2400d04c:	681b      	ldr	r3, [r3, #0]
2400d04e:	681a      	ldr	r2, [r3, #0]
2400d050:	68fb      	ldr	r3, [r7, #12]
2400d052:	681b      	ldr	r3, [r3, #0]
2400d054:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
2400d058:	601a      	str	r2, [r3, #0]
2400d05a:	e043      	b.n	2400d0e4 <HAL_I2C_Master_Seq_Transmit_DMA+0x290>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
2400d05c:	68fb      	ldr	r3, [r7, #12]
2400d05e:	2220      	movs	r2, #32
2400d060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2400d064:	68fb      	ldr	r3, [r7, #12]
2400d066:	2200      	movs	r2, #0
2400d068:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2400d06c:	68fb      	ldr	r3, [r7, #12]
2400d06e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2400d070:	f043 0210 	orr.w	r2, r3, #16
2400d074:	68fb      	ldr	r3, [r7, #12]
2400d076:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400d078:	68fb      	ldr	r3, [r7, #12]
2400d07a:	2200      	movs	r2, #0
2400d07c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
2400d080:	2301      	movs	r3, #1
2400d082:	e032      	b.n	2400d0ea <HAL_I2C_Master_Seq_Transmit_DMA+0x296>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
2400d084:	68fb      	ldr	r3, [r7, #12]
2400d086:	4a0d      	ldr	r2, [pc, #52]	@ (2400d0bc <HAL_I2C_Master_Seq_Transmit_DMA+0x268>)
2400d088:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      if ((XferOptions == I2C_FIRST_FRAME) || (XferOptions == I2C_FIRST_AND_LAST_FRAME))
2400d08a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2400d08c:	2b00      	cmp	r3, #0
2400d08e:	d003      	beq.n	2400d098 <HAL_I2C_Master_Seq_Transmit_DMA+0x244>
2400d090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2400d092:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
2400d096:	d113      	bne.n	2400d0c0 <HAL_I2C_Master_Seq_Transmit_DMA+0x26c>
      {
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, xfermode, xferrequest);
2400d098:	697b      	ldr	r3, [r7, #20]
2400d09a:	b2da      	uxtb	r2, r3
2400d09c:	8979      	ldrh	r1, [r7, #10]
2400d09e:	69bb      	ldr	r3, [r7, #24]
2400d0a0:	9300      	str	r3, [sp, #0]
2400d0a2:	69fb      	ldr	r3, [r7, #28]
2400d0a4:	68f8      	ldr	r0, [r7, #12]
2400d0a6:	f003 f9f7 	bl	24010498 <I2C_TransferConfig>
2400d0aa:	e013      	b.n	2400d0d4 <HAL_I2C_Master_Seq_Transmit_DMA+0x280>
2400d0ac:	80002000 	.word	0x80002000
2400d0b0:	2400e5bf 	.word	0x2400e5bf
2400d0b4:	2400fa77 	.word	0x2400fa77
2400d0b8:	2400fd49 	.word	0x2400fd49
2400d0bc:	2400df33 	.word	0x2400df33
      }
      else
      {
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
2400d0c0:	68fb      	ldr	r3, [r7, #12]
2400d0c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400d0c4:	b2da      	uxtb	r2, r3
2400d0c6:	8979      	ldrh	r1, [r7, #10]
2400d0c8:	69bb      	ldr	r3, [r7, #24]
2400d0ca:	9300      	str	r3, [sp, #0]
2400d0cc:	69fb      	ldr	r3, [r7, #28]
2400d0ce:	68f8      	ldr	r0, [r7, #12]
2400d0d0:	f003 f9e2 	bl	24010498 <I2C_TransferConfig>
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400d0d4:	68fb      	ldr	r3, [r7, #12]
2400d0d6:	2200      	movs	r2, #0
2400d0d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
2400d0dc:	2101      	movs	r1, #1
2400d0de:	68f8      	ldr	r0, [r7, #12]
2400d0e0:	f003 fa0c 	bl	240104fc <I2C_Enable_IRQ>
    }

    return HAL_OK;
2400d0e4:	2300      	movs	r3, #0
2400d0e6:	e000      	b.n	2400d0ea <HAL_I2C_Master_Seq_Transmit_DMA+0x296>
  }
  else
  {
    return HAL_BUSY;
2400d0e8:	2302      	movs	r3, #2
  }
}
2400d0ea:	4618      	mov	r0, r3
2400d0ec:	3720      	adds	r7, #32
2400d0ee:	46bd      	mov	sp, r7
2400d0f0:	bd80      	pop	{r7, pc}
2400d0f2:	bf00      	nop

2400d0f4 <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                uint16_t Size, uint32_t XferOptions)
{
2400d0f4:	b580      	push	{r7, lr}
2400d0f6:	b088      	sub	sp, #32
2400d0f8:	af02      	add	r7, sp, #8
2400d0fa:	60f8      	str	r0, [r7, #12]
2400d0fc:	607a      	str	r2, [r7, #4]
2400d0fe:	461a      	mov	r2, r3
2400d100:	460b      	mov	r3, r1
2400d102:	817b      	strh	r3, [r7, #10]
2400d104:	4613      	mov	r3, r2
2400d106:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_READ;
2400d108:	4b3a      	ldr	r3, [pc, #232]	@ (2400d1f4 <HAL_I2C_Master_Seq_Receive_IT+0x100>)
2400d10a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400d10c:	68fb      	ldr	r3, [r7, #12]
2400d10e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400d112:	b2db      	uxtb	r3, r3
2400d114:	2b20      	cmp	r3, #32
2400d116:	d167      	bne.n	2400d1e8 <HAL_I2C_Master_Seq_Receive_IT+0xf4>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400d118:	68fb      	ldr	r3, [r7, #12]
2400d11a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2400d11e:	2b01      	cmp	r3, #1
2400d120:	d101      	bne.n	2400d126 <HAL_I2C_Master_Seq_Receive_IT+0x32>
2400d122:	2302      	movs	r3, #2
2400d124:	e061      	b.n	2400d1ea <HAL_I2C_Master_Seq_Receive_IT+0xf6>
2400d126:	68fb      	ldr	r3, [r7, #12]
2400d128:	2201      	movs	r2, #1
2400d12a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
2400d12e:	68fb      	ldr	r3, [r7, #12]
2400d130:	2222      	movs	r2, #34	@ 0x22
2400d132:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
2400d136:	68fb      	ldr	r3, [r7, #12]
2400d138:	2210      	movs	r2, #16
2400d13a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400d13e:	68fb      	ldr	r3, [r7, #12]
2400d140:	2200      	movs	r2, #0
2400d142:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400d144:	68fb      	ldr	r3, [r7, #12]
2400d146:	687a      	ldr	r2, [r7, #4]
2400d148:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
2400d14a:	68fb      	ldr	r3, [r7, #12]
2400d14c:	893a      	ldrh	r2, [r7, #8]
2400d14e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = XferOptions;
2400d150:	68fb      	ldr	r3, [r7, #12]
2400d152:	6a3a      	ldr	r2, [r7, #32]
2400d154:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
2400d156:	68fb      	ldr	r3, [r7, #12]
2400d158:	4a27      	ldr	r2, [pc, #156]	@ (2400d1f8 <HAL_I2C_Master_Seq_Receive_IT+0x104>)
2400d15a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400d15c:	68fb      	ldr	r3, [r7, #12]
2400d15e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400d160:	b29b      	uxth	r3, r3
2400d162:	2bff      	cmp	r3, #255	@ 0xff
2400d164:	d906      	bls.n	2400d174 <HAL_I2C_Master_Seq_Receive_IT+0x80>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400d166:	68fb      	ldr	r3, [r7, #12]
2400d168:	22ff      	movs	r2, #255	@ 0xff
2400d16a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
2400d16c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
2400d170:	617b      	str	r3, [r7, #20]
2400d172:	e007      	b.n	2400d184 <HAL_I2C_Master_Seq_Receive_IT+0x90>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400d174:	68fb      	ldr	r3, [r7, #12]
2400d176:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400d178:	b29a      	uxth	r2, r3
2400d17a:	68fb      	ldr	r3, [r7, #12]
2400d17c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = hi2c->XferOptions;
2400d17e:	68fb      	ldr	r3, [r7, #12]
2400d180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2400d182:	617b      	str	r3, [r7, #20]
    }

    /* If transfer direction not change and there is no request to start another frame,
       do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && \
2400d184:	68fb      	ldr	r3, [r7, #12]
2400d186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2400d188:	2b12      	cmp	r3, #18
2400d18a:	d10e      	bne.n	2400d1aa <HAL_I2C_Master_Seq_Receive_IT+0xb6>
        (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
2400d18c:	6a3b      	ldr	r3, [r7, #32]
2400d18e:	2baa      	cmp	r3, #170	@ 0xaa
2400d190:	d003      	beq.n	2400d19a <HAL_I2C_Master_Seq_Receive_IT+0xa6>
2400d192:	6a3b      	ldr	r3, [r7, #32]
2400d194:	f5b3 4f2a 	cmp.w	r3, #43520	@ 0xaa00
2400d198:	d101      	bne.n	2400d19e <HAL_I2C_Master_Seq_Receive_IT+0xaa>
2400d19a:	2301      	movs	r3, #1
2400d19c:	e000      	b.n	2400d1a0 <HAL_I2C_Master_Seq_Receive_IT+0xac>
2400d19e:	2300      	movs	r3, #0
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && \
2400d1a0:	2b00      	cmp	r3, #0
2400d1a2:	d102      	bne.n	2400d1aa <HAL_I2C_Master_Seq_Receive_IT+0xb6>
    {
      xferrequest = I2C_NO_STARTSTOP;
2400d1a4:	2300      	movs	r3, #0
2400d1a6:	613b      	str	r3, [r7, #16]
2400d1a8:	e00a      	b.n	2400d1c0 <HAL_I2C_Master_Seq_Receive_IT+0xcc>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
2400d1aa:	68f8      	ldr	r0, [r7, #12]
2400d1ac:	f003 fa88 	bl	240106c0 <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
2400d1b0:	68fb      	ldr	r3, [r7, #12]
2400d1b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400d1b4:	b29b      	uxth	r3, r3
2400d1b6:	2bff      	cmp	r3, #255	@ 0xff
2400d1b8:	d802      	bhi.n	2400d1c0 <HAL_I2C_Master_Seq_Receive_IT+0xcc>
      {
        xfermode = hi2c->XferOptions;
2400d1ba:	68fb      	ldr	r3, [r7, #12]
2400d1bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2400d1be:	617b      	str	r3, [r7, #20]
      }
    }

    /* Send Slave Address and set NBYTES to read */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
2400d1c0:	68fb      	ldr	r3, [r7, #12]
2400d1c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400d1c4:	b2da      	uxtb	r2, r3
2400d1c6:	8979      	ldrh	r1, [r7, #10]
2400d1c8:	693b      	ldr	r3, [r7, #16]
2400d1ca:	9300      	str	r3, [sp, #0]
2400d1cc:	697b      	ldr	r3, [r7, #20]
2400d1ce:	68f8      	ldr	r0, [r7, #12]
2400d1d0:	f003 f962 	bl	24010498 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400d1d4:	68fb      	ldr	r3, [r7, #12]
2400d1d6:	2200      	movs	r2, #0
2400d1d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
2400d1dc:	2102      	movs	r1, #2
2400d1de:	68f8      	ldr	r0, [r7, #12]
2400d1e0:	f003 f98c 	bl	240104fc <I2C_Enable_IRQ>

    return HAL_OK;
2400d1e4:	2300      	movs	r3, #0
2400d1e6:	e000      	b.n	2400d1ea <HAL_I2C_Master_Seq_Receive_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
2400d1e8:	2302      	movs	r3, #2
  }
}
2400d1ea:	4618      	mov	r0, r3
2400d1ec:	3718      	adds	r7, #24
2400d1ee:	46bd      	mov	sp, r7
2400d1f0:	bd80      	pop	{r7, pc}
2400d1f2:	bf00      	nop
2400d1f4:	80002400 	.word	0x80002400
2400d1f8:	2400df33 	.word	0x2400df33

2400d1fc <HAL_I2C_Master_Seq_Receive_DMA>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                                 uint16_t Size, uint32_t XferOptions)
{
2400d1fc:	b580      	push	{r7, lr}
2400d1fe:	b08a      	sub	sp, #40	@ 0x28
2400d200:	af02      	add	r7, sp, #8
2400d202:	60f8      	str	r0, [r7, #12]
2400d204:	607a      	str	r2, [r7, #4]
2400d206:	461a      	mov	r2, r3
2400d208:	460b      	mov	r3, r1
2400d20a:	817b      	strh	r3, [r7, #10]
2400d20c:	4613      	mov	r3, r2
2400d20e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  uint32_t xferrequest = I2C_GENERATE_START_READ;
2400d210:	4b77      	ldr	r3, [pc, #476]	@ (2400d3f0 <HAL_I2C_Master_Seq_Receive_DMA+0x1f4>)
2400d212:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400d214:	68fb      	ldr	r3, [r7, #12]
2400d216:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400d21a:	b2db      	uxtb	r3, r3
2400d21c:	2b20      	cmp	r3, #32
2400d21e:	f040 80e1 	bne.w	2400d3e4 <HAL_I2C_Master_Seq_Receive_DMA+0x1e8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400d222:	68fb      	ldr	r3, [r7, #12]
2400d224:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2400d228:	2b01      	cmp	r3, #1
2400d22a:	d101      	bne.n	2400d230 <HAL_I2C_Master_Seq_Receive_DMA+0x34>
2400d22c:	2302      	movs	r3, #2
2400d22e:	e0da      	b.n	2400d3e6 <HAL_I2C_Master_Seq_Receive_DMA+0x1ea>
2400d230:	68fb      	ldr	r3, [r7, #12]
2400d232:	2201      	movs	r2, #1
2400d234:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
2400d238:	68fb      	ldr	r3, [r7, #12]
2400d23a:	2222      	movs	r2, #34	@ 0x22
2400d23c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
2400d240:	68fb      	ldr	r3, [r7, #12]
2400d242:	2210      	movs	r2, #16
2400d244:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400d248:	68fb      	ldr	r3, [r7, #12]
2400d24a:	2200      	movs	r2, #0
2400d24c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400d24e:	68fb      	ldr	r3, [r7, #12]
2400d250:	687a      	ldr	r2, [r7, #4]
2400d252:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
2400d254:	68fb      	ldr	r3, [r7, #12]
2400d256:	893a      	ldrh	r2, [r7, #8]
2400d258:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = XferOptions;
2400d25a:	68fb      	ldr	r3, [r7, #12]
2400d25c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
2400d25e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
2400d260:	68fb      	ldr	r3, [r7, #12]
2400d262:	4a64      	ldr	r2, [pc, #400]	@ (2400d3f4 <HAL_I2C_Master_Seq_Receive_DMA+0x1f8>)
2400d264:	635a      	str	r2, [r3, #52]	@ 0x34

    /* If hi2c->XferCount > MAX_NBYTE_SIZE, use reload mode */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400d266:	68fb      	ldr	r3, [r7, #12]
2400d268:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400d26a:	b29b      	uxth	r3, r3
2400d26c:	2bff      	cmp	r3, #255	@ 0xff
2400d26e:	d906      	bls.n	2400d27e <HAL_I2C_Master_Seq_Receive_DMA+0x82>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400d270:	68fb      	ldr	r3, [r7, #12]
2400d272:	22ff      	movs	r2, #255	@ 0xff
2400d274:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
2400d276:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
2400d27a:	61fb      	str	r3, [r7, #28]
2400d27c:	e007      	b.n	2400d28e <HAL_I2C_Master_Seq_Receive_DMA+0x92>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400d27e:	68fb      	ldr	r3, [r7, #12]
2400d280:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400d282:	b29a      	uxth	r2, r3
2400d284:	68fb      	ldr	r3, [r7, #12]
2400d286:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = hi2c->XferOptions;
2400d288:	68fb      	ldr	r3, [r7, #12]
2400d28a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2400d28c:	61fb      	str	r3, [r7, #28]
    }

    /* If transfer direction not change and there is no request to start another frame,
       do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && \
2400d28e:	68fb      	ldr	r3, [r7, #12]
2400d290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2400d292:	2b12      	cmp	r3, #18
2400d294:	d10e      	bne.n	2400d2b4 <HAL_I2C_Master_Seq_Receive_DMA+0xb8>
        (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
2400d296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2400d298:	2baa      	cmp	r3, #170	@ 0xaa
2400d29a:	d003      	beq.n	2400d2a4 <HAL_I2C_Master_Seq_Receive_DMA+0xa8>
2400d29c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2400d29e:	f5b3 4f2a 	cmp.w	r3, #43520	@ 0xaa00
2400d2a2:	d101      	bne.n	2400d2a8 <HAL_I2C_Master_Seq_Receive_DMA+0xac>
2400d2a4:	2301      	movs	r3, #1
2400d2a6:	e000      	b.n	2400d2aa <HAL_I2C_Master_Seq_Receive_DMA+0xae>
2400d2a8:	2300      	movs	r3, #0
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && \
2400d2aa:	2b00      	cmp	r3, #0
2400d2ac:	d102      	bne.n	2400d2b4 <HAL_I2C_Master_Seq_Receive_DMA+0xb8>
    {
      xferrequest = I2C_NO_STARTSTOP;
2400d2ae:	2300      	movs	r3, #0
2400d2b0:	61bb      	str	r3, [r7, #24]
2400d2b2:	e00a      	b.n	2400d2ca <HAL_I2C_Master_Seq_Receive_DMA+0xce>
    }
    else
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
2400d2b4:	68f8      	ldr	r0, [r7, #12]
2400d2b6:	f003 fa03 	bl	240106c0 <I2C_ConvertOtherXferOptions>

      /* Update xfermode accordingly if no reload is necessary */
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
2400d2ba:	68fb      	ldr	r3, [r7, #12]
2400d2bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400d2be:	b29b      	uxth	r3, r3
2400d2c0:	2bff      	cmp	r3, #255	@ 0xff
2400d2c2:	d802      	bhi.n	2400d2ca <HAL_I2C_Master_Seq_Receive_DMA+0xce>
      {
        xfermode = hi2c->XferOptions;
2400d2c4:	68fb      	ldr	r3, [r7, #12]
2400d2c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2400d2c8:	61fb      	str	r3, [r7, #28]
      }
    }

    if (hi2c->XferSize > 0U)
2400d2ca:	68fb      	ldr	r3, [r7, #12]
2400d2cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400d2ce:	2b00      	cmp	r3, #0
2400d2d0:	d070      	beq.n	2400d3b4 <HAL_I2C_Master_Seq_Receive_DMA+0x1b8>
    {
      if (hi2c->hdmarx != NULL)
2400d2d2:	68fb      	ldr	r3, [r7, #12]
2400d2d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400d2d6:	2b00      	cmp	r3, #0
2400d2d8:	d020      	beq.n	2400d31c <HAL_I2C_Master_Seq_Receive_DMA+0x120>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
2400d2da:	68fb      	ldr	r3, [r7, #12]
2400d2dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400d2de:	4a46      	ldr	r2, [pc, #280]	@ (2400d3f8 <HAL_I2C_Master_Seq_Receive_DMA+0x1fc>)
2400d2e0:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
2400d2e2:	68fb      	ldr	r3, [r7, #12]
2400d2e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400d2e6:	4a45      	ldr	r2, [pc, #276]	@ (2400d3fc <HAL_I2C_Master_Seq_Receive_DMA+0x200>)
2400d2e8:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
2400d2ea:	68fb      	ldr	r3, [r7, #12]
2400d2ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400d2ee:	2200      	movs	r2, #0
2400d2f0:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
2400d2f2:	68fb      	ldr	r3, [r7, #12]
2400d2f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400d2f6:	2200      	movs	r2, #0
2400d2f8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
2400d2fa:	68fb      	ldr	r3, [r7, #12]
2400d2fc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
2400d2fe:	68fb      	ldr	r3, [r7, #12]
2400d300:	681b      	ldr	r3, [r3, #0]
2400d302:	3324      	adds	r3, #36	@ 0x24
2400d304:	4619      	mov	r1, r3
2400d306:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
2400d308:	68fb      	ldr	r3, [r7, #12]
2400d30a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
2400d30c:	f7f7 fb16 	bl	2400493c <HAL_DMA_Start_IT>
2400d310:	4603      	mov	r3, r0
2400d312:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
2400d314:	7dfb      	ldrb	r3, [r7, #23]
2400d316:	2b00      	cmp	r3, #0
2400d318:	d138      	bne.n	2400d38c <HAL_I2C_Master_Seq_Receive_DMA+0x190>
2400d31a:	e013      	b.n	2400d344 <HAL_I2C_Master_Seq_Receive_DMA+0x148>
        hi2c->State     = HAL_I2C_STATE_READY;
2400d31c:	68fb      	ldr	r3, [r7, #12]
2400d31e:	2220      	movs	r2, #32
2400d320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2400d324:	68fb      	ldr	r3, [r7, #12]
2400d326:	2200      	movs	r2, #0
2400d328:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2400d32c:	68fb      	ldr	r3, [r7, #12]
2400d32e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2400d330:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
2400d334:	68fb      	ldr	r3, [r7, #12]
2400d336:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
2400d338:	68fb      	ldr	r3, [r7, #12]
2400d33a:	2200      	movs	r2, #0
2400d33c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
2400d340:	2301      	movs	r3, #1
2400d342:	e050      	b.n	2400d3e6 <HAL_I2C_Master_Seq_Receive_DMA+0x1ea>
      {
        /* Send Slave Address and set NBYTES to read */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
2400d344:	68fb      	ldr	r3, [r7, #12]
2400d346:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400d348:	b2da      	uxtb	r2, r3
2400d34a:	8979      	ldrh	r1, [r7, #10]
2400d34c:	69bb      	ldr	r3, [r7, #24]
2400d34e:	9300      	str	r3, [sp, #0]
2400d350:	69fb      	ldr	r3, [r7, #28]
2400d352:	68f8      	ldr	r0, [r7, #12]
2400d354:	f003 f8a0 	bl	24010498 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
2400d358:	68fb      	ldr	r3, [r7, #12]
2400d35a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400d35c:	b29a      	uxth	r2, r3
2400d35e:	68fb      	ldr	r3, [r7, #12]
2400d360:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400d362:	1ad3      	subs	r3, r2, r3
2400d364:	b29a      	uxth	r2, r3
2400d366:	68fb      	ldr	r3, [r7, #12]
2400d368:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400d36a:	68fb      	ldr	r3, [r7, #12]
2400d36c:	2200      	movs	r2, #0
2400d36e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
2400d372:	2110      	movs	r1, #16
2400d374:	68f8      	ldr	r0, [r7, #12]
2400d376:	f003 f8c1 	bl	240104fc <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
2400d37a:	68fb      	ldr	r3, [r7, #12]
2400d37c:	681b      	ldr	r3, [r3, #0]
2400d37e:	681a      	ldr	r2, [r3, #0]
2400d380:	68fb      	ldr	r3, [r7, #12]
2400d382:	681b      	ldr	r3, [r3, #0]
2400d384:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
2400d388:	601a      	str	r2, [r3, #0]
2400d38a:	e029      	b.n	2400d3e0 <HAL_I2C_Master_Seq_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
2400d38c:	68fb      	ldr	r3, [r7, #12]
2400d38e:	2220      	movs	r2, #32
2400d390:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
2400d394:	68fb      	ldr	r3, [r7, #12]
2400d396:	2200      	movs	r2, #0
2400d398:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2400d39c:	68fb      	ldr	r3, [r7, #12]
2400d39e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2400d3a0:	f043 0210 	orr.w	r2, r3, #16
2400d3a4:	68fb      	ldr	r3, [r7, #12]
2400d3a6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2400d3a8:	68fb      	ldr	r3, [r7, #12]
2400d3aa:	2200      	movs	r2, #0
2400d3ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
2400d3b0:	2301      	movs	r3, #1
2400d3b2:	e018      	b.n	2400d3e6 <HAL_I2C_Master_Seq_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
2400d3b4:	68fb      	ldr	r3, [r7, #12]
2400d3b6:	4a12      	ldr	r2, [pc, #72]	@ (2400d400 <HAL_I2C_Master_Seq_Receive_DMA+0x204>)
2400d3b8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
2400d3ba:	68fb      	ldr	r3, [r7, #12]
2400d3bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400d3be:	b2da      	uxtb	r2, r3
2400d3c0:	8979      	ldrh	r1, [r7, #10]
2400d3c2:	4b0b      	ldr	r3, [pc, #44]	@ (2400d3f0 <HAL_I2C_Master_Seq_Receive_DMA+0x1f4>)
2400d3c4:	9300      	str	r3, [sp, #0]
2400d3c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
2400d3ca:	68f8      	ldr	r0, [r7, #12]
2400d3cc:	f003 f864 	bl	24010498 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400d3d0:	68fb      	ldr	r3, [r7, #12]
2400d3d2:	2200      	movs	r2, #0
2400d3d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
2400d3d8:	2102      	movs	r1, #2
2400d3da:	68f8      	ldr	r0, [r7, #12]
2400d3dc:	f003 f88e 	bl	240104fc <I2C_Enable_IRQ>
    }

    return HAL_OK;
2400d3e0:	2300      	movs	r3, #0
2400d3e2:	e000      	b.n	2400d3e6 <HAL_I2C_Master_Seq_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
2400d3e4:	2302      	movs	r3, #2
  }
}
2400d3e6:	4618      	mov	r0, r3
2400d3e8:	3720      	adds	r7, #32
2400d3ea:	46bd      	mov	sp, r7
2400d3ec:	bd80      	pop	{r7, pc}
2400d3ee:	bf00      	nop
2400d3f0:	80002400 	.word	0x80002400
2400d3f4:	2400e5bf 	.word	0x2400e5bf
2400d3f8:	2400fb4d 	.word	0x2400fb4d
2400d3fc:	2400fd49 	.word	0x2400fd49
2400d400:	2400df33 	.word	0x2400df33

2400d404 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
2400d404:	b580      	push	{r7, lr}
2400d406:	b086      	sub	sp, #24
2400d408:	af00      	add	r7, sp, #0
2400d40a:	60f8      	str	r0, [r7, #12]
2400d40c:	60b9      	str	r1, [r7, #8]
2400d40e:	603b      	str	r3, [r7, #0]
2400d410:	4613      	mov	r3, r2
2400d412:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
2400d414:	68fb      	ldr	r3, [r7, #12]
2400d416:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400d41a:	b2db      	uxtb	r3, r3
2400d41c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
2400d420:	2b28      	cmp	r3, #40	@ 0x28
2400d422:	f040 8098 	bne.w	2400d556 <HAL_I2C_Slave_Seq_Transmit_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
2400d426:	68bb      	ldr	r3, [r7, #8]
2400d428:	2b00      	cmp	r3, #0
2400d42a:	d002      	beq.n	2400d432 <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
2400d42c:	88fb      	ldrh	r3, [r7, #6]
2400d42e:	2b00      	cmp	r3, #0
2400d430:	d105      	bne.n	2400d43e <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400d432:	68fb      	ldr	r3, [r7, #12]
2400d434:	f44f 7200 	mov.w	r2, #512	@ 0x200
2400d438:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
2400d43a:	2301      	movs	r3, #1
2400d43c:	e08c      	b.n	2400d558 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
2400d43e:	f248 0101 	movw	r1, #32769	@ 0x8001
2400d442:	68f8      	ldr	r0, [r7, #12]
2400d444:	f003 f8de 	bl	24010604 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400d448:	68fb      	ldr	r3, [r7, #12]
2400d44a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2400d44e:	2b01      	cmp	r3, #1
2400d450:	d101      	bne.n	2400d456 <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
2400d452:	2302      	movs	r3, #2
2400d454:	e080      	b.n	2400d558 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
2400d456:	68fb      	ldr	r3, [r7, #12]
2400d458:	2201      	movs	r2, #1
2400d45a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
2400d45e:	68fb      	ldr	r3, [r7, #12]
2400d460:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400d464:	b2db      	uxtb	r3, r3
2400d466:	2b2a      	cmp	r3, #42	@ 0x2a
2400d468:	d12a      	bne.n	2400d4c0 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
2400d46a:	2102      	movs	r1, #2
2400d46c:	68f8      	ldr	r0, [r7, #12]
2400d46e:	f003 f8c9 	bl	24010604 <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
2400d472:	68fb      	ldr	r3, [r7, #12]
2400d474:	681b      	ldr	r3, [r3, #0]
2400d476:	681b      	ldr	r3, [r3, #0]
2400d478:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
2400d47c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
2400d480:	d11e      	bne.n	2400d4c0 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2400d482:	68fb      	ldr	r3, [r7, #12]
2400d484:	681b      	ldr	r3, [r3, #0]
2400d486:	681a      	ldr	r2, [r3, #0]
2400d488:	68fb      	ldr	r3, [r7, #12]
2400d48a:	681b      	ldr	r3, [r3, #0]
2400d48c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
2400d490:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
2400d492:	68fb      	ldr	r3, [r7, #12]
2400d494:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400d496:	2b00      	cmp	r3, #0
2400d498:	d012      	beq.n	2400d4c0 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
2400d49a:	68fb      	ldr	r3, [r7, #12]
2400d49c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400d49e:	4a30      	ldr	r2, [pc, #192]	@ (2400d560 <HAL_I2C_Slave_Seq_Transmit_IT+0x15c>)
2400d4a0:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
2400d4a2:	68fb      	ldr	r3, [r7, #12]
2400d4a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400d4a6:	4618      	mov	r0, r3
2400d4a8:	f7f7 ffd0 	bl	2400544c <HAL_DMA_Abort_IT>
2400d4ac:	4603      	mov	r3, r0
2400d4ae:	2b00      	cmp	r3, #0
2400d4b0:	d006      	beq.n	2400d4c0 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
2400d4b2:	68fb      	ldr	r3, [r7, #12]
2400d4b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400d4b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2400d4b8:	68fa      	ldr	r2, [r7, #12]
2400d4ba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
2400d4bc:	4610      	mov	r0, r2
2400d4be:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
2400d4c0:	68fb      	ldr	r3, [r7, #12]
2400d4c2:	2229      	movs	r2, #41	@ 0x29
2400d4c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
2400d4c8:	68fb      	ldr	r3, [r7, #12]
2400d4ca:	2220      	movs	r2, #32
2400d4cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400d4d0:	68fb      	ldr	r3, [r7, #12]
2400d4d2:	2200      	movs	r2, #0
2400d4d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2400d4d6:	68fb      	ldr	r3, [r7, #12]
2400d4d8:	681b      	ldr	r3, [r3, #0]
2400d4da:	685a      	ldr	r2, [r3, #4]
2400d4dc:	68fb      	ldr	r3, [r7, #12]
2400d4de:	681b      	ldr	r3, [r3, #0]
2400d4e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
2400d4e4:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400d4e6:	68fb      	ldr	r3, [r7, #12]
2400d4e8:	68ba      	ldr	r2, [r7, #8]
2400d4ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
2400d4ec:	68fb      	ldr	r3, [r7, #12]
2400d4ee:	88fa      	ldrh	r2, [r7, #6]
2400d4f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
2400d4f2:	68fb      	ldr	r3, [r7, #12]
2400d4f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400d4f6:	b29a      	uxth	r2, r3
2400d4f8:	68fb      	ldr	r3, [r7, #12]
2400d4fa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
2400d4fc:	68fb      	ldr	r3, [r7, #12]
2400d4fe:	683a      	ldr	r2, [r7, #0]
2400d500:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
2400d502:	68fb      	ldr	r3, [r7, #12]
2400d504:	4a17      	ldr	r2, [pc, #92]	@ (2400d564 <HAL_I2C_Slave_Seq_Transmit_IT+0x160>)
2400d506:	635a      	str	r2, [r3, #52]	@ 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
2400d508:	68fb      	ldr	r3, [r7, #12]
2400d50a:	681b      	ldr	r3, [r3, #0]
2400d50c:	699b      	ldr	r3, [r3, #24]
2400d50e:	f003 0308 	and.w	r3, r3, #8
2400d512:	2b08      	cmp	r3, #8
2400d514:	bf0c      	ite	eq
2400d516:	2301      	moveq	r3, #1
2400d518:	2300      	movne	r3, #0
2400d51a:	b2db      	uxtb	r3, r3
2400d51c:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
2400d51e:	68fb      	ldr	r3, [r7, #12]
2400d520:	681b      	ldr	r3, [r3, #0]
2400d522:	699b      	ldr	r3, [r3, #24]
2400d524:	0c1b      	lsrs	r3, r3, #16
2400d526:	b2db      	uxtb	r3, r3
2400d528:	f003 0301 	and.w	r3, r3, #1
2400d52c:	b2db      	uxtb	r3, r3
2400d52e:	2b01      	cmp	r3, #1
2400d530:	d106      	bne.n	2400d540 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
2400d532:	7dfb      	ldrb	r3, [r7, #23]
2400d534:	2b00      	cmp	r3, #0
2400d536:	d003      	beq.n	2400d540 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2400d538:	68fb      	ldr	r3, [r7, #12]
2400d53a:	681b      	ldr	r3, [r3, #0]
2400d53c:	2208      	movs	r2, #8
2400d53e:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400d540:	68fb      	ldr	r3, [r7, #12]
2400d542:	2200      	movs	r2, #0
2400d544:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
2400d548:	f248 0101 	movw	r1, #32769	@ 0x8001
2400d54c:	68f8      	ldr	r0, [r7, #12]
2400d54e:	f002 ffd5 	bl	240104fc <I2C_Enable_IRQ>

    return HAL_OK;
2400d552:	2300      	movs	r3, #0
2400d554:	e000      	b.n	2400d558 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
2400d556:	2301      	movs	r3, #1
  }
}
2400d558:	4618      	mov	r0, r3
2400d55a:	3718      	adds	r7, #24
2400d55c:	46bd      	mov	sp, r7
2400d55e:	bd80      	pop	{r7, pc}
2400d560:	2400ffbd 	.word	0x2400ffbd
2400d564:	2400e3cd 	.word	0x2400e3cd

2400d568 <HAL_I2C_Slave_Seq_Transmit_DMA>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                 uint32_t XferOptions)
{
2400d568:	b580      	push	{r7, lr}
2400d56a:	b086      	sub	sp, #24
2400d56c:	af00      	add	r7, sp, #0
2400d56e:	60f8      	str	r0, [r7, #12]
2400d570:	60b9      	str	r1, [r7, #8]
2400d572:	603b      	str	r3, [r7, #0]
2400d574:	4613      	mov	r3, r2
2400d576:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
2400d578:	68fb      	ldr	r3, [r7, #12]
2400d57a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400d57e:	b2db      	uxtb	r3, r3
2400d580:	f003 0328 	and.w	r3, r3, #40	@ 0x28
2400d584:	2b28      	cmp	r3, #40	@ 0x28
2400d586:	f040 8128 	bne.w	2400d7da <HAL_I2C_Slave_Seq_Transmit_DMA+0x272>
  {
    if ((pData == NULL) || (Size == 0U))
2400d58a:	68bb      	ldr	r3, [r7, #8]
2400d58c:	2b00      	cmp	r3, #0
2400d58e:	d002      	beq.n	2400d596 <HAL_I2C_Slave_Seq_Transmit_DMA+0x2e>
2400d590:	88fb      	ldrh	r3, [r7, #6]
2400d592:	2b00      	cmp	r3, #0
2400d594:	d105      	bne.n	2400d5a2 <HAL_I2C_Slave_Seq_Transmit_DMA+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400d596:	68fb      	ldr	r3, [r7, #12]
2400d598:	f44f 7200 	mov.w	r2, #512	@ 0x200
2400d59c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
2400d59e:	2301      	movs	r3, #1
2400d5a0:	e11c      	b.n	2400d7dc <HAL_I2C_Slave_Seq_Transmit_DMA+0x274>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400d5a2:	68fb      	ldr	r3, [r7, #12]
2400d5a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2400d5a8:	2b01      	cmp	r3, #1
2400d5aa:	d101      	bne.n	2400d5b0 <HAL_I2C_Slave_Seq_Transmit_DMA+0x48>
2400d5ac:	2302      	movs	r3, #2
2400d5ae:	e115      	b.n	2400d7dc <HAL_I2C_Slave_Seq_Transmit_DMA+0x274>
2400d5b0:	68fb      	ldr	r3, [r7, #12]
2400d5b2:	2201      	movs	r2, #1
2400d5b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
2400d5b8:	f248 0101 	movw	r1, #32769	@ 0x8001
2400d5bc:	68f8      	ldr	r0, [r7, #12]
2400d5be:	f003 f821 	bl	24010604 <I2C_Disable_IRQ>

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
2400d5c2:	68fb      	ldr	r3, [r7, #12]
2400d5c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400d5c8:	b2db      	uxtb	r3, r3
2400d5ca:	2b2a      	cmp	r3, #42	@ 0x2a
2400d5cc:	d12b      	bne.n	2400d626 <HAL_I2C_Slave_Seq_Transmit_DMA+0xbe>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
2400d5ce:	2102      	movs	r1, #2
2400d5d0:	68f8      	ldr	r0, [r7, #12]
2400d5d2:	f003 f817 	bl	24010604 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
2400d5d6:	68fb      	ldr	r3, [r7, #12]
2400d5d8:	681b      	ldr	r3, [r3, #0]
2400d5da:	681b      	ldr	r3, [r3, #0]
2400d5dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
2400d5e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
2400d5e4:	d14c      	bne.n	2400d680 <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
2400d5e6:	68fb      	ldr	r3, [r7, #12]
2400d5e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400d5ea:	2b00      	cmp	r3, #0
2400d5ec:	d048      	beq.n	2400d680 <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
        {
          hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2400d5ee:	68fb      	ldr	r3, [r7, #12]
2400d5f0:	681b      	ldr	r3, [r3, #0]
2400d5f2:	681a      	ldr	r2, [r3, #0]
2400d5f4:	68fb      	ldr	r3, [r7, #12]
2400d5f6:	681b      	ldr	r3, [r3, #0]
2400d5f8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
2400d5fc:	601a      	str	r2, [r3, #0]

          /* Set the I2C DMA Abort callback :
          will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
2400d5fe:	68fb      	ldr	r3, [r7, #12]
2400d600:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400d602:	4a78      	ldr	r2, [pc, #480]	@ (2400d7e4 <HAL_I2C_Slave_Seq_Transmit_DMA+0x27c>)
2400d604:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
2400d606:	68fb      	ldr	r3, [r7, #12]
2400d608:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400d60a:	4618      	mov	r0, r3
2400d60c:	f7f7 ff1e 	bl	2400544c <HAL_DMA_Abort_IT>
2400d610:	4603      	mov	r3, r0
2400d612:	2b00      	cmp	r3, #0
2400d614:	d034      	beq.n	2400d680 <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
2400d616:	68fb      	ldr	r3, [r7, #12]
2400d618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400d61a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2400d61c:	68fa      	ldr	r2, [r7, #12]
2400d61e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
2400d620:	4610      	mov	r0, r2
2400d622:	4798      	blx	r3
2400d624:	e02c      	b.n	2400d680 <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
2400d626:	68fb      	ldr	r3, [r7, #12]
2400d628:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400d62c:	b2db      	uxtb	r3, r3
2400d62e:	2b29      	cmp	r3, #41	@ 0x29
2400d630:	d126      	bne.n	2400d680 <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
    {
      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
2400d632:	68fb      	ldr	r3, [r7, #12]
2400d634:	681b      	ldr	r3, [r3, #0]
2400d636:	681b      	ldr	r3, [r3, #0]
2400d638:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
2400d63c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
2400d640:	d11e      	bne.n	2400d680 <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2400d642:	68fb      	ldr	r3, [r7, #12]
2400d644:	681b      	ldr	r3, [r3, #0]
2400d646:	681a      	ldr	r2, [r3, #0]
2400d648:	68fb      	ldr	r3, [r7, #12]
2400d64a:	681b      	ldr	r3, [r3, #0]
2400d64c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
2400d650:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
2400d652:	68fb      	ldr	r3, [r7, #12]
2400d654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400d656:	2b00      	cmp	r3, #0
2400d658:	d012      	beq.n	2400d680 <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
        {
          /* Set the I2C DMA Abort callback :
          will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
2400d65a:	68fb      	ldr	r3, [r7, #12]
2400d65c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400d65e:	4a61      	ldr	r2, [pc, #388]	@ (2400d7e4 <HAL_I2C_Slave_Seq_Transmit_DMA+0x27c>)
2400d660:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
2400d662:	68fb      	ldr	r3, [r7, #12]
2400d664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400d666:	4618      	mov	r0, r3
2400d668:	f7f7 fef0 	bl	2400544c <HAL_DMA_Abort_IT>
2400d66c:	4603      	mov	r3, r0
2400d66e:	2b00      	cmp	r3, #0
2400d670:	d006      	beq.n	2400d680 <HAL_I2C_Slave_Seq_Transmit_DMA+0x118>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
2400d672:	68fb      	ldr	r3, [r7, #12]
2400d674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400d676:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2400d678:	68fa      	ldr	r2, [r7, #12]
2400d67a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
2400d67c:	4610      	mov	r0, r2
2400d67e:	4798      	blx	r3
    else
    {
      /* Nothing to do */
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
2400d680:	68fb      	ldr	r3, [r7, #12]
2400d682:	2229      	movs	r2, #41	@ 0x29
2400d684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
2400d688:	68fb      	ldr	r3, [r7, #12]
2400d68a:	2220      	movs	r2, #32
2400d68c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400d690:	68fb      	ldr	r3, [r7, #12]
2400d692:	2200      	movs	r2, #0
2400d694:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2400d696:	68fb      	ldr	r3, [r7, #12]
2400d698:	681b      	ldr	r3, [r3, #0]
2400d69a:	685a      	ldr	r2, [r3, #4]
2400d69c:	68fb      	ldr	r3, [r7, #12]
2400d69e:	681b      	ldr	r3, [r3, #0]
2400d6a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
2400d6a4:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400d6a6:	68fb      	ldr	r3, [r7, #12]
2400d6a8:	68ba      	ldr	r2, [r7, #8]
2400d6aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
2400d6ac:	68fb      	ldr	r3, [r7, #12]
2400d6ae:	88fa      	ldrh	r2, [r7, #6]
2400d6b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
2400d6b2:	68fb      	ldr	r3, [r7, #12]
2400d6b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400d6b6:	b29a      	uxth	r2, r3
2400d6b8:	68fb      	ldr	r3, [r7, #12]
2400d6ba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
2400d6bc:	68fb      	ldr	r3, [r7, #12]
2400d6be:	683a      	ldr	r2, [r7, #0]
2400d6c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
2400d6c2:	68fb      	ldr	r3, [r7, #12]
2400d6c4:	4a48      	ldr	r2, [pc, #288]	@ (2400d7e8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x280>)
2400d6c6:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->hdmatx != NULL)
2400d6c8:	68fb      	ldr	r3, [r7, #12]
2400d6ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400d6cc:	2b00      	cmp	r3, #0
2400d6ce:	d020      	beq.n	2400d712 <HAL_I2C_Slave_Seq_Transmit_DMA+0x1aa>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
2400d6d0:	68fb      	ldr	r3, [r7, #12]
2400d6d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400d6d4:	4a45      	ldr	r2, [pc, #276]	@ (2400d7ec <HAL_I2C_Slave_Seq_Transmit_DMA+0x284>)
2400d6d6:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
2400d6d8:	68fb      	ldr	r3, [r7, #12]
2400d6da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400d6dc:	4a44      	ldr	r2, [pc, #272]	@ (2400d7f0 <HAL_I2C_Slave_Seq_Transmit_DMA+0x288>)
2400d6de:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
2400d6e0:	68fb      	ldr	r3, [r7, #12]
2400d6e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400d6e4:	2200      	movs	r2, #0
2400d6e6:	641a      	str	r2, [r3, #64]	@ 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
2400d6e8:	68fb      	ldr	r3, [r7, #12]
2400d6ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400d6ec:	2200      	movs	r2, #0
2400d6ee:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
2400d6f0:	68fb      	ldr	r3, [r7, #12]
2400d6f2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
2400d6f4:	68b9      	ldr	r1, [r7, #8]
2400d6f6:	68fb      	ldr	r3, [r7, #12]
2400d6f8:	681b      	ldr	r3, [r3, #0]
2400d6fa:	3328      	adds	r3, #40	@ 0x28
2400d6fc:	461a      	mov	r2, r3
                                       hi2c->XferSize);
2400d6fe:	68fb      	ldr	r3, [r7, #12]
2400d700:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
2400d702:	f7f7 f91b 	bl	2400493c <HAL_DMA_Start_IT>
2400d706:	4603      	mov	r3, r0
2400d708:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
2400d70a:	7dfb      	ldrb	r3, [r7, #23]
2400d70c:	2b00      	cmp	r3, #0
2400d70e:	d136      	bne.n	2400d77e <HAL_I2C_Slave_Seq_Transmit_DMA+0x216>
2400d710:	e013      	b.n	2400d73a <HAL_I2C_Slave_Seq_Transmit_DMA+0x1d2>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
2400d712:	68fb      	ldr	r3, [r7, #12]
2400d714:	2228      	movs	r2, #40	@ 0x28
2400d716:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400d71a:	68fb      	ldr	r3, [r7, #12]
2400d71c:	2200      	movs	r2, #0
2400d71e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2400d722:	68fb      	ldr	r3, [r7, #12]
2400d724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2400d726:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
2400d72a:	68fb      	ldr	r3, [r7, #12]
2400d72c:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
2400d72e:	68fb      	ldr	r3, [r7, #12]
2400d730:	2200      	movs	r2, #0
2400d732:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
2400d736:	2301      	movs	r3, #1
2400d738:	e050      	b.n	2400d7dc <HAL_I2C_Slave_Seq_Transmit_DMA+0x274>
    {
      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
2400d73a:	68fb      	ldr	r3, [r7, #12]
2400d73c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400d73e:	b29a      	uxth	r2, r3
2400d740:	68fb      	ldr	r3, [r7, #12]
2400d742:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400d744:	1ad3      	subs	r3, r2, r3
2400d746:	b29a      	uxth	r2, r3
2400d748:	68fb      	ldr	r3, [r7, #12]
2400d74a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Reset XferSize */
      hi2c->XferSize = 0;
2400d74c:	68fb      	ldr	r3, [r7, #12]
2400d74e:	2200      	movs	r2, #0
2400d750:	851a      	strh	r2, [r3, #40]	@ 0x28
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
2400d752:	68fb      	ldr	r3, [r7, #12]
2400d754:	681b      	ldr	r3, [r3, #0]
2400d756:	699b      	ldr	r3, [r3, #24]
2400d758:	f003 0308 	and.w	r3, r3, #8
2400d75c:	2b08      	cmp	r3, #8
2400d75e:	bf0c      	ite	eq
2400d760:	2301      	moveq	r3, #1
2400d762:	2300      	movne	r3, #0
2400d764:	b2db      	uxtb	r3, r3
2400d766:	75bb      	strb	r3, [r7, #22]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
2400d768:	68fb      	ldr	r3, [r7, #12]
2400d76a:	681b      	ldr	r3, [r3, #0]
2400d76c:	699b      	ldr	r3, [r3, #24]
2400d76e:	0c1b      	lsrs	r3, r3, #16
2400d770:	b2db      	uxtb	r3, r3
2400d772:	f003 0301 	and.w	r3, r3, #1
2400d776:	b2db      	uxtb	r3, r3
2400d778:	2b01      	cmp	r3, #1
2400d77a:	d11b      	bne.n	2400d7b4 <HAL_I2C_Slave_Seq_Transmit_DMA+0x24c>
2400d77c:	e013      	b.n	2400d7a6 <HAL_I2C_Slave_Seq_Transmit_DMA+0x23e>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
2400d77e:	68fb      	ldr	r3, [r7, #12]
2400d780:	2228      	movs	r2, #40	@ 0x28
2400d782:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400d786:	68fb      	ldr	r3, [r7, #12]
2400d788:	2200      	movs	r2, #0
2400d78a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2400d78e:	68fb      	ldr	r3, [r7, #12]
2400d790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2400d792:	f043 0210 	orr.w	r2, r3, #16
2400d796:	68fb      	ldr	r3, [r7, #12]
2400d798:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
2400d79a:	68fb      	ldr	r3, [r7, #12]
2400d79c:	2200      	movs	r2, #0
2400d79e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
2400d7a2:	2301      	movs	r3, #1
2400d7a4:	e01a      	b.n	2400d7dc <HAL_I2C_Slave_Seq_Transmit_DMA+0x274>
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
2400d7a6:	7dbb      	ldrb	r3, [r7, #22]
2400d7a8:	2b00      	cmp	r3, #0
2400d7aa:	d003      	beq.n	2400d7b4 <HAL_I2C_Slave_Seq_Transmit_DMA+0x24c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2400d7ac:	68fb      	ldr	r3, [r7, #12]
2400d7ae:	681b      	ldr	r3, [r3, #0]
2400d7b0:	2208      	movs	r2, #8
2400d7b2:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400d7b4:	68fb      	ldr	r3, [r7, #12]
2400d7b6:	2200      	movs	r2, #0
2400d7b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable DMA Request */
    hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
2400d7bc:	68fb      	ldr	r3, [r7, #12]
2400d7be:	681b      	ldr	r3, [r3, #0]
2400d7c0:	681a      	ldr	r2, [r3, #0]
2400d7c2:	68fb      	ldr	r3, [r7, #12]
2400d7c4:	681b      	ldr	r3, [r3, #0]
2400d7c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
2400d7ca:	601a      	str	r2, [r3, #0]

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* Enable ERR, STOP, NACK, ADDR interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
2400d7cc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
2400d7d0:	68f8      	ldr	r0, [r7, #12]
2400d7d2:	f002 fe93 	bl	240104fc <I2C_Enable_IRQ>

    return HAL_OK;
2400d7d6:	2300      	movs	r3, #0
2400d7d8:	e000      	b.n	2400d7dc <HAL_I2C_Slave_Seq_Transmit_DMA+0x274>
  }
  else
  {
    return HAL_ERROR;
2400d7da:	2301      	movs	r3, #1
  }
}
2400d7dc:	4618      	mov	r0, r3
2400d7de:	3718      	adds	r7, #24
2400d7e0:	46bd      	mov	sp, r7
2400d7e2:	bd80      	pop	{r7, pc}
2400d7e4:	2400ffbd 	.word	0x2400ffbd
2400d7e8:	2400e9e1 	.word	0x2400e9e1
2400d7ec:	2400fb0d 	.word	0x2400fb0d
2400d7f0:	2400fd49 	.word	0x2400fd49

2400d7f4 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
2400d7f4:	b580      	push	{r7, lr}
2400d7f6:	b086      	sub	sp, #24
2400d7f8:	af00      	add	r7, sp, #0
2400d7fa:	60f8      	str	r0, [r7, #12]
2400d7fc:	60b9      	str	r1, [r7, #8]
2400d7fe:	603b      	str	r3, [r7, #0]
2400d800:	4613      	mov	r3, r2
2400d802:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
2400d804:	68fb      	ldr	r3, [r7, #12]
2400d806:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400d80a:	b2db      	uxtb	r3, r3
2400d80c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
2400d810:	2b28      	cmp	r3, #40	@ 0x28
2400d812:	f040 8098 	bne.w	2400d946 <HAL_I2C_Slave_Seq_Receive_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
2400d816:	68bb      	ldr	r3, [r7, #8]
2400d818:	2b00      	cmp	r3, #0
2400d81a:	d002      	beq.n	2400d822 <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
2400d81c:	88fb      	ldrh	r3, [r7, #6]
2400d81e:	2b00      	cmp	r3, #0
2400d820:	d105      	bne.n	2400d82e <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400d822:	68fb      	ldr	r3, [r7, #12]
2400d824:	f44f 7200 	mov.w	r2, #512	@ 0x200
2400d828:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
2400d82a:	2301      	movs	r3, #1
2400d82c:	e08c      	b.n	2400d948 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
2400d82e:	f248 0102 	movw	r1, #32770	@ 0x8002
2400d832:	68f8      	ldr	r0, [r7, #12]
2400d834:	f002 fee6 	bl	24010604 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400d838:	68fb      	ldr	r3, [r7, #12]
2400d83a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2400d83e:	2b01      	cmp	r3, #1
2400d840:	d101      	bne.n	2400d846 <HAL_I2C_Slave_Seq_Receive_IT+0x52>
2400d842:	2302      	movs	r3, #2
2400d844:	e080      	b.n	2400d948 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
2400d846:	68fb      	ldr	r3, [r7, #12]
2400d848:	2201      	movs	r2, #1
2400d84a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
2400d84e:	68fb      	ldr	r3, [r7, #12]
2400d850:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400d854:	b2db      	uxtb	r3, r3
2400d856:	2b29      	cmp	r3, #41	@ 0x29
2400d858:	d12a      	bne.n	2400d8b0 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
2400d85a:	2101      	movs	r1, #1
2400d85c:	68f8      	ldr	r0, [r7, #12]
2400d85e:	f002 fed1 	bl	24010604 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
2400d862:	68fb      	ldr	r3, [r7, #12]
2400d864:	681b      	ldr	r3, [r3, #0]
2400d866:	681b      	ldr	r3, [r3, #0]
2400d868:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
2400d86c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
2400d870:	d11e      	bne.n	2400d8b0 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2400d872:	68fb      	ldr	r3, [r7, #12]
2400d874:	681b      	ldr	r3, [r3, #0]
2400d876:	681a      	ldr	r2, [r3, #0]
2400d878:	68fb      	ldr	r3, [r7, #12]
2400d87a:	681b      	ldr	r3, [r3, #0]
2400d87c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
2400d880:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
2400d882:	68fb      	ldr	r3, [r7, #12]
2400d884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400d886:	2b00      	cmp	r3, #0
2400d888:	d012      	beq.n	2400d8b0 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
2400d88a:	68fb      	ldr	r3, [r7, #12]
2400d88c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400d88e:	4a30      	ldr	r2, [pc, #192]	@ (2400d950 <HAL_I2C_Slave_Seq_Receive_IT+0x15c>)
2400d890:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
2400d892:	68fb      	ldr	r3, [r7, #12]
2400d894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400d896:	4618      	mov	r0, r3
2400d898:	f7f7 fdd8 	bl	2400544c <HAL_DMA_Abort_IT>
2400d89c:	4603      	mov	r3, r0
2400d89e:	2b00      	cmp	r3, #0
2400d8a0:	d006      	beq.n	2400d8b0 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
2400d8a2:	68fb      	ldr	r3, [r7, #12]
2400d8a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400d8a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2400d8a8:	68fa      	ldr	r2, [r7, #12]
2400d8aa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
2400d8ac:	4610      	mov	r0, r2
2400d8ae:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
2400d8b0:	68fb      	ldr	r3, [r7, #12]
2400d8b2:	222a      	movs	r2, #42	@ 0x2a
2400d8b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
2400d8b8:	68fb      	ldr	r3, [r7, #12]
2400d8ba:	2220      	movs	r2, #32
2400d8bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400d8c0:	68fb      	ldr	r3, [r7, #12]
2400d8c2:	2200      	movs	r2, #0
2400d8c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2400d8c6:	68fb      	ldr	r3, [r7, #12]
2400d8c8:	681b      	ldr	r3, [r3, #0]
2400d8ca:	685a      	ldr	r2, [r3, #4]
2400d8cc:	68fb      	ldr	r3, [r7, #12]
2400d8ce:	681b      	ldr	r3, [r3, #0]
2400d8d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
2400d8d4:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400d8d6:	68fb      	ldr	r3, [r7, #12]
2400d8d8:	68ba      	ldr	r2, [r7, #8]
2400d8da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
2400d8dc:	68fb      	ldr	r3, [r7, #12]
2400d8de:	88fa      	ldrh	r2, [r7, #6]
2400d8e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
2400d8e2:	68fb      	ldr	r3, [r7, #12]
2400d8e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400d8e6:	b29a      	uxth	r2, r3
2400d8e8:	68fb      	ldr	r3, [r7, #12]
2400d8ea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
2400d8ec:	68fb      	ldr	r3, [r7, #12]
2400d8ee:	683a      	ldr	r2, [r7, #0]
2400d8f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
2400d8f2:	68fb      	ldr	r3, [r7, #12]
2400d8f4:	4a17      	ldr	r2, [pc, #92]	@ (2400d954 <HAL_I2C_Slave_Seq_Receive_IT+0x160>)
2400d8f6:	635a      	str	r2, [r3, #52]	@ 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
2400d8f8:	68fb      	ldr	r3, [r7, #12]
2400d8fa:	681b      	ldr	r3, [r3, #0]
2400d8fc:	699b      	ldr	r3, [r3, #24]
2400d8fe:	f003 0308 	and.w	r3, r3, #8
2400d902:	2b08      	cmp	r3, #8
2400d904:	bf0c      	ite	eq
2400d906:	2301      	moveq	r3, #1
2400d908:	2300      	movne	r3, #0
2400d90a:	b2db      	uxtb	r3, r3
2400d90c:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
2400d90e:	68fb      	ldr	r3, [r7, #12]
2400d910:	681b      	ldr	r3, [r3, #0]
2400d912:	699b      	ldr	r3, [r3, #24]
2400d914:	0c1b      	lsrs	r3, r3, #16
2400d916:	b2db      	uxtb	r3, r3
2400d918:	f003 0301 	and.w	r3, r3, #1
2400d91c:	b2db      	uxtb	r3, r3
2400d91e:	2b00      	cmp	r3, #0
2400d920:	d106      	bne.n	2400d930 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
2400d922:	7dfb      	ldrb	r3, [r7, #23]
2400d924:	2b00      	cmp	r3, #0
2400d926:	d003      	beq.n	2400d930 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2400d928:	68fb      	ldr	r3, [r7, #12]
2400d92a:	681b      	ldr	r3, [r3, #0]
2400d92c:	2208      	movs	r2, #8
2400d92e:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400d930:	68fb      	ldr	r3, [r7, #12]
2400d932:	2200      	movs	r2, #0
2400d934:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
2400d938:	f248 0102 	movw	r1, #32770	@ 0x8002
2400d93c:	68f8      	ldr	r0, [r7, #12]
2400d93e:	f002 fddd 	bl	240104fc <I2C_Enable_IRQ>

    return HAL_OK;
2400d942:	2300      	movs	r3, #0
2400d944:	e000      	b.n	2400d948 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
2400d946:	2301      	movs	r3, #1
  }
}
2400d948:	4618      	mov	r0, r3
2400d94a:	3718      	adds	r7, #24
2400d94c:	46bd      	mov	sp, r7
2400d94e:	bd80      	pop	{r7, pc}
2400d950:	2400ffbd 	.word	0x2400ffbd
2400d954:	2400e3cd 	.word	0x2400e3cd

2400d958 <HAL_I2C_Slave_Seq_Receive_DMA>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
2400d958:	b580      	push	{r7, lr}
2400d95a:	b086      	sub	sp, #24
2400d95c:	af00      	add	r7, sp, #0
2400d95e:	60f8      	str	r0, [r7, #12]
2400d960:	60b9      	str	r1, [r7, #8]
2400d962:	603b      	str	r3, [r7, #0]
2400d964:	4613      	mov	r3, r2
2400d966:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
2400d968:	68fb      	ldr	r3, [r7, #12]
2400d96a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400d96e:	b2db      	uxtb	r3, r3
2400d970:	f003 0328 	and.w	r3, r3, #40	@ 0x28
2400d974:	2b28      	cmp	r3, #40	@ 0x28
2400d976:	f040 8128 	bne.w	2400dbca <HAL_I2C_Slave_Seq_Receive_DMA+0x272>
  {
    if ((pData == NULL) || (Size == 0U))
2400d97a:	68bb      	ldr	r3, [r7, #8]
2400d97c:	2b00      	cmp	r3, #0
2400d97e:	d002      	beq.n	2400d986 <HAL_I2C_Slave_Seq_Receive_DMA+0x2e>
2400d980:	88fb      	ldrh	r3, [r7, #6]
2400d982:	2b00      	cmp	r3, #0
2400d984:	d105      	bne.n	2400d992 <HAL_I2C_Slave_Seq_Receive_DMA+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
2400d986:	68fb      	ldr	r3, [r7, #12]
2400d988:	f44f 7200 	mov.w	r2, #512	@ 0x200
2400d98c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
2400d98e:	2301      	movs	r3, #1
2400d990:	e11c      	b.n	2400dbcc <HAL_I2C_Slave_Seq_Receive_DMA+0x274>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
2400d992:	f248 0102 	movw	r1, #32770	@ 0x8002
2400d996:	68f8      	ldr	r0, [r7, #12]
2400d998:	f002 fe34 	bl	24010604 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
2400d99c:	68fb      	ldr	r3, [r7, #12]
2400d99e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2400d9a2:	2b01      	cmp	r3, #1
2400d9a4:	d101      	bne.n	2400d9aa <HAL_I2C_Slave_Seq_Receive_DMA+0x52>
2400d9a6:	2302      	movs	r3, #2
2400d9a8:	e110      	b.n	2400dbcc <HAL_I2C_Slave_Seq_Receive_DMA+0x274>
2400d9aa:	68fb      	ldr	r3, [r7, #12]
2400d9ac:	2201      	movs	r2, #1
2400d9ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
2400d9b2:	68fb      	ldr	r3, [r7, #12]
2400d9b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400d9b8:	b2db      	uxtb	r3, r3
2400d9ba:	2b29      	cmp	r3, #41	@ 0x29
2400d9bc:	d12b      	bne.n	2400da16 <HAL_I2C_Slave_Seq_Receive_DMA+0xbe>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
2400d9be:	2101      	movs	r1, #1
2400d9c0:	68f8      	ldr	r0, [r7, #12]
2400d9c2:	f002 fe1f 	bl	24010604 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
2400d9c6:	68fb      	ldr	r3, [r7, #12]
2400d9c8:	681b      	ldr	r3, [r3, #0]
2400d9ca:	681b      	ldr	r3, [r3, #0]
2400d9cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
2400d9d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
2400d9d4:	d14c      	bne.n	2400da70 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
2400d9d6:	68fb      	ldr	r3, [r7, #12]
2400d9d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400d9da:	2b00      	cmp	r3, #0
2400d9dc:	d048      	beq.n	2400da70 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
        {
          hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2400d9de:	68fb      	ldr	r3, [r7, #12]
2400d9e0:	681b      	ldr	r3, [r3, #0]
2400d9e2:	681a      	ldr	r2, [r3, #0]
2400d9e4:	68fb      	ldr	r3, [r7, #12]
2400d9e6:	681b      	ldr	r3, [r3, #0]
2400d9e8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
2400d9ec:	601a      	str	r2, [r3, #0]

          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
2400d9ee:	68fb      	ldr	r3, [r7, #12]
2400d9f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400d9f2:	4a78      	ldr	r2, [pc, #480]	@ (2400dbd4 <HAL_I2C_Slave_Seq_Receive_DMA+0x27c>)
2400d9f4:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
2400d9f6:	68fb      	ldr	r3, [r7, #12]
2400d9f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400d9fa:	4618      	mov	r0, r3
2400d9fc:	f7f7 fd26 	bl	2400544c <HAL_DMA_Abort_IT>
2400da00:	4603      	mov	r3, r0
2400da02:	2b00      	cmp	r3, #0
2400da04:	d034      	beq.n	2400da70 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
2400da06:	68fb      	ldr	r3, [r7, #12]
2400da08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400da0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2400da0c:	68fa      	ldr	r2, [r7, #12]
2400da0e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
2400da10:	4610      	mov	r0, r2
2400da12:	4798      	blx	r3
2400da14:	e02c      	b.n	2400da70 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
2400da16:	68fb      	ldr	r3, [r7, #12]
2400da18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400da1c:	b2db      	uxtb	r3, r3
2400da1e:	2b2a      	cmp	r3, #42	@ 0x2a
2400da20:	d126      	bne.n	2400da70 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
    {
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
2400da22:	68fb      	ldr	r3, [r7, #12]
2400da24:	681b      	ldr	r3, [r3, #0]
2400da26:	681b      	ldr	r3, [r3, #0]
2400da28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
2400da2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
2400da30:	d11e      	bne.n	2400da70 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2400da32:	68fb      	ldr	r3, [r7, #12]
2400da34:	681b      	ldr	r3, [r3, #0]
2400da36:	681a      	ldr	r2, [r3, #0]
2400da38:	68fb      	ldr	r3, [r7, #12]
2400da3a:	681b      	ldr	r3, [r3, #0]
2400da3c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
2400da40:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
2400da42:	68fb      	ldr	r3, [r7, #12]
2400da44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400da46:	2b00      	cmp	r3, #0
2400da48:	d012      	beq.n	2400da70 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
2400da4a:	68fb      	ldr	r3, [r7, #12]
2400da4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400da4e:	4a61      	ldr	r2, [pc, #388]	@ (2400dbd4 <HAL_I2C_Slave_Seq_Receive_DMA+0x27c>)
2400da50:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
2400da52:	68fb      	ldr	r3, [r7, #12]
2400da54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400da56:	4618      	mov	r0, r3
2400da58:	f7f7 fcf8 	bl	2400544c <HAL_DMA_Abort_IT>
2400da5c:	4603      	mov	r3, r0
2400da5e:	2b00      	cmp	r3, #0
2400da60:	d006      	beq.n	2400da70 <HAL_I2C_Slave_Seq_Receive_DMA+0x118>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
2400da62:	68fb      	ldr	r3, [r7, #12]
2400da64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400da66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2400da68:	68fa      	ldr	r2, [r7, #12]
2400da6a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
2400da6c:	4610      	mov	r0, r2
2400da6e:	4798      	blx	r3
    else
    {
      /* Nothing to do */
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
2400da70:	68fb      	ldr	r3, [r7, #12]
2400da72:	222a      	movs	r2, #42	@ 0x2a
2400da74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
2400da78:	68fb      	ldr	r3, [r7, #12]
2400da7a:	2220      	movs	r2, #32
2400da7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400da80:	68fb      	ldr	r3, [r7, #12]
2400da82:	2200      	movs	r2, #0
2400da84:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
2400da86:	68fb      	ldr	r3, [r7, #12]
2400da88:	681b      	ldr	r3, [r3, #0]
2400da8a:	685a      	ldr	r2, [r3, #4]
2400da8c:	68fb      	ldr	r3, [r7, #12]
2400da8e:	681b      	ldr	r3, [r3, #0]
2400da90:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
2400da94:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
2400da96:	68fb      	ldr	r3, [r7, #12]
2400da98:	68ba      	ldr	r2, [r7, #8]
2400da9a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
2400da9c:	68fb      	ldr	r3, [r7, #12]
2400da9e:	88fa      	ldrh	r2, [r7, #6]
2400daa0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
2400daa2:	68fb      	ldr	r3, [r7, #12]
2400daa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400daa6:	b29a      	uxth	r2, r3
2400daa8:	68fb      	ldr	r3, [r7, #12]
2400daaa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
2400daac:	68fb      	ldr	r3, [r7, #12]
2400daae:	683a      	ldr	r2, [r7, #0]
2400dab0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
2400dab2:	68fb      	ldr	r3, [r7, #12]
2400dab4:	4a48      	ldr	r2, [pc, #288]	@ (2400dbd8 <HAL_I2C_Slave_Seq_Receive_DMA+0x280>)
2400dab6:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->hdmarx != NULL)
2400dab8:	68fb      	ldr	r3, [r7, #12]
2400daba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400dabc:	2b00      	cmp	r3, #0
2400dabe:	d020      	beq.n	2400db02 <HAL_I2C_Slave_Seq_Receive_DMA+0x1aa>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
2400dac0:	68fb      	ldr	r3, [r7, #12]
2400dac2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400dac4:	4a45      	ldr	r2, [pc, #276]	@ (2400dbdc <HAL_I2C_Slave_Seq_Receive_DMA+0x284>)
2400dac6:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
2400dac8:	68fb      	ldr	r3, [r7, #12]
2400daca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400dacc:	4a44      	ldr	r2, [pc, #272]	@ (2400dbe0 <HAL_I2C_Slave_Seq_Receive_DMA+0x288>)
2400dace:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
2400dad0:	68fb      	ldr	r3, [r7, #12]
2400dad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400dad4:	2200      	movs	r2, #0
2400dad6:	641a      	str	r2, [r3, #64]	@ 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
2400dad8:	68fb      	ldr	r3, [r7, #12]
2400dada:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400dadc:	2200      	movs	r2, #0
2400dade:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR,
2400dae0:	68fb      	ldr	r3, [r7, #12]
2400dae2:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
2400dae4:	68fb      	ldr	r3, [r7, #12]
2400dae6:	681b      	ldr	r3, [r3, #0]
2400dae8:	3324      	adds	r3, #36	@ 0x24
2400daea:	4619      	mov	r1, r3
2400daec:	68ba      	ldr	r2, [r7, #8]
                                       (uint32_t)pData, hi2c->XferSize);
2400daee:	68fb      	ldr	r3, [r7, #12]
2400daf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR,
2400daf2:	f7f6 ff23 	bl	2400493c <HAL_DMA_Start_IT>
2400daf6:	4603      	mov	r3, r0
2400daf8:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
2400dafa:	7dfb      	ldrb	r3, [r7, #23]
2400dafc:	2b00      	cmp	r3, #0
2400dafe:	d136      	bne.n	2400db6e <HAL_I2C_Slave_Seq_Receive_DMA+0x216>
2400db00:	e013      	b.n	2400db2a <HAL_I2C_Slave_Seq_Receive_DMA+0x1d2>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
2400db02:	68fb      	ldr	r3, [r7, #12]
2400db04:	2228      	movs	r2, #40	@ 0x28
2400db06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400db0a:	68fb      	ldr	r3, [r7, #12]
2400db0c:	2200      	movs	r2, #0
2400db0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
2400db12:	68fb      	ldr	r3, [r7, #12]
2400db14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2400db16:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
2400db1a:	68fb      	ldr	r3, [r7, #12]
2400db1c:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
2400db1e:	68fb      	ldr	r3, [r7, #12]
2400db20:	2200      	movs	r2, #0
2400db22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
2400db26:	2301      	movs	r3, #1
2400db28:	e050      	b.n	2400dbcc <HAL_I2C_Slave_Seq_Receive_DMA+0x274>
    {
      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
2400db2a:	68fb      	ldr	r3, [r7, #12]
2400db2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400db2e:	b29a      	uxth	r2, r3
2400db30:	68fb      	ldr	r3, [r7, #12]
2400db32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400db34:	1ad3      	subs	r3, r2, r3
2400db36:	b29a      	uxth	r2, r3
2400db38:	68fb      	ldr	r3, [r7, #12]
2400db3a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Reset XferSize */
      hi2c->XferSize = 0;
2400db3c:	68fb      	ldr	r3, [r7, #12]
2400db3e:	2200      	movs	r2, #0
2400db40:	851a      	strh	r2, [r3, #40]	@ 0x28
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
2400db42:	68fb      	ldr	r3, [r7, #12]
2400db44:	681b      	ldr	r3, [r3, #0]
2400db46:	699b      	ldr	r3, [r3, #24]
2400db48:	f003 0308 	and.w	r3, r3, #8
2400db4c:	2b08      	cmp	r3, #8
2400db4e:	bf0c      	ite	eq
2400db50:	2301      	moveq	r3, #1
2400db52:	2300      	movne	r3, #0
2400db54:	b2db      	uxtb	r3, r3
2400db56:	75bb      	strb	r3, [r7, #22]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
2400db58:	68fb      	ldr	r3, [r7, #12]
2400db5a:	681b      	ldr	r3, [r3, #0]
2400db5c:	699b      	ldr	r3, [r3, #24]
2400db5e:	0c1b      	lsrs	r3, r3, #16
2400db60:	b2db      	uxtb	r3, r3
2400db62:	f003 0301 	and.w	r3, r3, #1
2400db66:	b2db      	uxtb	r3, r3
2400db68:	2b00      	cmp	r3, #0
2400db6a:	d11b      	bne.n	2400dba4 <HAL_I2C_Slave_Seq_Receive_DMA+0x24c>
2400db6c:	e013      	b.n	2400db96 <HAL_I2C_Slave_Seq_Receive_DMA+0x23e>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
2400db6e:	68fb      	ldr	r3, [r7, #12]
2400db70:	2228      	movs	r2, #40	@ 0x28
2400db72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
2400db76:	68fb      	ldr	r3, [r7, #12]
2400db78:	2200      	movs	r2, #0
2400db7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
2400db7e:	68fb      	ldr	r3, [r7, #12]
2400db80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2400db82:	f043 0210 	orr.w	r2, r3, #16
2400db86:	68fb      	ldr	r3, [r7, #12]
2400db88:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
2400db8a:	68fb      	ldr	r3, [r7, #12]
2400db8c:	2200      	movs	r2, #0
2400db8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
2400db92:	2301      	movs	r3, #1
2400db94:	e01a      	b.n	2400dbcc <HAL_I2C_Slave_Seq_Receive_DMA+0x274>
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
2400db96:	7dbb      	ldrb	r3, [r7, #22]
2400db98:	2b00      	cmp	r3, #0
2400db9a:	d003      	beq.n	2400dba4 <HAL_I2C_Slave_Seq_Receive_DMA+0x24c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2400db9c:	68fb      	ldr	r3, [r7, #12]
2400db9e:	681b      	ldr	r3, [r3, #0]
2400dba0:	2208      	movs	r2, #8
2400dba2:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400dba4:	68fb      	ldr	r3, [r7, #12]
2400dba6:	2200      	movs	r2, #0
2400dba8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable DMA Request */
    hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
2400dbac:	68fb      	ldr	r3, [r7, #12]
2400dbae:	681b      	ldr	r3, [r3, #0]
2400dbb0:	681a      	ldr	r2, [r3, #0]
2400dbb2:	68fb      	ldr	r3, [r7, #12]
2400dbb4:	681b      	ldr	r3, [r3, #0]
2400dbb6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
2400dbba:	601a      	str	r2, [r3, #0]

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
2400dbbc:	f248 0102 	movw	r1, #32770	@ 0x8002
2400dbc0:	68f8      	ldr	r0, [r7, #12]
2400dbc2:	f002 fc9b 	bl	240104fc <I2C_Enable_IRQ>

    return HAL_OK;
2400dbc6:	2300      	movs	r3, #0
2400dbc8:	e000      	b.n	2400dbcc <HAL_I2C_Slave_Seq_Receive_DMA+0x274>
  }
  else
  {
    return HAL_ERROR;
2400dbca:	2301      	movs	r3, #1
  }
}
2400dbcc:	4618      	mov	r0, r3
2400dbce:	3718      	adds	r7, #24
2400dbd0:	46bd      	mov	sp, r7
2400dbd2:	bd80      	pop	{r7, pc}
2400dbd4:	2400ffbd 	.word	0x2400ffbd
2400dbd8:	2400e9e1 	.word	0x2400e9e1
2400dbdc:	2400fbe5 	.word	0x2400fbe5
2400dbe0:	2400fd49 	.word	0x2400fd49

2400dbe4 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
2400dbe4:	b580      	push	{r7, lr}
2400dbe6:	b082      	sub	sp, #8
2400dbe8:	af00      	add	r7, sp, #0
2400dbea:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
2400dbec:	687b      	ldr	r3, [r7, #4]
2400dbee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400dbf2:	b2db      	uxtb	r3, r3
2400dbf4:	2b20      	cmp	r3, #32
2400dbf6:	d10d      	bne.n	2400dc14 <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
2400dbf8:	687b      	ldr	r3, [r7, #4]
2400dbfa:	2228      	movs	r2, #40	@ 0x28
2400dbfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
2400dc00:	687b      	ldr	r3, [r7, #4]
2400dc02:	4a07      	ldr	r2, [pc, #28]	@ (2400dc20 <HAL_I2C_EnableListen_IT+0x3c>)
2400dc04:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
2400dc06:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
2400dc0a:	6878      	ldr	r0, [r7, #4]
2400dc0c:	f002 fc76 	bl	240104fc <I2C_Enable_IRQ>

    return HAL_OK;
2400dc10:	2300      	movs	r3, #0
2400dc12:	e000      	b.n	2400dc16 <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
2400dc14:	2302      	movs	r3, #2
  }
}
2400dc16:	4618      	mov	r0, r3
2400dc18:	3708      	adds	r7, #8
2400dc1a:	46bd      	mov	sp, r7
2400dc1c:	bd80      	pop	{r7, pc}
2400dc1e:	bf00      	nop
2400dc20:	2400e3cd 	.word	0x2400e3cd

2400dc24 <HAL_I2C_DisableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DisableListen_IT(I2C_HandleTypeDef *hi2c)
{
2400dc24:	b580      	push	{r7, lr}
2400dc26:	b084      	sub	sp, #16
2400dc28:	af00      	add	r7, sp, #0
2400dc2a:	6078      	str	r0, [r7, #4]
  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp;

  /* Disable Address listen mode only if a transfer is not ongoing */
  if (hi2c->State == HAL_I2C_STATE_LISTEN)
2400dc2c:	687b      	ldr	r3, [r7, #4]
2400dc2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400dc32:	b2db      	uxtb	r3, r3
2400dc34:	2b28      	cmp	r3, #40	@ 0x28
2400dc36:	d121      	bne.n	2400dc7c <HAL_I2C_DisableListen_IT+0x58>
  {
    tmp = (uint32_t)(hi2c->State) & I2C_STATE_MSK;
2400dc38:	687b      	ldr	r3, [r7, #4]
2400dc3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400dc3e:	b2db      	uxtb	r3, r3
2400dc40:	f003 0303 	and.w	r3, r3, #3
2400dc44:	60fb      	str	r3, [r7, #12]
    hi2c->PreviousState = tmp | (uint32_t)(hi2c->Mode);
2400dc46:	687b      	ldr	r3, [r7, #4]
2400dc48:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
2400dc4c:	b2db      	uxtb	r3, r3
2400dc4e:	461a      	mov	r2, r3
2400dc50:	68fb      	ldr	r3, [r7, #12]
2400dc52:	431a      	orrs	r2, r3
2400dc54:	687b      	ldr	r3, [r7, #4]
2400dc56:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_READY;
2400dc58:	687b      	ldr	r3, [r7, #4]
2400dc5a:	2220      	movs	r2, #32
2400dc5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
2400dc60:	687b      	ldr	r3, [r7, #4]
2400dc62:	2200      	movs	r2, #0
2400dc64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->XferISR = NULL;
2400dc68:	687b      	ldr	r3, [r7, #4]
2400dc6a:	2200      	movs	r2, #0
2400dc6c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable the Address Match interrupt */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
2400dc6e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
2400dc72:	6878      	ldr	r0, [r7, #4]
2400dc74:	f002 fcc6 	bl	24010604 <I2C_Disable_IRQ>

    return HAL_OK;
2400dc78:	2300      	movs	r3, #0
2400dc7a:	e000      	b.n	2400dc7e <HAL_I2C_DisableListen_IT+0x5a>
  }
  else
  {
    return HAL_BUSY;
2400dc7c:	2302      	movs	r3, #2
  }
}
2400dc7e:	4618      	mov	r0, r3
2400dc80:	3710      	adds	r7, #16
2400dc82:	46bd      	mov	sp, r7
2400dc84:	bd80      	pop	{r7, pc}
	...

2400dc88 <HAL_I2C_Master_Abort_IT>:
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Abort_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress)
{
2400dc88:	b580      	push	{r7, lr}
2400dc8a:	b084      	sub	sp, #16
2400dc8c:	af02      	add	r7, sp, #8
2400dc8e:	6078      	str	r0, [r7, #4]
2400dc90:	460b      	mov	r3, r1
2400dc92:	807b      	strh	r3, [r7, #2]
  if (hi2c->Mode == HAL_I2C_MODE_MASTER)
2400dc94:	687b      	ldr	r3, [r7, #4]
2400dc96:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
2400dc9a:	b2db      	uxtb	r3, r3
2400dc9c:	2b10      	cmp	r3, #16
2400dc9e:	d13c      	bne.n	2400dd1a <HAL_I2C_Master_Abort_IT+0x92>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400dca0:	687b      	ldr	r3, [r7, #4]
2400dca2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2400dca6:	2b01      	cmp	r3, #1
2400dca8:	d101      	bne.n	2400dcae <HAL_I2C_Master_Abort_IT+0x26>
2400dcaa:	2302      	movs	r3, #2
2400dcac:	e036      	b.n	2400dd1c <HAL_I2C_Master_Abort_IT+0x94>
2400dcae:	687b      	ldr	r3, [r7, #4]
2400dcb0:	2201      	movs	r2, #1
2400dcb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Disable Interrupts and Store Previous state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
2400dcb6:	687b      	ldr	r3, [r7, #4]
2400dcb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400dcbc:	b2db      	uxtb	r3, r3
2400dcbe:	2b21      	cmp	r3, #33	@ 0x21
2400dcc0:	d107      	bne.n	2400dcd2 <HAL_I2C_Master_Abort_IT+0x4a>
    {
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
2400dcc2:	2101      	movs	r1, #1
2400dcc4:	6878      	ldr	r0, [r7, #4]
2400dcc6:	f002 fc9d 	bl	24010604 <I2C_Disable_IRQ>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
2400dcca:	687b      	ldr	r3, [r7, #4]
2400dccc:	2211      	movs	r2, #17
2400dcce:	631a      	str	r2, [r3, #48]	@ 0x30
2400dcd0:	e00c      	b.n	2400dcec <HAL_I2C_Master_Abort_IT+0x64>
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
2400dcd2:	687b      	ldr	r3, [r7, #4]
2400dcd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400dcd8:	b2db      	uxtb	r3, r3
2400dcda:	2b22      	cmp	r3, #34	@ 0x22
2400dcdc:	d106      	bne.n	2400dcec <HAL_I2C_Master_Abort_IT+0x64>
    {
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
2400dcde:	2102      	movs	r1, #2
2400dce0:	6878      	ldr	r0, [r7, #4]
2400dce2:	f002 fc8f 	bl	24010604 <I2C_Disable_IRQ>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
2400dce6:	687b      	ldr	r3, [r7, #4]
2400dce8:	2212      	movs	r2, #18
2400dcea:	631a      	str	r2, [r3, #48]	@ 0x30
    {
      /* Do nothing */
    }

    /* Set State at HAL_I2C_STATE_ABORT */
    hi2c->State = HAL_I2C_STATE_ABORT;
2400dcec:	687b      	ldr	r3, [r7, #4]
2400dcee:	2260      	movs	r2, #96	@ 0x60
2400dcf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set NBYTES to 1 to generate a dummy read on I2C peripheral */
    /* Set AUTOEND mode, this will generate a NACK then STOP condition to abort the current transfer */
    I2C_TransferConfig(hi2c, DevAddress, 1, I2C_AUTOEND_MODE, I2C_GENERATE_STOP);
2400dcf4:	8879      	ldrh	r1, [r7, #2]
2400dcf6:	4b0b      	ldr	r3, [pc, #44]	@ (2400dd24 <HAL_I2C_Master_Abort_IT+0x9c>)
2400dcf8:	9300      	str	r3, [sp, #0]
2400dcfa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
2400dcfe:	2201      	movs	r2, #1
2400dd00:	6878      	ldr	r0, [r7, #4]
2400dd02:	f002 fbc9 	bl	24010498 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400dd06:	687b      	ldr	r3, [r7, #4]
2400dd08:	2200      	movs	r2, #0
2400dd0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
2400dd0e:	2120      	movs	r1, #32
2400dd10:	6878      	ldr	r0, [r7, #4]
2400dd12:	f002 fbf3 	bl	240104fc <I2C_Enable_IRQ>

    return HAL_OK;
2400dd16:	2300      	movs	r3, #0
2400dd18:	e000      	b.n	2400dd1c <HAL_I2C_Master_Abort_IT+0x94>
  }
  else
  {
    /* Wrong usage of abort function */
    /* This function should be used only in case of abort monitored by master device */
    return HAL_ERROR;
2400dd1a:	2301      	movs	r3, #1
  }
}
2400dd1c:	4618      	mov	r0, r3
2400dd1e:	3708      	adds	r7, #8
2400dd20:	46bd      	mov	sp, r7
2400dd22:	bd80      	pop	{r7, pc}
2400dd24:	80004000 	.word	0x80004000

2400dd28 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
2400dd28:	b580      	push	{r7, lr}
2400dd2a:	b084      	sub	sp, #16
2400dd2c:	af00      	add	r7, sp, #0
2400dd2e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
2400dd30:	687b      	ldr	r3, [r7, #4]
2400dd32:	681b      	ldr	r3, [r3, #0]
2400dd34:	699b      	ldr	r3, [r3, #24]
2400dd36:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
2400dd38:	687b      	ldr	r3, [r7, #4]
2400dd3a:	681b      	ldr	r3, [r3, #0]
2400dd3c:	681b      	ldr	r3, [r3, #0]
2400dd3e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
2400dd40:	687b      	ldr	r3, [r7, #4]
2400dd42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
2400dd44:	2b00      	cmp	r3, #0
2400dd46:	d005      	beq.n	2400dd54 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
2400dd48:	687b      	ldr	r3, [r7, #4]
2400dd4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
2400dd4c:	68ba      	ldr	r2, [r7, #8]
2400dd4e:	68f9      	ldr	r1, [r7, #12]
2400dd50:	6878      	ldr	r0, [r7, #4]
2400dd52:	4798      	blx	r3
  }
}
2400dd54:	bf00      	nop
2400dd56:	3710      	adds	r7, #16
2400dd58:	46bd      	mov	sp, r7
2400dd5a:	bd80      	pop	{r7, pc}

2400dd5c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
2400dd5c:	b580      	push	{r7, lr}
2400dd5e:	b086      	sub	sp, #24
2400dd60:	af00      	add	r7, sp, #0
2400dd62:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
2400dd64:	687b      	ldr	r3, [r7, #4]
2400dd66:	681b      	ldr	r3, [r3, #0]
2400dd68:	699b      	ldr	r3, [r3, #24]
2400dd6a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
2400dd6c:	687b      	ldr	r3, [r7, #4]
2400dd6e:	681b      	ldr	r3, [r3, #0]
2400dd70:	681b      	ldr	r3, [r3, #0]
2400dd72:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
2400dd74:	697b      	ldr	r3, [r7, #20]
2400dd76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
2400dd7a:	2b00      	cmp	r3, #0
2400dd7c:	d00f      	beq.n	2400dd9e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
2400dd7e:	693b      	ldr	r3, [r7, #16]
2400dd80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
2400dd84:	2b00      	cmp	r3, #0
2400dd86:	d00a      	beq.n	2400dd9e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
2400dd88:	687b      	ldr	r3, [r7, #4]
2400dd8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2400dd8c:	f043 0201 	orr.w	r2, r3, #1
2400dd90:	687b      	ldr	r3, [r7, #4]
2400dd92:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
2400dd94:	687b      	ldr	r3, [r7, #4]
2400dd96:	681b      	ldr	r3, [r3, #0]
2400dd98:	f44f 7280 	mov.w	r2, #256	@ 0x100
2400dd9c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
2400dd9e:	697b      	ldr	r3, [r7, #20]
2400dda0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
2400dda4:	2b00      	cmp	r3, #0
2400dda6:	d00f      	beq.n	2400ddc8 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
2400dda8:	693b      	ldr	r3, [r7, #16]
2400ddaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
2400ddae:	2b00      	cmp	r3, #0
2400ddb0:	d00a      	beq.n	2400ddc8 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
2400ddb2:	687b      	ldr	r3, [r7, #4]
2400ddb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2400ddb6:	f043 0208 	orr.w	r2, r3, #8
2400ddba:	687b      	ldr	r3, [r7, #4]
2400ddbc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
2400ddbe:	687b      	ldr	r3, [r7, #4]
2400ddc0:	681b      	ldr	r3, [r3, #0]
2400ddc2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
2400ddc6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
2400ddc8:	697b      	ldr	r3, [r7, #20]
2400ddca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
2400ddce:	2b00      	cmp	r3, #0
2400ddd0:	d00f      	beq.n	2400ddf2 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
2400ddd2:	693b      	ldr	r3, [r7, #16]
2400ddd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
2400ddd8:	2b00      	cmp	r3, #0
2400ddda:	d00a      	beq.n	2400ddf2 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
2400dddc:	687b      	ldr	r3, [r7, #4]
2400ddde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2400dde0:	f043 0202 	orr.w	r2, r3, #2
2400dde4:	687b      	ldr	r3, [r7, #4]
2400dde6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
2400dde8:	687b      	ldr	r3, [r7, #4]
2400ddea:	681b      	ldr	r3, [r3, #0]
2400ddec:	f44f 7200 	mov.w	r2, #512	@ 0x200
2400ddf0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
2400ddf2:	687b      	ldr	r3, [r7, #4]
2400ddf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2400ddf6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
2400ddf8:	68fb      	ldr	r3, [r7, #12]
2400ddfa:	f003 030b 	and.w	r3, r3, #11
2400ddfe:	2b00      	cmp	r3, #0
2400de00:	d003      	beq.n	2400de0a <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
2400de02:	68f9      	ldr	r1, [r7, #12]
2400de04:	6878      	ldr	r0, [r7, #4]
2400de06:	f001 fcfb 	bl	2400f800 <I2C_ITError>
  }
}
2400de0a:	bf00      	nop
2400de0c:	3718      	adds	r7, #24
2400de0e:	46bd      	mov	sp, r7
2400de10:	bd80      	pop	{r7, pc}

2400de12 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
2400de12:	b480      	push	{r7}
2400de14:	b083      	sub	sp, #12
2400de16:	af00      	add	r7, sp, #0
2400de18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
2400de1a:	bf00      	nop
2400de1c:	370c      	adds	r7, #12
2400de1e:	46bd      	mov	sp, r7
2400de20:	f85d 7b04 	ldr.w	r7, [sp], #4
2400de24:	4770      	bx	lr

2400de26 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
2400de26:	b480      	push	{r7}
2400de28:	b083      	sub	sp, #12
2400de2a:	af00      	add	r7, sp, #0
2400de2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
2400de2e:	bf00      	nop
2400de30:	370c      	adds	r7, #12
2400de32:	46bd      	mov	sp, r7
2400de34:	f85d 7b04 	ldr.w	r7, [sp], #4
2400de38:	4770      	bx	lr

2400de3a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
2400de3a:	b480      	push	{r7}
2400de3c:	b083      	sub	sp, #12
2400de3e:	af00      	add	r7, sp, #0
2400de40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
2400de42:	bf00      	nop
2400de44:	370c      	adds	r7, #12
2400de46:	46bd      	mov	sp, r7
2400de48:	f85d 7b04 	ldr.w	r7, [sp], #4
2400de4c:	4770      	bx	lr

2400de4e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
2400de4e:	b480      	push	{r7}
2400de50:	b083      	sub	sp, #12
2400de52:	af00      	add	r7, sp, #0
2400de54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
2400de56:	bf00      	nop
2400de58:	370c      	adds	r7, #12
2400de5a:	46bd      	mov	sp, r7
2400de5c:	f85d 7b04 	ldr.w	r7, [sp], #4
2400de60:	4770      	bx	lr

2400de62 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
2400de62:	b480      	push	{r7}
2400de64:	b083      	sub	sp, #12
2400de66:	af00      	add	r7, sp, #0
2400de68:	6078      	str	r0, [r7, #4]
2400de6a:	460b      	mov	r3, r1
2400de6c:	70fb      	strb	r3, [r7, #3]
2400de6e:	4613      	mov	r3, r2
2400de70:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
2400de72:	bf00      	nop
2400de74:	370c      	adds	r7, #12
2400de76:	46bd      	mov	sp, r7
2400de78:	f85d 7b04 	ldr.w	r7, [sp], #4
2400de7c:	4770      	bx	lr

2400de7e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
2400de7e:	b480      	push	{r7}
2400de80:	b083      	sub	sp, #12
2400de82:	af00      	add	r7, sp, #0
2400de84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
2400de86:	bf00      	nop
2400de88:	370c      	adds	r7, #12
2400de8a:	46bd      	mov	sp, r7
2400de8c:	f85d 7b04 	ldr.w	r7, [sp], #4
2400de90:	4770      	bx	lr

2400de92 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
2400de92:	b480      	push	{r7}
2400de94:	b083      	sub	sp, #12
2400de96:	af00      	add	r7, sp, #0
2400de98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
2400de9a:	bf00      	nop
2400de9c:	370c      	adds	r7, #12
2400de9e:	46bd      	mov	sp, r7
2400dea0:	f85d 7b04 	ldr.w	r7, [sp], #4
2400dea4:	4770      	bx	lr

2400dea6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
2400dea6:	b480      	push	{r7}
2400dea8:	b083      	sub	sp, #12
2400deaa:	af00      	add	r7, sp, #0
2400deac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
2400deae:	bf00      	nop
2400deb0:	370c      	adds	r7, #12
2400deb2:	46bd      	mov	sp, r7
2400deb4:	f85d 7b04 	ldr.w	r7, [sp], #4
2400deb8:	4770      	bx	lr

2400deba <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
2400deba:	b480      	push	{r7}
2400debc:	b083      	sub	sp, #12
2400debe:	af00      	add	r7, sp, #0
2400dec0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
2400dec2:	bf00      	nop
2400dec4:	370c      	adds	r7, #12
2400dec6:	46bd      	mov	sp, r7
2400dec8:	f85d 7b04 	ldr.w	r7, [sp], #4
2400decc:	4770      	bx	lr

2400dece <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
2400dece:	b480      	push	{r7}
2400ded0:	b083      	sub	sp, #12
2400ded2:	af00      	add	r7, sp, #0
2400ded4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
2400ded6:	bf00      	nop
2400ded8:	370c      	adds	r7, #12
2400deda:	46bd      	mov	sp, r7
2400dedc:	f85d 7b04 	ldr.w	r7, [sp], #4
2400dee0:	4770      	bx	lr

2400dee2 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
2400dee2:	b480      	push	{r7}
2400dee4:	b083      	sub	sp, #12
2400dee6:	af00      	add	r7, sp, #0
2400dee8:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
2400deea:	687b      	ldr	r3, [r7, #4]
2400deec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400def0:	b2db      	uxtb	r3, r3
}
2400def2:	4618      	mov	r0, r3
2400def4:	370c      	adds	r7, #12
2400def6:	46bd      	mov	sp, r7
2400def8:	f85d 7b04 	ldr.w	r7, [sp], #4
2400defc:	4770      	bx	lr

2400defe <HAL_I2C_GetMode>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL mode
  */
HAL_I2C_ModeTypeDef HAL_I2C_GetMode(const I2C_HandleTypeDef *hi2c)
{
2400defe:	b480      	push	{r7}
2400df00:	b083      	sub	sp, #12
2400df02:	af00      	add	r7, sp, #0
2400df04:	6078      	str	r0, [r7, #4]
  return hi2c->Mode;
2400df06:	687b      	ldr	r3, [r7, #4]
2400df08:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
2400df0c:	b2db      	uxtb	r3, r3
}
2400df0e:	4618      	mov	r0, r3
2400df10:	370c      	adds	r7, #12
2400df12:	46bd      	mov	sp, r7
2400df14:	f85d 7b04 	ldr.w	r7, [sp], #4
2400df18:	4770      	bx	lr

2400df1a <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
2400df1a:	b480      	push	{r7}
2400df1c:	b083      	sub	sp, #12
2400df1e:	af00      	add	r7, sp, #0
2400df20:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
2400df22:	687b      	ldr	r3, [r7, #4]
2400df24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
2400df26:	4618      	mov	r0, r3
2400df28:	370c      	adds	r7, #12
2400df2a:	46bd      	mov	sp, r7
2400df2c:	f85d 7b04 	ldr.w	r7, [sp], #4
2400df30:	4770      	bx	lr

2400df32 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
2400df32:	b580      	push	{r7, lr}
2400df34:	b088      	sub	sp, #32
2400df36:	af02      	add	r7, sp, #8
2400df38:	60f8      	str	r0, [r7, #12]
2400df3a:	60b9      	str	r1, [r7, #8]
2400df3c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
2400df3e:	68bb      	ldr	r3, [r7, #8]
2400df40:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
2400df42:	68fb      	ldr	r3, [r7, #12]
2400df44:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2400df48:	2b01      	cmp	r3, #1
2400df4a:	d101      	bne.n	2400df50 <I2C_Master_ISR_IT+0x1e>
2400df4c:	2302      	movs	r3, #2
2400df4e:	e113      	b.n	2400e178 <I2C_Master_ISR_IT+0x246>
2400df50:	68fb      	ldr	r3, [r7, #12]
2400df52:	2201      	movs	r2, #1
2400df54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
2400df58:	697b      	ldr	r3, [r7, #20]
2400df5a:	f003 0310 	and.w	r3, r3, #16
2400df5e:	2b00      	cmp	r3, #0
2400df60:	d012      	beq.n	2400df88 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
2400df62:	687b      	ldr	r3, [r7, #4]
2400df64:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
2400df68:	2b00      	cmp	r3, #0
2400df6a:	d00d      	beq.n	2400df88 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400df6c:	68fb      	ldr	r3, [r7, #12]
2400df6e:	681b      	ldr	r3, [r3, #0]
2400df70:	2210      	movs	r2, #16
2400df72:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2400df74:	68fb      	ldr	r3, [r7, #12]
2400df76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2400df78:	f043 0204 	orr.w	r2, r3, #4
2400df7c:	68fb      	ldr	r3, [r7, #12]
2400df7e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
2400df80:	68f8      	ldr	r0, [r7, #12]
2400df82:	f001 fd54 	bl	2400fa2e <I2C_Flush_TXDR>
2400df86:	e0e4      	b.n	2400e152 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
2400df88:	697b      	ldr	r3, [r7, #20]
2400df8a:	f003 0304 	and.w	r3, r3, #4
2400df8e:	2b00      	cmp	r3, #0
2400df90:	d022      	beq.n	2400dfd8 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
2400df92:	687b      	ldr	r3, [r7, #4]
2400df94:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
2400df98:	2b00      	cmp	r3, #0
2400df9a:	d01d      	beq.n	2400dfd8 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
2400df9c:	697b      	ldr	r3, [r7, #20]
2400df9e:	f023 0304 	bic.w	r3, r3, #4
2400dfa2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2400dfa4:	68fb      	ldr	r3, [r7, #12]
2400dfa6:	681b      	ldr	r3, [r3, #0]
2400dfa8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
2400dfaa:	68fb      	ldr	r3, [r7, #12]
2400dfac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2400dfae:	b2d2      	uxtb	r2, r2
2400dfb0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
2400dfb2:	68fb      	ldr	r3, [r7, #12]
2400dfb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2400dfb6:	1c5a      	adds	r2, r3, #1
2400dfb8:	68fb      	ldr	r3, [r7, #12]
2400dfba:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
2400dfbc:	68fb      	ldr	r3, [r7, #12]
2400dfbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400dfc0:	3b01      	subs	r3, #1
2400dfc2:	b29a      	uxth	r2, r3
2400dfc4:	68fb      	ldr	r3, [r7, #12]
2400dfc6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
2400dfc8:	68fb      	ldr	r3, [r7, #12]
2400dfca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400dfcc:	b29b      	uxth	r3, r3
2400dfce:	3b01      	subs	r3, #1
2400dfd0:	b29a      	uxth	r2, r3
2400dfd2:	68fb      	ldr	r3, [r7, #12]
2400dfd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
2400dfd6:	e0bc      	b.n	2400e152 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
2400dfd8:	697b      	ldr	r3, [r7, #20]
2400dfda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
2400dfde:	2b00      	cmp	r3, #0
2400dfe0:	d128      	bne.n	2400e034 <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
2400dfe2:	697b      	ldr	r3, [r7, #20]
2400dfe4:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
2400dfe8:	2b00      	cmp	r3, #0
2400dfea:	d023      	beq.n	2400e034 <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
2400dfec:	687b      	ldr	r3, [r7, #4]
2400dfee:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
2400dff2:	2b00      	cmp	r3, #0
2400dff4:	d01e      	beq.n	2400e034 <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
2400dff6:	68fb      	ldr	r3, [r7, #12]
2400dff8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400dffa:	b29b      	uxth	r3, r3
2400dffc:	2b00      	cmp	r3, #0
2400dffe:	f000 80a8 	beq.w	2400e152 <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2400e002:	68fb      	ldr	r3, [r7, #12]
2400e004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2400e006:	781a      	ldrb	r2, [r3, #0]
2400e008:	68fb      	ldr	r3, [r7, #12]
2400e00a:	681b      	ldr	r3, [r3, #0]
2400e00c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2400e00e:	68fb      	ldr	r3, [r7, #12]
2400e010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2400e012:	1c5a      	adds	r2, r3, #1
2400e014:	68fb      	ldr	r3, [r7, #12]
2400e016:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
2400e018:	68fb      	ldr	r3, [r7, #12]
2400e01a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400e01c:	3b01      	subs	r3, #1
2400e01e:	b29a      	uxth	r2, r3
2400e020:	68fb      	ldr	r3, [r7, #12]
2400e022:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
2400e024:	68fb      	ldr	r3, [r7, #12]
2400e026:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400e028:	b29b      	uxth	r3, r3
2400e02a:	3b01      	subs	r3, #1
2400e02c:	b29a      	uxth	r2, r3
2400e02e:	68fb      	ldr	r3, [r7, #12]
2400e030:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
2400e032:	e08e      	b.n	2400e152 <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
2400e034:	697b      	ldr	r3, [r7, #20]
2400e036:	f003 0380 	and.w	r3, r3, #128	@ 0x80
2400e03a:	2b00      	cmp	r3, #0
2400e03c:	d05c      	beq.n	2400e0f8 <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
2400e03e:	687b      	ldr	r3, [r7, #4]
2400e040:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
2400e044:	2b00      	cmp	r3, #0
2400e046:	d057      	beq.n	2400e0f8 <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
2400e048:	68fb      	ldr	r3, [r7, #12]
2400e04a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400e04c:	b29b      	uxth	r3, r3
2400e04e:	2b00      	cmp	r3, #0
2400e050:	d040      	beq.n	2400e0d4 <I2C_Master_ISR_IT+0x1a2>
2400e052:	68fb      	ldr	r3, [r7, #12]
2400e054:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400e056:	2b00      	cmp	r3, #0
2400e058:	d13c      	bne.n	2400e0d4 <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
2400e05a:	68fb      	ldr	r3, [r7, #12]
2400e05c:	681b      	ldr	r3, [r3, #0]
2400e05e:	685b      	ldr	r3, [r3, #4]
2400e060:	b29b      	uxth	r3, r3
2400e062:	f3c3 0309 	ubfx	r3, r3, #0, #10
2400e066:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400e068:	68fb      	ldr	r3, [r7, #12]
2400e06a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400e06c:	b29b      	uxth	r3, r3
2400e06e:	2bff      	cmp	r3, #255	@ 0xff
2400e070:	d90e      	bls.n	2400e090 <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
2400e072:	68fb      	ldr	r3, [r7, #12]
2400e074:	22ff      	movs	r2, #255	@ 0xff
2400e076:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
2400e078:	68fb      	ldr	r3, [r7, #12]
2400e07a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400e07c:	b2da      	uxtb	r2, r3
2400e07e:	8a79      	ldrh	r1, [r7, #18]
2400e080:	2300      	movs	r3, #0
2400e082:	9300      	str	r3, [sp, #0]
2400e084:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
2400e088:	68f8      	ldr	r0, [r7, #12]
2400e08a:	f002 fa05 	bl	24010498 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400e08e:	e032      	b.n	2400e0f6 <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
2400e090:	68fb      	ldr	r3, [r7, #12]
2400e092:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400e094:	b29a      	uxth	r2, r3
2400e096:	68fb      	ldr	r3, [r7, #12]
2400e098:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
2400e09a:	68fb      	ldr	r3, [r7, #12]
2400e09c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2400e09e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
2400e0a2:	d00b      	beq.n	2400e0bc <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
2400e0a4:	68fb      	ldr	r3, [r7, #12]
2400e0a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400e0a8:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
2400e0aa:	68fb      	ldr	r3, [r7, #12]
2400e0ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
2400e0ae:	8a79      	ldrh	r1, [r7, #18]
2400e0b0:	2000      	movs	r0, #0
2400e0b2:	9000      	str	r0, [sp, #0]
2400e0b4:	68f8      	ldr	r0, [r7, #12]
2400e0b6:	f002 f9ef 	bl	24010498 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400e0ba:	e01c      	b.n	2400e0f6 <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
2400e0bc:	68fb      	ldr	r3, [r7, #12]
2400e0be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400e0c0:	b2da      	uxtb	r2, r3
2400e0c2:	8a79      	ldrh	r1, [r7, #18]
2400e0c4:	2300      	movs	r3, #0
2400e0c6:	9300      	str	r3, [sp, #0]
2400e0c8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
2400e0cc:	68f8      	ldr	r0, [r7, #12]
2400e0ce:	f002 f9e3 	bl	24010498 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400e0d2:	e010      	b.n	2400e0f6 <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
2400e0d4:	68fb      	ldr	r3, [r7, #12]
2400e0d6:	681b      	ldr	r3, [r3, #0]
2400e0d8:	685b      	ldr	r3, [r3, #4]
2400e0da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
2400e0de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
2400e0e2:	d003      	beq.n	2400e0ec <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
2400e0e4:	68f8      	ldr	r0, [r7, #12]
2400e0e6:	f000 ff81 	bl	2400efec <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
2400e0ea:	e032      	b.n	2400e152 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
2400e0ec:	2140      	movs	r1, #64	@ 0x40
2400e0ee:	68f8      	ldr	r0, [r7, #12]
2400e0f0:	f001 fb86 	bl	2400f800 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
2400e0f4:	e02d      	b.n	2400e152 <I2C_Master_ISR_IT+0x220>
2400e0f6:	e02c      	b.n	2400e152 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
2400e0f8:	697b      	ldr	r3, [r7, #20]
2400e0fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
2400e0fe:	2b00      	cmp	r3, #0
2400e100:	d027      	beq.n	2400e152 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
2400e102:	687b      	ldr	r3, [r7, #4]
2400e104:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
2400e108:	2b00      	cmp	r3, #0
2400e10a:	d022      	beq.n	2400e152 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
2400e10c:	68fb      	ldr	r3, [r7, #12]
2400e10e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400e110:	b29b      	uxth	r3, r3
2400e112:	2b00      	cmp	r3, #0
2400e114:	d119      	bne.n	2400e14a <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
2400e116:	68fb      	ldr	r3, [r7, #12]
2400e118:	681b      	ldr	r3, [r3, #0]
2400e11a:	685b      	ldr	r3, [r3, #4]
2400e11c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
2400e120:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
2400e124:	d015      	beq.n	2400e152 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
2400e126:	68fb      	ldr	r3, [r7, #12]
2400e128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2400e12a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
2400e12e:	d108      	bne.n	2400e142 <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
2400e130:	68fb      	ldr	r3, [r7, #12]
2400e132:	681b      	ldr	r3, [r3, #0]
2400e134:	685a      	ldr	r2, [r3, #4]
2400e136:	68fb      	ldr	r3, [r7, #12]
2400e138:	681b      	ldr	r3, [r3, #0]
2400e13a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
2400e13e:	605a      	str	r2, [r3, #4]
2400e140:	e007      	b.n	2400e152 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
2400e142:	68f8      	ldr	r0, [r7, #12]
2400e144:	f000 ff52 	bl	2400efec <I2C_ITMasterSeqCplt>
2400e148:	e003      	b.n	2400e152 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
2400e14a:	2140      	movs	r1, #64	@ 0x40
2400e14c:	68f8      	ldr	r0, [r7, #12]
2400e14e:	f001 fb57 	bl	2400f800 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
2400e152:	697b      	ldr	r3, [r7, #20]
2400e154:	f003 0320 	and.w	r3, r3, #32
2400e158:	2b00      	cmp	r3, #0
2400e15a:	d008      	beq.n	2400e16e <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
2400e15c:	687b      	ldr	r3, [r7, #4]
2400e15e:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
2400e162:	2b00      	cmp	r3, #0
2400e164:	d003      	beq.n	2400e16e <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
2400e166:	6979      	ldr	r1, [r7, #20]
2400e168:	68f8      	ldr	r0, [r7, #12]
2400e16a:	f000 ffd9 	bl	2400f120 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
2400e16e:	68fb      	ldr	r3, [r7, #12]
2400e170:	2200      	movs	r2, #0
2400e172:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
2400e176:	2300      	movs	r3, #0
}
2400e178:	4618      	mov	r0, r3
2400e17a:	3718      	adds	r7, #24
2400e17c:	46bd      	mov	sp, r7
2400e17e:	bd80      	pop	{r7, pc}

2400e180 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
2400e180:	b580      	push	{r7, lr}
2400e182:	b088      	sub	sp, #32
2400e184:	af02      	add	r7, sp, #8
2400e186:	60f8      	str	r0, [r7, #12]
2400e188:	60b9      	str	r1, [r7, #8]
2400e18a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
2400e18c:	4b8d      	ldr	r3, [pc, #564]	@ (2400e3c4 <I2C_Mem_ISR_IT+0x244>)
2400e18e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
2400e190:	68bb      	ldr	r3, [r7, #8]
2400e192:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
2400e194:	68fb      	ldr	r3, [r7, #12]
2400e196:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2400e19a:	2b01      	cmp	r3, #1
2400e19c:	d101      	bne.n	2400e1a2 <I2C_Mem_ISR_IT+0x22>
2400e19e:	2302      	movs	r3, #2
2400e1a0:	e10c      	b.n	2400e3bc <I2C_Mem_ISR_IT+0x23c>
2400e1a2:	68fb      	ldr	r3, [r7, #12]
2400e1a4:	2201      	movs	r2, #1
2400e1a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
2400e1aa:	693b      	ldr	r3, [r7, #16]
2400e1ac:	f003 0310 	and.w	r3, r3, #16
2400e1b0:	2b00      	cmp	r3, #0
2400e1b2:	d012      	beq.n	2400e1da <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
2400e1b4:	687b      	ldr	r3, [r7, #4]
2400e1b6:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
2400e1ba:	2b00      	cmp	r3, #0
2400e1bc:	d00d      	beq.n	2400e1da <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400e1be:	68fb      	ldr	r3, [r7, #12]
2400e1c0:	681b      	ldr	r3, [r3, #0]
2400e1c2:	2210      	movs	r2, #16
2400e1c4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2400e1c6:	68fb      	ldr	r3, [r7, #12]
2400e1c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2400e1ca:	f043 0204 	orr.w	r2, r3, #4
2400e1ce:	68fb      	ldr	r3, [r7, #12]
2400e1d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
2400e1d2:	68f8      	ldr	r0, [r7, #12]
2400e1d4:	f001 fc2b 	bl	2400fa2e <I2C_Flush_TXDR>
2400e1d8:	e0dd      	b.n	2400e396 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
2400e1da:	693b      	ldr	r3, [r7, #16]
2400e1dc:	f003 0304 	and.w	r3, r3, #4
2400e1e0:	2b00      	cmp	r3, #0
2400e1e2:	d022      	beq.n	2400e22a <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
2400e1e4:	687b      	ldr	r3, [r7, #4]
2400e1e6:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
2400e1ea:	2b00      	cmp	r3, #0
2400e1ec:	d01d      	beq.n	2400e22a <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
2400e1ee:	693b      	ldr	r3, [r7, #16]
2400e1f0:	f023 0304 	bic.w	r3, r3, #4
2400e1f4:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2400e1f6:	68fb      	ldr	r3, [r7, #12]
2400e1f8:	681b      	ldr	r3, [r3, #0]
2400e1fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
2400e1fc:	68fb      	ldr	r3, [r7, #12]
2400e1fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2400e200:	b2d2      	uxtb	r2, r2
2400e202:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
2400e204:	68fb      	ldr	r3, [r7, #12]
2400e206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2400e208:	1c5a      	adds	r2, r3, #1
2400e20a:	68fb      	ldr	r3, [r7, #12]
2400e20c:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
2400e20e:	68fb      	ldr	r3, [r7, #12]
2400e210:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400e212:	3b01      	subs	r3, #1
2400e214:	b29a      	uxth	r2, r3
2400e216:	68fb      	ldr	r3, [r7, #12]
2400e218:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
2400e21a:	68fb      	ldr	r3, [r7, #12]
2400e21c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400e21e:	b29b      	uxth	r3, r3
2400e220:	3b01      	subs	r3, #1
2400e222:	b29a      	uxth	r2, r3
2400e224:	68fb      	ldr	r3, [r7, #12]
2400e226:	855a      	strh	r2, [r3, #42]	@ 0x2a
2400e228:	e0b5      	b.n	2400e396 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
2400e22a:	693b      	ldr	r3, [r7, #16]
2400e22c:	f003 0302 	and.w	r3, r3, #2
2400e230:	2b00      	cmp	r3, #0
2400e232:	d02c      	beq.n	2400e28e <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
2400e234:	687b      	ldr	r3, [r7, #4]
2400e236:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
2400e23a:	2b00      	cmp	r3, #0
2400e23c:	d027      	beq.n	2400e28e <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
2400e23e:	68fb      	ldr	r3, [r7, #12]
2400e240:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2400e242:	f1b3 3fff 	cmp.w	r3, #4294967295
2400e246:	d118      	bne.n	2400e27a <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2400e248:	68fb      	ldr	r3, [r7, #12]
2400e24a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2400e24c:	781a      	ldrb	r2, [r3, #0]
2400e24e:	68fb      	ldr	r3, [r7, #12]
2400e250:	681b      	ldr	r3, [r3, #0]
2400e252:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2400e254:	68fb      	ldr	r3, [r7, #12]
2400e256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2400e258:	1c5a      	adds	r2, r3, #1
2400e25a:	68fb      	ldr	r3, [r7, #12]
2400e25c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
2400e25e:	68fb      	ldr	r3, [r7, #12]
2400e260:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400e262:	3b01      	subs	r3, #1
2400e264:	b29a      	uxth	r2, r3
2400e266:	68fb      	ldr	r3, [r7, #12]
2400e268:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
2400e26a:	68fb      	ldr	r3, [r7, #12]
2400e26c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400e26e:	b29b      	uxth	r3, r3
2400e270:	3b01      	subs	r3, #1
2400e272:	b29a      	uxth	r2, r3
2400e274:	68fb      	ldr	r3, [r7, #12]
2400e276:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
2400e278:	e08d      	b.n	2400e396 <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
2400e27a:	68fb      	ldr	r3, [r7, #12]
2400e27c:	681b      	ldr	r3, [r3, #0]
2400e27e:	68fa      	ldr	r2, [r7, #12]
2400e280:	6d12      	ldr	r2, [r2, #80]	@ 0x50
2400e282:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
2400e284:	68fb      	ldr	r3, [r7, #12]
2400e286:	f04f 32ff 	mov.w	r2, #4294967295
2400e28a:	651a      	str	r2, [r3, #80]	@ 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
2400e28c:	e083      	b.n	2400e396 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
2400e28e:	693b      	ldr	r3, [r7, #16]
2400e290:	f003 0380 	and.w	r3, r3, #128	@ 0x80
2400e294:	2b00      	cmp	r3, #0
2400e296:	d03c      	beq.n	2400e312 <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
2400e298:	687b      	ldr	r3, [r7, #4]
2400e29a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
2400e29e:	2b00      	cmp	r3, #0
2400e2a0:	d037      	beq.n	2400e312 <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
2400e2a2:	68fb      	ldr	r3, [r7, #12]
2400e2a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400e2a6:	b29b      	uxth	r3, r3
2400e2a8:	2b00      	cmp	r3, #0
2400e2aa:	d02c      	beq.n	2400e306 <I2C_Mem_ISR_IT+0x186>
2400e2ac:	68fb      	ldr	r3, [r7, #12]
2400e2ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400e2b0:	2b00      	cmp	r3, #0
2400e2b2:	d128      	bne.n	2400e306 <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400e2b4:	68fb      	ldr	r3, [r7, #12]
2400e2b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400e2b8:	b29b      	uxth	r3, r3
2400e2ba:	2bff      	cmp	r3, #255	@ 0xff
2400e2bc:	d910      	bls.n	2400e2e0 <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
2400e2be:	68fb      	ldr	r3, [r7, #12]
2400e2c0:	22ff      	movs	r2, #255	@ 0xff
2400e2c2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
2400e2c4:	68fb      	ldr	r3, [r7, #12]
2400e2c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
2400e2c8:	b299      	uxth	r1, r3
2400e2ca:	68fb      	ldr	r3, [r7, #12]
2400e2cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400e2ce:	b2da      	uxtb	r2, r3
2400e2d0:	2300      	movs	r3, #0
2400e2d2:	9300      	str	r3, [sp, #0]
2400e2d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
2400e2d8:	68f8      	ldr	r0, [r7, #12]
2400e2da:	f002 f8dd 	bl	24010498 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400e2de:	e017      	b.n	2400e310 <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
2400e2e0:	68fb      	ldr	r3, [r7, #12]
2400e2e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400e2e4:	b29a      	uxth	r2, r3
2400e2e6:	68fb      	ldr	r3, [r7, #12]
2400e2e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
2400e2ea:	68fb      	ldr	r3, [r7, #12]
2400e2ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
2400e2ee:	b299      	uxth	r1, r3
2400e2f0:	68fb      	ldr	r3, [r7, #12]
2400e2f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400e2f4:	b2da      	uxtb	r2, r3
2400e2f6:	2300      	movs	r3, #0
2400e2f8:	9300      	str	r3, [sp, #0]
2400e2fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
2400e2fe:	68f8      	ldr	r0, [r7, #12]
2400e300:	f002 f8ca 	bl	24010498 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400e304:	e004      	b.n	2400e310 <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
2400e306:	2140      	movs	r1, #64	@ 0x40
2400e308:	68f8      	ldr	r0, [r7, #12]
2400e30a:	f001 fa79 	bl	2400f800 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
2400e30e:	e042      	b.n	2400e396 <I2C_Mem_ISR_IT+0x216>
2400e310:	e041      	b.n	2400e396 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
2400e312:	693b      	ldr	r3, [r7, #16]
2400e314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
2400e318:	2b00      	cmp	r3, #0
2400e31a:	d03c      	beq.n	2400e396 <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
2400e31c:	687b      	ldr	r3, [r7, #4]
2400e31e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
2400e322:	2b00      	cmp	r3, #0
2400e324:	d037      	beq.n	2400e396 <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
2400e326:	2101      	movs	r1, #1
2400e328:	68f8      	ldr	r0, [r7, #12]
2400e32a:	f002 f96b 	bl	24010604 <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
2400e32e:	2102      	movs	r1, #2
2400e330:	68f8      	ldr	r0, [r7, #12]
2400e332:	f002 f8e3 	bl	240104fc <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
2400e336:	68fb      	ldr	r3, [r7, #12]
2400e338:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400e33c:	b2db      	uxtb	r3, r3
2400e33e:	2b22      	cmp	r3, #34	@ 0x22
2400e340:	d101      	bne.n	2400e346 <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
2400e342:	4b21      	ldr	r3, [pc, #132]	@ (2400e3c8 <I2C_Mem_ISR_IT+0x248>)
2400e344:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400e346:	68fb      	ldr	r3, [r7, #12]
2400e348:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400e34a:	b29b      	uxth	r3, r3
2400e34c:	2bff      	cmp	r3, #255	@ 0xff
2400e34e:	d910      	bls.n	2400e372 <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400e350:	68fb      	ldr	r3, [r7, #12]
2400e352:	22ff      	movs	r2, #255	@ 0xff
2400e354:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
2400e356:	68fb      	ldr	r3, [r7, #12]
2400e358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
2400e35a:	b299      	uxth	r1, r3
2400e35c:	68fb      	ldr	r3, [r7, #12]
2400e35e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400e360:	b2da      	uxtb	r2, r3
2400e362:	697b      	ldr	r3, [r7, #20]
2400e364:	9300      	str	r3, [sp, #0]
2400e366:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
2400e36a:	68f8      	ldr	r0, [r7, #12]
2400e36c:	f002 f894 	bl	24010498 <I2C_TransferConfig>
2400e370:	e011      	b.n	2400e396 <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400e372:	68fb      	ldr	r3, [r7, #12]
2400e374:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400e376:	b29a      	uxth	r2, r3
2400e378:	68fb      	ldr	r3, [r7, #12]
2400e37a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
2400e37c:	68fb      	ldr	r3, [r7, #12]
2400e37e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
2400e380:	b299      	uxth	r1, r3
2400e382:	68fb      	ldr	r3, [r7, #12]
2400e384:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400e386:	b2da      	uxtb	r2, r3
2400e388:	697b      	ldr	r3, [r7, #20]
2400e38a:	9300      	str	r3, [sp, #0]
2400e38c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
2400e390:	68f8      	ldr	r0, [r7, #12]
2400e392:	f002 f881 	bl	24010498 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
2400e396:	693b      	ldr	r3, [r7, #16]
2400e398:	f003 0320 	and.w	r3, r3, #32
2400e39c:	2b00      	cmp	r3, #0
2400e39e:	d008      	beq.n	2400e3b2 <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
2400e3a0:	687b      	ldr	r3, [r7, #4]
2400e3a2:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
2400e3a6:	2b00      	cmp	r3, #0
2400e3a8:	d003      	beq.n	2400e3b2 <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
2400e3aa:	6939      	ldr	r1, [r7, #16]
2400e3ac:	68f8      	ldr	r0, [r7, #12]
2400e3ae:	f000 feb7 	bl	2400f120 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
2400e3b2:	68fb      	ldr	r3, [r7, #12]
2400e3b4:	2200      	movs	r2, #0
2400e3b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
2400e3ba:	2300      	movs	r3, #0
}
2400e3bc:	4618      	mov	r0, r3
2400e3be:	3718      	adds	r7, #24
2400e3c0:	46bd      	mov	sp, r7
2400e3c2:	bd80      	pop	{r7, pc}
2400e3c4:	80002000 	.word	0x80002000
2400e3c8:	80002400 	.word	0x80002400

2400e3cc <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
2400e3cc:	b580      	push	{r7, lr}
2400e3ce:	b086      	sub	sp, #24
2400e3d0:	af00      	add	r7, sp, #0
2400e3d2:	60f8      	str	r0, [r7, #12]
2400e3d4:	60b9      	str	r1, [r7, #8]
2400e3d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
2400e3d8:	68fb      	ldr	r3, [r7, #12]
2400e3da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2400e3dc:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
2400e3de:	68bb      	ldr	r3, [r7, #8]
2400e3e0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
2400e3e2:	68fb      	ldr	r3, [r7, #12]
2400e3e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2400e3e8:	2b01      	cmp	r3, #1
2400e3ea:	d101      	bne.n	2400e3f0 <I2C_Slave_ISR_IT+0x24>
2400e3ec:	2302      	movs	r3, #2
2400e3ee:	e0e2      	b.n	2400e5b6 <I2C_Slave_ISR_IT+0x1ea>
2400e3f0:	68fb      	ldr	r3, [r7, #12]
2400e3f2:	2201      	movs	r2, #1
2400e3f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
2400e3f8:	693b      	ldr	r3, [r7, #16]
2400e3fa:	f003 0320 	and.w	r3, r3, #32
2400e3fe:	2b00      	cmp	r3, #0
2400e400:	d009      	beq.n	2400e416 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
2400e402:	687b      	ldr	r3, [r7, #4]
2400e404:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
2400e408:	2b00      	cmp	r3, #0
2400e40a:	d004      	beq.n	2400e416 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
2400e40c:	6939      	ldr	r1, [r7, #16]
2400e40e:	68f8      	ldr	r0, [r7, #12]
2400e410:	f000 ff4e 	bl	2400f2b0 <I2C_ITSlaveCplt>
2400e414:	e0ca      	b.n	2400e5ac <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
2400e416:	693b      	ldr	r3, [r7, #16]
2400e418:	f003 0310 	and.w	r3, r3, #16
2400e41c:	2b00      	cmp	r3, #0
2400e41e:	d04b      	beq.n	2400e4b8 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
2400e420:	687b      	ldr	r3, [r7, #4]
2400e422:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
2400e426:	2b00      	cmp	r3, #0
2400e428:	d046      	beq.n	2400e4b8 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
2400e42a:	68fb      	ldr	r3, [r7, #12]
2400e42c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400e42e:	b29b      	uxth	r3, r3
2400e430:	2b00      	cmp	r3, #0
2400e432:	d128      	bne.n	2400e486 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
2400e434:	68fb      	ldr	r3, [r7, #12]
2400e436:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400e43a:	b2db      	uxtb	r3, r3
2400e43c:	2b28      	cmp	r3, #40	@ 0x28
2400e43e:	d108      	bne.n	2400e452 <I2C_Slave_ISR_IT+0x86>
2400e440:	697b      	ldr	r3, [r7, #20]
2400e442:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
2400e446:	d104      	bne.n	2400e452 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
2400e448:	6939      	ldr	r1, [r7, #16]
2400e44a:	68f8      	ldr	r0, [r7, #12]
2400e44c:	f001 f984 	bl	2400f758 <I2C_ITListenCplt>
2400e450:	e031      	b.n	2400e4b6 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
2400e452:	68fb      	ldr	r3, [r7, #12]
2400e454:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400e458:	b2db      	uxtb	r3, r3
2400e45a:	2b29      	cmp	r3, #41	@ 0x29
2400e45c:	d10e      	bne.n	2400e47c <I2C_Slave_ISR_IT+0xb0>
2400e45e:	697b      	ldr	r3, [r7, #20]
2400e460:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
2400e464:	d00a      	beq.n	2400e47c <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400e466:	68fb      	ldr	r3, [r7, #12]
2400e468:	681b      	ldr	r3, [r3, #0]
2400e46a:	2210      	movs	r2, #16
2400e46c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
2400e46e:	68f8      	ldr	r0, [r7, #12]
2400e470:	f001 fadd 	bl	2400fa2e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
2400e474:	68f8      	ldr	r0, [r7, #12]
2400e476:	f000 fdf6 	bl	2400f066 <I2C_ITSlaveSeqCplt>
2400e47a:	e01c      	b.n	2400e4b6 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400e47c:	68fb      	ldr	r3, [r7, #12]
2400e47e:	681b      	ldr	r3, [r3, #0]
2400e480:	2210      	movs	r2, #16
2400e482:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
2400e484:	e08f      	b.n	2400e5a6 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400e486:	68fb      	ldr	r3, [r7, #12]
2400e488:	681b      	ldr	r3, [r3, #0]
2400e48a:	2210      	movs	r2, #16
2400e48c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2400e48e:	68fb      	ldr	r3, [r7, #12]
2400e490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2400e492:	f043 0204 	orr.w	r2, r3, #4
2400e496:	68fb      	ldr	r3, [r7, #12]
2400e498:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
2400e49a:	697b      	ldr	r3, [r7, #20]
2400e49c:	2b00      	cmp	r3, #0
2400e49e:	d003      	beq.n	2400e4a8 <I2C_Slave_ISR_IT+0xdc>
2400e4a0:	697b      	ldr	r3, [r7, #20]
2400e4a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
2400e4a6:	d17e      	bne.n	2400e5a6 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
2400e4a8:	68fb      	ldr	r3, [r7, #12]
2400e4aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2400e4ac:	4619      	mov	r1, r3
2400e4ae:	68f8      	ldr	r0, [r7, #12]
2400e4b0:	f001 f9a6 	bl	2400f800 <I2C_ITError>
    if (hi2c->XferCount == 0U)
2400e4b4:	e077      	b.n	2400e5a6 <I2C_Slave_ISR_IT+0x1da>
2400e4b6:	e076      	b.n	2400e5a6 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
2400e4b8:	693b      	ldr	r3, [r7, #16]
2400e4ba:	f003 0304 	and.w	r3, r3, #4
2400e4be:	2b00      	cmp	r3, #0
2400e4c0:	d02f      	beq.n	2400e522 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
2400e4c2:	687b      	ldr	r3, [r7, #4]
2400e4c4:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
2400e4c8:	2b00      	cmp	r3, #0
2400e4ca:	d02a      	beq.n	2400e522 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
2400e4cc:	68fb      	ldr	r3, [r7, #12]
2400e4ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400e4d0:	b29b      	uxth	r3, r3
2400e4d2:	2b00      	cmp	r3, #0
2400e4d4:	d018      	beq.n	2400e508 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2400e4d6:	68fb      	ldr	r3, [r7, #12]
2400e4d8:	681b      	ldr	r3, [r3, #0]
2400e4da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
2400e4dc:	68fb      	ldr	r3, [r7, #12]
2400e4de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2400e4e0:	b2d2      	uxtb	r2, r2
2400e4e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2400e4e4:	68fb      	ldr	r3, [r7, #12]
2400e4e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2400e4e8:	1c5a      	adds	r2, r3, #1
2400e4ea:	68fb      	ldr	r3, [r7, #12]
2400e4ec:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
2400e4ee:	68fb      	ldr	r3, [r7, #12]
2400e4f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400e4f2:	3b01      	subs	r3, #1
2400e4f4:	b29a      	uxth	r2, r3
2400e4f6:	68fb      	ldr	r3, [r7, #12]
2400e4f8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
2400e4fa:	68fb      	ldr	r3, [r7, #12]
2400e4fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400e4fe:	b29b      	uxth	r3, r3
2400e500:	3b01      	subs	r3, #1
2400e502:	b29a      	uxth	r2, r3
2400e504:	68fb      	ldr	r3, [r7, #12]
2400e506:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
2400e508:	68fb      	ldr	r3, [r7, #12]
2400e50a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400e50c:	b29b      	uxth	r3, r3
2400e50e:	2b00      	cmp	r3, #0
2400e510:	d14b      	bne.n	2400e5aa <I2C_Slave_ISR_IT+0x1de>
2400e512:	697b      	ldr	r3, [r7, #20]
2400e514:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
2400e518:	d047      	beq.n	2400e5aa <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
2400e51a:	68f8      	ldr	r0, [r7, #12]
2400e51c:	f000 fda3 	bl	2400f066 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
2400e520:	e043      	b.n	2400e5aa <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
2400e522:	693b      	ldr	r3, [r7, #16]
2400e524:	f003 0308 	and.w	r3, r3, #8
2400e528:	2b00      	cmp	r3, #0
2400e52a:	d009      	beq.n	2400e540 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
2400e52c:	687b      	ldr	r3, [r7, #4]
2400e52e:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
2400e532:	2b00      	cmp	r3, #0
2400e534:	d004      	beq.n	2400e540 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
2400e536:	6939      	ldr	r1, [r7, #16]
2400e538:	68f8      	ldr	r0, [r7, #12]
2400e53a:	f000 fcd3 	bl	2400eee4 <I2C_ITAddrCplt>
2400e53e:	e035      	b.n	2400e5ac <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
2400e540:	693b      	ldr	r3, [r7, #16]
2400e542:	f003 0302 	and.w	r3, r3, #2
2400e546:	2b00      	cmp	r3, #0
2400e548:	d030      	beq.n	2400e5ac <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
2400e54a:	687b      	ldr	r3, [r7, #4]
2400e54c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
2400e550:	2b00      	cmp	r3, #0
2400e552:	d02b      	beq.n	2400e5ac <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
2400e554:	68fb      	ldr	r3, [r7, #12]
2400e556:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400e558:	b29b      	uxth	r3, r3
2400e55a:	2b00      	cmp	r3, #0
2400e55c:	d018      	beq.n	2400e590 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2400e55e:	68fb      	ldr	r3, [r7, #12]
2400e560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2400e562:	781a      	ldrb	r2, [r3, #0]
2400e564:	68fb      	ldr	r3, [r7, #12]
2400e566:	681b      	ldr	r3, [r3, #0]
2400e568:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
2400e56a:	68fb      	ldr	r3, [r7, #12]
2400e56c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2400e56e:	1c5a      	adds	r2, r3, #1
2400e570:	68fb      	ldr	r3, [r7, #12]
2400e572:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
2400e574:	68fb      	ldr	r3, [r7, #12]
2400e576:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400e578:	b29b      	uxth	r3, r3
2400e57a:	3b01      	subs	r3, #1
2400e57c:	b29a      	uxth	r2, r3
2400e57e:	68fb      	ldr	r3, [r7, #12]
2400e580:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
2400e582:	68fb      	ldr	r3, [r7, #12]
2400e584:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400e586:	3b01      	subs	r3, #1
2400e588:	b29a      	uxth	r2, r3
2400e58a:	68fb      	ldr	r3, [r7, #12]
2400e58c:	851a      	strh	r2, [r3, #40]	@ 0x28
2400e58e:	e00d      	b.n	2400e5ac <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
2400e590:	697b      	ldr	r3, [r7, #20]
2400e592:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
2400e596:	d002      	beq.n	2400e59e <I2C_Slave_ISR_IT+0x1d2>
2400e598:	697b      	ldr	r3, [r7, #20]
2400e59a:	2b00      	cmp	r3, #0
2400e59c:	d106      	bne.n	2400e5ac <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
2400e59e:	68f8      	ldr	r0, [r7, #12]
2400e5a0:	f000 fd61 	bl	2400f066 <I2C_ITSlaveSeqCplt>
2400e5a4:	e002      	b.n	2400e5ac <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
2400e5a6:	bf00      	nop
2400e5a8:	e000      	b.n	2400e5ac <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
2400e5aa:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
2400e5ac:	68fb      	ldr	r3, [r7, #12]
2400e5ae:	2200      	movs	r2, #0
2400e5b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
2400e5b4:	2300      	movs	r3, #0
}
2400e5b6:	4618      	mov	r0, r3
2400e5b8:	3718      	adds	r7, #24
2400e5ba:	46bd      	mov	sp, r7
2400e5bc:	bd80      	pop	{r7, pc}

2400e5be <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
2400e5be:	b580      	push	{r7, lr}
2400e5c0:	b088      	sub	sp, #32
2400e5c2:	af02      	add	r7, sp, #8
2400e5c4:	60f8      	str	r0, [r7, #12]
2400e5c6:	60b9      	str	r1, [r7, #8]
2400e5c8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
2400e5ca:	68fb      	ldr	r3, [r7, #12]
2400e5cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2400e5d0:	2b01      	cmp	r3, #1
2400e5d2:	d101      	bne.n	2400e5d8 <I2C_Master_ISR_DMA+0x1a>
2400e5d4:	2302      	movs	r3, #2
2400e5d6:	e0d9      	b.n	2400e78c <I2C_Master_ISR_DMA+0x1ce>
2400e5d8:	68fb      	ldr	r3, [r7, #12]
2400e5da:	2201      	movs	r2, #1
2400e5dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
2400e5e0:	68bb      	ldr	r3, [r7, #8]
2400e5e2:	f003 0310 	and.w	r3, r3, #16
2400e5e6:	2b00      	cmp	r3, #0
2400e5e8:	d016      	beq.n	2400e618 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
2400e5ea:	687b      	ldr	r3, [r7, #4]
2400e5ec:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
2400e5f0:	2b00      	cmp	r3, #0
2400e5f2:	d011      	beq.n	2400e618 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400e5f4:	68fb      	ldr	r3, [r7, #12]
2400e5f6:	681b      	ldr	r3, [r3, #0]
2400e5f8:	2210      	movs	r2, #16
2400e5fa:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2400e5fc:	68fb      	ldr	r3, [r7, #12]
2400e5fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2400e600:	f043 0204 	orr.w	r2, r3, #4
2400e604:	68fb      	ldr	r3, [r7, #12]
2400e606:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
2400e608:	2120      	movs	r1, #32
2400e60a:	68f8      	ldr	r0, [r7, #12]
2400e60c:	f001 ff76 	bl	240104fc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
2400e610:	68f8      	ldr	r0, [r7, #12]
2400e612:	f001 fa0c 	bl	2400fa2e <I2C_Flush_TXDR>
2400e616:	e0b4      	b.n	2400e782 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
2400e618:	68bb      	ldr	r3, [r7, #8]
2400e61a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
2400e61e:	2b00      	cmp	r3, #0
2400e620:	d071      	beq.n	2400e706 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
2400e622:	687b      	ldr	r3, [r7, #4]
2400e624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
2400e628:	2b00      	cmp	r3, #0
2400e62a:	d06c      	beq.n	2400e706 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
2400e62c:	68fb      	ldr	r3, [r7, #12]
2400e62e:	681b      	ldr	r3, [r3, #0]
2400e630:	681a      	ldr	r2, [r3, #0]
2400e632:	68fb      	ldr	r3, [r7, #12]
2400e634:	681b      	ldr	r3, [r3, #0]
2400e636:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
2400e63a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
2400e63c:	68fb      	ldr	r3, [r7, #12]
2400e63e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400e640:	b29b      	uxth	r3, r3
2400e642:	2b00      	cmp	r3, #0
2400e644:	d04e      	beq.n	2400e6e4 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
2400e646:	68fb      	ldr	r3, [r7, #12]
2400e648:	681b      	ldr	r3, [r3, #0]
2400e64a:	685b      	ldr	r3, [r3, #4]
2400e64c:	b29b      	uxth	r3, r3
2400e64e:	f3c3 0309 	ubfx	r3, r3, #0, #10
2400e652:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400e654:	68fb      	ldr	r3, [r7, #12]
2400e656:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400e658:	b29b      	uxth	r3, r3
2400e65a:	2bff      	cmp	r3, #255	@ 0xff
2400e65c:	d906      	bls.n	2400e66c <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
2400e65e:	68fb      	ldr	r3, [r7, #12]
2400e660:	22ff      	movs	r2, #255	@ 0xff
2400e662:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
2400e664:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
2400e668:	617b      	str	r3, [r7, #20]
2400e66a:	e010      	b.n	2400e68e <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
2400e66c:	68fb      	ldr	r3, [r7, #12]
2400e66e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400e670:	b29a      	uxth	r2, r3
2400e672:	68fb      	ldr	r3, [r7, #12]
2400e674:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
2400e676:	68fb      	ldr	r3, [r7, #12]
2400e678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2400e67a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
2400e67e:	d003      	beq.n	2400e688 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
2400e680:	68fb      	ldr	r3, [r7, #12]
2400e682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2400e684:	617b      	str	r3, [r7, #20]
2400e686:	e002      	b.n	2400e68e <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
2400e688:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
2400e68c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
2400e68e:	68fb      	ldr	r3, [r7, #12]
2400e690:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400e692:	b2da      	uxtb	r2, r3
2400e694:	8a79      	ldrh	r1, [r7, #18]
2400e696:	2300      	movs	r3, #0
2400e698:	9300      	str	r3, [sp, #0]
2400e69a:	697b      	ldr	r3, [r7, #20]
2400e69c:	68f8      	ldr	r0, [r7, #12]
2400e69e:	f001 fefb 	bl	24010498 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
2400e6a2:	68fb      	ldr	r3, [r7, #12]
2400e6a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400e6a6:	b29a      	uxth	r2, r3
2400e6a8:	68fb      	ldr	r3, [r7, #12]
2400e6aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400e6ac:	1ad3      	subs	r3, r2, r3
2400e6ae:	b29a      	uxth	r2, r3
2400e6b0:	68fb      	ldr	r3, [r7, #12]
2400e6b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
2400e6b4:	68fb      	ldr	r3, [r7, #12]
2400e6b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400e6ba:	b2db      	uxtb	r3, r3
2400e6bc:	2b22      	cmp	r3, #34	@ 0x22
2400e6be:	d108      	bne.n	2400e6d2 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
2400e6c0:	68fb      	ldr	r3, [r7, #12]
2400e6c2:	681b      	ldr	r3, [r3, #0]
2400e6c4:	681a      	ldr	r2, [r3, #0]
2400e6c6:	68fb      	ldr	r3, [r7, #12]
2400e6c8:	681b      	ldr	r3, [r3, #0]
2400e6ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
2400e6ce:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
2400e6d0:	e057      	b.n	2400e782 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
2400e6d2:	68fb      	ldr	r3, [r7, #12]
2400e6d4:	681b      	ldr	r3, [r3, #0]
2400e6d6:	681a      	ldr	r2, [r3, #0]
2400e6d8:	68fb      	ldr	r3, [r7, #12]
2400e6da:	681b      	ldr	r3, [r3, #0]
2400e6dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
2400e6e0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
2400e6e2:	e04e      	b.n	2400e782 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
2400e6e4:	68fb      	ldr	r3, [r7, #12]
2400e6e6:	681b      	ldr	r3, [r3, #0]
2400e6e8:	685b      	ldr	r3, [r3, #4]
2400e6ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
2400e6ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
2400e6f2:	d003      	beq.n	2400e6fc <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
2400e6f4:	68f8      	ldr	r0, [r7, #12]
2400e6f6:	f000 fc79 	bl	2400efec <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
2400e6fa:	e042      	b.n	2400e782 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
2400e6fc:	2140      	movs	r1, #64	@ 0x40
2400e6fe:	68f8      	ldr	r0, [r7, #12]
2400e700:	f001 f87e 	bl	2400f800 <I2C_ITError>
    if (hi2c->XferCount != 0U)
2400e704:	e03d      	b.n	2400e782 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
2400e706:	68bb      	ldr	r3, [r7, #8]
2400e708:	f003 0340 	and.w	r3, r3, #64	@ 0x40
2400e70c:	2b00      	cmp	r3, #0
2400e70e:	d028      	beq.n	2400e762 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
2400e710:	687b      	ldr	r3, [r7, #4]
2400e712:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
2400e716:	2b00      	cmp	r3, #0
2400e718:	d023      	beq.n	2400e762 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
2400e71a:	68fb      	ldr	r3, [r7, #12]
2400e71c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400e71e:	b29b      	uxth	r3, r3
2400e720:	2b00      	cmp	r3, #0
2400e722:	d119      	bne.n	2400e758 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
2400e724:	68fb      	ldr	r3, [r7, #12]
2400e726:	681b      	ldr	r3, [r3, #0]
2400e728:	685b      	ldr	r3, [r3, #4]
2400e72a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
2400e72e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
2400e732:	d025      	beq.n	2400e780 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
2400e734:	68fb      	ldr	r3, [r7, #12]
2400e736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2400e738:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
2400e73c:	d108      	bne.n	2400e750 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
2400e73e:	68fb      	ldr	r3, [r7, #12]
2400e740:	681b      	ldr	r3, [r3, #0]
2400e742:	685a      	ldr	r2, [r3, #4]
2400e744:	68fb      	ldr	r3, [r7, #12]
2400e746:	681b      	ldr	r3, [r3, #0]
2400e748:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
2400e74c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
2400e74e:	e017      	b.n	2400e780 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
2400e750:	68f8      	ldr	r0, [r7, #12]
2400e752:	f000 fc4b 	bl	2400efec <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
2400e756:	e013      	b.n	2400e780 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
2400e758:	2140      	movs	r1, #64	@ 0x40
2400e75a:	68f8      	ldr	r0, [r7, #12]
2400e75c:	f001 f850 	bl	2400f800 <I2C_ITError>
    if (hi2c->XferCount == 0U)
2400e760:	e00e      	b.n	2400e780 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
2400e762:	68bb      	ldr	r3, [r7, #8]
2400e764:	f003 0320 	and.w	r3, r3, #32
2400e768:	2b00      	cmp	r3, #0
2400e76a:	d00a      	beq.n	2400e782 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
2400e76c:	687b      	ldr	r3, [r7, #4]
2400e76e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
2400e772:	2b00      	cmp	r3, #0
2400e774:	d005      	beq.n	2400e782 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
2400e776:	68b9      	ldr	r1, [r7, #8]
2400e778:	68f8      	ldr	r0, [r7, #12]
2400e77a:	f000 fcd1 	bl	2400f120 <I2C_ITMasterCplt>
2400e77e:	e000      	b.n	2400e782 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
2400e780:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
2400e782:	68fb      	ldr	r3, [r7, #12]
2400e784:	2200      	movs	r2, #0
2400e786:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
2400e78a:	2300      	movs	r3, #0
}
2400e78c:	4618      	mov	r0, r3
2400e78e:	3718      	adds	r7, #24
2400e790:	46bd      	mov	sp, r7
2400e792:	bd80      	pop	{r7, pc}

2400e794 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
2400e794:	b580      	push	{r7, lr}
2400e796:	b088      	sub	sp, #32
2400e798:	af02      	add	r7, sp, #8
2400e79a:	60f8      	str	r0, [r7, #12]
2400e79c:	60b9      	str	r1, [r7, #8]
2400e79e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
2400e7a0:	4b8d      	ldr	r3, [pc, #564]	@ (2400e9d8 <I2C_Mem_ISR_DMA+0x244>)
2400e7a2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
2400e7a4:	68fb      	ldr	r3, [r7, #12]
2400e7a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2400e7aa:	2b01      	cmp	r3, #1
2400e7ac:	d101      	bne.n	2400e7b2 <I2C_Mem_ISR_DMA+0x1e>
2400e7ae:	2302      	movs	r3, #2
2400e7b0:	e10e      	b.n	2400e9d0 <I2C_Mem_ISR_DMA+0x23c>
2400e7b2:	68fb      	ldr	r3, [r7, #12]
2400e7b4:	2201      	movs	r2, #1
2400e7b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
2400e7ba:	68bb      	ldr	r3, [r7, #8]
2400e7bc:	f003 0310 	and.w	r3, r3, #16
2400e7c0:	2b00      	cmp	r3, #0
2400e7c2:	d016      	beq.n	2400e7f2 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
2400e7c4:	687b      	ldr	r3, [r7, #4]
2400e7c6:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
2400e7ca:	2b00      	cmp	r3, #0
2400e7cc:	d011      	beq.n	2400e7f2 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400e7ce:	68fb      	ldr	r3, [r7, #12]
2400e7d0:	681b      	ldr	r3, [r3, #0]
2400e7d2:	2210      	movs	r2, #16
2400e7d4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2400e7d6:	68fb      	ldr	r3, [r7, #12]
2400e7d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2400e7da:	f043 0204 	orr.w	r2, r3, #4
2400e7de:	68fb      	ldr	r3, [r7, #12]
2400e7e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
2400e7e2:	2120      	movs	r1, #32
2400e7e4:	68f8      	ldr	r0, [r7, #12]
2400e7e6:	f001 fe89 	bl	240104fc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
2400e7ea:	68f8      	ldr	r0, [r7, #12]
2400e7ec:	f001 f91f 	bl	2400fa2e <I2C_Flush_TXDR>
2400e7f0:	e0e9      	b.n	2400e9c6 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
2400e7f2:	68bb      	ldr	r3, [r7, #8]
2400e7f4:	f003 0302 	and.w	r3, r3, #2
2400e7f8:	2b00      	cmp	r3, #0
2400e7fa:	d00e      	beq.n	2400e81a <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
2400e7fc:	687b      	ldr	r3, [r7, #4]
2400e7fe:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
2400e802:	2b00      	cmp	r3, #0
2400e804:	d009      	beq.n	2400e81a <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
2400e806:	68fb      	ldr	r3, [r7, #12]
2400e808:	681b      	ldr	r3, [r3, #0]
2400e80a:	68fa      	ldr	r2, [r7, #12]
2400e80c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
2400e80e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
2400e810:	68fb      	ldr	r3, [r7, #12]
2400e812:	f04f 32ff 	mov.w	r2, #4294967295
2400e816:	651a      	str	r2, [r3, #80]	@ 0x50
2400e818:	e0d5      	b.n	2400e9c6 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
2400e81a:	68bb      	ldr	r3, [r7, #8]
2400e81c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
2400e820:	2b00      	cmp	r3, #0
2400e822:	d05f      	beq.n	2400e8e4 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
2400e824:	687b      	ldr	r3, [r7, #4]
2400e826:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
2400e82a:	2b00      	cmp	r3, #0
2400e82c:	d05a      	beq.n	2400e8e4 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
2400e82e:	2101      	movs	r1, #1
2400e830:	68f8      	ldr	r0, [r7, #12]
2400e832:	f001 fee7 	bl	24010604 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
2400e836:	2110      	movs	r1, #16
2400e838:	68f8      	ldr	r0, [r7, #12]
2400e83a:	f001 fe5f 	bl	240104fc <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
2400e83e:	68fb      	ldr	r3, [r7, #12]
2400e840:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400e842:	b29b      	uxth	r3, r3
2400e844:	2b00      	cmp	r3, #0
2400e846:	d048      	beq.n	2400e8da <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400e848:	68fb      	ldr	r3, [r7, #12]
2400e84a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400e84c:	b29b      	uxth	r3, r3
2400e84e:	2bff      	cmp	r3, #255	@ 0xff
2400e850:	d910      	bls.n	2400e874 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
2400e852:	68fb      	ldr	r3, [r7, #12]
2400e854:	22ff      	movs	r2, #255	@ 0xff
2400e856:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
2400e858:	68fb      	ldr	r3, [r7, #12]
2400e85a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
2400e85c:	b299      	uxth	r1, r3
2400e85e:	68fb      	ldr	r3, [r7, #12]
2400e860:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400e862:	b2da      	uxtb	r2, r3
2400e864:	2300      	movs	r3, #0
2400e866:	9300      	str	r3, [sp, #0]
2400e868:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
2400e86c:	68f8      	ldr	r0, [r7, #12]
2400e86e:	f001 fe13 	bl	24010498 <I2C_TransferConfig>
2400e872:	e011      	b.n	2400e898 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
2400e874:	68fb      	ldr	r3, [r7, #12]
2400e876:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400e878:	b29a      	uxth	r2, r3
2400e87a:	68fb      	ldr	r3, [r7, #12]
2400e87c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
2400e87e:	68fb      	ldr	r3, [r7, #12]
2400e880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
2400e882:	b299      	uxth	r1, r3
2400e884:	68fb      	ldr	r3, [r7, #12]
2400e886:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400e888:	b2da      	uxtb	r2, r3
2400e88a:	2300      	movs	r3, #0
2400e88c:	9300      	str	r3, [sp, #0]
2400e88e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
2400e892:	68f8      	ldr	r0, [r7, #12]
2400e894:	f001 fe00 	bl	24010498 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
2400e898:	68fb      	ldr	r3, [r7, #12]
2400e89a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400e89c:	b29a      	uxth	r2, r3
2400e89e:	68fb      	ldr	r3, [r7, #12]
2400e8a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400e8a2:	1ad3      	subs	r3, r2, r3
2400e8a4:	b29a      	uxth	r2, r3
2400e8a6:	68fb      	ldr	r3, [r7, #12]
2400e8a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
2400e8aa:	68fb      	ldr	r3, [r7, #12]
2400e8ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400e8b0:	b2db      	uxtb	r3, r3
2400e8b2:	2b22      	cmp	r3, #34	@ 0x22
2400e8b4:	d108      	bne.n	2400e8c8 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
2400e8b6:	68fb      	ldr	r3, [r7, #12]
2400e8b8:	681b      	ldr	r3, [r3, #0]
2400e8ba:	681a      	ldr	r2, [r3, #0]
2400e8bc:	68fb      	ldr	r3, [r7, #12]
2400e8be:	681b      	ldr	r3, [r3, #0]
2400e8c0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
2400e8c4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
2400e8c6:	e07e      	b.n	2400e9c6 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
2400e8c8:	68fb      	ldr	r3, [r7, #12]
2400e8ca:	681b      	ldr	r3, [r3, #0]
2400e8cc:	681a      	ldr	r2, [r3, #0]
2400e8ce:	68fb      	ldr	r3, [r7, #12]
2400e8d0:	681b      	ldr	r3, [r3, #0]
2400e8d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
2400e8d6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
2400e8d8:	e075      	b.n	2400e9c6 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
2400e8da:	2140      	movs	r1, #64	@ 0x40
2400e8dc:	68f8      	ldr	r0, [r7, #12]
2400e8de:	f000 ff8f 	bl	2400f800 <I2C_ITError>
    if (hi2c->XferCount != 0U)
2400e8e2:	e070      	b.n	2400e9c6 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
2400e8e4:	68bb      	ldr	r3, [r7, #8]
2400e8e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
2400e8ea:	2b00      	cmp	r3, #0
2400e8ec:	d05d      	beq.n	2400e9aa <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
2400e8ee:	687b      	ldr	r3, [r7, #4]
2400e8f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
2400e8f4:	2b00      	cmp	r3, #0
2400e8f6:	d058      	beq.n	2400e9aa <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
2400e8f8:	2101      	movs	r1, #1
2400e8fa:	68f8      	ldr	r0, [r7, #12]
2400e8fc:	f001 fe82 	bl	24010604 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
2400e900:	2110      	movs	r1, #16
2400e902:	68f8      	ldr	r0, [r7, #12]
2400e904:	f001 fdfa 	bl	240104fc <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
2400e908:	68fb      	ldr	r3, [r7, #12]
2400e90a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400e90e:	b2db      	uxtb	r3, r3
2400e910:	2b22      	cmp	r3, #34	@ 0x22
2400e912:	d101      	bne.n	2400e918 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
2400e914:	4b31      	ldr	r3, [pc, #196]	@ (2400e9dc <I2C_Mem_ISR_DMA+0x248>)
2400e916:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400e918:	68fb      	ldr	r3, [r7, #12]
2400e91a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400e91c:	b29b      	uxth	r3, r3
2400e91e:	2bff      	cmp	r3, #255	@ 0xff
2400e920:	d910      	bls.n	2400e944 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400e922:	68fb      	ldr	r3, [r7, #12]
2400e924:	22ff      	movs	r2, #255	@ 0xff
2400e926:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
2400e928:	68fb      	ldr	r3, [r7, #12]
2400e92a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
2400e92c:	b299      	uxth	r1, r3
2400e92e:	68fb      	ldr	r3, [r7, #12]
2400e930:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400e932:	b2da      	uxtb	r2, r3
2400e934:	697b      	ldr	r3, [r7, #20]
2400e936:	9300      	str	r3, [sp, #0]
2400e938:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
2400e93c:	68f8      	ldr	r0, [r7, #12]
2400e93e:	f001 fdab 	bl	24010498 <I2C_TransferConfig>
2400e942:	e011      	b.n	2400e968 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
2400e944:	68fb      	ldr	r3, [r7, #12]
2400e946:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400e948:	b29a      	uxth	r2, r3
2400e94a:	68fb      	ldr	r3, [r7, #12]
2400e94c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
2400e94e:	68fb      	ldr	r3, [r7, #12]
2400e950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
2400e952:	b299      	uxth	r1, r3
2400e954:	68fb      	ldr	r3, [r7, #12]
2400e956:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400e958:	b2da      	uxtb	r2, r3
2400e95a:	697b      	ldr	r3, [r7, #20]
2400e95c:	9300      	str	r3, [sp, #0]
2400e95e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
2400e962:	68f8      	ldr	r0, [r7, #12]
2400e964:	f001 fd98 	bl	24010498 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
2400e968:	68fb      	ldr	r3, [r7, #12]
2400e96a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400e96c:	b29a      	uxth	r2, r3
2400e96e:	68fb      	ldr	r3, [r7, #12]
2400e970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400e972:	1ad3      	subs	r3, r2, r3
2400e974:	b29a      	uxth	r2, r3
2400e976:	68fb      	ldr	r3, [r7, #12]
2400e978:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
2400e97a:	68fb      	ldr	r3, [r7, #12]
2400e97c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400e980:	b2db      	uxtb	r3, r3
2400e982:	2b22      	cmp	r3, #34	@ 0x22
2400e984:	d108      	bne.n	2400e998 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
2400e986:	68fb      	ldr	r3, [r7, #12]
2400e988:	681b      	ldr	r3, [r3, #0]
2400e98a:	681a      	ldr	r2, [r3, #0]
2400e98c:	68fb      	ldr	r3, [r7, #12]
2400e98e:	681b      	ldr	r3, [r3, #0]
2400e990:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
2400e994:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
2400e996:	e016      	b.n	2400e9c6 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
2400e998:	68fb      	ldr	r3, [r7, #12]
2400e99a:	681b      	ldr	r3, [r3, #0]
2400e99c:	681a      	ldr	r2, [r3, #0]
2400e99e:	68fb      	ldr	r3, [r7, #12]
2400e9a0:	681b      	ldr	r3, [r3, #0]
2400e9a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
2400e9a6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
2400e9a8:	e00d      	b.n	2400e9c6 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
2400e9aa:	68bb      	ldr	r3, [r7, #8]
2400e9ac:	f003 0320 	and.w	r3, r3, #32
2400e9b0:	2b00      	cmp	r3, #0
2400e9b2:	d008      	beq.n	2400e9c6 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
2400e9b4:	687b      	ldr	r3, [r7, #4]
2400e9b6:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
2400e9ba:	2b00      	cmp	r3, #0
2400e9bc:	d003      	beq.n	2400e9c6 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
2400e9be:	68b9      	ldr	r1, [r7, #8]
2400e9c0:	68f8      	ldr	r0, [r7, #12]
2400e9c2:	f000 fbad 	bl	2400f120 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
2400e9c6:	68fb      	ldr	r3, [r7, #12]
2400e9c8:	2200      	movs	r2, #0
2400e9ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
2400e9ce:	2300      	movs	r3, #0
}
2400e9d0:	4618      	mov	r0, r3
2400e9d2:	3718      	adds	r7, #24
2400e9d4:	46bd      	mov	sp, r7
2400e9d6:	bd80      	pop	{r7, pc}
2400e9d8:	80002000 	.word	0x80002000
2400e9dc:	80002400 	.word	0x80002400

2400e9e0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
2400e9e0:	b580      	push	{r7, lr}
2400e9e2:	b088      	sub	sp, #32
2400e9e4:	af00      	add	r7, sp, #0
2400e9e6:	60f8      	str	r0, [r7, #12]
2400e9e8:	60b9      	str	r1, [r7, #8]
2400e9ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
2400e9ec:	68fb      	ldr	r3, [r7, #12]
2400e9ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2400e9f0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
2400e9f2:	2300      	movs	r3, #0
2400e9f4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
2400e9f6:	68fb      	ldr	r3, [r7, #12]
2400e9f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2400e9fc:	2b01      	cmp	r3, #1
2400e9fe:	d101      	bne.n	2400ea04 <I2C_Slave_ISR_DMA+0x24>
2400ea00:	2302      	movs	r3, #2
2400ea02:	e1c2      	b.n	2400ed8a <I2C_Slave_ISR_DMA+0x3aa>
2400ea04:	68fb      	ldr	r3, [r7, #12]
2400ea06:	2201      	movs	r2, #1
2400ea08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
2400ea0c:	68bb      	ldr	r3, [r7, #8]
2400ea0e:	f003 0320 	and.w	r3, r3, #32
2400ea12:	2b00      	cmp	r3, #0
2400ea14:	d009      	beq.n	2400ea2a <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
2400ea16:	687b      	ldr	r3, [r7, #4]
2400ea18:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
2400ea1c:	2b00      	cmp	r3, #0
2400ea1e:	d004      	beq.n	2400ea2a <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
2400ea20:	68b9      	ldr	r1, [r7, #8]
2400ea22:	68f8      	ldr	r0, [r7, #12]
2400ea24:	f000 fc44 	bl	2400f2b0 <I2C_ITSlaveCplt>
2400ea28:	e1aa      	b.n	2400ed80 <I2C_Slave_ISR_DMA+0x3a0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
2400ea2a:	68bb      	ldr	r3, [r7, #8]
2400ea2c:	f003 0310 	and.w	r3, r3, #16
2400ea30:	2b00      	cmp	r3, #0
2400ea32:	f000 8197 	beq.w	2400ed64 <I2C_Slave_ISR_DMA+0x384>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
2400ea36:	687b      	ldr	r3, [r7, #4]
2400ea38:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
2400ea3c:	2b00      	cmp	r3, #0
2400ea3e:	f000 8191 	beq.w	2400ed64 <I2C_Slave_ISR_DMA+0x384>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
2400ea42:	687b      	ldr	r3, [r7, #4]
2400ea44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
2400ea48:	2b00      	cmp	r3, #0
2400ea4a:	d105      	bne.n	2400ea58 <I2C_Slave_ISR_DMA+0x78>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
2400ea4c:	687b      	ldr	r3, [r7, #4]
2400ea4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
2400ea52:	2b00      	cmp	r3, #0
2400ea54:	f000 817f 	beq.w	2400ed56 <I2C_Slave_ISR_DMA+0x376>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
2400ea58:	68fb      	ldr	r3, [r7, #12]
2400ea5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400ea5c:	2b00      	cmp	r3, #0
2400ea5e:	d07b      	beq.n	2400eb58 <I2C_Slave_ISR_DMA+0x178>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
2400ea60:	687b      	ldr	r3, [r7, #4]
2400ea62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
2400ea66:	2b00      	cmp	r3, #0
2400ea68:	d076      	beq.n	2400eb58 <I2C_Slave_ISR_DMA+0x178>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
2400ea6a:	68fb      	ldr	r3, [r7, #12]
2400ea6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400ea6e:	681b      	ldr	r3, [r3, #0]
2400ea70:	4a74      	ldr	r2, [pc, #464]	@ (2400ec44 <I2C_Slave_ISR_DMA+0x264>)
2400ea72:	4293      	cmp	r3, r2
2400ea74:	d059      	beq.n	2400eb2a <I2C_Slave_ISR_DMA+0x14a>
2400ea76:	68fb      	ldr	r3, [r7, #12]
2400ea78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400ea7a:	681b      	ldr	r3, [r3, #0]
2400ea7c:	4a72      	ldr	r2, [pc, #456]	@ (2400ec48 <I2C_Slave_ISR_DMA+0x268>)
2400ea7e:	4293      	cmp	r3, r2
2400ea80:	d053      	beq.n	2400eb2a <I2C_Slave_ISR_DMA+0x14a>
2400ea82:	68fb      	ldr	r3, [r7, #12]
2400ea84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400ea86:	681b      	ldr	r3, [r3, #0]
2400ea88:	4a70      	ldr	r2, [pc, #448]	@ (2400ec4c <I2C_Slave_ISR_DMA+0x26c>)
2400ea8a:	4293      	cmp	r3, r2
2400ea8c:	d04d      	beq.n	2400eb2a <I2C_Slave_ISR_DMA+0x14a>
2400ea8e:	68fb      	ldr	r3, [r7, #12]
2400ea90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400ea92:	681b      	ldr	r3, [r3, #0]
2400ea94:	4a6e      	ldr	r2, [pc, #440]	@ (2400ec50 <I2C_Slave_ISR_DMA+0x270>)
2400ea96:	4293      	cmp	r3, r2
2400ea98:	d047      	beq.n	2400eb2a <I2C_Slave_ISR_DMA+0x14a>
2400ea9a:	68fb      	ldr	r3, [r7, #12]
2400ea9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400ea9e:	681b      	ldr	r3, [r3, #0]
2400eaa0:	4a6c      	ldr	r2, [pc, #432]	@ (2400ec54 <I2C_Slave_ISR_DMA+0x274>)
2400eaa2:	4293      	cmp	r3, r2
2400eaa4:	d041      	beq.n	2400eb2a <I2C_Slave_ISR_DMA+0x14a>
2400eaa6:	68fb      	ldr	r3, [r7, #12]
2400eaa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400eaaa:	681b      	ldr	r3, [r3, #0]
2400eaac:	4a6a      	ldr	r2, [pc, #424]	@ (2400ec58 <I2C_Slave_ISR_DMA+0x278>)
2400eaae:	4293      	cmp	r3, r2
2400eab0:	d03b      	beq.n	2400eb2a <I2C_Slave_ISR_DMA+0x14a>
2400eab2:	68fb      	ldr	r3, [r7, #12]
2400eab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400eab6:	681b      	ldr	r3, [r3, #0]
2400eab8:	4a68      	ldr	r2, [pc, #416]	@ (2400ec5c <I2C_Slave_ISR_DMA+0x27c>)
2400eaba:	4293      	cmp	r3, r2
2400eabc:	d035      	beq.n	2400eb2a <I2C_Slave_ISR_DMA+0x14a>
2400eabe:	68fb      	ldr	r3, [r7, #12]
2400eac0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400eac2:	681b      	ldr	r3, [r3, #0]
2400eac4:	4a66      	ldr	r2, [pc, #408]	@ (2400ec60 <I2C_Slave_ISR_DMA+0x280>)
2400eac6:	4293      	cmp	r3, r2
2400eac8:	d02f      	beq.n	2400eb2a <I2C_Slave_ISR_DMA+0x14a>
2400eaca:	68fb      	ldr	r3, [r7, #12]
2400eacc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400eace:	681b      	ldr	r3, [r3, #0]
2400ead0:	4a64      	ldr	r2, [pc, #400]	@ (2400ec64 <I2C_Slave_ISR_DMA+0x284>)
2400ead2:	4293      	cmp	r3, r2
2400ead4:	d029      	beq.n	2400eb2a <I2C_Slave_ISR_DMA+0x14a>
2400ead6:	68fb      	ldr	r3, [r7, #12]
2400ead8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400eada:	681b      	ldr	r3, [r3, #0]
2400eadc:	4a62      	ldr	r2, [pc, #392]	@ (2400ec68 <I2C_Slave_ISR_DMA+0x288>)
2400eade:	4293      	cmp	r3, r2
2400eae0:	d023      	beq.n	2400eb2a <I2C_Slave_ISR_DMA+0x14a>
2400eae2:	68fb      	ldr	r3, [r7, #12]
2400eae4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400eae6:	681b      	ldr	r3, [r3, #0]
2400eae8:	4a60      	ldr	r2, [pc, #384]	@ (2400ec6c <I2C_Slave_ISR_DMA+0x28c>)
2400eaea:	4293      	cmp	r3, r2
2400eaec:	d01d      	beq.n	2400eb2a <I2C_Slave_ISR_DMA+0x14a>
2400eaee:	68fb      	ldr	r3, [r7, #12]
2400eaf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400eaf2:	681b      	ldr	r3, [r3, #0]
2400eaf4:	4a5e      	ldr	r2, [pc, #376]	@ (2400ec70 <I2C_Slave_ISR_DMA+0x290>)
2400eaf6:	4293      	cmp	r3, r2
2400eaf8:	d017      	beq.n	2400eb2a <I2C_Slave_ISR_DMA+0x14a>
2400eafa:	68fb      	ldr	r3, [r7, #12]
2400eafc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400eafe:	681b      	ldr	r3, [r3, #0]
2400eb00:	4a5c      	ldr	r2, [pc, #368]	@ (2400ec74 <I2C_Slave_ISR_DMA+0x294>)
2400eb02:	4293      	cmp	r3, r2
2400eb04:	d011      	beq.n	2400eb2a <I2C_Slave_ISR_DMA+0x14a>
2400eb06:	68fb      	ldr	r3, [r7, #12]
2400eb08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400eb0a:	681b      	ldr	r3, [r3, #0]
2400eb0c:	4a5a      	ldr	r2, [pc, #360]	@ (2400ec78 <I2C_Slave_ISR_DMA+0x298>)
2400eb0e:	4293      	cmp	r3, r2
2400eb10:	d00b      	beq.n	2400eb2a <I2C_Slave_ISR_DMA+0x14a>
2400eb12:	68fb      	ldr	r3, [r7, #12]
2400eb14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400eb16:	681b      	ldr	r3, [r3, #0]
2400eb18:	4a58      	ldr	r2, [pc, #352]	@ (2400ec7c <I2C_Slave_ISR_DMA+0x29c>)
2400eb1a:	4293      	cmp	r3, r2
2400eb1c:	d005      	beq.n	2400eb2a <I2C_Slave_ISR_DMA+0x14a>
2400eb1e:	68fb      	ldr	r3, [r7, #12]
2400eb20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400eb22:	681b      	ldr	r3, [r3, #0]
2400eb24:	4a56      	ldr	r2, [pc, #344]	@ (2400ec80 <I2C_Slave_ISR_DMA+0x2a0>)
2400eb26:	4293      	cmp	r3, r2
2400eb28:	d109      	bne.n	2400eb3e <I2C_Slave_ISR_DMA+0x15e>
2400eb2a:	68fb      	ldr	r3, [r7, #12]
2400eb2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400eb2e:	681b      	ldr	r3, [r3, #0]
2400eb30:	685b      	ldr	r3, [r3, #4]
2400eb32:	2b00      	cmp	r3, #0
2400eb34:	bf0c      	ite	eq
2400eb36:	2301      	moveq	r3, #1
2400eb38:	2300      	movne	r3, #0
2400eb3a:	b2db      	uxtb	r3, r3
2400eb3c:	e008      	b.n	2400eb50 <I2C_Slave_ISR_DMA+0x170>
2400eb3e:	68fb      	ldr	r3, [r7, #12]
2400eb40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400eb42:	681b      	ldr	r3, [r3, #0]
2400eb44:	685b      	ldr	r3, [r3, #4]
2400eb46:	2b00      	cmp	r3, #0
2400eb48:	bf0c      	ite	eq
2400eb4a:	2301      	moveq	r3, #1
2400eb4c:	2300      	movne	r3, #0
2400eb4e:	b2db      	uxtb	r3, r3
2400eb50:	2b00      	cmp	r3, #0
2400eb52:	d001      	beq.n	2400eb58 <I2C_Slave_ISR_DMA+0x178>
          {
            treatdmanack = 1U;
2400eb54:	2301      	movs	r3, #1
2400eb56:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
2400eb58:	68fb      	ldr	r3, [r7, #12]
2400eb5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400eb5c:	2b00      	cmp	r3, #0
2400eb5e:	f000 809e 	beq.w	2400ec9e <I2C_Slave_ISR_DMA+0x2be>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
2400eb62:	687b      	ldr	r3, [r7, #4]
2400eb64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
2400eb68:	2b00      	cmp	r3, #0
2400eb6a:	f000 8098 	beq.w	2400ec9e <I2C_Slave_ISR_DMA+0x2be>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
2400eb6e:	68fb      	ldr	r3, [r7, #12]
2400eb70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400eb72:	681b      	ldr	r3, [r3, #0]
2400eb74:	4a33      	ldr	r2, [pc, #204]	@ (2400ec44 <I2C_Slave_ISR_DMA+0x264>)
2400eb76:	4293      	cmp	r3, r2
2400eb78:	d059      	beq.n	2400ec2e <I2C_Slave_ISR_DMA+0x24e>
2400eb7a:	68fb      	ldr	r3, [r7, #12]
2400eb7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400eb7e:	681b      	ldr	r3, [r3, #0]
2400eb80:	4a31      	ldr	r2, [pc, #196]	@ (2400ec48 <I2C_Slave_ISR_DMA+0x268>)
2400eb82:	4293      	cmp	r3, r2
2400eb84:	d053      	beq.n	2400ec2e <I2C_Slave_ISR_DMA+0x24e>
2400eb86:	68fb      	ldr	r3, [r7, #12]
2400eb88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400eb8a:	681b      	ldr	r3, [r3, #0]
2400eb8c:	4a2f      	ldr	r2, [pc, #188]	@ (2400ec4c <I2C_Slave_ISR_DMA+0x26c>)
2400eb8e:	4293      	cmp	r3, r2
2400eb90:	d04d      	beq.n	2400ec2e <I2C_Slave_ISR_DMA+0x24e>
2400eb92:	68fb      	ldr	r3, [r7, #12]
2400eb94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400eb96:	681b      	ldr	r3, [r3, #0]
2400eb98:	4a2d      	ldr	r2, [pc, #180]	@ (2400ec50 <I2C_Slave_ISR_DMA+0x270>)
2400eb9a:	4293      	cmp	r3, r2
2400eb9c:	d047      	beq.n	2400ec2e <I2C_Slave_ISR_DMA+0x24e>
2400eb9e:	68fb      	ldr	r3, [r7, #12]
2400eba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400eba2:	681b      	ldr	r3, [r3, #0]
2400eba4:	4a2b      	ldr	r2, [pc, #172]	@ (2400ec54 <I2C_Slave_ISR_DMA+0x274>)
2400eba6:	4293      	cmp	r3, r2
2400eba8:	d041      	beq.n	2400ec2e <I2C_Slave_ISR_DMA+0x24e>
2400ebaa:	68fb      	ldr	r3, [r7, #12]
2400ebac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400ebae:	681b      	ldr	r3, [r3, #0]
2400ebb0:	4a29      	ldr	r2, [pc, #164]	@ (2400ec58 <I2C_Slave_ISR_DMA+0x278>)
2400ebb2:	4293      	cmp	r3, r2
2400ebb4:	d03b      	beq.n	2400ec2e <I2C_Slave_ISR_DMA+0x24e>
2400ebb6:	68fb      	ldr	r3, [r7, #12]
2400ebb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400ebba:	681b      	ldr	r3, [r3, #0]
2400ebbc:	4a27      	ldr	r2, [pc, #156]	@ (2400ec5c <I2C_Slave_ISR_DMA+0x27c>)
2400ebbe:	4293      	cmp	r3, r2
2400ebc0:	d035      	beq.n	2400ec2e <I2C_Slave_ISR_DMA+0x24e>
2400ebc2:	68fb      	ldr	r3, [r7, #12]
2400ebc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400ebc6:	681b      	ldr	r3, [r3, #0]
2400ebc8:	4a25      	ldr	r2, [pc, #148]	@ (2400ec60 <I2C_Slave_ISR_DMA+0x280>)
2400ebca:	4293      	cmp	r3, r2
2400ebcc:	d02f      	beq.n	2400ec2e <I2C_Slave_ISR_DMA+0x24e>
2400ebce:	68fb      	ldr	r3, [r7, #12]
2400ebd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400ebd2:	681b      	ldr	r3, [r3, #0]
2400ebd4:	4a23      	ldr	r2, [pc, #140]	@ (2400ec64 <I2C_Slave_ISR_DMA+0x284>)
2400ebd6:	4293      	cmp	r3, r2
2400ebd8:	d029      	beq.n	2400ec2e <I2C_Slave_ISR_DMA+0x24e>
2400ebda:	68fb      	ldr	r3, [r7, #12]
2400ebdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400ebde:	681b      	ldr	r3, [r3, #0]
2400ebe0:	4a21      	ldr	r2, [pc, #132]	@ (2400ec68 <I2C_Slave_ISR_DMA+0x288>)
2400ebe2:	4293      	cmp	r3, r2
2400ebe4:	d023      	beq.n	2400ec2e <I2C_Slave_ISR_DMA+0x24e>
2400ebe6:	68fb      	ldr	r3, [r7, #12]
2400ebe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400ebea:	681b      	ldr	r3, [r3, #0]
2400ebec:	4a1f      	ldr	r2, [pc, #124]	@ (2400ec6c <I2C_Slave_ISR_DMA+0x28c>)
2400ebee:	4293      	cmp	r3, r2
2400ebf0:	d01d      	beq.n	2400ec2e <I2C_Slave_ISR_DMA+0x24e>
2400ebf2:	68fb      	ldr	r3, [r7, #12]
2400ebf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400ebf6:	681b      	ldr	r3, [r3, #0]
2400ebf8:	4a1d      	ldr	r2, [pc, #116]	@ (2400ec70 <I2C_Slave_ISR_DMA+0x290>)
2400ebfa:	4293      	cmp	r3, r2
2400ebfc:	d017      	beq.n	2400ec2e <I2C_Slave_ISR_DMA+0x24e>
2400ebfe:	68fb      	ldr	r3, [r7, #12]
2400ec00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400ec02:	681b      	ldr	r3, [r3, #0]
2400ec04:	4a1b      	ldr	r2, [pc, #108]	@ (2400ec74 <I2C_Slave_ISR_DMA+0x294>)
2400ec06:	4293      	cmp	r3, r2
2400ec08:	d011      	beq.n	2400ec2e <I2C_Slave_ISR_DMA+0x24e>
2400ec0a:	68fb      	ldr	r3, [r7, #12]
2400ec0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400ec0e:	681b      	ldr	r3, [r3, #0]
2400ec10:	4a19      	ldr	r2, [pc, #100]	@ (2400ec78 <I2C_Slave_ISR_DMA+0x298>)
2400ec12:	4293      	cmp	r3, r2
2400ec14:	d00b      	beq.n	2400ec2e <I2C_Slave_ISR_DMA+0x24e>
2400ec16:	68fb      	ldr	r3, [r7, #12]
2400ec18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400ec1a:	681b      	ldr	r3, [r3, #0]
2400ec1c:	4a17      	ldr	r2, [pc, #92]	@ (2400ec7c <I2C_Slave_ISR_DMA+0x29c>)
2400ec1e:	4293      	cmp	r3, r2
2400ec20:	d005      	beq.n	2400ec2e <I2C_Slave_ISR_DMA+0x24e>
2400ec22:	68fb      	ldr	r3, [r7, #12]
2400ec24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400ec26:	681b      	ldr	r3, [r3, #0]
2400ec28:	4a15      	ldr	r2, [pc, #84]	@ (2400ec80 <I2C_Slave_ISR_DMA+0x2a0>)
2400ec2a:	4293      	cmp	r3, r2
2400ec2c:	d12a      	bne.n	2400ec84 <I2C_Slave_ISR_DMA+0x2a4>
2400ec2e:	68fb      	ldr	r3, [r7, #12]
2400ec30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400ec32:	681b      	ldr	r3, [r3, #0]
2400ec34:	685b      	ldr	r3, [r3, #4]
2400ec36:	2b00      	cmp	r3, #0
2400ec38:	bf0c      	ite	eq
2400ec3a:	2301      	moveq	r3, #1
2400ec3c:	2300      	movne	r3, #0
2400ec3e:	b2db      	uxtb	r3, r3
2400ec40:	e029      	b.n	2400ec96 <I2C_Slave_ISR_DMA+0x2b6>
2400ec42:	bf00      	nop
2400ec44:	40020010 	.word	0x40020010
2400ec48:	40020028 	.word	0x40020028
2400ec4c:	40020040 	.word	0x40020040
2400ec50:	40020058 	.word	0x40020058
2400ec54:	40020070 	.word	0x40020070
2400ec58:	40020088 	.word	0x40020088
2400ec5c:	400200a0 	.word	0x400200a0
2400ec60:	400200b8 	.word	0x400200b8
2400ec64:	40020410 	.word	0x40020410
2400ec68:	40020428 	.word	0x40020428
2400ec6c:	40020440 	.word	0x40020440
2400ec70:	40020458 	.word	0x40020458
2400ec74:	40020470 	.word	0x40020470
2400ec78:	40020488 	.word	0x40020488
2400ec7c:	400204a0 	.word	0x400204a0
2400ec80:	400204b8 	.word	0x400204b8
2400ec84:	68fb      	ldr	r3, [r7, #12]
2400ec86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400ec88:	681b      	ldr	r3, [r3, #0]
2400ec8a:	685b      	ldr	r3, [r3, #4]
2400ec8c:	2b00      	cmp	r3, #0
2400ec8e:	bf0c      	ite	eq
2400ec90:	2301      	moveq	r3, #1
2400ec92:	2300      	movne	r3, #0
2400ec94:	b2db      	uxtb	r3, r3
2400ec96:	2b00      	cmp	r3, #0
2400ec98:	d001      	beq.n	2400ec9e <I2C_Slave_ISR_DMA+0x2be>
          {
            treatdmanack = 1U;
2400ec9a:	2301      	movs	r3, #1
2400ec9c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
2400ec9e:	69fb      	ldr	r3, [r7, #28]
2400eca0:	2b01      	cmp	r3, #1
2400eca2:	d128      	bne.n	2400ecf6 <I2C_Slave_ISR_DMA+0x316>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
2400eca4:	68fb      	ldr	r3, [r7, #12]
2400eca6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400ecaa:	b2db      	uxtb	r3, r3
2400ecac:	2b28      	cmp	r3, #40	@ 0x28
2400ecae:	d108      	bne.n	2400ecc2 <I2C_Slave_ISR_DMA+0x2e2>
2400ecb0:	69bb      	ldr	r3, [r7, #24]
2400ecb2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
2400ecb6:	d104      	bne.n	2400ecc2 <I2C_Slave_ISR_DMA+0x2e2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
2400ecb8:	68b9      	ldr	r1, [r7, #8]
2400ecba:	68f8      	ldr	r0, [r7, #12]
2400ecbc:	f000 fd4c 	bl	2400f758 <I2C_ITListenCplt>
2400ecc0:	e048      	b.n	2400ed54 <I2C_Slave_ISR_DMA+0x374>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
2400ecc2:	68fb      	ldr	r3, [r7, #12]
2400ecc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400ecc8:	b2db      	uxtb	r3, r3
2400ecca:	2b29      	cmp	r3, #41	@ 0x29
2400eccc:	d10e      	bne.n	2400ecec <I2C_Slave_ISR_DMA+0x30c>
2400ecce:	69bb      	ldr	r3, [r7, #24]
2400ecd0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
2400ecd4:	d00a      	beq.n	2400ecec <I2C_Slave_ISR_DMA+0x30c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400ecd6:	68fb      	ldr	r3, [r7, #12]
2400ecd8:	681b      	ldr	r3, [r3, #0]
2400ecda:	2210      	movs	r2, #16
2400ecdc:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
2400ecde:	68f8      	ldr	r0, [r7, #12]
2400ece0:	f000 fea5 	bl	2400fa2e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
2400ece4:	68f8      	ldr	r0, [r7, #12]
2400ece6:	f000 f9be 	bl	2400f066 <I2C_ITSlaveSeqCplt>
2400ecea:	e033      	b.n	2400ed54 <I2C_Slave_ISR_DMA+0x374>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400ecec:	68fb      	ldr	r3, [r7, #12]
2400ecee:	681b      	ldr	r3, [r3, #0]
2400ecf0:	2210      	movs	r2, #16
2400ecf2:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
2400ecf4:	e034      	b.n	2400ed60 <I2C_Slave_ISR_DMA+0x380>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400ecf6:	68fb      	ldr	r3, [r7, #12]
2400ecf8:	681b      	ldr	r3, [r3, #0]
2400ecfa:	2210      	movs	r2, #16
2400ecfc:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2400ecfe:	68fb      	ldr	r3, [r7, #12]
2400ed00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2400ed02:	f043 0204 	orr.w	r2, r3, #4
2400ed06:	68fb      	ldr	r3, [r7, #12]
2400ed08:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
2400ed0a:	68fb      	ldr	r3, [r7, #12]
2400ed0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400ed10:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
2400ed12:	69bb      	ldr	r3, [r7, #24]
2400ed14:	2b00      	cmp	r3, #0
2400ed16:	d003      	beq.n	2400ed20 <I2C_Slave_ISR_DMA+0x340>
2400ed18:	69bb      	ldr	r3, [r7, #24]
2400ed1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
2400ed1e:	d11f      	bne.n	2400ed60 <I2C_Slave_ISR_DMA+0x380>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
2400ed20:	7dfb      	ldrb	r3, [r7, #23]
2400ed22:	2b21      	cmp	r3, #33	@ 0x21
2400ed24:	d002      	beq.n	2400ed2c <I2C_Slave_ISR_DMA+0x34c>
2400ed26:	7dfb      	ldrb	r3, [r7, #23]
2400ed28:	2b29      	cmp	r3, #41	@ 0x29
2400ed2a:	d103      	bne.n	2400ed34 <I2C_Slave_ISR_DMA+0x354>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
2400ed2c:	68fb      	ldr	r3, [r7, #12]
2400ed2e:	2221      	movs	r2, #33	@ 0x21
2400ed30:	631a      	str	r2, [r3, #48]	@ 0x30
2400ed32:	e008      	b.n	2400ed46 <I2C_Slave_ISR_DMA+0x366>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
2400ed34:	7dfb      	ldrb	r3, [r7, #23]
2400ed36:	2b22      	cmp	r3, #34	@ 0x22
2400ed38:	d002      	beq.n	2400ed40 <I2C_Slave_ISR_DMA+0x360>
2400ed3a:	7dfb      	ldrb	r3, [r7, #23]
2400ed3c:	2b2a      	cmp	r3, #42	@ 0x2a
2400ed3e:	d102      	bne.n	2400ed46 <I2C_Slave_ISR_DMA+0x366>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
2400ed40:	68fb      	ldr	r3, [r7, #12]
2400ed42:	2222      	movs	r2, #34	@ 0x22
2400ed44:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
2400ed46:	68fb      	ldr	r3, [r7, #12]
2400ed48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2400ed4a:	4619      	mov	r1, r3
2400ed4c:	68f8      	ldr	r0, [r7, #12]
2400ed4e:	f000 fd57 	bl	2400f800 <I2C_ITError>
      if (treatdmanack == 1U)
2400ed52:	e005      	b.n	2400ed60 <I2C_Slave_ISR_DMA+0x380>
2400ed54:	e004      	b.n	2400ed60 <I2C_Slave_ISR_DMA+0x380>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400ed56:	68fb      	ldr	r3, [r7, #12]
2400ed58:	681b      	ldr	r3, [r3, #0]
2400ed5a:	2210      	movs	r2, #16
2400ed5c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
2400ed5e:	e00f      	b.n	2400ed80 <I2C_Slave_ISR_DMA+0x3a0>
      if (treatdmanack == 1U)
2400ed60:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
2400ed62:	e00d      	b.n	2400ed80 <I2C_Slave_ISR_DMA+0x3a0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
2400ed64:	68bb      	ldr	r3, [r7, #8]
2400ed66:	f003 0308 	and.w	r3, r3, #8
2400ed6a:	2b00      	cmp	r3, #0
2400ed6c:	d008      	beq.n	2400ed80 <I2C_Slave_ISR_DMA+0x3a0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
2400ed6e:	687b      	ldr	r3, [r7, #4]
2400ed70:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
2400ed74:	2b00      	cmp	r3, #0
2400ed76:	d003      	beq.n	2400ed80 <I2C_Slave_ISR_DMA+0x3a0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
2400ed78:	68b9      	ldr	r1, [r7, #8]
2400ed7a:	68f8      	ldr	r0, [r7, #12]
2400ed7c:	f000 f8b2 	bl	2400eee4 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
2400ed80:	68fb      	ldr	r3, [r7, #12]
2400ed82:	2200      	movs	r2, #0
2400ed84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
2400ed88:	2300      	movs	r3, #0
}
2400ed8a:	4618      	mov	r0, r3
2400ed8c:	3720      	adds	r7, #32
2400ed8e:	46bd      	mov	sp, r7
2400ed90:	bd80      	pop	{r7, pc}
2400ed92:	bf00      	nop

2400ed94 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
2400ed94:	b580      	push	{r7, lr}
2400ed96:	b086      	sub	sp, #24
2400ed98:	af02      	add	r7, sp, #8
2400ed9a:	60f8      	str	r0, [r7, #12]
2400ed9c:	4608      	mov	r0, r1
2400ed9e:	4611      	mov	r1, r2
2400eda0:	461a      	mov	r2, r3
2400eda2:	4603      	mov	r3, r0
2400eda4:	817b      	strh	r3, [r7, #10]
2400eda6:	460b      	mov	r3, r1
2400eda8:	813b      	strh	r3, [r7, #8]
2400edaa:	4613      	mov	r3, r2
2400edac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
2400edae:	88fb      	ldrh	r3, [r7, #6]
2400edb0:	b2da      	uxtb	r2, r3
2400edb2:	8979      	ldrh	r1, [r7, #10]
2400edb4:	4b20      	ldr	r3, [pc, #128]	@ (2400ee38 <I2C_RequestMemoryWrite+0xa4>)
2400edb6:	9300      	str	r3, [sp, #0]
2400edb8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
2400edbc:	68f8      	ldr	r0, [r7, #12]
2400edbe:	f001 fb6b 	bl	24010498 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
2400edc2:	69fa      	ldr	r2, [r7, #28]
2400edc4:	69b9      	ldr	r1, [r7, #24]
2400edc6:	68f8      	ldr	r0, [r7, #12]
2400edc8:	f001 f96f 	bl	240100aa <I2C_WaitOnTXISFlagUntilTimeout>
2400edcc:	4603      	mov	r3, r0
2400edce:	2b00      	cmp	r3, #0
2400edd0:	d001      	beq.n	2400edd6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
2400edd2:	2301      	movs	r3, #1
2400edd4:	e02c      	b.n	2400ee30 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
2400edd6:	88fb      	ldrh	r3, [r7, #6]
2400edd8:	2b01      	cmp	r3, #1
2400edda:	d105      	bne.n	2400ede8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
2400eddc:	893b      	ldrh	r3, [r7, #8]
2400edde:	b2da      	uxtb	r2, r3
2400ede0:	68fb      	ldr	r3, [r7, #12]
2400ede2:	681b      	ldr	r3, [r3, #0]
2400ede4:	629a      	str	r2, [r3, #40]	@ 0x28
2400ede6:	e015      	b.n	2400ee14 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
2400ede8:	893b      	ldrh	r3, [r7, #8]
2400edea:	0a1b      	lsrs	r3, r3, #8
2400edec:	b29b      	uxth	r3, r3
2400edee:	b2da      	uxtb	r2, r3
2400edf0:	68fb      	ldr	r3, [r7, #12]
2400edf2:	681b      	ldr	r3, [r3, #0]
2400edf4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
2400edf6:	69fa      	ldr	r2, [r7, #28]
2400edf8:	69b9      	ldr	r1, [r7, #24]
2400edfa:	68f8      	ldr	r0, [r7, #12]
2400edfc:	f001 f955 	bl	240100aa <I2C_WaitOnTXISFlagUntilTimeout>
2400ee00:	4603      	mov	r3, r0
2400ee02:	2b00      	cmp	r3, #0
2400ee04:	d001      	beq.n	2400ee0a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
2400ee06:	2301      	movs	r3, #1
2400ee08:	e012      	b.n	2400ee30 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
2400ee0a:	893b      	ldrh	r3, [r7, #8]
2400ee0c:	b2da      	uxtb	r2, r3
2400ee0e:	68fb      	ldr	r3, [r7, #12]
2400ee10:	681b      	ldr	r3, [r3, #0]
2400ee12:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
2400ee14:	69fb      	ldr	r3, [r7, #28]
2400ee16:	9300      	str	r3, [sp, #0]
2400ee18:	69bb      	ldr	r3, [r7, #24]
2400ee1a:	2200      	movs	r2, #0
2400ee1c:	2180      	movs	r1, #128	@ 0x80
2400ee1e:	68f8      	ldr	r0, [r7, #12]
2400ee20:	f001 f8ea 	bl	2400fff8 <I2C_WaitOnFlagUntilTimeout>
2400ee24:	4603      	mov	r3, r0
2400ee26:	2b00      	cmp	r3, #0
2400ee28:	d001      	beq.n	2400ee2e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
2400ee2a:	2301      	movs	r3, #1
2400ee2c:	e000      	b.n	2400ee30 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
2400ee2e:	2300      	movs	r3, #0
}
2400ee30:	4618      	mov	r0, r3
2400ee32:	3710      	adds	r7, #16
2400ee34:	46bd      	mov	sp, r7
2400ee36:	bd80      	pop	{r7, pc}
2400ee38:	80002000 	.word	0x80002000

2400ee3c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
2400ee3c:	b580      	push	{r7, lr}
2400ee3e:	b086      	sub	sp, #24
2400ee40:	af02      	add	r7, sp, #8
2400ee42:	60f8      	str	r0, [r7, #12]
2400ee44:	4608      	mov	r0, r1
2400ee46:	4611      	mov	r1, r2
2400ee48:	461a      	mov	r2, r3
2400ee4a:	4603      	mov	r3, r0
2400ee4c:	817b      	strh	r3, [r7, #10]
2400ee4e:	460b      	mov	r3, r1
2400ee50:	813b      	strh	r3, [r7, #8]
2400ee52:	4613      	mov	r3, r2
2400ee54:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
2400ee56:	88fb      	ldrh	r3, [r7, #6]
2400ee58:	b2da      	uxtb	r2, r3
2400ee5a:	8979      	ldrh	r1, [r7, #10]
2400ee5c:	4b20      	ldr	r3, [pc, #128]	@ (2400eee0 <I2C_RequestMemoryRead+0xa4>)
2400ee5e:	9300      	str	r3, [sp, #0]
2400ee60:	2300      	movs	r3, #0
2400ee62:	68f8      	ldr	r0, [r7, #12]
2400ee64:	f001 fb18 	bl	24010498 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
2400ee68:	69fa      	ldr	r2, [r7, #28]
2400ee6a:	69b9      	ldr	r1, [r7, #24]
2400ee6c:	68f8      	ldr	r0, [r7, #12]
2400ee6e:	f001 f91c 	bl	240100aa <I2C_WaitOnTXISFlagUntilTimeout>
2400ee72:	4603      	mov	r3, r0
2400ee74:	2b00      	cmp	r3, #0
2400ee76:	d001      	beq.n	2400ee7c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
2400ee78:	2301      	movs	r3, #1
2400ee7a:	e02c      	b.n	2400eed6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
2400ee7c:	88fb      	ldrh	r3, [r7, #6]
2400ee7e:	2b01      	cmp	r3, #1
2400ee80:	d105      	bne.n	2400ee8e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
2400ee82:	893b      	ldrh	r3, [r7, #8]
2400ee84:	b2da      	uxtb	r2, r3
2400ee86:	68fb      	ldr	r3, [r7, #12]
2400ee88:	681b      	ldr	r3, [r3, #0]
2400ee8a:	629a      	str	r2, [r3, #40]	@ 0x28
2400ee8c:	e015      	b.n	2400eeba <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
2400ee8e:	893b      	ldrh	r3, [r7, #8]
2400ee90:	0a1b      	lsrs	r3, r3, #8
2400ee92:	b29b      	uxth	r3, r3
2400ee94:	b2da      	uxtb	r2, r3
2400ee96:	68fb      	ldr	r3, [r7, #12]
2400ee98:	681b      	ldr	r3, [r3, #0]
2400ee9a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
2400ee9c:	69fa      	ldr	r2, [r7, #28]
2400ee9e:	69b9      	ldr	r1, [r7, #24]
2400eea0:	68f8      	ldr	r0, [r7, #12]
2400eea2:	f001 f902 	bl	240100aa <I2C_WaitOnTXISFlagUntilTimeout>
2400eea6:	4603      	mov	r3, r0
2400eea8:	2b00      	cmp	r3, #0
2400eeaa:	d001      	beq.n	2400eeb0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
2400eeac:	2301      	movs	r3, #1
2400eeae:	e012      	b.n	2400eed6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
2400eeb0:	893b      	ldrh	r3, [r7, #8]
2400eeb2:	b2da      	uxtb	r2, r3
2400eeb4:	68fb      	ldr	r3, [r7, #12]
2400eeb6:	681b      	ldr	r3, [r3, #0]
2400eeb8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
2400eeba:	69fb      	ldr	r3, [r7, #28]
2400eebc:	9300      	str	r3, [sp, #0]
2400eebe:	69bb      	ldr	r3, [r7, #24]
2400eec0:	2200      	movs	r2, #0
2400eec2:	2140      	movs	r1, #64	@ 0x40
2400eec4:	68f8      	ldr	r0, [r7, #12]
2400eec6:	f001 f897 	bl	2400fff8 <I2C_WaitOnFlagUntilTimeout>
2400eeca:	4603      	mov	r3, r0
2400eecc:	2b00      	cmp	r3, #0
2400eece:	d001      	beq.n	2400eed4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
2400eed0:	2301      	movs	r3, #1
2400eed2:	e000      	b.n	2400eed6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
2400eed4:	2300      	movs	r3, #0
}
2400eed6:	4618      	mov	r0, r3
2400eed8:	3710      	adds	r7, #16
2400eeda:	46bd      	mov	sp, r7
2400eedc:	bd80      	pop	{r7, pc}
2400eede:	bf00      	nop
2400eee0:	80002000 	.word	0x80002000

2400eee4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
2400eee4:	b580      	push	{r7, lr}
2400eee6:	b084      	sub	sp, #16
2400eee8:	af00      	add	r7, sp, #0
2400eeea:	6078      	str	r0, [r7, #4]
2400eeec:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
2400eeee:	687b      	ldr	r3, [r7, #4]
2400eef0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400eef4:	b2db      	uxtb	r3, r3
2400eef6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
2400eefa:	2b28      	cmp	r3, #40	@ 0x28
2400eefc:	d16a      	bne.n	2400efd4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
2400eefe:	687b      	ldr	r3, [r7, #4]
2400ef00:	681b      	ldr	r3, [r3, #0]
2400ef02:	699b      	ldr	r3, [r3, #24]
2400ef04:	0c1b      	lsrs	r3, r3, #16
2400ef06:	b2db      	uxtb	r3, r3
2400ef08:	f003 0301 	and.w	r3, r3, #1
2400ef0c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
2400ef0e:	687b      	ldr	r3, [r7, #4]
2400ef10:	681b      	ldr	r3, [r3, #0]
2400ef12:	699b      	ldr	r3, [r3, #24]
2400ef14:	0c1b      	lsrs	r3, r3, #16
2400ef16:	b29b      	uxth	r3, r3
2400ef18:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
2400ef1c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
2400ef1e:	687b      	ldr	r3, [r7, #4]
2400ef20:	681b      	ldr	r3, [r3, #0]
2400ef22:	689b      	ldr	r3, [r3, #8]
2400ef24:	b29b      	uxth	r3, r3
2400ef26:	f3c3 0309 	ubfx	r3, r3, #0, #10
2400ef2a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
2400ef2c:	687b      	ldr	r3, [r7, #4]
2400ef2e:	681b      	ldr	r3, [r3, #0]
2400ef30:	68db      	ldr	r3, [r3, #12]
2400ef32:	b29b      	uxth	r3, r3
2400ef34:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
2400ef38:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
2400ef3a:	687b      	ldr	r3, [r7, #4]
2400ef3c:	68db      	ldr	r3, [r3, #12]
2400ef3e:	2b02      	cmp	r3, #2
2400ef40:	d138      	bne.n	2400efb4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
2400ef42:	897b      	ldrh	r3, [r7, #10]
2400ef44:	09db      	lsrs	r3, r3, #7
2400ef46:	b29a      	uxth	r2, r3
2400ef48:	89bb      	ldrh	r3, [r7, #12]
2400ef4a:	4053      	eors	r3, r2
2400ef4c:	b29b      	uxth	r3, r3
2400ef4e:	f003 0306 	and.w	r3, r3, #6
2400ef52:	2b00      	cmp	r3, #0
2400ef54:	d11c      	bne.n	2400ef90 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
2400ef56:	897b      	ldrh	r3, [r7, #10]
2400ef58:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
2400ef5a:	687b      	ldr	r3, [r7, #4]
2400ef5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
2400ef5e:	1c5a      	adds	r2, r3, #1
2400ef60:	687b      	ldr	r3, [r7, #4]
2400ef62:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
2400ef64:	687b      	ldr	r3, [r7, #4]
2400ef66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
2400ef68:	2b02      	cmp	r3, #2
2400ef6a:	d13b      	bne.n	2400efe4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
2400ef6c:	687b      	ldr	r3, [r7, #4]
2400ef6e:	2200      	movs	r2, #0
2400ef70:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2400ef72:	687b      	ldr	r3, [r7, #4]
2400ef74:	681b      	ldr	r3, [r3, #0]
2400ef76:	2208      	movs	r2, #8
2400ef78:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
2400ef7a:	687b      	ldr	r3, [r7, #4]
2400ef7c:	2200      	movs	r2, #0
2400ef7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
2400ef82:	89ba      	ldrh	r2, [r7, #12]
2400ef84:	7bfb      	ldrb	r3, [r7, #15]
2400ef86:	4619      	mov	r1, r3
2400ef88:	6878      	ldr	r0, [r7, #4]
2400ef8a:	f7fe ff6a 	bl	2400de62 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
2400ef8e:	e029      	b.n	2400efe4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
2400ef90:	893b      	ldrh	r3, [r7, #8]
2400ef92:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
2400ef94:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
2400ef98:	6878      	ldr	r0, [r7, #4]
2400ef9a:	f001 fb33 	bl	24010604 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
2400ef9e:	687b      	ldr	r3, [r7, #4]
2400efa0:	2200      	movs	r2, #0
2400efa2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
2400efa6:	89ba      	ldrh	r2, [r7, #12]
2400efa8:	7bfb      	ldrb	r3, [r7, #15]
2400efaa:	4619      	mov	r1, r3
2400efac:	6878      	ldr	r0, [r7, #4]
2400efae:	f7fe ff58 	bl	2400de62 <HAL_I2C_AddrCallback>
}
2400efb2:	e017      	b.n	2400efe4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
2400efb4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
2400efb8:	6878      	ldr	r0, [r7, #4]
2400efba:	f001 fb23 	bl	24010604 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
2400efbe:	687b      	ldr	r3, [r7, #4]
2400efc0:	2200      	movs	r2, #0
2400efc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
2400efc6:	89ba      	ldrh	r2, [r7, #12]
2400efc8:	7bfb      	ldrb	r3, [r7, #15]
2400efca:	4619      	mov	r1, r3
2400efcc:	6878      	ldr	r0, [r7, #4]
2400efce:	f7fe ff48 	bl	2400de62 <HAL_I2C_AddrCallback>
}
2400efd2:	e007      	b.n	2400efe4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2400efd4:	687b      	ldr	r3, [r7, #4]
2400efd6:	681b      	ldr	r3, [r3, #0]
2400efd8:	2208      	movs	r2, #8
2400efda:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
2400efdc:	687b      	ldr	r3, [r7, #4]
2400efde:	2200      	movs	r2, #0
2400efe0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
2400efe4:	bf00      	nop
2400efe6:	3710      	adds	r7, #16
2400efe8:	46bd      	mov	sp, r7
2400efea:	bd80      	pop	{r7, pc}

2400efec <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
2400efec:	b580      	push	{r7, lr}
2400efee:	b082      	sub	sp, #8
2400eff0:	af00      	add	r7, sp, #0
2400eff2:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
2400eff4:	687b      	ldr	r3, [r7, #4]
2400eff6:	2200      	movs	r2, #0
2400eff8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
2400effc:	687b      	ldr	r3, [r7, #4]
2400effe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400f002:	b2db      	uxtb	r3, r3
2400f004:	2b21      	cmp	r3, #33	@ 0x21
2400f006:	d115      	bne.n	2400f034 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
2400f008:	687b      	ldr	r3, [r7, #4]
2400f00a:	2220      	movs	r2, #32
2400f00c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
2400f010:	687b      	ldr	r3, [r7, #4]
2400f012:	2211      	movs	r2, #17
2400f014:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
2400f016:	687b      	ldr	r3, [r7, #4]
2400f018:	2200      	movs	r2, #0
2400f01a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
2400f01c:	2101      	movs	r1, #1
2400f01e:	6878      	ldr	r0, [r7, #4]
2400f020:	f001 faf0 	bl	24010604 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400f024:	687b      	ldr	r3, [r7, #4]
2400f026:	2200      	movs	r2, #0
2400f028:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
2400f02c:	6878      	ldr	r0, [r7, #4]
2400f02e:	f7fe fef0 	bl	2400de12 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
2400f032:	e014      	b.n	2400f05e <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
2400f034:	687b      	ldr	r3, [r7, #4]
2400f036:	2220      	movs	r2, #32
2400f038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
2400f03c:	687b      	ldr	r3, [r7, #4]
2400f03e:	2212      	movs	r2, #18
2400f040:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
2400f042:	687b      	ldr	r3, [r7, #4]
2400f044:	2200      	movs	r2, #0
2400f046:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
2400f048:	2102      	movs	r1, #2
2400f04a:	6878      	ldr	r0, [r7, #4]
2400f04c:	f001 fada 	bl	24010604 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
2400f050:	687b      	ldr	r3, [r7, #4]
2400f052:	2200      	movs	r2, #0
2400f054:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
2400f058:	6878      	ldr	r0, [r7, #4]
2400f05a:	f7fe fee4 	bl	2400de26 <HAL_I2C_MasterRxCpltCallback>
}
2400f05e:	bf00      	nop
2400f060:	3708      	adds	r7, #8
2400f062:	46bd      	mov	sp, r7
2400f064:	bd80      	pop	{r7, pc}

2400f066 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
2400f066:	b580      	push	{r7, lr}
2400f068:	b084      	sub	sp, #16
2400f06a:	af00      	add	r7, sp, #0
2400f06c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
2400f06e:	687b      	ldr	r3, [r7, #4]
2400f070:	681b      	ldr	r3, [r3, #0]
2400f072:	681b      	ldr	r3, [r3, #0]
2400f074:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
2400f076:	687b      	ldr	r3, [r7, #4]
2400f078:	2200      	movs	r2, #0
2400f07a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
2400f07e:	68fb      	ldr	r3, [r7, #12]
2400f080:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
2400f084:	2b00      	cmp	r3, #0
2400f086:	d008      	beq.n	2400f09a <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2400f088:	687b      	ldr	r3, [r7, #4]
2400f08a:	681b      	ldr	r3, [r3, #0]
2400f08c:	681a      	ldr	r2, [r3, #0]
2400f08e:	687b      	ldr	r3, [r7, #4]
2400f090:	681b      	ldr	r3, [r3, #0]
2400f092:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
2400f096:	601a      	str	r2, [r3, #0]
2400f098:	e00c      	b.n	2400f0b4 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
2400f09a:	68fb      	ldr	r3, [r7, #12]
2400f09c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
2400f0a0:	2b00      	cmp	r3, #0
2400f0a2:	d007      	beq.n	2400f0b4 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2400f0a4:	687b      	ldr	r3, [r7, #4]
2400f0a6:	681b      	ldr	r3, [r3, #0]
2400f0a8:	681a      	ldr	r2, [r3, #0]
2400f0aa:	687b      	ldr	r3, [r7, #4]
2400f0ac:	681b      	ldr	r3, [r3, #0]
2400f0ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
2400f0b2:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
2400f0b4:	687b      	ldr	r3, [r7, #4]
2400f0b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400f0ba:	b2db      	uxtb	r3, r3
2400f0bc:	2b29      	cmp	r3, #41	@ 0x29
2400f0be:	d112      	bne.n	2400f0e6 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
2400f0c0:	687b      	ldr	r3, [r7, #4]
2400f0c2:	2228      	movs	r2, #40	@ 0x28
2400f0c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
2400f0c8:	687b      	ldr	r3, [r7, #4]
2400f0ca:	2221      	movs	r2, #33	@ 0x21
2400f0cc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
2400f0ce:	2101      	movs	r1, #1
2400f0d0:	6878      	ldr	r0, [r7, #4]
2400f0d2:	f001 fa97 	bl	24010604 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400f0d6:	687b      	ldr	r3, [r7, #4]
2400f0d8:	2200      	movs	r2, #0
2400f0da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
2400f0de:	6878      	ldr	r0, [r7, #4]
2400f0e0:	f7fe feab 	bl	2400de3a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
2400f0e4:	e017      	b.n	2400f116 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
2400f0e6:	687b      	ldr	r3, [r7, #4]
2400f0e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400f0ec:	b2db      	uxtb	r3, r3
2400f0ee:	2b2a      	cmp	r3, #42	@ 0x2a
2400f0f0:	d111      	bne.n	2400f116 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
2400f0f2:	687b      	ldr	r3, [r7, #4]
2400f0f4:	2228      	movs	r2, #40	@ 0x28
2400f0f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
2400f0fa:	687b      	ldr	r3, [r7, #4]
2400f0fc:	2222      	movs	r2, #34	@ 0x22
2400f0fe:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
2400f100:	2102      	movs	r1, #2
2400f102:	6878      	ldr	r0, [r7, #4]
2400f104:	f001 fa7e 	bl	24010604 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
2400f108:	687b      	ldr	r3, [r7, #4]
2400f10a:	2200      	movs	r2, #0
2400f10c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
2400f110:	6878      	ldr	r0, [r7, #4]
2400f112:	f7fe fe9c 	bl	2400de4e <HAL_I2C_SlaveRxCpltCallback>
}
2400f116:	bf00      	nop
2400f118:	3710      	adds	r7, #16
2400f11a:	46bd      	mov	sp, r7
2400f11c:	bd80      	pop	{r7, pc}
	...

2400f120 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
2400f120:	b580      	push	{r7, lr}
2400f122:	b086      	sub	sp, #24
2400f124:	af00      	add	r7, sp, #0
2400f126:	6078      	str	r0, [r7, #4]
2400f128:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
2400f12a:	683b      	ldr	r3, [r7, #0]
2400f12c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400f12e:	687b      	ldr	r3, [r7, #4]
2400f130:	681b      	ldr	r3, [r3, #0]
2400f132:	2220      	movs	r2, #32
2400f134:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
2400f136:	687b      	ldr	r3, [r7, #4]
2400f138:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400f13c:	b2db      	uxtb	r3, r3
2400f13e:	2b21      	cmp	r3, #33	@ 0x21
2400f140:	d107      	bne.n	2400f152 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
2400f142:	2101      	movs	r1, #1
2400f144:	6878      	ldr	r0, [r7, #4]
2400f146:	f001 fa5d 	bl	24010604 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
2400f14a:	687b      	ldr	r3, [r7, #4]
2400f14c:	2211      	movs	r2, #17
2400f14e:	631a      	str	r2, [r3, #48]	@ 0x30
2400f150:	e00c      	b.n	2400f16c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
2400f152:	687b      	ldr	r3, [r7, #4]
2400f154:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400f158:	b2db      	uxtb	r3, r3
2400f15a:	2b22      	cmp	r3, #34	@ 0x22
2400f15c:	d106      	bne.n	2400f16c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
2400f15e:	2102      	movs	r1, #2
2400f160:	6878      	ldr	r0, [r7, #4]
2400f162:	f001 fa4f 	bl	24010604 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
2400f166:	687b      	ldr	r3, [r7, #4]
2400f168:	2212      	movs	r2, #18
2400f16a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
2400f16c:	687b      	ldr	r3, [r7, #4]
2400f16e:	681b      	ldr	r3, [r3, #0]
2400f170:	6859      	ldr	r1, [r3, #4]
2400f172:	687b      	ldr	r3, [r7, #4]
2400f174:	681a      	ldr	r2, [r3, #0]
2400f176:	4b4c      	ldr	r3, [pc, #304]	@ (2400f2a8 <I2C_ITMasterCplt+0x188>)
2400f178:	400b      	ands	r3, r1
2400f17a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
2400f17c:	687b      	ldr	r3, [r7, #4]
2400f17e:	2200      	movs	r2, #0
2400f180:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
2400f182:	687b      	ldr	r3, [r7, #4]
2400f184:	4a49      	ldr	r2, [pc, #292]	@ (2400f2ac <I2C_ITMasterCplt+0x18c>)
2400f186:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
2400f188:	697b      	ldr	r3, [r7, #20]
2400f18a:	f003 0310 	and.w	r3, r3, #16
2400f18e:	2b00      	cmp	r3, #0
2400f190:	d009      	beq.n	2400f1a6 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400f192:	687b      	ldr	r3, [r7, #4]
2400f194:	681b      	ldr	r3, [r3, #0]
2400f196:	2210      	movs	r2, #16
2400f198:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2400f19a:	687b      	ldr	r3, [r7, #4]
2400f19c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2400f19e:	f043 0204 	orr.w	r2, r3, #4
2400f1a2:	687b      	ldr	r3, [r7, #4]
2400f1a4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
2400f1a6:	687b      	ldr	r3, [r7, #4]
2400f1a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400f1ac:	b2db      	uxtb	r3, r3
2400f1ae:	2b60      	cmp	r3, #96	@ 0x60
2400f1b0:	d10a      	bne.n	2400f1c8 <I2C_ITMasterCplt+0xa8>
2400f1b2:	697b      	ldr	r3, [r7, #20]
2400f1b4:	f003 0304 	and.w	r3, r3, #4
2400f1b8:	2b00      	cmp	r3, #0
2400f1ba:	d005      	beq.n	2400f1c8 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
2400f1bc:	687b      	ldr	r3, [r7, #4]
2400f1be:	681b      	ldr	r3, [r3, #0]
2400f1c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2400f1c2:	b2db      	uxtb	r3, r3
2400f1c4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
2400f1c6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
2400f1c8:	6878      	ldr	r0, [r7, #4]
2400f1ca:	f000 fc30 	bl	2400fa2e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
2400f1ce:	687b      	ldr	r3, [r7, #4]
2400f1d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2400f1d2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
2400f1d4:	687b      	ldr	r3, [r7, #4]
2400f1d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400f1da:	b2db      	uxtb	r3, r3
2400f1dc:	2b60      	cmp	r3, #96	@ 0x60
2400f1de:	d002      	beq.n	2400f1e6 <I2C_ITMasterCplt+0xc6>
2400f1e0:	693b      	ldr	r3, [r7, #16]
2400f1e2:	2b00      	cmp	r3, #0
2400f1e4:	d006      	beq.n	2400f1f4 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
2400f1e6:	687b      	ldr	r3, [r7, #4]
2400f1e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2400f1ea:	4619      	mov	r1, r3
2400f1ec:	6878      	ldr	r0, [r7, #4]
2400f1ee:	f000 fb07 	bl	2400f800 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
2400f1f2:	e054      	b.n	2400f29e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
2400f1f4:	687b      	ldr	r3, [r7, #4]
2400f1f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400f1fa:	b2db      	uxtb	r3, r3
2400f1fc:	2b21      	cmp	r3, #33	@ 0x21
2400f1fe:	d124      	bne.n	2400f24a <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
2400f200:	687b      	ldr	r3, [r7, #4]
2400f202:	2220      	movs	r2, #32
2400f204:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
2400f208:	687b      	ldr	r3, [r7, #4]
2400f20a:	2200      	movs	r2, #0
2400f20c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
2400f20e:	687b      	ldr	r3, [r7, #4]
2400f210:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
2400f214:	b2db      	uxtb	r3, r3
2400f216:	2b40      	cmp	r3, #64	@ 0x40
2400f218:	d10b      	bne.n	2400f232 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
2400f21a:	687b      	ldr	r3, [r7, #4]
2400f21c:	2200      	movs	r2, #0
2400f21e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
2400f222:	687b      	ldr	r3, [r7, #4]
2400f224:	2200      	movs	r2, #0
2400f226:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
2400f22a:	6878      	ldr	r0, [r7, #4]
2400f22c:	f7fe fe31 	bl	2400de92 <HAL_I2C_MemTxCpltCallback>
}
2400f230:	e035      	b.n	2400f29e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
2400f232:	687b      	ldr	r3, [r7, #4]
2400f234:	2200      	movs	r2, #0
2400f236:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
2400f23a:	687b      	ldr	r3, [r7, #4]
2400f23c:	2200      	movs	r2, #0
2400f23e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
2400f242:	6878      	ldr	r0, [r7, #4]
2400f244:	f7fe fde5 	bl	2400de12 <HAL_I2C_MasterTxCpltCallback>
}
2400f248:	e029      	b.n	2400f29e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
2400f24a:	687b      	ldr	r3, [r7, #4]
2400f24c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400f250:	b2db      	uxtb	r3, r3
2400f252:	2b22      	cmp	r3, #34	@ 0x22
2400f254:	d123      	bne.n	2400f29e <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
2400f256:	687b      	ldr	r3, [r7, #4]
2400f258:	2220      	movs	r2, #32
2400f25a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
2400f25e:	687b      	ldr	r3, [r7, #4]
2400f260:	2200      	movs	r2, #0
2400f262:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
2400f264:	687b      	ldr	r3, [r7, #4]
2400f266:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
2400f26a:	b2db      	uxtb	r3, r3
2400f26c:	2b40      	cmp	r3, #64	@ 0x40
2400f26e:	d10b      	bne.n	2400f288 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
2400f270:	687b      	ldr	r3, [r7, #4]
2400f272:	2200      	movs	r2, #0
2400f274:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
2400f278:	687b      	ldr	r3, [r7, #4]
2400f27a:	2200      	movs	r2, #0
2400f27c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
2400f280:	6878      	ldr	r0, [r7, #4]
2400f282:	f7fe fe10 	bl	2400dea6 <HAL_I2C_MemRxCpltCallback>
}
2400f286:	e00a      	b.n	2400f29e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
2400f288:	687b      	ldr	r3, [r7, #4]
2400f28a:	2200      	movs	r2, #0
2400f28c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
2400f290:	687b      	ldr	r3, [r7, #4]
2400f292:	2200      	movs	r2, #0
2400f294:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
2400f298:	6878      	ldr	r0, [r7, #4]
2400f29a:	f7fe fdc4 	bl	2400de26 <HAL_I2C_MasterRxCpltCallback>
}
2400f29e:	bf00      	nop
2400f2a0:	3718      	adds	r7, #24
2400f2a2:	46bd      	mov	sp, r7
2400f2a4:	bd80      	pop	{r7, pc}
2400f2a6:	bf00      	nop
2400f2a8:	fe00e800 	.word	0xfe00e800
2400f2ac:	ffff0000 	.word	0xffff0000

2400f2b0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
2400f2b0:	b580      	push	{r7, lr}
2400f2b2:	b086      	sub	sp, #24
2400f2b4:	af00      	add	r7, sp, #0
2400f2b6:	6078      	str	r0, [r7, #4]
2400f2b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
2400f2ba:	687b      	ldr	r3, [r7, #4]
2400f2bc:	681b      	ldr	r3, [r3, #0]
2400f2be:	681b      	ldr	r3, [r3, #0]
2400f2c0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
2400f2c2:	683b      	ldr	r3, [r7, #0]
2400f2c4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
2400f2c6:	687b      	ldr	r3, [r7, #4]
2400f2c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2400f2ca:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
2400f2cc:	687b      	ldr	r3, [r7, #4]
2400f2ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400f2d2:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400f2d4:	687b      	ldr	r3, [r7, #4]
2400f2d6:	681b      	ldr	r3, [r3, #0]
2400f2d8:	2220      	movs	r2, #32
2400f2da:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
2400f2dc:	7afb      	ldrb	r3, [r7, #11]
2400f2de:	2b21      	cmp	r3, #33	@ 0x21
2400f2e0:	d002      	beq.n	2400f2e8 <I2C_ITSlaveCplt+0x38>
2400f2e2:	7afb      	ldrb	r3, [r7, #11]
2400f2e4:	2b29      	cmp	r3, #41	@ 0x29
2400f2e6:	d108      	bne.n	2400f2fa <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
2400f2e8:	f248 0101 	movw	r1, #32769	@ 0x8001
2400f2ec:	6878      	ldr	r0, [r7, #4]
2400f2ee:	f001 f989 	bl	24010604 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
2400f2f2:	687b      	ldr	r3, [r7, #4]
2400f2f4:	2221      	movs	r2, #33	@ 0x21
2400f2f6:	631a      	str	r2, [r3, #48]	@ 0x30
2400f2f8:	e019      	b.n	2400f32e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
2400f2fa:	7afb      	ldrb	r3, [r7, #11]
2400f2fc:	2b22      	cmp	r3, #34	@ 0x22
2400f2fe:	d002      	beq.n	2400f306 <I2C_ITSlaveCplt+0x56>
2400f300:	7afb      	ldrb	r3, [r7, #11]
2400f302:	2b2a      	cmp	r3, #42	@ 0x2a
2400f304:	d108      	bne.n	2400f318 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
2400f306:	f248 0102 	movw	r1, #32770	@ 0x8002
2400f30a:	6878      	ldr	r0, [r7, #4]
2400f30c:	f001 f97a 	bl	24010604 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
2400f310:	687b      	ldr	r3, [r7, #4]
2400f312:	2222      	movs	r2, #34	@ 0x22
2400f314:	631a      	str	r2, [r3, #48]	@ 0x30
2400f316:	e00a      	b.n	2400f32e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
2400f318:	7afb      	ldrb	r3, [r7, #11]
2400f31a:	2b28      	cmp	r3, #40	@ 0x28
2400f31c:	d107      	bne.n	2400f32e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
2400f31e:	f248 0103 	movw	r1, #32771	@ 0x8003
2400f322:	6878      	ldr	r0, [r7, #4]
2400f324:	f001 f96e 	bl	24010604 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
2400f328:	687b      	ldr	r3, [r7, #4]
2400f32a:	2200      	movs	r2, #0
2400f32c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400f32e:	687b      	ldr	r3, [r7, #4]
2400f330:	681b      	ldr	r3, [r3, #0]
2400f332:	685a      	ldr	r2, [r3, #4]
2400f334:	687b      	ldr	r3, [r7, #4]
2400f336:	681b      	ldr	r3, [r3, #0]
2400f338:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
2400f33c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
2400f33e:	687b      	ldr	r3, [r7, #4]
2400f340:	681b      	ldr	r3, [r3, #0]
2400f342:	6859      	ldr	r1, [r3, #4]
2400f344:	687b      	ldr	r3, [r7, #4]
2400f346:	681a      	ldr	r2, [r3, #0]
2400f348:	4b7f      	ldr	r3, [pc, #508]	@ (2400f548 <I2C_ITSlaveCplt+0x298>)
2400f34a:	400b      	ands	r3, r1
2400f34c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
2400f34e:	6878      	ldr	r0, [r7, #4]
2400f350:	f000 fb6d 	bl	2400fa2e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
2400f354:	693b      	ldr	r3, [r7, #16]
2400f356:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
2400f35a:	2b00      	cmp	r3, #0
2400f35c:	d07a      	beq.n	2400f454 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2400f35e:	687b      	ldr	r3, [r7, #4]
2400f360:	681b      	ldr	r3, [r3, #0]
2400f362:	681a      	ldr	r2, [r3, #0]
2400f364:	687b      	ldr	r3, [r7, #4]
2400f366:	681b      	ldr	r3, [r3, #0]
2400f368:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
2400f36c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
2400f36e:	687b      	ldr	r3, [r7, #4]
2400f370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400f372:	2b00      	cmp	r3, #0
2400f374:	f000 8111 	beq.w	2400f59a <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
2400f378:	687b      	ldr	r3, [r7, #4]
2400f37a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400f37c:	681b      	ldr	r3, [r3, #0]
2400f37e:	4a73      	ldr	r2, [pc, #460]	@ (2400f54c <I2C_ITSlaveCplt+0x29c>)
2400f380:	4293      	cmp	r3, r2
2400f382:	d059      	beq.n	2400f438 <I2C_ITSlaveCplt+0x188>
2400f384:	687b      	ldr	r3, [r7, #4]
2400f386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400f388:	681b      	ldr	r3, [r3, #0]
2400f38a:	4a71      	ldr	r2, [pc, #452]	@ (2400f550 <I2C_ITSlaveCplt+0x2a0>)
2400f38c:	4293      	cmp	r3, r2
2400f38e:	d053      	beq.n	2400f438 <I2C_ITSlaveCplt+0x188>
2400f390:	687b      	ldr	r3, [r7, #4]
2400f392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400f394:	681b      	ldr	r3, [r3, #0]
2400f396:	4a6f      	ldr	r2, [pc, #444]	@ (2400f554 <I2C_ITSlaveCplt+0x2a4>)
2400f398:	4293      	cmp	r3, r2
2400f39a:	d04d      	beq.n	2400f438 <I2C_ITSlaveCplt+0x188>
2400f39c:	687b      	ldr	r3, [r7, #4]
2400f39e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400f3a0:	681b      	ldr	r3, [r3, #0]
2400f3a2:	4a6d      	ldr	r2, [pc, #436]	@ (2400f558 <I2C_ITSlaveCplt+0x2a8>)
2400f3a4:	4293      	cmp	r3, r2
2400f3a6:	d047      	beq.n	2400f438 <I2C_ITSlaveCplt+0x188>
2400f3a8:	687b      	ldr	r3, [r7, #4]
2400f3aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400f3ac:	681b      	ldr	r3, [r3, #0]
2400f3ae:	4a6b      	ldr	r2, [pc, #428]	@ (2400f55c <I2C_ITSlaveCplt+0x2ac>)
2400f3b0:	4293      	cmp	r3, r2
2400f3b2:	d041      	beq.n	2400f438 <I2C_ITSlaveCplt+0x188>
2400f3b4:	687b      	ldr	r3, [r7, #4]
2400f3b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400f3b8:	681b      	ldr	r3, [r3, #0]
2400f3ba:	4a69      	ldr	r2, [pc, #420]	@ (2400f560 <I2C_ITSlaveCplt+0x2b0>)
2400f3bc:	4293      	cmp	r3, r2
2400f3be:	d03b      	beq.n	2400f438 <I2C_ITSlaveCplt+0x188>
2400f3c0:	687b      	ldr	r3, [r7, #4]
2400f3c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400f3c4:	681b      	ldr	r3, [r3, #0]
2400f3c6:	4a67      	ldr	r2, [pc, #412]	@ (2400f564 <I2C_ITSlaveCplt+0x2b4>)
2400f3c8:	4293      	cmp	r3, r2
2400f3ca:	d035      	beq.n	2400f438 <I2C_ITSlaveCplt+0x188>
2400f3cc:	687b      	ldr	r3, [r7, #4]
2400f3ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400f3d0:	681b      	ldr	r3, [r3, #0]
2400f3d2:	4a65      	ldr	r2, [pc, #404]	@ (2400f568 <I2C_ITSlaveCplt+0x2b8>)
2400f3d4:	4293      	cmp	r3, r2
2400f3d6:	d02f      	beq.n	2400f438 <I2C_ITSlaveCplt+0x188>
2400f3d8:	687b      	ldr	r3, [r7, #4]
2400f3da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400f3dc:	681b      	ldr	r3, [r3, #0]
2400f3de:	4a63      	ldr	r2, [pc, #396]	@ (2400f56c <I2C_ITSlaveCplt+0x2bc>)
2400f3e0:	4293      	cmp	r3, r2
2400f3e2:	d029      	beq.n	2400f438 <I2C_ITSlaveCplt+0x188>
2400f3e4:	687b      	ldr	r3, [r7, #4]
2400f3e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400f3e8:	681b      	ldr	r3, [r3, #0]
2400f3ea:	4a61      	ldr	r2, [pc, #388]	@ (2400f570 <I2C_ITSlaveCplt+0x2c0>)
2400f3ec:	4293      	cmp	r3, r2
2400f3ee:	d023      	beq.n	2400f438 <I2C_ITSlaveCplt+0x188>
2400f3f0:	687b      	ldr	r3, [r7, #4]
2400f3f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400f3f4:	681b      	ldr	r3, [r3, #0]
2400f3f6:	4a5f      	ldr	r2, [pc, #380]	@ (2400f574 <I2C_ITSlaveCplt+0x2c4>)
2400f3f8:	4293      	cmp	r3, r2
2400f3fa:	d01d      	beq.n	2400f438 <I2C_ITSlaveCplt+0x188>
2400f3fc:	687b      	ldr	r3, [r7, #4]
2400f3fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400f400:	681b      	ldr	r3, [r3, #0]
2400f402:	4a5d      	ldr	r2, [pc, #372]	@ (2400f578 <I2C_ITSlaveCplt+0x2c8>)
2400f404:	4293      	cmp	r3, r2
2400f406:	d017      	beq.n	2400f438 <I2C_ITSlaveCplt+0x188>
2400f408:	687b      	ldr	r3, [r7, #4]
2400f40a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400f40c:	681b      	ldr	r3, [r3, #0]
2400f40e:	4a5b      	ldr	r2, [pc, #364]	@ (2400f57c <I2C_ITSlaveCplt+0x2cc>)
2400f410:	4293      	cmp	r3, r2
2400f412:	d011      	beq.n	2400f438 <I2C_ITSlaveCplt+0x188>
2400f414:	687b      	ldr	r3, [r7, #4]
2400f416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400f418:	681b      	ldr	r3, [r3, #0]
2400f41a:	4a59      	ldr	r2, [pc, #356]	@ (2400f580 <I2C_ITSlaveCplt+0x2d0>)
2400f41c:	4293      	cmp	r3, r2
2400f41e:	d00b      	beq.n	2400f438 <I2C_ITSlaveCplt+0x188>
2400f420:	687b      	ldr	r3, [r7, #4]
2400f422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400f424:	681b      	ldr	r3, [r3, #0]
2400f426:	4a57      	ldr	r2, [pc, #348]	@ (2400f584 <I2C_ITSlaveCplt+0x2d4>)
2400f428:	4293      	cmp	r3, r2
2400f42a:	d005      	beq.n	2400f438 <I2C_ITSlaveCplt+0x188>
2400f42c:	687b      	ldr	r3, [r7, #4]
2400f42e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400f430:	681b      	ldr	r3, [r3, #0]
2400f432:	4a55      	ldr	r2, [pc, #340]	@ (2400f588 <I2C_ITSlaveCplt+0x2d8>)
2400f434:	4293      	cmp	r3, r2
2400f436:	d105      	bne.n	2400f444 <I2C_ITSlaveCplt+0x194>
2400f438:	687b      	ldr	r3, [r7, #4]
2400f43a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400f43c:	681b      	ldr	r3, [r3, #0]
2400f43e:	685b      	ldr	r3, [r3, #4]
2400f440:	b29b      	uxth	r3, r3
2400f442:	e004      	b.n	2400f44e <I2C_ITSlaveCplt+0x19e>
2400f444:	687b      	ldr	r3, [r7, #4]
2400f446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400f448:	681b      	ldr	r3, [r3, #0]
2400f44a:	685b      	ldr	r3, [r3, #4]
2400f44c:	b29b      	uxth	r3, r3
2400f44e:	687a      	ldr	r2, [r7, #4]
2400f450:	8553      	strh	r3, [r2, #42]	@ 0x2a
2400f452:	e0a2      	b.n	2400f59a <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
2400f454:	693b      	ldr	r3, [r7, #16]
2400f456:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
2400f45a:	2b00      	cmp	r3, #0
2400f45c:	f000 809d 	beq.w	2400f59a <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2400f460:	687b      	ldr	r3, [r7, #4]
2400f462:	681b      	ldr	r3, [r3, #0]
2400f464:	681a      	ldr	r2, [r3, #0]
2400f466:	687b      	ldr	r3, [r7, #4]
2400f468:	681b      	ldr	r3, [r3, #0]
2400f46a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
2400f46e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
2400f470:	687b      	ldr	r3, [r7, #4]
2400f472:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400f474:	2b00      	cmp	r3, #0
2400f476:	f000 8090 	beq.w	2400f59a <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
2400f47a:	687b      	ldr	r3, [r7, #4]
2400f47c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400f47e:	681b      	ldr	r3, [r3, #0]
2400f480:	4a32      	ldr	r2, [pc, #200]	@ (2400f54c <I2C_ITSlaveCplt+0x29c>)
2400f482:	4293      	cmp	r3, r2
2400f484:	d059      	beq.n	2400f53a <I2C_ITSlaveCplt+0x28a>
2400f486:	687b      	ldr	r3, [r7, #4]
2400f488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400f48a:	681b      	ldr	r3, [r3, #0]
2400f48c:	4a30      	ldr	r2, [pc, #192]	@ (2400f550 <I2C_ITSlaveCplt+0x2a0>)
2400f48e:	4293      	cmp	r3, r2
2400f490:	d053      	beq.n	2400f53a <I2C_ITSlaveCplt+0x28a>
2400f492:	687b      	ldr	r3, [r7, #4]
2400f494:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400f496:	681b      	ldr	r3, [r3, #0]
2400f498:	4a2e      	ldr	r2, [pc, #184]	@ (2400f554 <I2C_ITSlaveCplt+0x2a4>)
2400f49a:	4293      	cmp	r3, r2
2400f49c:	d04d      	beq.n	2400f53a <I2C_ITSlaveCplt+0x28a>
2400f49e:	687b      	ldr	r3, [r7, #4]
2400f4a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400f4a2:	681b      	ldr	r3, [r3, #0]
2400f4a4:	4a2c      	ldr	r2, [pc, #176]	@ (2400f558 <I2C_ITSlaveCplt+0x2a8>)
2400f4a6:	4293      	cmp	r3, r2
2400f4a8:	d047      	beq.n	2400f53a <I2C_ITSlaveCplt+0x28a>
2400f4aa:	687b      	ldr	r3, [r7, #4]
2400f4ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400f4ae:	681b      	ldr	r3, [r3, #0]
2400f4b0:	4a2a      	ldr	r2, [pc, #168]	@ (2400f55c <I2C_ITSlaveCplt+0x2ac>)
2400f4b2:	4293      	cmp	r3, r2
2400f4b4:	d041      	beq.n	2400f53a <I2C_ITSlaveCplt+0x28a>
2400f4b6:	687b      	ldr	r3, [r7, #4]
2400f4b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400f4ba:	681b      	ldr	r3, [r3, #0]
2400f4bc:	4a28      	ldr	r2, [pc, #160]	@ (2400f560 <I2C_ITSlaveCplt+0x2b0>)
2400f4be:	4293      	cmp	r3, r2
2400f4c0:	d03b      	beq.n	2400f53a <I2C_ITSlaveCplt+0x28a>
2400f4c2:	687b      	ldr	r3, [r7, #4]
2400f4c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400f4c6:	681b      	ldr	r3, [r3, #0]
2400f4c8:	4a26      	ldr	r2, [pc, #152]	@ (2400f564 <I2C_ITSlaveCplt+0x2b4>)
2400f4ca:	4293      	cmp	r3, r2
2400f4cc:	d035      	beq.n	2400f53a <I2C_ITSlaveCplt+0x28a>
2400f4ce:	687b      	ldr	r3, [r7, #4]
2400f4d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400f4d2:	681b      	ldr	r3, [r3, #0]
2400f4d4:	4a24      	ldr	r2, [pc, #144]	@ (2400f568 <I2C_ITSlaveCplt+0x2b8>)
2400f4d6:	4293      	cmp	r3, r2
2400f4d8:	d02f      	beq.n	2400f53a <I2C_ITSlaveCplt+0x28a>
2400f4da:	687b      	ldr	r3, [r7, #4]
2400f4dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400f4de:	681b      	ldr	r3, [r3, #0]
2400f4e0:	4a22      	ldr	r2, [pc, #136]	@ (2400f56c <I2C_ITSlaveCplt+0x2bc>)
2400f4e2:	4293      	cmp	r3, r2
2400f4e4:	d029      	beq.n	2400f53a <I2C_ITSlaveCplt+0x28a>
2400f4e6:	687b      	ldr	r3, [r7, #4]
2400f4e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400f4ea:	681b      	ldr	r3, [r3, #0]
2400f4ec:	4a20      	ldr	r2, [pc, #128]	@ (2400f570 <I2C_ITSlaveCplt+0x2c0>)
2400f4ee:	4293      	cmp	r3, r2
2400f4f0:	d023      	beq.n	2400f53a <I2C_ITSlaveCplt+0x28a>
2400f4f2:	687b      	ldr	r3, [r7, #4]
2400f4f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400f4f6:	681b      	ldr	r3, [r3, #0]
2400f4f8:	4a1e      	ldr	r2, [pc, #120]	@ (2400f574 <I2C_ITSlaveCplt+0x2c4>)
2400f4fa:	4293      	cmp	r3, r2
2400f4fc:	d01d      	beq.n	2400f53a <I2C_ITSlaveCplt+0x28a>
2400f4fe:	687b      	ldr	r3, [r7, #4]
2400f500:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400f502:	681b      	ldr	r3, [r3, #0]
2400f504:	4a1c      	ldr	r2, [pc, #112]	@ (2400f578 <I2C_ITSlaveCplt+0x2c8>)
2400f506:	4293      	cmp	r3, r2
2400f508:	d017      	beq.n	2400f53a <I2C_ITSlaveCplt+0x28a>
2400f50a:	687b      	ldr	r3, [r7, #4]
2400f50c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400f50e:	681b      	ldr	r3, [r3, #0]
2400f510:	4a1a      	ldr	r2, [pc, #104]	@ (2400f57c <I2C_ITSlaveCplt+0x2cc>)
2400f512:	4293      	cmp	r3, r2
2400f514:	d011      	beq.n	2400f53a <I2C_ITSlaveCplt+0x28a>
2400f516:	687b      	ldr	r3, [r7, #4]
2400f518:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400f51a:	681b      	ldr	r3, [r3, #0]
2400f51c:	4a18      	ldr	r2, [pc, #96]	@ (2400f580 <I2C_ITSlaveCplt+0x2d0>)
2400f51e:	4293      	cmp	r3, r2
2400f520:	d00b      	beq.n	2400f53a <I2C_ITSlaveCplt+0x28a>
2400f522:	687b      	ldr	r3, [r7, #4]
2400f524:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400f526:	681b      	ldr	r3, [r3, #0]
2400f528:	4a16      	ldr	r2, [pc, #88]	@ (2400f584 <I2C_ITSlaveCplt+0x2d4>)
2400f52a:	4293      	cmp	r3, r2
2400f52c:	d005      	beq.n	2400f53a <I2C_ITSlaveCplt+0x28a>
2400f52e:	687b      	ldr	r3, [r7, #4]
2400f530:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400f532:	681b      	ldr	r3, [r3, #0]
2400f534:	4a14      	ldr	r2, [pc, #80]	@ (2400f588 <I2C_ITSlaveCplt+0x2d8>)
2400f536:	4293      	cmp	r3, r2
2400f538:	d128      	bne.n	2400f58c <I2C_ITSlaveCplt+0x2dc>
2400f53a:	687b      	ldr	r3, [r7, #4]
2400f53c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400f53e:	681b      	ldr	r3, [r3, #0]
2400f540:	685b      	ldr	r3, [r3, #4]
2400f542:	b29b      	uxth	r3, r3
2400f544:	e027      	b.n	2400f596 <I2C_ITSlaveCplt+0x2e6>
2400f546:	bf00      	nop
2400f548:	fe00e800 	.word	0xfe00e800
2400f54c:	40020010 	.word	0x40020010
2400f550:	40020028 	.word	0x40020028
2400f554:	40020040 	.word	0x40020040
2400f558:	40020058 	.word	0x40020058
2400f55c:	40020070 	.word	0x40020070
2400f560:	40020088 	.word	0x40020088
2400f564:	400200a0 	.word	0x400200a0
2400f568:	400200b8 	.word	0x400200b8
2400f56c:	40020410 	.word	0x40020410
2400f570:	40020428 	.word	0x40020428
2400f574:	40020440 	.word	0x40020440
2400f578:	40020458 	.word	0x40020458
2400f57c:	40020470 	.word	0x40020470
2400f580:	40020488 	.word	0x40020488
2400f584:	400204a0 	.word	0x400204a0
2400f588:	400204b8 	.word	0x400204b8
2400f58c:	687b      	ldr	r3, [r7, #4]
2400f58e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400f590:	681b      	ldr	r3, [r3, #0]
2400f592:	685b      	ldr	r3, [r3, #4]
2400f594:	b29b      	uxth	r3, r3
2400f596:	687a      	ldr	r2, [r7, #4]
2400f598:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
2400f59a:	697b      	ldr	r3, [r7, #20]
2400f59c:	f003 0304 	and.w	r3, r3, #4
2400f5a0:	2b00      	cmp	r3, #0
2400f5a2:	d020      	beq.n	2400f5e6 <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
2400f5a4:	697b      	ldr	r3, [r7, #20]
2400f5a6:	f023 0304 	bic.w	r3, r3, #4
2400f5aa:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2400f5ac:	687b      	ldr	r3, [r7, #4]
2400f5ae:	681b      	ldr	r3, [r3, #0]
2400f5b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
2400f5b2:	687b      	ldr	r3, [r7, #4]
2400f5b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2400f5b6:	b2d2      	uxtb	r2, r2
2400f5b8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
2400f5ba:	687b      	ldr	r3, [r7, #4]
2400f5bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2400f5be:	1c5a      	adds	r2, r3, #1
2400f5c0:	687b      	ldr	r3, [r7, #4]
2400f5c2:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
2400f5c4:	687b      	ldr	r3, [r7, #4]
2400f5c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400f5c8:	2b00      	cmp	r3, #0
2400f5ca:	d00c      	beq.n	2400f5e6 <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
2400f5cc:	687b      	ldr	r3, [r7, #4]
2400f5ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400f5d0:	3b01      	subs	r3, #1
2400f5d2:	b29a      	uxth	r2, r3
2400f5d4:	687b      	ldr	r3, [r7, #4]
2400f5d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
2400f5d8:	687b      	ldr	r3, [r7, #4]
2400f5da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400f5dc:	b29b      	uxth	r3, r3
2400f5de:	3b01      	subs	r3, #1
2400f5e0:	b29a      	uxth	r2, r3
2400f5e2:	687b      	ldr	r3, [r7, #4]
2400f5e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
2400f5e6:	687b      	ldr	r3, [r7, #4]
2400f5e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400f5ea:	b29b      	uxth	r3, r3
2400f5ec:	2b00      	cmp	r3, #0
2400f5ee:	d005      	beq.n	2400f5fc <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2400f5f0:	687b      	ldr	r3, [r7, #4]
2400f5f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2400f5f4:	f043 0204 	orr.w	r2, r3, #4
2400f5f8:	687b      	ldr	r3, [r7, #4]
2400f5fa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
2400f5fc:	697b      	ldr	r3, [r7, #20]
2400f5fe:	f003 0310 	and.w	r3, r3, #16
2400f602:	2b00      	cmp	r3, #0
2400f604:	d049      	beq.n	2400f69a <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
2400f606:	693b      	ldr	r3, [r7, #16]
2400f608:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
2400f60c:	2b00      	cmp	r3, #0
2400f60e:	d044      	beq.n	2400f69a <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
2400f610:	687b      	ldr	r3, [r7, #4]
2400f612:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400f614:	b29b      	uxth	r3, r3
2400f616:	2b00      	cmp	r3, #0
2400f618:	d128      	bne.n	2400f66c <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
2400f61a:	687b      	ldr	r3, [r7, #4]
2400f61c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400f620:	b2db      	uxtb	r3, r3
2400f622:	2b28      	cmp	r3, #40	@ 0x28
2400f624:	d108      	bne.n	2400f638 <I2C_ITSlaveCplt+0x388>
2400f626:	68fb      	ldr	r3, [r7, #12]
2400f628:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
2400f62c:	d104      	bne.n	2400f638 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
2400f62e:	6979      	ldr	r1, [r7, #20]
2400f630:	6878      	ldr	r0, [r7, #4]
2400f632:	f000 f891 	bl	2400f758 <I2C_ITListenCplt>
2400f636:	e030      	b.n	2400f69a <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
2400f638:	687b      	ldr	r3, [r7, #4]
2400f63a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400f63e:	b2db      	uxtb	r3, r3
2400f640:	2b29      	cmp	r3, #41	@ 0x29
2400f642:	d10e      	bne.n	2400f662 <I2C_ITSlaveCplt+0x3b2>
2400f644:	68fb      	ldr	r3, [r7, #12]
2400f646:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
2400f64a:	d00a      	beq.n	2400f662 <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400f64c:	687b      	ldr	r3, [r7, #4]
2400f64e:	681b      	ldr	r3, [r3, #0]
2400f650:	2210      	movs	r2, #16
2400f652:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
2400f654:	6878      	ldr	r0, [r7, #4]
2400f656:	f000 f9ea 	bl	2400fa2e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
2400f65a:	6878      	ldr	r0, [r7, #4]
2400f65c:	f7ff fd03 	bl	2400f066 <I2C_ITSlaveSeqCplt>
2400f660:	e01b      	b.n	2400f69a <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400f662:	687b      	ldr	r3, [r7, #4]
2400f664:	681b      	ldr	r3, [r3, #0]
2400f666:	2210      	movs	r2, #16
2400f668:	61da      	str	r2, [r3, #28]
2400f66a:	e016      	b.n	2400f69a <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400f66c:	687b      	ldr	r3, [r7, #4]
2400f66e:	681b      	ldr	r3, [r3, #0]
2400f670:	2210      	movs	r2, #16
2400f672:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2400f674:	687b      	ldr	r3, [r7, #4]
2400f676:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2400f678:	f043 0204 	orr.w	r2, r3, #4
2400f67c:	687b      	ldr	r3, [r7, #4]
2400f67e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
2400f680:	68fb      	ldr	r3, [r7, #12]
2400f682:	2b00      	cmp	r3, #0
2400f684:	d003      	beq.n	2400f68e <I2C_ITSlaveCplt+0x3de>
2400f686:	68fb      	ldr	r3, [r7, #12]
2400f688:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
2400f68c:	d105      	bne.n	2400f69a <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
2400f68e:	687b      	ldr	r3, [r7, #4]
2400f690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2400f692:	4619      	mov	r1, r3
2400f694:	6878      	ldr	r0, [r7, #4]
2400f696:	f000 f8b3 	bl	2400f800 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
2400f69a:	687b      	ldr	r3, [r7, #4]
2400f69c:	2200      	movs	r2, #0
2400f69e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
2400f6a2:	687b      	ldr	r3, [r7, #4]
2400f6a4:	2200      	movs	r2, #0
2400f6a6:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
2400f6a8:	687b      	ldr	r3, [r7, #4]
2400f6aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2400f6ac:	2b00      	cmp	r3, #0
2400f6ae:	d010      	beq.n	2400f6d2 <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
2400f6b0:	687b      	ldr	r3, [r7, #4]
2400f6b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2400f6b4:	4619      	mov	r1, r3
2400f6b6:	6878      	ldr	r0, [r7, #4]
2400f6b8:	f000 f8a2 	bl	2400f800 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
2400f6bc:	687b      	ldr	r3, [r7, #4]
2400f6be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400f6c2:	b2db      	uxtb	r3, r3
2400f6c4:	2b28      	cmp	r3, #40	@ 0x28
2400f6c6:	d141      	bne.n	2400f74c <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
2400f6c8:	6979      	ldr	r1, [r7, #20]
2400f6ca:	6878      	ldr	r0, [r7, #4]
2400f6cc:	f000 f844 	bl	2400f758 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
2400f6d0:	e03c      	b.n	2400f74c <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
2400f6d2:	687b      	ldr	r3, [r7, #4]
2400f6d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2400f6d6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
2400f6da:	d014      	beq.n	2400f706 <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
2400f6dc:	6878      	ldr	r0, [r7, #4]
2400f6de:	f7ff fcc2 	bl	2400f066 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400f6e2:	687b      	ldr	r3, [r7, #4]
2400f6e4:	4a1b      	ldr	r2, [pc, #108]	@ (2400f754 <I2C_ITSlaveCplt+0x4a4>)
2400f6e6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
2400f6e8:	687b      	ldr	r3, [r7, #4]
2400f6ea:	2220      	movs	r2, #32
2400f6ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
2400f6f0:	687b      	ldr	r3, [r7, #4]
2400f6f2:	2200      	movs	r2, #0
2400f6f4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
2400f6f6:	687b      	ldr	r3, [r7, #4]
2400f6f8:	2200      	movs	r2, #0
2400f6fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
2400f6fe:	6878      	ldr	r0, [r7, #4]
2400f700:	f7fe fbbd 	bl	2400de7e <HAL_I2C_ListenCpltCallback>
}
2400f704:	e022      	b.n	2400f74c <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
2400f706:	687b      	ldr	r3, [r7, #4]
2400f708:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400f70c:	b2db      	uxtb	r3, r3
2400f70e:	2b22      	cmp	r3, #34	@ 0x22
2400f710:	d10e      	bne.n	2400f730 <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
2400f712:	687b      	ldr	r3, [r7, #4]
2400f714:	2220      	movs	r2, #32
2400f716:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
2400f71a:	687b      	ldr	r3, [r7, #4]
2400f71c:	2200      	movs	r2, #0
2400f71e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
2400f720:	687b      	ldr	r3, [r7, #4]
2400f722:	2200      	movs	r2, #0
2400f724:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
2400f728:	6878      	ldr	r0, [r7, #4]
2400f72a:	f7fe fb90 	bl	2400de4e <HAL_I2C_SlaveRxCpltCallback>
}
2400f72e:	e00d      	b.n	2400f74c <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
2400f730:	687b      	ldr	r3, [r7, #4]
2400f732:	2220      	movs	r2, #32
2400f734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
2400f738:	687b      	ldr	r3, [r7, #4]
2400f73a:	2200      	movs	r2, #0
2400f73c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
2400f73e:	687b      	ldr	r3, [r7, #4]
2400f740:	2200      	movs	r2, #0
2400f742:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
2400f746:	6878      	ldr	r0, [r7, #4]
2400f748:	f7fe fb77 	bl	2400de3a <HAL_I2C_SlaveTxCpltCallback>
}
2400f74c:	bf00      	nop
2400f74e:	3718      	adds	r7, #24
2400f750:	46bd      	mov	sp, r7
2400f752:	bd80      	pop	{r7, pc}
2400f754:	ffff0000 	.word	0xffff0000

2400f758 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
2400f758:	b580      	push	{r7, lr}
2400f75a:	b082      	sub	sp, #8
2400f75c:	af00      	add	r7, sp, #0
2400f75e:	6078      	str	r0, [r7, #4]
2400f760:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400f762:	687b      	ldr	r3, [r7, #4]
2400f764:	4a25      	ldr	r2, [pc, #148]	@ (2400f7fc <I2C_ITListenCplt+0xa4>)
2400f766:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
2400f768:	687b      	ldr	r3, [r7, #4]
2400f76a:	2200      	movs	r2, #0
2400f76c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
2400f76e:	687b      	ldr	r3, [r7, #4]
2400f770:	2220      	movs	r2, #32
2400f772:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
2400f776:	687b      	ldr	r3, [r7, #4]
2400f778:	2200      	movs	r2, #0
2400f77a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
2400f77e:	687b      	ldr	r3, [r7, #4]
2400f780:	2200      	movs	r2, #0
2400f782:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
2400f784:	683b      	ldr	r3, [r7, #0]
2400f786:	f003 0304 	and.w	r3, r3, #4
2400f78a:	2b00      	cmp	r3, #0
2400f78c:	d022      	beq.n	2400f7d4 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
2400f78e:	687b      	ldr	r3, [r7, #4]
2400f790:	681b      	ldr	r3, [r3, #0]
2400f792:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
2400f794:	687b      	ldr	r3, [r7, #4]
2400f796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2400f798:	b2d2      	uxtb	r2, r2
2400f79a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
2400f79c:	687b      	ldr	r3, [r7, #4]
2400f79e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2400f7a0:	1c5a      	adds	r2, r3, #1
2400f7a2:	687b      	ldr	r3, [r7, #4]
2400f7a4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
2400f7a6:	687b      	ldr	r3, [r7, #4]
2400f7a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400f7aa:	2b00      	cmp	r3, #0
2400f7ac:	d012      	beq.n	2400f7d4 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
2400f7ae:	687b      	ldr	r3, [r7, #4]
2400f7b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2400f7b2:	3b01      	subs	r3, #1
2400f7b4:	b29a      	uxth	r2, r3
2400f7b6:	687b      	ldr	r3, [r7, #4]
2400f7b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
2400f7ba:	687b      	ldr	r3, [r7, #4]
2400f7bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400f7be:	b29b      	uxth	r3, r3
2400f7c0:	3b01      	subs	r3, #1
2400f7c2:	b29a      	uxth	r2, r3
2400f7c4:	687b      	ldr	r3, [r7, #4]
2400f7c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2400f7c8:	687b      	ldr	r3, [r7, #4]
2400f7ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2400f7cc:	f043 0204 	orr.w	r2, r3, #4
2400f7d0:	687b      	ldr	r3, [r7, #4]
2400f7d2:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
2400f7d4:	f248 0103 	movw	r1, #32771	@ 0x8003
2400f7d8:	6878      	ldr	r0, [r7, #4]
2400f7da:	f000 ff13 	bl	24010604 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400f7de:	687b      	ldr	r3, [r7, #4]
2400f7e0:	681b      	ldr	r3, [r3, #0]
2400f7e2:	2210      	movs	r2, #16
2400f7e4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
2400f7e6:	687b      	ldr	r3, [r7, #4]
2400f7e8:	2200      	movs	r2, #0
2400f7ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
2400f7ee:	6878      	ldr	r0, [r7, #4]
2400f7f0:	f7fe fb45 	bl	2400de7e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
2400f7f4:	bf00      	nop
2400f7f6:	3708      	adds	r7, #8
2400f7f8:	46bd      	mov	sp, r7
2400f7fa:	bd80      	pop	{r7, pc}
2400f7fc:	ffff0000 	.word	0xffff0000

2400f800 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
2400f800:	b580      	push	{r7, lr}
2400f802:	b084      	sub	sp, #16
2400f804:	af00      	add	r7, sp, #0
2400f806:	6078      	str	r0, [r7, #4]
2400f808:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
2400f80a:	687b      	ldr	r3, [r7, #4]
2400f80c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400f810:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
2400f812:	687b      	ldr	r3, [r7, #4]
2400f814:	2200      	movs	r2, #0
2400f816:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
2400f81a:	687b      	ldr	r3, [r7, #4]
2400f81c:	4a6d      	ldr	r2, [pc, #436]	@ (2400f9d4 <I2C_ITError+0x1d4>)
2400f81e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
2400f820:	687b      	ldr	r3, [r7, #4]
2400f822:	2200      	movs	r2, #0
2400f824:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
2400f826:	687b      	ldr	r3, [r7, #4]
2400f828:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
2400f82a:	683b      	ldr	r3, [r7, #0]
2400f82c:	431a      	orrs	r2, r3
2400f82e:	687b      	ldr	r3, [r7, #4]
2400f830:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
2400f832:	7bfb      	ldrb	r3, [r7, #15]
2400f834:	2b28      	cmp	r3, #40	@ 0x28
2400f836:	d005      	beq.n	2400f844 <I2C_ITError+0x44>
2400f838:	7bfb      	ldrb	r3, [r7, #15]
2400f83a:	2b29      	cmp	r3, #41	@ 0x29
2400f83c:	d002      	beq.n	2400f844 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
2400f83e:	7bfb      	ldrb	r3, [r7, #15]
2400f840:	2b2a      	cmp	r3, #42	@ 0x2a
2400f842:	d10b      	bne.n	2400f85c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
2400f844:	2103      	movs	r1, #3
2400f846:	6878      	ldr	r0, [r7, #4]
2400f848:	f000 fedc 	bl	24010604 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
2400f84c:	687b      	ldr	r3, [r7, #4]
2400f84e:	2228      	movs	r2, #40	@ 0x28
2400f850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
2400f854:	687b      	ldr	r3, [r7, #4]
2400f856:	4a60      	ldr	r2, [pc, #384]	@ (2400f9d8 <I2C_ITError+0x1d8>)
2400f858:	635a      	str	r2, [r3, #52]	@ 0x34
2400f85a:	e030      	b.n	2400f8be <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
2400f85c:	f248 0103 	movw	r1, #32771	@ 0x8003
2400f860:	6878      	ldr	r0, [r7, #4]
2400f862:	f000 fecf 	bl	24010604 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
2400f866:	6878      	ldr	r0, [r7, #4]
2400f868:	f000 f8e1 	bl	2400fa2e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
2400f86c:	687b      	ldr	r3, [r7, #4]
2400f86e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400f872:	b2db      	uxtb	r3, r3
2400f874:	2b60      	cmp	r3, #96	@ 0x60
2400f876:	d01f      	beq.n	2400f8b8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
2400f878:	687b      	ldr	r3, [r7, #4]
2400f87a:	2220      	movs	r2, #32
2400f87c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
2400f880:	687b      	ldr	r3, [r7, #4]
2400f882:	681b      	ldr	r3, [r3, #0]
2400f884:	699b      	ldr	r3, [r3, #24]
2400f886:	f003 0320 	and.w	r3, r3, #32
2400f88a:	2b20      	cmp	r3, #32
2400f88c:	d114      	bne.n	2400f8b8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
2400f88e:	687b      	ldr	r3, [r7, #4]
2400f890:	681b      	ldr	r3, [r3, #0]
2400f892:	699b      	ldr	r3, [r3, #24]
2400f894:	f003 0310 	and.w	r3, r3, #16
2400f898:	2b10      	cmp	r3, #16
2400f89a:	d109      	bne.n	2400f8b0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400f89c:	687b      	ldr	r3, [r7, #4]
2400f89e:	681b      	ldr	r3, [r3, #0]
2400f8a0:	2210      	movs	r2, #16
2400f8a2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
2400f8a4:	687b      	ldr	r3, [r7, #4]
2400f8a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2400f8a8:	f043 0204 	orr.w	r2, r3, #4
2400f8ac:	687b      	ldr	r3, [r7, #4]
2400f8ae:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400f8b0:	687b      	ldr	r3, [r7, #4]
2400f8b2:	681b      	ldr	r3, [r3, #0]
2400f8b4:	2220      	movs	r2, #32
2400f8b6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
2400f8b8:	687b      	ldr	r3, [r7, #4]
2400f8ba:	2200      	movs	r2, #0
2400f8bc:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
2400f8be:	687b      	ldr	r3, [r7, #4]
2400f8c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2400f8c2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
2400f8c4:	687b      	ldr	r3, [r7, #4]
2400f8c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400f8c8:	2b00      	cmp	r3, #0
2400f8ca:	d039      	beq.n	2400f940 <I2C_ITError+0x140>
2400f8cc:	68bb      	ldr	r3, [r7, #8]
2400f8ce:	2b11      	cmp	r3, #17
2400f8d0:	d002      	beq.n	2400f8d8 <I2C_ITError+0xd8>
2400f8d2:	68bb      	ldr	r3, [r7, #8]
2400f8d4:	2b21      	cmp	r3, #33	@ 0x21
2400f8d6:	d133      	bne.n	2400f940 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
2400f8d8:	687b      	ldr	r3, [r7, #4]
2400f8da:	681b      	ldr	r3, [r3, #0]
2400f8dc:	681b      	ldr	r3, [r3, #0]
2400f8de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
2400f8e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
2400f8e6:	d107      	bne.n	2400f8f8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2400f8e8:	687b      	ldr	r3, [r7, #4]
2400f8ea:	681b      	ldr	r3, [r3, #0]
2400f8ec:	681a      	ldr	r2, [r3, #0]
2400f8ee:	687b      	ldr	r3, [r7, #4]
2400f8f0:	681b      	ldr	r3, [r3, #0]
2400f8f2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
2400f8f6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
2400f8f8:	687b      	ldr	r3, [r7, #4]
2400f8fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400f8fc:	4618      	mov	r0, r3
2400f8fe:	f7f7 fb87 	bl	24007010 <HAL_DMA_GetState>
2400f902:	4603      	mov	r3, r0
2400f904:	2b01      	cmp	r3, #1
2400f906:	d017      	beq.n	2400f938 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
2400f908:	687b      	ldr	r3, [r7, #4]
2400f90a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400f90c:	4a33      	ldr	r2, [pc, #204]	@ (2400f9dc <I2C_ITError+0x1dc>)
2400f90e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400f910:	687b      	ldr	r3, [r7, #4]
2400f912:	2200      	movs	r2, #0
2400f914:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
2400f918:	687b      	ldr	r3, [r7, #4]
2400f91a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400f91c:	4618      	mov	r0, r3
2400f91e:	f7f5 fd95 	bl	2400544c <HAL_DMA_Abort_IT>
2400f922:	4603      	mov	r3, r0
2400f924:	2b00      	cmp	r3, #0
2400f926:	d04d      	beq.n	2400f9c4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
2400f928:	687b      	ldr	r3, [r7, #4]
2400f92a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400f92c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2400f92e:	687a      	ldr	r2, [r7, #4]
2400f930:	6b92      	ldr	r2, [r2, #56]	@ 0x38
2400f932:	4610      	mov	r0, r2
2400f934:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
2400f936:	e045      	b.n	2400f9c4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
2400f938:	6878      	ldr	r0, [r7, #4]
2400f93a:	f000 f851 	bl	2400f9e0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
2400f93e:	e041      	b.n	2400f9c4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
2400f940:	687b      	ldr	r3, [r7, #4]
2400f942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400f944:	2b00      	cmp	r3, #0
2400f946:	d039      	beq.n	2400f9bc <I2C_ITError+0x1bc>
2400f948:	68bb      	ldr	r3, [r7, #8]
2400f94a:	2b12      	cmp	r3, #18
2400f94c:	d002      	beq.n	2400f954 <I2C_ITError+0x154>
2400f94e:	68bb      	ldr	r3, [r7, #8]
2400f950:	2b22      	cmp	r3, #34	@ 0x22
2400f952:	d133      	bne.n	2400f9bc <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
2400f954:	687b      	ldr	r3, [r7, #4]
2400f956:	681b      	ldr	r3, [r3, #0]
2400f958:	681b      	ldr	r3, [r3, #0]
2400f95a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
2400f95e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
2400f962:	d107      	bne.n	2400f974 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2400f964:	687b      	ldr	r3, [r7, #4]
2400f966:	681b      	ldr	r3, [r3, #0]
2400f968:	681a      	ldr	r2, [r3, #0]
2400f96a:	687b      	ldr	r3, [r7, #4]
2400f96c:	681b      	ldr	r3, [r3, #0]
2400f96e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
2400f972:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
2400f974:	687b      	ldr	r3, [r7, #4]
2400f976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400f978:	4618      	mov	r0, r3
2400f97a:	f7f7 fb49 	bl	24007010 <HAL_DMA_GetState>
2400f97e:	4603      	mov	r3, r0
2400f980:	2b01      	cmp	r3, #1
2400f982:	d017      	beq.n	2400f9b4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
2400f984:	687b      	ldr	r3, [r7, #4]
2400f986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400f988:	4a14      	ldr	r2, [pc, #80]	@ (2400f9dc <I2C_ITError+0x1dc>)
2400f98a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
2400f98c:	687b      	ldr	r3, [r7, #4]
2400f98e:	2200      	movs	r2, #0
2400f990:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
2400f994:	687b      	ldr	r3, [r7, #4]
2400f996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400f998:	4618      	mov	r0, r3
2400f99a:	f7f5 fd57 	bl	2400544c <HAL_DMA_Abort_IT>
2400f99e:	4603      	mov	r3, r0
2400f9a0:	2b00      	cmp	r3, #0
2400f9a2:	d011      	beq.n	2400f9c8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
2400f9a4:	687b      	ldr	r3, [r7, #4]
2400f9a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400f9a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2400f9aa:	687a      	ldr	r2, [r7, #4]
2400f9ac:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
2400f9ae:	4610      	mov	r0, r2
2400f9b0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
2400f9b2:	e009      	b.n	2400f9c8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
2400f9b4:	6878      	ldr	r0, [r7, #4]
2400f9b6:	f000 f813 	bl	2400f9e0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
2400f9ba:	e005      	b.n	2400f9c8 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
2400f9bc:	6878      	ldr	r0, [r7, #4]
2400f9be:	f000 f80f 	bl	2400f9e0 <I2C_TreatErrorCallback>
  }
}
2400f9c2:	e002      	b.n	2400f9ca <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
2400f9c4:	bf00      	nop
2400f9c6:	e000      	b.n	2400f9ca <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
2400f9c8:	bf00      	nop
}
2400f9ca:	bf00      	nop
2400f9cc:	3710      	adds	r7, #16
2400f9ce:	46bd      	mov	sp, r7
2400f9d0:	bd80      	pop	{r7, pc}
2400f9d2:	bf00      	nop
2400f9d4:	ffff0000 	.word	0xffff0000
2400f9d8:	2400e3cd 	.word	0x2400e3cd
2400f9dc:	2400ffbd 	.word	0x2400ffbd

2400f9e0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
2400f9e0:	b580      	push	{r7, lr}
2400f9e2:	b082      	sub	sp, #8
2400f9e4:	af00      	add	r7, sp, #0
2400f9e6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
2400f9e8:	687b      	ldr	r3, [r7, #4]
2400f9ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2400f9ee:	b2db      	uxtb	r3, r3
2400f9f0:	2b60      	cmp	r3, #96	@ 0x60
2400f9f2:	d10e      	bne.n	2400fa12 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
2400f9f4:	687b      	ldr	r3, [r7, #4]
2400f9f6:	2220      	movs	r2, #32
2400f9f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
2400f9fc:	687b      	ldr	r3, [r7, #4]
2400f9fe:	2200      	movs	r2, #0
2400fa00:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2400fa02:	687b      	ldr	r3, [r7, #4]
2400fa04:	2200      	movs	r2, #0
2400fa06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
2400fa0a:	6878      	ldr	r0, [r7, #4]
2400fa0c:	f7fe fa5f 	bl	2400dece <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
2400fa10:	e009      	b.n	2400fa26 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
2400fa12:	687b      	ldr	r3, [r7, #4]
2400fa14:	2200      	movs	r2, #0
2400fa16:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
2400fa18:	687b      	ldr	r3, [r7, #4]
2400fa1a:	2200      	movs	r2, #0
2400fa1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
2400fa20:	6878      	ldr	r0, [r7, #4]
2400fa22:	f7fe fa4a 	bl	2400deba <HAL_I2C_ErrorCallback>
}
2400fa26:	bf00      	nop
2400fa28:	3708      	adds	r7, #8
2400fa2a:	46bd      	mov	sp, r7
2400fa2c:	bd80      	pop	{r7, pc}

2400fa2e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
2400fa2e:	b480      	push	{r7}
2400fa30:	b083      	sub	sp, #12
2400fa32:	af00      	add	r7, sp, #0
2400fa34:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
2400fa36:	687b      	ldr	r3, [r7, #4]
2400fa38:	681b      	ldr	r3, [r3, #0]
2400fa3a:	699b      	ldr	r3, [r3, #24]
2400fa3c:	f003 0302 	and.w	r3, r3, #2
2400fa40:	2b02      	cmp	r3, #2
2400fa42:	d103      	bne.n	2400fa4c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
2400fa44:	687b      	ldr	r3, [r7, #4]
2400fa46:	681b      	ldr	r3, [r3, #0]
2400fa48:	2200      	movs	r2, #0
2400fa4a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
2400fa4c:	687b      	ldr	r3, [r7, #4]
2400fa4e:	681b      	ldr	r3, [r3, #0]
2400fa50:	699b      	ldr	r3, [r3, #24]
2400fa52:	f003 0301 	and.w	r3, r3, #1
2400fa56:	2b01      	cmp	r3, #1
2400fa58:	d007      	beq.n	2400fa6a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
2400fa5a:	687b      	ldr	r3, [r7, #4]
2400fa5c:	681b      	ldr	r3, [r3, #0]
2400fa5e:	699a      	ldr	r2, [r3, #24]
2400fa60:	687b      	ldr	r3, [r7, #4]
2400fa62:	681b      	ldr	r3, [r3, #0]
2400fa64:	f042 0201 	orr.w	r2, r2, #1
2400fa68:	619a      	str	r2, [r3, #24]
  }
}
2400fa6a:	bf00      	nop
2400fa6c:	370c      	adds	r7, #12
2400fa6e:	46bd      	mov	sp, r7
2400fa70:	f85d 7b04 	ldr.w	r7, [sp], #4
2400fa74:	4770      	bx	lr

2400fa76 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
2400fa76:	b580      	push	{r7, lr}
2400fa78:	b084      	sub	sp, #16
2400fa7a:	af00      	add	r7, sp, #0
2400fa7c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
2400fa7e:	687b      	ldr	r3, [r7, #4]
2400fa80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400fa82:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2400fa84:	68fb      	ldr	r3, [r7, #12]
2400fa86:	681b      	ldr	r3, [r3, #0]
2400fa88:	681a      	ldr	r2, [r3, #0]
2400fa8a:	68fb      	ldr	r3, [r7, #12]
2400fa8c:	681b      	ldr	r3, [r3, #0]
2400fa8e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
2400fa92:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
2400fa94:	68fb      	ldr	r3, [r7, #12]
2400fa96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400fa98:	b29b      	uxth	r3, r3
2400fa9a:	2b00      	cmp	r3, #0
2400fa9c:	d104      	bne.n	2400faa8 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
2400fa9e:	2120      	movs	r1, #32
2400faa0:	68f8      	ldr	r0, [r7, #12]
2400faa2:	f000 fd2b 	bl	240104fc <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
2400faa6:	e02d      	b.n	2400fb04 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
2400faa8:	68fb      	ldr	r3, [r7, #12]
2400faaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2400faac:	68fa      	ldr	r2, [r7, #12]
2400faae:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
2400fab0:	441a      	add	r2, r3
2400fab2:	68fb      	ldr	r3, [r7, #12]
2400fab4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400fab6:	68fb      	ldr	r3, [r7, #12]
2400fab8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400faba:	b29b      	uxth	r3, r3
2400fabc:	2bff      	cmp	r3, #255	@ 0xff
2400fabe:	d903      	bls.n	2400fac8 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400fac0:	68fb      	ldr	r3, [r7, #12]
2400fac2:	22ff      	movs	r2, #255	@ 0xff
2400fac4:	851a      	strh	r2, [r3, #40]	@ 0x28
2400fac6:	e004      	b.n	2400fad2 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
2400fac8:	68fb      	ldr	r3, [r7, #12]
2400faca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400facc:	b29a      	uxth	r2, r3
2400face:	68fb      	ldr	r3, [r7, #12]
2400fad0:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
2400fad2:	68fb      	ldr	r3, [r7, #12]
2400fad4:	6b98      	ldr	r0, [r3, #56]	@ 0x38
2400fad6:	68fb      	ldr	r3, [r7, #12]
2400fad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2400fada:	4619      	mov	r1, r3
2400fadc:	68fb      	ldr	r3, [r7, #12]
2400fade:	681b      	ldr	r3, [r3, #0]
2400fae0:	3328      	adds	r3, #40	@ 0x28
2400fae2:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
2400fae4:	68fb      	ldr	r3, [r7, #12]
2400fae6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
2400fae8:	f7f4 ff28 	bl	2400493c <HAL_DMA_Start_IT>
2400faec:	4603      	mov	r3, r0
2400faee:	2b00      	cmp	r3, #0
2400faf0:	d004      	beq.n	2400fafc <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
2400faf2:	2110      	movs	r1, #16
2400faf4:	68f8      	ldr	r0, [r7, #12]
2400faf6:	f7ff fe83 	bl	2400f800 <I2C_ITError>
}
2400fafa:	e003      	b.n	2400fb04 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
2400fafc:	2140      	movs	r1, #64	@ 0x40
2400fafe:	68f8      	ldr	r0, [r7, #12]
2400fb00:	f000 fcfc 	bl	240104fc <I2C_Enable_IRQ>
}
2400fb04:	bf00      	nop
2400fb06:	3710      	adds	r7, #16
2400fb08:	46bd      	mov	sp, r7
2400fb0a:	bd80      	pop	{r7, pc}

2400fb0c <I2C_DMASlaveTransmitCplt>:
  * @brief  DMA I2C slave transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveTransmitCplt(DMA_HandleTypeDef *hdma)
{
2400fb0c:	b580      	push	{r7, lr}
2400fb0e:	b084      	sub	sp, #16
2400fb10:	af00      	add	r7, sp, #0
2400fb12:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
2400fb14:	687b      	ldr	r3, [r7, #4]
2400fb16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400fb18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
2400fb1a:	68fb      	ldr	r3, [r7, #12]
2400fb1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2400fb1e:	60bb      	str	r3, [r7, #8]

  if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
2400fb20:	68bb      	ldr	r3, [r7, #8]
2400fb22:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
2400fb26:	d002      	beq.n	2400fb2e <I2C_DMASlaveTransmitCplt+0x22>
2400fb28:	68bb      	ldr	r3, [r7, #8]
2400fb2a:	2b00      	cmp	r3, #0
2400fb2c:	d10a      	bne.n	2400fb44 <I2C_DMASlaveTransmitCplt+0x38>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
2400fb2e:	68fb      	ldr	r3, [r7, #12]
2400fb30:	681b      	ldr	r3, [r3, #0]
2400fb32:	681a      	ldr	r2, [r3, #0]
2400fb34:	68fb      	ldr	r3, [r7, #12]
2400fb36:	681b      	ldr	r3, [r3, #0]
2400fb38:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
2400fb3c:	601a      	str	r2, [r3, #0]

    /* Last Byte is Transmitted */
    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
2400fb3e:	68f8      	ldr	r0, [r7, #12]
2400fb40:	f7ff fa91 	bl	2400f066 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
2400fb44:	bf00      	nop
2400fb46:	3710      	adds	r7, #16
2400fb48:	46bd      	mov	sp, r7
2400fb4a:	bd80      	pop	{r7, pc}

2400fb4c <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
2400fb4c:	b580      	push	{r7, lr}
2400fb4e:	b084      	sub	sp, #16
2400fb50:	af00      	add	r7, sp, #0
2400fb52:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
2400fb54:	687b      	ldr	r3, [r7, #4]
2400fb56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400fb58:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2400fb5a:	68fb      	ldr	r3, [r7, #12]
2400fb5c:	681b      	ldr	r3, [r3, #0]
2400fb5e:	681a      	ldr	r2, [r3, #0]
2400fb60:	68fb      	ldr	r3, [r7, #12]
2400fb62:	681b      	ldr	r3, [r3, #0]
2400fb64:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
2400fb68:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
2400fb6a:	68fb      	ldr	r3, [r7, #12]
2400fb6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400fb6e:	b29b      	uxth	r3, r3
2400fb70:	2b00      	cmp	r3, #0
2400fb72:	d104      	bne.n	2400fb7e <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
2400fb74:	2120      	movs	r1, #32
2400fb76:	68f8      	ldr	r0, [r7, #12]
2400fb78:	f000 fcc0 	bl	240104fc <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
2400fb7c:	e02d      	b.n	2400fbda <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
2400fb7e:	68fb      	ldr	r3, [r7, #12]
2400fb80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2400fb82:	68fa      	ldr	r2, [r7, #12]
2400fb84:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
2400fb86:	441a      	add	r2, r3
2400fb88:	68fb      	ldr	r3, [r7, #12]
2400fb8a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400fb8c:	68fb      	ldr	r3, [r7, #12]
2400fb8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400fb90:	b29b      	uxth	r3, r3
2400fb92:	2bff      	cmp	r3, #255	@ 0xff
2400fb94:	d903      	bls.n	2400fb9e <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
2400fb96:	68fb      	ldr	r3, [r7, #12]
2400fb98:	22ff      	movs	r2, #255	@ 0xff
2400fb9a:	851a      	strh	r2, [r3, #40]	@ 0x28
2400fb9c:	e004      	b.n	2400fba8 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
2400fb9e:	68fb      	ldr	r3, [r7, #12]
2400fba0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
2400fba2:	b29a      	uxth	r2, r3
2400fba4:	68fb      	ldr	r3, [r7, #12]
2400fba6:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
2400fba8:	68fb      	ldr	r3, [r7, #12]
2400fbaa:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
2400fbac:	68fb      	ldr	r3, [r7, #12]
2400fbae:	681b      	ldr	r3, [r3, #0]
2400fbb0:	3324      	adds	r3, #36	@ 0x24
2400fbb2:	4619      	mov	r1, r3
2400fbb4:	68fb      	ldr	r3, [r7, #12]
2400fbb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2400fbb8:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
2400fbba:	68fb      	ldr	r3, [r7, #12]
2400fbbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
2400fbbe:	f7f4 febd 	bl	2400493c <HAL_DMA_Start_IT>
2400fbc2:	4603      	mov	r3, r0
2400fbc4:	2b00      	cmp	r3, #0
2400fbc6:	d004      	beq.n	2400fbd2 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
2400fbc8:	2110      	movs	r1, #16
2400fbca:	68f8      	ldr	r0, [r7, #12]
2400fbcc:	f7ff fe18 	bl	2400f800 <I2C_ITError>
}
2400fbd0:	e003      	b.n	2400fbda <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
2400fbd2:	2140      	movs	r1, #64	@ 0x40
2400fbd4:	68f8      	ldr	r0, [r7, #12]
2400fbd6:	f000 fc91 	bl	240104fc <I2C_Enable_IRQ>
}
2400fbda:	bf00      	nop
2400fbdc:	3710      	adds	r7, #16
2400fbde:	46bd      	mov	sp, r7
2400fbe0:	bd80      	pop	{r7, pc}
	...

2400fbe4 <I2C_DMASlaveReceiveCplt>:
  * @brief  DMA I2C slave receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
{
2400fbe4:	b580      	push	{r7, lr}
2400fbe6:	b084      	sub	sp, #16
2400fbe8:	af00      	add	r7, sp, #0
2400fbea:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
2400fbec:	687b      	ldr	r3, [r7, #4]
2400fbee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400fbf0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
2400fbf2:	68fb      	ldr	r3, [r7, #12]
2400fbf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2400fbf6:	60bb      	str	r3, [r7, #8]

  if ((I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U) && \
2400fbf8:	68fb      	ldr	r3, [r7, #12]
2400fbfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400fbfc:	681b      	ldr	r3, [r3, #0]
2400fbfe:	4a42      	ldr	r2, [pc, #264]	@ (2400fd08 <I2C_DMASlaveReceiveCplt+0x124>)
2400fc00:	4293      	cmp	r3, r2
2400fc02:	d059      	beq.n	2400fcb8 <I2C_DMASlaveReceiveCplt+0xd4>
2400fc04:	68fb      	ldr	r3, [r7, #12]
2400fc06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400fc08:	681b      	ldr	r3, [r3, #0]
2400fc0a:	4a40      	ldr	r2, [pc, #256]	@ (2400fd0c <I2C_DMASlaveReceiveCplt+0x128>)
2400fc0c:	4293      	cmp	r3, r2
2400fc0e:	d053      	beq.n	2400fcb8 <I2C_DMASlaveReceiveCplt+0xd4>
2400fc10:	68fb      	ldr	r3, [r7, #12]
2400fc12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400fc14:	681b      	ldr	r3, [r3, #0]
2400fc16:	4a3e      	ldr	r2, [pc, #248]	@ (2400fd10 <I2C_DMASlaveReceiveCplt+0x12c>)
2400fc18:	4293      	cmp	r3, r2
2400fc1a:	d04d      	beq.n	2400fcb8 <I2C_DMASlaveReceiveCplt+0xd4>
2400fc1c:	68fb      	ldr	r3, [r7, #12]
2400fc1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400fc20:	681b      	ldr	r3, [r3, #0]
2400fc22:	4a3c      	ldr	r2, [pc, #240]	@ (2400fd14 <I2C_DMASlaveReceiveCplt+0x130>)
2400fc24:	4293      	cmp	r3, r2
2400fc26:	d047      	beq.n	2400fcb8 <I2C_DMASlaveReceiveCplt+0xd4>
2400fc28:	68fb      	ldr	r3, [r7, #12]
2400fc2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400fc2c:	681b      	ldr	r3, [r3, #0]
2400fc2e:	4a3a      	ldr	r2, [pc, #232]	@ (2400fd18 <I2C_DMASlaveReceiveCplt+0x134>)
2400fc30:	4293      	cmp	r3, r2
2400fc32:	d041      	beq.n	2400fcb8 <I2C_DMASlaveReceiveCplt+0xd4>
2400fc34:	68fb      	ldr	r3, [r7, #12]
2400fc36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400fc38:	681b      	ldr	r3, [r3, #0]
2400fc3a:	4a38      	ldr	r2, [pc, #224]	@ (2400fd1c <I2C_DMASlaveReceiveCplt+0x138>)
2400fc3c:	4293      	cmp	r3, r2
2400fc3e:	d03b      	beq.n	2400fcb8 <I2C_DMASlaveReceiveCplt+0xd4>
2400fc40:	68fb      	ldr	r3, [r7, #12]
2400fc42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400fc44:	681b      	ldr	r3, [r3, #0]
2400fc46:	4a36      	ldr	r2, [pc, #216]	@ (2400fd20 <I2C_DMASlaveReceiveCplt+0x13c>)
2400fc48:	4293      	cmp	r3, r2
2400fc4a:	d035      	beq.n	2400fcb8 <I2C_DMASlaveReceiveCplt+0xd4>
2400fc4c:	68fb      	ldr	r3, [r7, #12]
2400fc4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400fc50:	681b      	ldr	r3, [r3, #0]
2400fc52:	4a34      	ldr	r2, [pc, #208]	@ (2400fd24 <I2C_DMASlaveReceiveCplt+0x140>)
2400fc54:	4293      	cmp	r3, r2
2400fc56:	d02f      	beq.n	2400fcb8 <I2C_DMASlaveReceiveCplt+0xd4>
2400fc58:	68fb      	ldr	r3, [r7, #12]
2400fc5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400fc5c:	681b      	ldr	r3, [r3, #0]
2400fc5e:	4a32      	ldr	r2, [pc, #200]	@ (2400fd28 <I2C_DMASlaveReceiveCplt+0x144>)
2400fc60:	4293      	cmp	r3, r2
2400fc62:	d029      	beq.n	2400fcb8 <I2C_DMASlaveReceiveCplt+0xd4>
2400fc64:	68fb      	ldr	r3, [r7, #12]
2400fc66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400fc68:	681b      	ldr	r3, [r3, #0]
2400fc6a:	4a30      	ldr	r2, [pc, #192]	@ (2400fd2c <I2C_DMASlaveReceiveCplt+0x148>)
2400fc6c:	4293      	cmp	r3, r2
2400fc6e:	d023      	beq.n	2400fcb8 <I2C_DMASlaveReceiveCplt+0xd4>
2400fc70:	68fb      	ldr	r3, [r7, #12]
2400fc72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400fc74:	681b      	ldr	r3, [r3, #0]
2400fc76:	4a2e      	ldr	r2, [pc, #184]	@ (2400fd30 <I2C_DMASlaveReceiveCplt+0x14c>)
2400fc78:	4293      	cmp	r3, r2
2400fc7a:	d01d      	beq.n	2400fcb8 <I2C_DMASlaveReceiveCplt+0xd4>
2400fc7c:	68fb      	ldr	r3, [r7, #12]
2400fc7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400fc80:	681b      	ldr	r3, [r3, #0]
2400fc82:	4a2c      	ldr	r2, [pc, #176]	@ (2400fd34 <I2C_DMASlaveReceiveCplt+0x150>)
2400fc84:	4293      	cmp	r3, r2
2400fc86:	d017      	beq.n	2400fcb8 <I2C_DMASlaveReceiveCplt+0xd4>
2400fc88:	68fb      	ldr	r3, [r7, #12]
2400fc8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400fc8c:	681b      	ldr	r3, [r3, #0]
2400fc8e:	4a2a      	ldr	r2, [pc, #168]	@ (2400fd38 <I2C_DMASlaveReceiveCplt+0x154>)
2400fc90:	4293      	cmp	r3, r2
2400fc92:	d011      	beq.n	2400fcb8 <I2C_DMASlaveReceiveCplt+0xd4>
2400fc94:	68fb      	ldr	r3, [r7, #12]
2400fc96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400fc98:	681b      	ldr	r3, [r3, #0]
2400fc9a:	4a28      	ldr	r2, [pc, #160]	@ (2400fd3c <I2C_DMASlaveReceiveCplt+0x158>)
2400fc9c:	4293      	cmp	r3, r2
2400fc9e:	d00b      	beq.n	2400fcb8 <I2C_DMASlaveReceiveCplt+0xd4>
2400fca0:	68fb      	ldr	r3, [r7, #12]
2400fca2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400fca4:	681b      	ldr	r3, [r3, #0]
2400fca6:	4a26      	ldr	r2, [pc, #152]	@ (2400fd40 <I2C_DMASlaveReceiveCplt+0x15c>)
2400fca8:	4293      	cmp	r3, r2
2400fcaa:	d005      	beq.n	2400fcb8 <I2C_DMASlaveReceiveCplt+0xd4>
2400fcac:	68fb      	ldr	r3, [r7, #12]
2400fcae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400fcb0:	681b      	ldr	r3, [r3, #0]
2400fcb2:	4a24      	ldr	r2, [pc, #144]	@ (2400fd44 <I2C_DMASlaveReceiveCplt+0x160>)
2400fcb4:	4293      	cmp	r3, r2
2400fcb6:	d109      	bne.n	2400fccc <I2C_DMASlaveReceiveCplt+0xe8>
2400fcb8:	68fb      	ldr	r3, [r7, #12]
2400fcba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400fcbc:	681b      	ldr	r3, [r3, #0]
2400fcbe:	685b      	ldr	r3, [r3, #4]
2400fcc0:	2b00      	cmp	r3, #0
2400fcc2:	bf0c      	ite	eq
2400fcc4:	2301      	moveq	r3, #1
2400fcc6:	2300      	movne	r3, #0
2400fcc8:	b2db      	uxtb	r3, r3
2400fcca:	e008      	b.n	2400fcde <I2C_DMASlaveReceiveCplt+0xfa>
2400fccc:	68fb      	ldr	r3, [r7, #12]
2400fcce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400fcd0:	681b      	ldr	r3, [r3, #0]
2400fcd2:	685b      	ldr	r3, [r3, #4]
2400fcd4:	2b00      	cmp	r3, #0
2400fcd6:	bf0c      	ite	eq
2400fcd8:	2301      	moveq	r3, #1
2400fcda:	2300      	movne	r3, #0
2400fcdc:	b2db      	uxtb	r3, r3
2400fcde:	2b00      	cmp	r3, #0
2400fce0:	d00e      	beq.n	2400fd00 <I2C_DMASlaveReceiveCplt+0x11c>
2400fce2:	68bb      	ldr	r3, [r7, #8]
2400fce4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
2400fce8:	d00a      	beq.n	2400fd00 <I2C_DMASlaveReceiveCplt+0x11c>
      (tmpoptions != I2C_NO_OPTION_FRAME))
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2400fcea:	68fb      	ldr	r3, [r7, #12]
2400fcec:	681b      	ldr	r3, [r3, #0]
2400fcee:	681a      	ldr	r2, [r3, #0]
2400fcf0:	68fb      	ldr	r3, [r7, #12]
2400fcf2:	681b      	ldr	r3, [r3, #0]
2400fcf4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
2400fcf8:	601a      	str	r2, [r3, #0]

    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
2400fcfa:	68f8      	ldr	r0, [r7, #12]
2400fcfc:	f7ff f9b3 	bl	2400f066 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
2400fd00:	bf00      	nop
2400fd02:	3710      	adds	r7, #16
2400fd04:	46bd      	mov	sp, r7
2400fd06:	bd80      	pop	{r7, pc}
2400fd08:	40020010 	.word	0x40020010
2400fd0c:	40020028 	.word	0x40020028
2400fd10:	40020040 	.word	0x40020040
2400fd14:	40020058 	.word	0x40020058
2400fd18:	40020070 	.word	0x40020070
2400fd1c:	40020088 	.word	0x40020088
2400fd20:	400200a0 	.word	0x400200a0
2400fd24:	400200b8 	.word	0x400200b8
2400fd28:	40020410 	.word	0x40020410
2400fd2c:	40020428 	.word	0x40020428
2400fd30:	40020440 	.word	0x40020440
2400fd34:	40020458 	.word	0x40020458
2400fd38:	40020470 	.word	0x40020470
2400fd3c:	40020488 	.word	0x40020488
2400fd40:	400204a0 	.word	0x400204a0
2400fd44:	400204b8 	.word	0x400204b8

2400fd48 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
2400fd48:	b580      	push	{r7, lr}
2400fd4a:	b084      	sub	sp, #16
2400fd4c:	af00      	add	r7, sp, #0
2400fd4e:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
2400fd50:	2300      	movs	r3, #0
2400fd52:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
2400fd54:	687b      	ldr	r3, [r7, #4]
2400fd56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400fd58:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
2400fd5a:	68bb      	ldr	r3, [r7, #8]
2400fd5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400fd5e:	2b00      	cmp	r3, #0
2400fd60:	d076      	beq.n	2400fe50 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
2400fd62:	68bb      	ldr	r3, [r7, #8]
2400fd64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400fd66:	681b      	ldr	r3, [r3, #0]
2400fd68:	4a71      	ldr	r2, [pc, #452]	@ (2400ff30 <I2C_DMAError+0x1e8>)
2400fd6a:	4293      	cmp	r3, r2
2400fd6c:	d059      	beq.n	2400fe22 <I2C_DMAError+0xda>
2400fd6e:	68bb      	ldr	r3, [r7, #8]
2400fd70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400fd72:	681b      	ldr	r3, [r3, #0]
2400fd74:	4a6f      	ldr	r2, [pc, #444]	@ (2400ff34 <I2C_DMAError+0x1ec>)
2400fd76:	4293      	cmp	r3, r2
2400fd78:	d053      	beq.n	2400fe22 <I2C_DMAError+0xda>
2400fd7a:	68bb      	ldr	r3, [r7, #8]
2400fd7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400fd7e:	681b      	ldr	r3, [r3, #0]
2400fd80:	4a6d      	ldr	r2, [pc, #436]	@ (2400ff38 <I2C_DMAError+0x1f0>)
2400fd82:	4293      	cmp	r3, r2
2400fd84:	d04d      	beq.n	2400fe22 <I2C_DMAError+0xda>
2400fd86:	68bb      	ldr	r3, [r7, #8]
2400fd88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400fd8a:	681b      	ldr	r3, [r3, #0]
2400fd8c:	4a6b      	ldr	r2, [pc, #428]	@ (2400ff3c <I2C_DMAError+0x1f4>)
2400fd8e:	4293      	cmp	r3, r2
2400fd90:	d047      	beq.n	2400fe22 <I2C_DMAError+0xda>
2400fd92:	68bb      	ldr	r3, [r7, #8]
2400fd94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400fd96:	681b      	ldr	r3, [r3, #0]
2400fd98:	4a69      	ldr	r2, [pc, #420]	@ (2400ff40 <I2C_DMAError+0x1f8>)
2400fd9a:	4293      	cmp	r3, r2
2400fd9c:	d041      	beq.n	2400fe22 <I2C_DMAError+0xda>
2400fd9e:	68bb      	ldr	r3, [r7, #8]
2400fda0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400fda2:	681b      	ldr	r3, [r3, #0]
2400fda4:	4a67      	ldr	r2, [pc, #412]	@ (2400ff44 <I2C_DMAError+0x1fc>)
2400fda6:	4293      	cmp	r3, r2
2400fda8:	d03b      	beq.n	2400fe22 <I2C_DMAError+0xda>
2400fdaa:	68bb      	ldr	r3, [r7, #8]
2400fdac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400fdae:	681b      	ldr	r3, [r3, #0]
2400fdb0:	4a65      	ldr	r2, [pc, #404]	@ (2400ff48 <I2C_DMAError+0x200>)
2400fdb2:	4293      	cmp	r3, r2
2400fdb4:	d035      	beq.n	2400fe22 <I2C_DMAError+0xda>
2400fdb6:	68bb      	ldr	r3, [r7, #8]
2400fdb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400fdba:	681b      	ldr	r3, [r3, #0]
2400fdbc:	4a63      	ldr	r2, [pc, #396]	@ (2400ff4c <I2C_DMAError+0x204>)
2400fdbe:	4293      	cmp	r3, r2
2400fdc0:	d02f      	beq.n	2400fe22 <I2C_DMAError+0xda>
2400fdc2:	68bb      	ldr	r3, [r7, #8]
2400fdc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400fdc6:	681b      	ldr	r3, [r3, #0]
2400fdc8:	4a61      	ldr	r2, [pc, #388]	@ (2400ff50 <I2C_DMAError+0x208>)
2400fdca:	4293      	cmp	r3, r2
2400fdcc:	d029      	beq.n	2400fe22 <I2C_DMAError+0xda>
2400fdce:	68bb      	ldr	r3, [r7, #8]
2400fdd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400fdd2:	681b      	ldr	r3, [r3, #0]
2400fdd4:	4a5f      	ldr	r2, [pc, #380]	@ (2400ff54 <I2C_DMAError+0x20c>)
2400fdd6:	4293      	cmp	r3, r2
2400fdd8:	d023      	beq.n	2400fe22 <I2C_DMAError+0xda>
2400fdda:	68bb      	ldr	r3, [r7, #8]
2400fddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400fdde:	681b      	ldr	r3, [r3, #0]
2400fde0:	4a5d      	ldr	r2, [pc, #372]	@ (2400ff58 <I2C_DMAError+0x210>)
2400fde2:	4293      	cmp	r3, r2
2400fde4:	d01d      	beq.n	2400fe22 <I2C_DMAError+0xda>
2400fde6:	68bb      	ldr	r3, [r7, #8]
2400fde8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400fdea:	681b      	ldr	r3, [r3, #0]
2400fdec:	4a5b      	ldr	r2, [pc, #364]	@ (2400ff5c <I2C_DMAError+0x214>)
2400fdee:	4293      	cmp	r3, r2
2400fdf0:	d017      	beq.n	2400fe22 <I2C_DMAError+0xda>
2400fdf2:	68bb      	ldr	r3, [r7, #8]
2400fdf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400fdf6:	681b      	ldr	r3, [r3, #0]
2400fdf8:	4a59      	ldr	r2, [pc, #356]	@ (2400ff60 <I2C_DMAError+0x218>)
2400fdfa:	4293      	cmp	r3, r2
2400fdfc:	d011      	beq.n	2400fe22 <I2C_DMAError+0xda>
2400fdfe:	68bb      	ldr	r3, [r7, #8]
2400fe00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400fe02:	681b      	ldr	r3, [r3, #0]
2400fe04:	4a57      	ldr	r2, [pc, #348]	@ (2400ff64 <I2C_DMAError+0x21c>)
2400fe06:	4293      	cmp	r3, r2
2400fe08:	d00b      	beq.n	2400fe22 <I2C_DMAError+0xda>
2400fe0a:	68bb      	ldr	r3, [r7, #8]
2400fe0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400fe0e:	681b      	ldr	r3, [r3, #0]
2400fe10:	4a55      	ldr	r2, [pc, #340]	@ (2400ff68 <I2C_DMAError+0x220>)
2400fe12:	4293      	cmp	r3, r2
2400fe14:	d005      	beq.n	2400fe22 <I2C_DMAError+0xda>
2400fe16:	68bb      	ldr	r3, [r7, #8]
2400fe18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400fe1a:	681b      	ldr	r3, [r3, #0]
2400fe1c:	4a53      	ldr	r2, [pc, #332]	@ (2400ff6c <I2C_DMAError+0x224>)
2400fe1e:	4293      	cmp	r3, r2
2400fe20:	d109      	bne.n	2400fe36 <I2C_DMAError+0xee>
2400fe22:	68bb      	ldr	r3, [r7, #8]
2400fe24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400fe26:	681b      	ldr	r3, [r3, #0]
2400fe28:	685b      	ldr	r3, [r3, #4]
2400fe2a:	2b00      	cmp	r3, #0
2400fe2c:	bf0c      	ite	eq
2400fe2e:	2301      	moveq	r3, #1
2400fe30:	2300      	movne	r3, #0
2400fe32:	b2db      	uxtb	r3, r3
2400fe34:	e008      	b.n	2400fe48 <I2C_DMAError+0x100>
2400fe36:	68bb      	ldr	r3, [r7, #8]
2400fe38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400fe3a:	681b      	ldr	r3, [r3, #0]
2400fe3c:	685b      	ldr	r3, [r3, #4]
2400fe3e:	2b00      	cmp	r3, #0
2400fe40:	bf0c      	ite	eq
2400fe42:	2301      	moveq	r3, #1
2400fe44:	2300      	movne	r3, #0
2400fe46:	b2db      	uxtb	r3, r3
2400fe48:	2b00      	cmp	r3, #0
2400fe4a:	d001      	beq.n	2400fe50 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
2400fe4c:	2301      	movs	r3, #1
2400fe4e:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
2400fe50:	68bb      	ldr	r3, [r7, #8]
2400fe52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400fe54:	2b00      	cmp	r3, #0
2400fe56:	f000 8098 	beq.w	2400ff8a <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
2400fe5a:	68bb      	ldr	r3, [r7, #8]
2400fe5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400fe5e:	681b      	ldr	r3, [r3, #0]
2400fe60:	4a33      	ldr	r2, [pc, #204]	@ (2400ff30 <I2C_DMAError+0x1e8>)
2400fe62:	4293      	cmp	r3, r2
2400fe64:	d059      	beq.n	2400ff1a <I2C_DMAError+0x1d2>
2400fe66:	68bb      	ldr	r3, [r7, #8]
2400fe68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400fe6a:	681b      	ldr	r3, [r3, #0]
2400fe6c:	4a31      	ldr	r2, [pc, #196]	@ (2400ff34 <I2C_DMAError+0x1ec>)
2400fe6e:	4293      	cmp	r3, r2
2400fe70:	d053      	beq.n	2400ff1a <I2C_DMAError+0x1d2>
2400fe72:	68bb      	ldr	r3, [r7, #8]
2400fe74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400fe76:	681b      	ldr	r3, [r3, #0]
2400fe78:	4a2f      	ldr	r2, [pc, #188]	@ (2400ff38 <I2C_DMAError+0x1f0>)
2400fe7a:	4293      	cmp	r3, r2
2400fe7c:	d04d      	beq.n	2400ff1a <I2C_DMAError+0x1d2>
2400fe7e:	68bb      	ldr	r3, [r7, #8]
2400fe80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400fe82:	681b      	ldr	r3, [r3, #0]
2400fe84:	4a2d      	ldr	r2, [pc, #180]	@ (2400ff3c <I2C_DMAError+0x1f4>)
2400fe86:	4293      	cmp	r3, r2
2400fe88:	d047      	beq.n	2400ff1a <I2C_DMAError+0x1d2>
2400fe8a:	68bb      	ldr	r3, [r7, #8]
2400fe8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400fe8e:	681b      	ldr	r3, [r3, #0]
2400fe90:	4a2b      	ldr	r2, [pc, #172]	@ (2400ff40 <I2C_DMAError+0x1f8>)
2400fe92:	4293      	cmp	r3, r2
2400fe94:	d041      	beq.n	2400ff1a <I2C_DMAError+0x1d2>
2400fe96:	68bb      	ldr	r3, [r7, #8]
2400fe98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400fe9a:	681b      	ldr	r3, [r3, #0]
2400fe9c:	4a29      	ldr	r2, [pc, #164]	@ (2400ff44 <I2C_DMAError+0x1fc>)
2400fe9e:	4293      	cmp	r3, r2
2400fea0:	d03b      	beq.n	2400ff1a <I2C_DMAError+0x1d2>
2400fea2:	68bb      	ldr	r3, [r7, #8]
2400fea4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400fea6:	681b      	ldr	r3, [r3, #0]
2400fea8:	4a27      	ldr	r2, [pc, #156]	@ (2400ff48 <I2C_DMAError+0x200>)
2400feaa:	4293      	cmp	r3, r2
2400feac:	d035      	beq.n	2400ff1a <I2C_DMAError+0x1d2>
2400feae:	68bb      	ldr	r3, [r7, #8]
2400feb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400feb2:	681b      	ldr	r3, [r3, #0]
2400feb4:	4a25      	ldr	r2, [pc, #148]	@ (2400ff4c <I2C_DMAError+0x204>)
2400feb6:	4293      	cmp	r3, r2
2400feb8:	d02f      	beq.n	2400ff1a <I2C_DMAError+0x1d2>
2400feba:	68bb      	ldr	r3, [r7, #8]
2400febc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400febe:	681b      	ldr	r3, [r3, #0]
2400fec0:	4a23      	ldr	r2, [pc, #140]	@ (2400ff50 <I2C_DMAError+0x208>)
2400fec2:	4293      	cmp	r3, r2
2400fec4:	d029      	beq.n	2400ff1a <I2C_DMAError+0x1d2>
2400fec6:	68bb      	ldr	r3, [r7, #8]
2400fec8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400feca:	681b      	ldr	r3, [r3, #0]
2400fecc:	4a21      	ldr	r2, [pc, #132]	@ (2400ff54 <I2C_DMAError+0x20c>)
2400fece:	4293      	cmp	r3, r2
2400fed0:	d023      	beq.n	2400ff1a <I2C_DMAError+0x1d2>
2400fed2:	68bb      	ldr	r3, [r7, #8]
2400fed4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400fed6:	681b      	ldr	r3, [r3, #0]
2400fed8:	4a1f      	ldr	r2, [pc, #124]	@ (2400ff58 <I2C_DMAError+0x210>)
2400feda:	4293      	cmp	r3, r2
2400fedc:	d01d      	beq.n	2400ff1a <I2C_DMAError+0x1d2>
2400fede:	68bb      	ldr	r3, [r7, #8]
2400fee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400fee2:	681b      	ldr	r3, [r3, #0]
2400fee4:	4a1d      	ldr	r2, [pc, #116]	@ (2400ff5c <I2C_DMAError+0x214>)
2400fee6:	4293      	cmp	r3, r2
2400fee8:	d017      	beq.n	2400ff1a <I2C_DMAError+0x1d2>
2400feea:	68bb      	ldr	r3, [r7, #8]
2400feec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400feee:	681b      	ldr	r3, [r3, #0]
2400fef0:	4a1b      	ldr	r2, [pc, #108]	@ (2400ff60 <I2C_DMAError+0x218>)
2400fef2:	4293      	cmp	r3, r2
2400fef4:	d011      	beq.n	2400ff1a <I2C_DMAError+0x1d2>
2400fef6:	68bb      	ldr	r3, [r7, #8]
2400fef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400fefa:	681b      	ldr	r3, [r3, #0]
2400fefc:	4a19      	ldr	r2, [pc, #100]	@ (2400ff64 <I2C_DMAError+0x21c>)
2400fefe:	4293      	cmp	r3, r2
2400ff00:	d00b      	beq.n	2400ff1a <I2C_DMAError+0x1d2>
2400ff02:	68bb      	ldr	r3, [r7, #8]
2400ff04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400ff06:	681b      	ldr	r3, [r3, #0]
2400ff08:	4a17      	ldr	r2, [pc, #92]	@ (2400ff68 <I2C_DMAError+0x220>)
2400ff0a:	4293      	cmp	r3, r2
2400ff0c:	d005      	beq.n	2400ff1a <I2C_DMAError+0x1d2>
2400ff0e:	68bb      	ldr	r3, [r7, #8]
2400ff10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400ff12:	681b      	ldr	r3, [r3, #0]
2400ff14:	4a15      	ldr	r2, [pc, #84]	@ (2400ff6c <I2C_DMAError+0x224>)
2400ff16:	4293      	cmp	r3, r2
2400ff18:	d12a      	bne.n	2400ff70 <I2C_DMAError+0x228>
2400ff1a:	68bb      	ldr	r3, [r7, #8]
2400ff1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400ff1e:	681b      	ldr	r3, [r3, #0]
2400ff20:	685b      	ldr	r3, [r3, #4]
2400ff22:	2b00      	cmp	r3, #0
2400ff24:	bf0c      	ite	eq
2400ff26:	2301      	moveq	r3, #1
2400ff28:	2300      	movne	r3, #0
2400ff2a:	b2db      	uxtb	r3, r3
2400ff2c:	e029      	b.n	2400ff82 <I2C_DMAError+0x23a>
2400ff2e:	bf00      	nop
2400ff30:	40020010 	.word	0x40020010
2400ff34:	40020028 	.word	0x40020028
2400ff38:	40020040 	.word	0x40020040
2400ff3c:	40020058 	.word	0x40020058
2400ff40:	40020070 	.word	0x40020070
2400ff44:	40020088 	.word	0x40020088
2400ff48:	400200a0 	.word	0x400200a0
2400ff4c:	400200b8 	.word	0x400200b8
2400ff50:	40020410 	.word	0x40020410
2400ff54:	40020428 	.word	0x40020428
2400ff58:	40020440 	.word	0x40020440
2400ff5c:	40020458 	.word	0x40020458
2400ff60:	40020470 	.word	0x40020470
2400ff64:	40020488 	.word	0x40020488
2400ff68:	400204a0 	.word	0x400204a0
2400ff6c:	400204b8 	.word	0x400204b8
2400ff70:	68bb      	ldr	r3, [r7, #8]
2400ff72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400ff74:	681b      	ldr	r3, [r3, #0]
2400ff76:	685b      	ldr	r3, [r3, #4]
2400ff78:	2b00      	cmp	r3, #0
2400ff7a:	bf0c      	ite	eq
2400ff7c:	2301      	moveq	r3, #1
2400ff7e:	2300      	movne	r3, #0
2400ff80:	b2db      	uxtb	r3, r3
2400ff82:	2b00      	cmp	r3, #0
2400ff84:	d001      	beq.n	2400ff8a <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
2400ff86:	2301      	movs	r3, #1
2400ff88:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
2400ff8a:	6878      	ldr	r0, [r7, #4]
2400ff8c:	f7f7 f84e 	bl	2400702c <HAL_DMA_GetError>
2400ff90:	4603      	mov	r3, r0
2400ff92:	2b02      	cmp	r3, #2
2400ff94:	d00e      	beq.n	2400ffb4 <I2C_DMAError+0x26c>
2400ff96:	68fb      	ldr	r3, [r7, #12]
2400ff98:	2b00      	cmp	r3, #0
2400ff9a:	d00b      	beq.n	2400ffb4 <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
2400ff9c:	68bb      	ldr	r3, [r7, #8]
2400ff9e:	681b      	ldr	r3, [r3, #0]
2400ffa0:	685a      	ldr	r2, [r3, #4]
2400ffa2:	68bb      	ldr	r3, [r7, #8]
2400ffa4:	681b      	ldr	r3, [r3, #0]
2400ffa6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
2400ffaa:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
2400ffac:	2110      	movs	r1, #16
2400ffae:	68b8      	ldr	r0, [r7, #8]
2400ffb0:	f7ff fc26 	bl	2400f800 <I2C_ITError>
  }
}
2400ffb4:	bf00      	nop
2400ffb6:	3710      	adds	r7, #16
2400ffb8:	46bd      	mov	sp, r7
2400ffba:	bd80      	pop	{r7, pc}

2400ffbc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
2400ffbc:	b580      	push	{r7, lr}
2400ffbe:	b084      	sub	sp, #16
2400ffc0:	af00      	add	r7, sp, #0
2400ffc2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
2400ffc4:	687b      	ldr	r3, [r7, #4]
2400ffc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400ffc8:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
2400ffca:	68fb      	ldr	r3, [r7, #12]
2400ffcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400ffce:	2b00      	cmp	r3, #0
2400ffd0:	d003      	beq.n	2400ffda <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
2400ffd2:	68fb      	ldr	r3, [r7, #12]
2400ffd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2400ffd6:	2200      	movs	r2, #0
2400ffd8:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
2400ffda:	68fb      	ldr	r3, [r7, #12]
2400ffdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400ffde:	2b00      	cmp	r3, #0
2400ffe0:	d003      	beq.n	2400ffea <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
2400ffe2:	68fb      	ldr	r3, [r7, #12]
2400ffe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2400ffe6:	2200      	movs	r2, #0
2400ffe8:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
2400ffea:	68f8      	ldr	r0, [r7, #12]
2400ffec:	f7ff fcf8 	bl	2400f9e0 <I2C_TreatErrorCallback>
}
2400fff0:	bf00      	nop
2400fff2:	3710      	adds	r7, #16
2400fff4:	46bd      	mov	sp, r7
2400fff6:	bd80      	pop	{r7, pc}

2400fff8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
2400fff8:	b580      	push	{r7, lr}
2400fffa:	b084      	sub	sp, #16
2400fffc:	af00      	add	r7, sp, #0
2400fffe:	60f8      	str	r0, [r7, #12]
24010000:	60b9      	str	r1, [r7, #8]
24010002:	603b      	str	r3, [r7, #0]
24010004:	4613      	mov	r3, r2
24010006:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
24010008:	e03b      	b.n	24010082 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
2401000a:	69ba      	ldr	r2, [r7, #24]
2401000c:	6839      	ldr	r1, [r7, #0]
2401000e:	68f8      	ldr	r0, [r7, #12]
24010010:	f000 f962 	bl	240102d8 <I2C_IsErrorOccurred>
24010014:	4603      	mov	r3, r0
24010016:	2b00      	cmp	r3, #0
24010018:	d001      	beq.n	2401001e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
2401001a:	2301      	movs	r3, #1
2401001c:	e041      	b.n	240100a2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
2401001e:	683b      	ldr	r3, [r7, #0]
24010020:	f1b3 3fff 	cmp.w	r3, #4294967295
24010024:	d02d      	beq.n	24010082 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24010026:	f7f2 fe63 	bl	24002cf0 <HAL_GetTick>
2401002a:	4602      	mov	r2, r0
2401002c:	69bb      	ldr	r3, [r7, #24]
2401002e:	1ad3      	subs	r3, r2, r3
24010030:	683a      	ldr	r2, [r7, #0]
24010032:	429a      	cmp	r2, r3
24010034:	d302      	bcc.n	2401003c <I2C_WaitOnFlagUntilTimeout+0x44>
24010036:	683b      	ldr	r3, [r7, #0]
24010038:	2b00      	cmp	r3, #0
2401003a:	d122      	bne.n	24010082 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
2401003c:	68fb      	ldr	r3, [r7, #12]
2401003e:	681b      	ldr	r3, [r3, #0]
24010040:	699a      	ldr	r2, [r3, #24]
24010042:	68bb      	ldr	r3, [r7, #8]
24010044:	4013      	ands	r3, r2
24010046:	68ba      	ldr	r2, [r7, #8]
24010048:	429a      	cmp	r2, r3
2401004a:	bf0c      	ite	eq
2401004c:	2301      	moveq	r3, #1
2401004e:	2300      	movne	r3, #0
24010050:	b2db      	uxtb	r3, r3
24010052:	461a      	mov	r2, r3
24010054:	79fb      	ldrb	r3, [r7, #7]
24010056:	429a      	cmp	r2, r3
24010058:	d113      	bne.n	24010082 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2401005a:	68fb      	ldr	r3, [r7, #12]
2401005c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2401005e:	f043 0220 	orr.w	r2, r3, #32
24010062:	68fb      	ldr	r3, [r7, #12]
24010064:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24010066:	68fb      	ldr	r3, [r7, #12]
24010068:	2220      	movs	r2, #32
2401006a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
2401006e:	68fb      	ldr	r3, [r7, #12]
24010070:	2200      	movs	r2, #0
24010072:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
24010076:	68fb      	ldr	r3, [r7, #12]
24010078:	2200      	movs	r2, #0
2401007a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
2401007e:	2301      	movs	r3, #1
24010080:	e00f      	b.n	240100a2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
24010082:	68fb      	ldr	r3, [r7, #12]
24010084:	681b      	ldr	r3, [r3, #0]
24010086:	699a      	ldr	r2, [r3, #24]
24010088:	68bb      	ldr	r3, [r7, #8]
2401008a:	4013      	ands	r3, r2
2401008c:	68ba      	ldr	r2, [r7, #8]
2401008e:	429a      	cmp	r2, r3
24010090:	bf0c      	ite	eq
24010092:	2301      	moveq	r3, #1
24010094:	2300      	movne	r3, #0
24010096:	b2db      	uxtb	r3, r3
24010098:	461a      	mov	r2, r3
2401009a:	79fb      	ldrb	r3, [r7, #7]
2401009c:	429a      	cmp	r2, r3
2401009e:	d0b4      	beq.n	2401000a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
240100a0:	2300      	movs	r3, #0
}
240100a2:	4618      	mov	r0, r3
240100a4:	3710      	adds	r7, #16
240100a6:	46bd      	mov	sp, r7
240100a8:	bd80      	pop	{r7, pc}

240100aa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
240100aa:	b580      	push	{r7, lr}
240100ac:	b084      	sub	sp, #16
240100ae:	af00      	add	r7, sp, #0
240100b0:	60f8      	str	r0, [r7, #12]
240100b2:	60b9      	str	r1, [r7, #8]
240100b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
240100b6:	e033      	b.n	24010120 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
240100b8:	687a      	ldr	r2, [r7, #4]
240100ba:	68b9      	ldr	r1, [r7, #8]
240100bc:	68f8      	ldr	r0, [r7, #12]
240100be:	f000 f90b 	bl	240102d8 <I2C_IsErrorOccurred>
240100c2:	4603      	mov	r3, r0
240100c4:	2b00      	cmp	r3, #0
240100c6:	d001      	beq.n	240100cc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
240100c8:	2301      	movs	r3, #1
240100ca:	e031      	b.n	24010130 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
240100cc:	68bb      	ldr	r3, [r7, #8]
240100ce:	f1b3 3fff 	cmp.w	r3, #4294967295
240100d2:	d025      	beq.n	24010120 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
240100d4:	f7f2 fe0c 	bl	24002cf0 <HAL_GetTick>
240100d8:	4602      	mov	r2, r0
240100da:	687b      	ldr	r3, [r7, #4]
240100dc:	1ad3      	subs	r3, r2, r3
240100de:	68ba      	ldr	r2, [r7, #8]
240100e0:	429a      	cmp	r2, r3
240100e2:	d302      	bcc.n	240100ea <I2C_WaitOnTXISFlagUntilTimeout+0x40>
240100e4:	68bb      	ldr	r3, [r7, #8]
240100e6:	2b00      	cmp	r3, #0
240100e8:	d11a      	bne.n	24010120 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
240100ea:	68fb      	ldr	r3, [r7, #12]
240100ec:	681b      	ldr	r3, [r3, #0]
240100ee:	699b      	ldr	r3, [r3, #24]
240100f0:	f003 0302 	and.w	r3, r3, #2
240100f4:	2b02      	cmp	r3, #2
240100f6:	d013      	beq.n	24010120 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
240100f8:	68fb      	ldr	r3, [r7, #12]
240100fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
240100fc:	f043 0220 	orr.w	r2, r3, #32
24010100:	68fb      	ldr	r3, [r7, #12]
24010102:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24010104:	68fb      	ldr	r3, [r7, #12]
24010106:	2220      	movs	r2, #32
24010108:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
2401010c:	68fb      	ldr	r3, [r7, #12]
2401010e:	2200      	movs	r2, #0
24010110:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
24010114:	68fb      	ldr	r3, [r7, #12]
24010116:	2200      	movs	r2, #0
24010118:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
2401011c:	2301      	movs	r3, #1
2401011e:	e007      	b.n	24010130 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
24010120:	68fb      	ldr	r3, [r7, #12]
24010122:	681b      	ldr	r3, [r3, #0]
24010124:	699b      	ldr	r3, [r3, #24]
24010126:	f003 0302 	and.w	r3, r3, #2
2401012a:	2b02      	cmp	r3, #2
2401012c:	d1c4      	bne.n	240100b8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
2401012e:	2300      	movs	r3, #0
}
24010130:	4618      	mov	r0, r3
24010132:	3710      	adds	r7, #16
24010134:	46bd      	mov	sp, r7
24010136:	bd80      	pop	{r7, pc}

24010138 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
24010138:	b580      	push	{r7, lr}
2401013a:	b084      	sub	sp, #16
2401013c:	af00      	add	r7, sp, #0
2401013e:	60f8      	str	r0, [r7, #12]
24010140:	60b9      	str	r1, [r7, #8]
24010142:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
24010144:	e02f      	b.n	240101a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
24010146:	687a      	ldr	r2, [r7, #4]
24010148:	68b9      	ldr	r1, [r7, #8]
2401014a:	68f8      	ldr	r0, [r7, #12]
2401014c:	f000 f8c4 	bl	240102d8 <I2C_IsErrorOccurred>
24010150:	4603      	mov	r3, r0
24010152:	2b00      	cmp	r3, #0
24010154:	d001      	beq.n	2401015a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
24010156:	2301      	movs	r3, #1
24010158:	e02d      	b.n	240101b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2401015a:	f7f2 fdc9 	bl	24002cf0 <HAL_GetTick>
2401015e:	4602      	mov	r2, r0
24010160:	687b      	ldr	r3, [r7, #4]
24010162:	1ad3      	subs	r3, r2, r3
24010164:	68ba      	ldr	r2, [r7, #8]
24010166:	429a      	cmp	r2, r3
24010168:	d302      	bcc.n	24010170 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
2401016a:	68bb      	ldr	r3, [r7, #8]
2401016c:	2b00      	cmp	r3, #0
2401016e:	d11a      	bne.n	240101a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
24010170:	68fb      	ldr	r3, [r7, #12]
24010172:	681b      	ldr	r3, [r3, #0]
24010174:	699b      	ldr	r3, [r3, #24]
24010176:	f003 0320 	and.w	r3, r3, #32
2401017a:	2b20      	cmp	r3, #32
2401017c:	d013      	beq.n	240101a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2401017e:	68fb      	ldr	r3, [r7, #12]
24010180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
24010182:	f043 0220 	orr.w	r2, r3, #32
24010186:	68fb      	ldr	r3, [r7, #12]
24010188:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
2401018a:	68fb      	ldr	r3, [r7, #12]
2401018c:	2220      	movs	r2, #32
2401018e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
24010192:	68fb      	ldr	r3, [r7, #12]
24010194:	2200      	movs	r2, #0
24010196:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
2401019a:	68fb      	ldr	r3, [r7, #12]
2401019c:	2200      	movs	r2, #0
2401019e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
240101a2:	2301      	movs	r3, #1
240101a4:	e007      	b.n	240101b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
240101a6:	68fb      	ldr	r3, [r7, #12]
240101a8:	681b      	ldr	r3, [r3, #0]
240101aa:	699b      	ldr	r3, [r3, #24]
240101ac:	f003 0320 	and.w	r3, r3, #32
240101b0:	2b20      	cmp	r3, #32
240101b2:	d1c8      	bne.n	24010146 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
240101b4:	2300      	movs	r3, #0
}
240101b6:	4618      	mov	r0, r3
240101b8:	3710      	adds	r7, #16
240101ba:	46bd      	mov	sp, r7
240101bc:	bd80      	pop	{r7, pc}
	...

240101c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
240101c0:	b580      	push	{r7, lr}
240101c2:	b086      	sub	sp, #24
240101c4:	af00      	add	r7, sp, #0
240101c6:	60f8      	str	r0, [r7, #12]
240101c8:	60b9      	str	r1, [r7, #8]
240101ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
240101cc:	2300      	movs	r3, #0
240101ce:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
240101d0:	e071      	b.n	240102b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
240101d2:	687a      	ldr	r2, [r7, #4]
240101d4:	68b9      	ldr	r1, [r7, #8]
240101d6:	68f8      	ldr	r0, [r7, #12]
240101d8:	f000 f87e 	bl	240102d8 <I2C_IsErrorOccurred>
240101dc:	4603      	mov	r3, r0
240101de:	2b00      	cmp	r3, #0
240101e0:	d001      	beq.n	240101e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
240101e2:	2301      	movs	r3, #1
240101e4:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
240101e6:	68fb      	ldr	r3, [r7, #12]
240101e8:	681b      	ldr	r3, [r3, #0]
240101ea:	699b      	ldr	r3, [r3, #24]
240101ec:	f003 0320 	and.w	r3, r3, #32
240101f0:	2b20      	cmp	r3, #32
240101f2:	d13b      	bne.n	2401026c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
240101f4:	7dfb      	ldrb	r3, [r7, #23]
240101f6:	2b00      	cmp	r3, #0
240101f8:	d138      	bne.n	2401026c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
240101fa:	68fb      	ldr	r3, [r7, #12]
240101fc:	681b      	ldr	r3, [r3, #0]
240101fe:	699b      	ldr	r3, [r3, #24]
24010200:	f003 0304 	and.w	r3, r3, #4
24010204:	2b04      	cmp	r3, #4
24010206:	d105      	bne.n	24010214 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
24010208:	68fb      	ldr	r3, [r7, #12]
2401020a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
2401020c:	2b00      	cmp	r3, #0
2401020e:	d001      	beq.n	24010214 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
24010210:	2300      	movs	r3, #0
24010212:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
24010214:	68fb      	ldr	r3, [r7, #12]
24010216:	681b      	ldr	r3, [r3, #0]
24010218:	699b      	ldr	r3, [r3, #24]
2401021a:	f003 0310 	and.w	r3, r3, #16
2401021e:	2b10      	cmp	r3, #16
24010220:	d121      	bne.n	24010266 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24010222:	68fb      	ldr	r3, [r7, #12]
24010224:	681b      	ldr	r3, [r3, #0]
24010226:	2210      	movs	r2, #16
24010228:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
2401022a:	68fb      	ldr	r3, [r7, #12]
2401022c:	2204      	movs	r2, #4
2401022e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24010230:	68fb      	ldr	r3, [r7, #12]
24010232:	681b      	ldr	r3, [r3, #0]
24010234:	2220      	movs	r2, #32
24010236:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
24010238:	68fb      	ldr	r3, [r7, #12]
2401023a:	681b      	ldr	r3, [r3, #0]
2401023c:	6859      	ldr	r1, [r3, #4]
2401023e:	68fb      	ldr	r3, [r7, #12]
24010240:	681a      	ldr	r2, [r3, #0]
24010242:	4b24      	ldr	r3, [pc, #144]	@ (240102d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
24010244:	400b      	ands	r3, r1
24010246:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
24010248:	68fb      	ldr	r3, [r7, #12]
2401024a:	2220      	movs	r2, #32
2401024c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
24010250:	68fb      	ldr	r3, [r7, #12]
24010252:	2200      	movs	r2, #0
24010254:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
24010258:	68fb      	ldr	r3, [r7, #12]
2401025a:	2200      	movs	r2, #0
2401025c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
24010260:	2301      	movs	r3, #1
24010262:	75fb      	strb	r3, [r7, #23]
24010264:	e002      	b.n	2401026c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
24010266:	68fb      	ldr	r3, [r7, #12]
24010268:	2200      	movs	r2, #0
2401026a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
2401026c:	f7f2 fd40 	bl	24002cf0 <HAL_GetTick>
24010270:	4602      	mov	r2, r0
24010272:	687b      	ldr	r3, [r7, #4]
24010274:	1ad3      	subs	r3, r2, r3
24010276:	68ba      	ldr	r2, [r7, #8]
24010278:	429a      	cmp	r2, r3
2401027a:	d302      	bcc.n	24010282 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
2401027c:	68bb      	ldr	r3, [r7, #8]
2401027e:	2b00      	cmp	r3, #0
24010280:	d119      	bne.n	240102b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
24010282:	7dfb      	ldrb	r3, [r7, #23]
24010284:	2b00      	cmp	r3, #0
24010286:	d116      	bne.n	240102b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
24010288:	68fb      	ldr	r3, [r7, #12]
2401028a:	681b      	ldr	r3, [r3, #0]
2401028c:	699b      	ldr	r3, [r3, #24]
2401028e:	f003 0304 	and.w	r3, r3, #4
24010292:	2b04      	cmp	r3, #4
24010294:	d00f      	beq.n	240102b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24010296:	68fb      	ldr	r3, [r7, #12]
24010298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2401029a:	f043 0220 	orr.w	r2, r3, #32
2401029e:	68fb      	ldr	r3, [r7, #12]
240102a0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
240102a2:	68fb      	ldr	r3, [r7, #12]
240102a4:	2220      	movs	r2, #32
240102a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
240102aa:	68fb      	ldr	r3, [r7, #12]
240102ac:	2200      	movs	r2, #0
240102ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
240102b2:	2301      	movs	r3, #1
240102b4:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
240102b6:	68fb      	ldr	r3, [r7, #12]
240102b8:	681b      	ldr	r3, [r3, #0]
240102ba:	699b      	ldr	r3, [r3, #24]
240102bc:	f003 0304 	and.w	r3, r3, #4
240102c0:	2b04      	cmp	r3, #4
240102c2:	d002      	beq.n	240102ca <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
240102c4:	7dfb      	ldrb	r3, [r7, #23]
240102c6:	2b00      	cmp	r3, #0
240102c8:	d083      	beq.n	240101d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
240102ca:	7dfb      	ldrb	r3, [r7, #23]
}
240102cc:	4618      	mov	r0, r3
240102ce:	3718      	adds	r7, #24
240102d0:	46bd      	mov	sp, r7
240102d2:	bd80      	pop	{r7, pc}
240102d4:	fe00e800 	.word	0xfe00e800

240102d8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
240102d8:	b580      	push	{r7, lr}
240102da:	b08a      	sub	sp, #40	@ 0x28
240102dc:	af00      	add	r7, sp, #0
240102de:	60f8      	str	r0, [r7, #12]
240102e0:	60b9      	str	r1, [r7, #8]
240102e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
240102e4:	2300      	movs	r3, #0
240102e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
240102ea:	68fb      	ldr	r3, [r7, #12]
240102ec:	681b      	ldr	r3, [r3, #0]
240102ee:	699b      	ldr	r3, [r3, #24]
240102f0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
240102f2:	2300      	movs	r3, #0
240102f4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
240102f6:	687b      	ldr	r3, [r7, #4]
240102f8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
240102fa:	69bb      	ldr	r3, [r7, #24]
240102fc:	f003 0310 	and.w	r3, r3, #16
24010300:	2b00      	cmp	r3, #0
24010302:	d068      	beq.n	240103d6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24010304:	68fb      	ldr	r3, [r7, #12]
24010306:	681b      	ldr	r3, [r3, #0]
24010308:	2210      	movs	r2, #16
2401030a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
2401030c:	e049      	b.n	240103a2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
2401030e:	68bb      	ldr	r3, [r7, #8]
24010310:	f1b3 3fff 	cmp.w	r3, #4294967295
24010314:	d045      	beq.n	240103a2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
24010316:	f7f2 fceb 	bl	24002cf0 <HAL_GetTick>
2401031a:	4602      	mov	r2, r0
2401031c:	69fb      	ldr	r3, [r7, #28]
2401031e:	1ad3      	subs	r3, r2, r3
24010320:	68ba      	ldr	r2, [r7, #8]
24010322:	429a      	cmp	r2, r3
24010324:	d302      	bcc.n	2401032c <I2C_IsErrorOccurred+0x54>
24010326:	68bb      	ldr	r3, [r7, #8]
24010328:	2b00      	cmp	r3, #0
2401032a:	d13a      	bne.n	240103a2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
2401032c:	68fb      	ldr	r3, [r7, #12]
2401032e:	681b      	ldr	r3, [r3, #0]
24010330:	685b      	ldr	r3, [r3, #4]
24010332:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
24010336:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
24010338:	68fb      	ldr	r3, [r7, #12]
2401033a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
2401033e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
24010340:	68fb      	ldr	r3, [r7, #12]
24010342:	681b      	ldr	r3, [r3, #0]
24010344:	699b      	ldr	r3, [r3, #24]
24010346:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
2401034a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
2401034e:	d121      	bne.n	24010394 <I2C_IsErrorOccurred+0xbc>
24010350:	697b      	ldr	r3, [r7, #20]
24010352:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
24010356:	d01d      	beq.n	24010394 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
24010358:	7cfb      	ldrb	r3, [r7, #19]
2401035a:	2b20      	cmp	r3, #32
2401035c:	d01a      	beq.n	24010394 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
2401035e:	68fb      	ldr	r3, [r7, #12]
24010360:	681b      	ldr	r3, [r3, #0]
24010362:	685a      	ldr	r2, [r3, #4]
24010364:	68fb      	ldr	r3, [r7, #12]
24010366:	681b      	ldr	r3, [r3, #0]
24010368:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
2401036c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
2401036e:	f7f2 fcbf 	bl	24002cf0 <HAL_GetTick>
24010372:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
24010374:	e00e      	b.n	24010394 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
24010376:	f7f2 fcbb 	bl	24002cf0 <HAL_GetTick>
2401037a:	4602      	mov	r2, r0
2401037c:	69fb      	ldr	r3, [r7, #28]
2401037e:	1ad3      	subs	r3, r2, r3
24010380:	2b19      	cmp	r3, #25
24010382:	d907      	bls.n	24010394 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
24010384:	6a3b      	ldr	r3, [r7, #32]
24010386:	f043 0320 	orr.w	r3, r3, #32
2401038a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
2401038c:	2301      	movs	r3, #1
2401038e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
24010392:	e006      	b.n	240103a2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
24010394:	68fb      	ldr	r3, [r7, #12]
24010396:	681b      	ldr	r3, [r3, #0]
24010398:	699b      	ldr	r3, [r3, #24]
2401039a:	f003 0320 	and.w	r3, r3, #32
2401039e:	2b20      	cmp	r3, #32
240103a0:	d1e9      	bne.n	24010376 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
240103a2:	68fb      	ldr	r3, [r7, #12]
240103a4:	681b      	ldr	r3, [r3, #0]
240103a6:	699b      	ldr	r3, [r3, #24]
240103a8:	f003 0320 	and.w	r3, r3, #32
240103ac:	2b20      	cmp	r3, #32
240103ae:	d003      	beq.n	240103b8 <I2C_IsErrorOccurred+0xe0>
240103b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
240103b4:	2b00      	cmp	r3, #0
240103b6:	d0aa      	beq.n	2401030e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
240103b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
240103bc:	2b00      	cmp	r3, #0
240103be:	d103      	bne.n	240103c8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
240103c0:	68fb      	ldr	r3, [r7, #12]
240103c2:	681b      	ldr	r3, [r3, #0]
240103c4:	2220      	movs	r2, #32
240103c6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
240103c8:	6a3b      	ldr	r3, [r7, #32]
240103ca:	f043 0304 	orr.w	r3, r3, #4
240103ce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
240103d0:	2301      	movs	r3, #1
240103d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
240103d6:	68fb      	ldr	r3, [r7, #12]
240103d8:	681b      	ldr	r3, [r3, #0]
240103da:	699b      	ldr	r3, [r3, #24]
240103dc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
240103de:	69bb      	ldr	r3, [r7, #24]
240103e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
240103e4:	2b00      	cmp	r3, #0
240103e6:	d00b      	beq.n	24010400 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
240103e8:	6a3b      	ldr	r3, [r7, #32]
240103ea:	f043 0301 	orr.w	r3, r3, #1
240103ee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
240103f0:	68fb      	ldr	r3, [r7, #12]
240103f2:	681b      	ldr	r3, [r3, #0]
240103f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
240103f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
240103fa:	2301      	movs	r3, #1
240103fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
24010400:	69bb      	ldr	r3, [r7, #24]
24010402:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
24010406:	2b00      	cmp	r3, #0
24010408:	d00b      	beq.n	24010422 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
2401040a:	6a3b      	ldr	r3, [r7, #32]
2401040c:	f043 0308 	orr.w	r3, r3, #8
24010410:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
24010412:	68fb      	ldr	r3, [r7, #12]
24010414:	681b      	ldr	r3, [r3, #0]
24010416:	f44f 6280 	mov.w	r2, #1024	@ 0x400
2401041a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
2401041c:	2301      	movs	r3, #1
2401041e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
24010422:	69bb      	ldr	r3, [r7, #24]
24010424:	f403 7300 	and.w	r3, r3, #512	@ 0x200
24010428:	2b00      	cmp	r3, #0
2401042a:	d00b      	beq.n	24010444 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
2401042c:	6a3b      	ldr	r3, [r7, #32]
2401042e:	f043 0302 	orr.w	r3, r3, #2
24010432:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
24010434:	68fb      	ldr	r3, [r7, #12]
24010436:	681b      	ldr	r3, [r3, #0]
24010438:	f44f 7200 	mov.w	r2, #512	@ 0x200
2401043c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
2401043e:	2301      	movs	r3, #1
24010440:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
24010444:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
24010448:	2b00      	cmp	r3, #0
2401044a:	d01c      	beq.n	24010486 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
2401044c:	68f8      	ldr	r0, [r7, #12]
2401044e:	f7ff faee 	bl	2400fa2e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
24010452:	68fb      	ldr	r3, [r7, #12]
24010454:	681b      	ldr	r3, [r3, #0]
24010456:	6859      	ldr	r1, [r3, #4]
24010458:	68fb      	ldr	r3, [r7, #12]
2401045a:	681a      	ldr	r2, [r3, #0]
2401045c:	4b0d      	ldr	r3, [pc, #52]	@ (24010494 <I2C_IsErrorOccurred+0x1bc>)
2401045e:	400b      	ands	r3, r1
24010460:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
24010462:	68fb      	ldr	r3, [r7, #12]
24010464:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
24010466:	6a3b      	ldr	r3, [r7, #32]
24010468:	431a      	orrs	r2, r3
2401046a:	68fb      	ldr	r3, [r7, #12]
2401046c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
2401046e:	68fb      	ldr	r3, [r7, #12]
24010470:	2220      	movs	r2, #32
24010472:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
24010476:	68fb      	ldr	r3, [r7, #12]
24010478:	2200      	movs	r2, #0
2401047a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2401047e:	68fb      	ldr	r3, [r7, #12]
24010480:	2200      	movs	r2, #0
24010482:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
24010486:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
2401048a:	4618      	mov	r0, r3
2401048c:	3728      	adds	r7, #40	@ 0x28
2401048e:	46bd      	mov	sp, r7
24010490:	bd80      	pop	{r7, pc}
24010492:	bf00      	nop
24010494:	fe00e800 	.word	0xfe00e800

24010498 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
24010498:	b480      	push	{r7}
2401049a:	b087      	sub	sp, #28
2401049c:	af00      	add	r7, sp, #0
2401049e:	60f8      	str	r0, [r7, #12]
240104a0:	607b      	str	r3, [r7, #4]
240104a2:	460b      	mov	r3, r1
240104a4:	817b      	strh	r3, [r7, #10]
240104a6:	4613      	mov	r3, r2
240104a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
240104aa:	897b      	ldrh	r3, [r7, #10]
240104ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
240104b0:	7a7b      	ldrb	r3, [r7, #9]
240104b2:	041b      	lsls	r3, r3, #16
240104b4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
240104b8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
240104ba:	687b      	ldr	r3, [r7, #4]
240104bc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
240104be:	6a3b      	ldr	r3, [r7, #32]
240104c0:	4313      	orrs	r3, r2
240104c2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
240104c6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
240104c8:	68fb      	ldr	r3, [r7, #12]
240104ca:	681b      	ldr	r3, [r3, #0]
240104cc:	685a      	ldr	r2, [r3, #4]
240104ce:	6a3b      	ldr	r3, [r7, #32]
240104d0:	0d5b      	lsrs	r3, r3, #21
240104d2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
240104d6:	4b08      	ldr	r3, [pc, #32]	@ (240104f8 <I2C_TransferConfig+0x60>)
240104d8:	430b      	orrs	r3, r1
240104da:	43db      	mvns	r3, r3
240104dc:	ea02 0103 	and.w	r1, r2, r3
240104e0:	68fb      	ldr	r3, [r7, #12]
240104e2:	681b      	ldr	r3, [r3, #0]
240104e4:	697a      	ldr	r2, [r7, #20]
240104e6:	430a      	orrs	r2, r1
240104e8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
240104ea:	bf00      	nop
240104ec:	371c      	adds	r7, #28
240104ee:	46bd      	mov	sp, r7
240104f0:	f85d 7b04 	ldr.w	r7, [sp], #4
240104f4:	4770      	bx	lr
240104f6:	bf00      	nop
240104f8:	03ff63ff 	.word	0x03ff63ff

240104fc <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
240104fc:	b480      	push	{r7}
240104fe:	b085      	sub	sp, #20
24010500:	af00      	add	r7, sp, #0
24010502:	6078      	str	r0, [r7, #4]
24010504:	460b      	mov	r3, r1
24010506:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
24010508:	2300      	movs	r3, #0
2401050a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
2401050c:	687b      	ldr	r3, [r7, #4]
2401050e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
24010510:	4a39      	ldr	r2, [pc, #228]	@ (240105f8 <I2C_Enable_IRQ+0xfc>)
24010512:	4293      	cmp	r3, r2
24010514:	d032      	beq.n	2401057c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
24010516:	687b      	ldr	r3, [r7, #4]
24010518:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
2401051a:	4a38      	ldr	r2, [pc, #224]	@ (240105fc <I2C_Enable_IRQ+0x100>)
2401051c:	4293      	cmp	r3, r2
2401051e:	d02d      	beq.n	2401057c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
24010520:	687b      	ldr	r3, [r7, #4]
24010522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
24010524:	4a36      	ldr	r2, [pc, #216]	@ (24010600 <I2C_Enable_IRQ+0x104>)
24010526:	4293      	cmp	r3, r2
24010528:	d028      	beq.n	2401057c <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
2401052a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
2401052e:	2b00      	cmp	r3, #0
24010530:	da03      	bge.n	2401053a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
24010532:	68fb      	ldr	r3, [r7, #12]
24010534:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
24010538:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
2401053a:	887b      	ldrh	r3, [r7, #2]
2401053c:	f003 0301 	and.w	r3, r3, #1
24010540:	2b00      	cmp	r3, #0
24010542:	d003      	beq.n	2401054c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
24010544:	68fb      	ldr	r3, [r7, #12]
24010546:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
2401054a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
2401054c:	887b      	ldrh	r3, [r7, #2]
2401054e:	f003 0302 	and.w	r3, r3, #2
24010552:	2b00      	cmp	r3, #0
24010554:	d003      	beq.n	2401055e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
24010556:	68fb      	ldr	r3, [r7, #12]
24010558:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
2401055c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
2401055e:	887b      	ldrh	r3, [r7, #2]
24010560:	2b10      	cmp	r3, #16
24010562:	d103      	bne.n	2401056c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
24010564:	68fb      	ldr	r3, [r7, #12]
24010566:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
2401056a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
2401056c:	887b      	ldrh	r3, [r7, #2]
2401056e:	2b20      	cmp	r3, #32
24010570:	d133      	bne.n	240105da <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
24010572:	68fb      	ldr	r3, [r7, #12]
24010574:	f043 0320 	orr.w	r3, r3, #32
24010578:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
2401057a:	e02e      	b.n	240105da <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
2401057c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
24010580:	2b00      	cmp	r3, #0
24010582:	da03      	bge.n	2401058c <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
24010584:	68fb      	ldr	r3, [r7, #12]
24010586:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
2401058a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
2401058c:	887b      	ldrh	r3, [r7, #2]
2401058e:	f003 0301 	and.w	r3, r3, #1
24010592:	2b00      	cmp	r3, #0
24010594:	d003      	beq.n	2401059e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
24010596:	68fb      	ldr	r3, [r7, #12]
24010598:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
2401059c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
2401059e:	887b      	ldrh	r3, [r7, #2]
240105a0:	f003 0302 	and.w	r3, r3, #2
240105a4:	2b00      	cmp	r3, #0
240105a6:	d003      	beq.n	240105b0 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
240105a8:	68fb      	ldr	r3, [r7, #12]
240105aa:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
240105ae:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
240105b0:	887b      	ldrh	r3, [r7, #2]
240105b2:	2b10      	cmp	r3, #16
240105b4:	d103      	bne.n	240105be <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
240105b6:	68fb      	ldr	r3, [r7, #12]
240105b8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
240105bc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
240105be:	887b      	ldrh	r3, [r7, #2]
240105c0:	2b20      	cmp	r3, #32
240105c2:	d103      	bne.n	240105cc <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
240105c4:	68fb      	ldr	r3, [r7, #12]
240105c6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
240105ca:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
240105cc:	887b      	ldrh	r3, [r7, #2]
240105ce:	2b40      	cmp	r3, #64	@ 0x40
240105d0:	d103      	bne.n	240105da <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
240105d2:	68fb      	ldr	r3, [r7, #12]
240105d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
240105d8:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
240105da:	687b      	ldr	r3, [r7, #4]
240105dc:	681b      	ldr	r3, [r3, #0]
240105de:	6819      	ldr	r1, [r3, #0]
240105e0:	687b      	ldr	r3, [r7, #4]
240105e2:	681b      	ldr	r3, [r3, #0]
240105e4:	68fa      	ldr	r2, [r7, #12]
240105e6:	430a      	orrs	r2, r1
240105e8:	601a      	str	r2, [r3, #0]
}
240105ea:	bf00      	nop
240105ec:	3714      	adds	r7, #20
240105ee:	46bd      	mov	sp, r7
240105f0:	f85d 7b04 	ldr.w	r7, [sp], #4
240105f4:	4770      	bx	lr
240105f6:	bf00      	nop
240105f8:	2400e5bf 	.word	0x2400e5bf
240105fc:	2400e9e1 	.word	0x2400e9e1
24010600:	2400e795 	.word	0x2400e795

24010604 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
24010604:	b480      	push	{r7}
24010606:	b085      	sub	sp, #20
24010608:	af00      	add	r7, sp, #0
2401060a:	6078      	str	r0, [r7, #4]
2401060c:	460b      	mov	r3, r1
2401060e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
24010610:	2300      	movs	r3, #0
24010612:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
24010614:	887b      	ldrh	r3, [r7, #2]
24010616:	f003 0301 	and.w	r3, r3, #1
2401061a:	2b00      	cmp	r3, #0
2401061c:	d00f      	beq.n	2401063e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
2401061e:	68fb      	ldr	r3, [r7, #12]
24010620:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
24010624:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24010626:	687b      	ldr	r3, [r7, #4]
24010628:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2401062c:	b2db      	uxtb	r3, r3
2401062e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
24010632:	2b28      	cmp	r3, #40	@ 0x28
24010634:	d003      	beq.n	2401063e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
24010636:	68fb      	ldr	r3, [r7, #12]
24010638:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
2401063c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
2401063e:	887b      	ldrh	r3, [r7, #2]
24010640:	f003 0302 	and.w	r3, r3, #2
24010644:	2b00      	cmp	r3, #0
24010646:	d00f      	beq.n	24010668 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
24010648:	68fb      	ldr	r3, [r7, #12]
2401064a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
2401064e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24010650:	687b      	ldr	r3, [r7, #4]
24010652:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
24010656:	b2db      	uxtb	r3, r3
24010658:	f003 0328 	and.w	r3, r3, #40	@ 0x28
2401065c:	2b28      	cmp	r3, #40	@ 0x28
2401065e:	d003      	beq.n	24010668 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
24010660:	68fb      	ldr	r3, [r7, #12]
24010662:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
24010666:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
24010668:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
2401066c:	2b00      	cmp	r3, #0
2401066e:	da03      	bge.n	24010678 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
24010670:	68fb      	ldr	r3, [r7, #12]
24010672:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
24010676:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
24010678:	887b      	ldrh	r3, [r7, #2]
2401067a:	2b10      	cmp	r3, #16
2401067c:	d103      	bne.n	24010686 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
2401067e:	68fb      	ldr	r3, [r7, #12]
24010680:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
24010684:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
24010686:	887b      	ldrh	r3, [r7, #2]
24010688:	2b20      	cmp	r3, #32
2401068a:	d103      	bne.n	24010694 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
2401068c:	68fb      	ldr	r3, [r7, #12]
2401068e:	f043 0320 	orr.w	r3, r3, #32
24010692:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
24010694:	887b      	ldrh	r3, [r7, #2]
24010696:	2b40      	cmp	r3, #64	@ 0x40
24010698:	d103      	bne.n	240106a2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
2401069a:	68fb      	ldr	r3, [r7, #12]
2401069c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
240106a0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
240106a2:	687b      	ldr	r3, [r7, #4]
240106a4:	681b      	ldr	r3, [r3, #0]
240106a6:	6819      	ldr	r1, [r3, #0]
240106a8:	68fb      	ldr	r3, [r7, #12]
240106aa:	43da      	mvns	r2, r3
240106ac:	687b      	ldr	r3, [r7, #4]
240106ae:	681b      	ldr	r3, [r3, #0]
240106b0:	400a      	ands	r2, r1
240106b2:	601a      	str	r2, [r3, #0]
}
240106b4:	bf00      	nop
240106b6:	3714      	adds	r7, #20
240106b8:	46bd      	mov	sp, r7
240106ba:	f85d 7b04 	ldr.w	r7, [sp], #4
240106be:	4770      	bx	lr

240106c0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
240106c0:	b480      	push	{r7}
240106c2:	b083      	sub	sp, #12
240106c4:	af00      	add	r7, sp, #0
240106c6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
240106c8:	687b      	ldr	r3, [r7, #4]
240106ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
240106cc:	2baa      	cmp	r3, #170	@ 0xaa
240106ce:	d103      	bne.n	240106d8 <I2C_ConvertOtherXferOptions+0x18>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
240106d0:	687b      	ldr	r3, [r7, #4]
240106d2:	2200      	movs	r2, #0
240106d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
240106d6:	e008      	b.n	240106ea <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
240106d8:	687b      	ldr	r3, [r7, #4]
240106da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
240106dc:	f5b3 4f2a 	cmp.w	r3, #43520	@ 0xaa00
240106e0:	d103      	bne.n	240106ea <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
240106e2:	687b      	ldr	r3, [r7, #4]
240106e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
240106e8:	62da      	str	r2, [r3, #44]	@ 0x2c
}
240106ea:	bf00      	nop
240106ec:	370c      	adds	r7, #12
240106ee:	46bd      	mov	sp, r7
240106f0:	f85d 7b04 	ldr.w	r7, [sp], #4
240106f4:	4770      	bx	lr

240106f6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
240106f6:	b480      	push	{r7}
240106f8:	b083      	sub	sp, #12
240106fa:	af00      	add	r7, sp, #0
240106fc:	6078      	str	r0, [r7, #4]
240106fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
24010700:	687b      	ldr	r3, [r7, #4]
24010702:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
24010706:	b2db      	uxtb	r3, r3
24010708:	2b20      	cmp	r3, #32
2401070a:	d138      	bne.n	2401077e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2401070c:	687b      	ldr	r3, [r7, #4]
2401070e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
24010712:	2b01      	cmp	r3, #1
24010714:	d101      	bne.n	2401071a <HAL_I2CEx_ConfigAnalogFilter+0x24>
24010716:	2302      	movs	r3, #2
24010718:	e032      	b.n	24010780 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
2401071a:	687b      	ldr	r3, [r7, #4]
2401071c:	2201      	movs	r2, #1
2401071e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
24010722:	687b      	ldr	r3, [r7, #4]
24010724:	2224      	movs	r2, #36	@ 0x24
24010726:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
2401072a:	687b      	ldr	r3, [r7, #4]
2401072c:	681b      	ldr	r3, [r3, #0]
2401072e:	681a      	ldr	r2, [r3, #0]
24010730:	687b      	ldr	r3, [r7, #4]
24010732:	681b      	ldr	r3, [r3, #0]
24010734:	f022 0201 	bic.w	r2, r2, #1
24010738:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
2401073a:	687b      	ldr	r3, [r7, #4]
2401073c:	681b      	ldr	r3, [r3, #0]
2401073e:	681a      	ldr	r2, [r3, #0]
24010740:	687b      	ldr	r3, [r7, #4]
24010742:	681b      	ldr	r3, [r3, #0]
24010744:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
24010748:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
2401074a:	687b      	ldr	r3, [r7, #4]
2401074c:	681b      	ldr	r3, [r3, #0]
2401074e:	6819      	ldr	r1, [r3, #0]
24010750:	687b      	ldr	r3, [r7, #4]
24010752:	681b      	ldr	r3, [r3, #0]
24010754:	683a      	ldr	r2, [r7, #0]
24010756:	430a      	orrs	r2, r1
24010758:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
2401075a:	687b      	ldr	r3, [r7, #4]
2401075c:	681b      	ldr	r3, [r3, #0]
2401075e:	681a      	ldr	r2, [r3, #0]
24010760:	687b      	ldr	r3, [r7, #4]
24010762:	681b      	ldr	r3, [r3, #0]
24010764:	f042 0201 	orr.w	r2, r2, #1
24010768:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
2401076a:	687b      	ldr	r3, [r7, #4]
2401076c:	2220      	movs	r2, #32
2401076e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
24010772:	687b      	ldr	r3, [r7, #4]
24010774:	2200      	movs	r2, #0
24010776:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
2401077a:	2300      	movs	r3, #0
2401077c:	e000      	b.n	24010780 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
2401077e:	2302      	movs	r3, #2
  }
}
24010780:	4618      	mov	r0, r3
24010782:	370c      	adds	r7, #12
24010784:	46bd      	mov	sp, r7
24010786:	f85d 7b04 	ldr.w	r7, [sp], #4
2401078a:	4770      	bx	lr

2401078c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
2401078c:	b480      	push	{r7}
2401078e:	b085      	sub	sp, #20
24010790:	af00      	add	r7, sp, #0
24010792:	6078      	str	r0, [r7, #4]
24010794:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
24010796:	687b      	ldr	r3, [r7, #4]
24010798:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
2401079c:	b2db      	uxtb	r3, r3
2401079e:	2b20      	cmp	r3, #32
240107a0:	d139      	bne.n	24010816 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
240107a2:	687b      	ldr	r3, [r7, #4]
240107a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
240107a8:	2b01      	cmp	r3, #1
240107aa:	d101      	bne.n	240107b0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
240107ac:	2302      	movs	r3, #2
240107ae:	e033      	b.n	24010818 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
240107b0:	687b      	ldr	r3, [r7, #4]
240107b2:	2201      	movs	r2, #1
240107b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
240107b8:	687b      	ldr	r3, [r7, #4]
240107ba:	2224      	movs	r2, #36	@ 0x24
240107bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
240107c0:	687b      	ldr	r3, [r7, #4]
240107c2:	681b      	ldr	r3, [r3, #0]
240107c4:	681a      	ldr	r2, [r3, #0]
240107c6:	687b      	ldr	r3, [r7, #4]
240107c8:	681b      	ldr	r3, [r3, #0]
240107ca:	f022 0201 	bic.w	r2, r2, #1
240107ce:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
240107d0:	687b      	ldr	r3, [r7, #4]
240107d2:	681b      	ldr	r3, [r3, #0]
240107d4:	681b      	ldr	r3, [r3, #0]
240107d6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
240107d8:	68fb      	ldr	r3, [r7, #12]
240107da:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
240107de:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
240107e0:	683b      	ldr	r3, [r7, #0]
240107e2:	021b      	lsls	r3, r3, #8
240107e4:	68fa      	ldr	r2, [r7, #12]
240107e6:	4313      	orrs	r3, r2
240107e8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
240107ea:	687b      	ldr	r3, [r7, #4]
240107ec:	681b      	ldr	r3, [r3, #0]
240107ee:	68fa      	ldr	r2, [r7, #12]
240107f0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
240107f2:	687b      	ldr	r3, [r7, #4]
240107f4:	681b      	ldr	r3, [r3, #0]
240107f6:	681a      	ldr	r2, [r3, #0]
240107f8:	687b      	ldr	r3, [r7, #4]
240107fa:	681b      	ldr	r3, [r3, #0]
240107fc:	f042 0201 	orr.w	r2, r2, #1
24010800:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
24010802:	687b      	ldr	r3, [r7, #4]
24010804:	2220      	movs	r2, #32
24010806:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2401080a:	687b      	ldr	r3, [r7, #4]
2401080c:	2200      	movs	r2, #0
2401080e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
24010812:	2300      	movs	r3, #0
24010814:	e000      	b.n	24010818 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
24010816:	2302      	movs	r3, #2
  }
}
24010818:	4618      	mov	r0, r3
2401081a:	3714      	adds	r7, #20
2401081c:	46bd      	mov	sp, r7
2401081e:	f85d 7b04 	ldr.w	r7, [sp], #4
24010822:	4770      	bx	lr

24010824 <HAL_I2CEx_EnableWakeUp>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2Cx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_EnableWakeUp(I2C_HandleTypeDef *hi2c)
{
24010824:	b480      	push	{r7}
24010826:	b083      	sub	sp, #12
24010828:	af00      	add	r7, sp, #0
2401082a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_WAKEUP_FROMSTOP_INSTANCE(hi2c->Instance));

  if (hi2c->State == HAL_I2C_STATE_READY)
2401082c:	687b      	ldr	r3, [r7, #4]
2401082e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
24010832:	b2db      	uxtb	r3, r3
24010834:	2b20      	cmp	r3, #32
24010836:	d130      	bne.n	2401089a <HAL_I2CEx_EnableWakeUp+0x76>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
24010838:	687b      	ldr	r3, [r7, #4]
2401083a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
2401083e:	2b01      	cmp	r3, #1
24010840:	d101      	bne.n	24010846 <HAL_I2CEx_EnableWakeUp+0x22>
24010842:	2302      	movs	r3, #2
24010844:	e02a      	b.n	2401089c <HAL_I2CEx_EnableWakeUp+0x78>
24010846:	687b      	ldr	r3, [r7, #4]
24010848:	2201      	movs	r2, #1
2401084a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
2401084e:	687b      	ldr	r3, [r7, #4]
24010850:	2224      	movs	r2, #36	@ 0x24
24010852:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
24010856:	687b      	ldr	r3, [r7, #4]
24010858:	681b      	ldr	r3, [r3, #0]
2401085a:	681a      	ldr	r2, [r3, #0]
2401085c:	687b      	ldr	r3, [r7, #4]
2401085e:	681b      	ldr	r3, [r3, #0]
24010860:	f022 0201 	bic.w	r2, r2, #1
24010864:	601a      	str	r2, [r3, #0]

    /* Enable wakeup from stop mode */
    hi2c->Instance->CR1 |= I2C_CR1_WUPEN;
24010866:	687b      	ldr	r3, [r7, #4]
24010868:	681b      	ldr	r3, [r3, #0]
2401086a:	681a      	ldr	r2, [r3, #0]
2401086c:	687b      	ldr	r3, [r7, #4]
2401086e:	681b      	ldr	r3, [r3, #0]
24010870:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
24010874:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
24010876:	687b      	ldr	r3, [r7, #4]
24010878:	681b      	ldr	r3, [r3, #0]
2401087a:	681a      	ldr	r2, [r3, #0]
2401087c:	687b      	ldr	r3, [r7, #4]
2401087e:	681b      	ldr	r3, [r3, #0]
24010880:	f042 0201 	orr.w	r2, r2, #1
24010884:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
24010886:	687b      	ldr	r3, [r7, #4]
24010888:	2220      	movs	r2, #32
2401088a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
2401088e:	687b      	ldr	r3, [r7, #4]
24010890:	2200      	movs	r2, #0
24010892:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
24010896:	2300      	movs	r3, #0
24010898:	e000      	b.n	2401089c <HAL_I2CEx_EnableWakeUp+0x78>
  }
  else
  {
    return HAL_BUSY;
2401089a:	2302      	movs	r3, #2
  }
}
2401089c:	4618      	mov	r0, r3
2401089e:	370c      	adds	r7, #12
240108a0:	46bd      	mov	sp, r7
240108a2:	f85d 7b04 	ldr.w	r7, [sp], #4
240108a6:	4770      	bx	lr

240108a8 <HAL_I2CEx_DisableWakeUp>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2Cx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_DisableWakeUp(I2C_HandleTypeDef *hi2c)
{
240108a8:	b480      	push	{r7}
240108aa:	b083      	sub	sp, #12
240108ac:	af00      	add	r7, sp, #0
240108ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_WAKEUP_FROMSTOP_INSTANCE(hi2c->Instance));

  if (hi2c->State == HAL_I2C_STATE_READY)
240108b0:	687b      	ldr	r3, [r7, #4]
240108b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
240108b6:	b2db      	uxtb	r3, r3
240108b8:	2b20      	cmp	r3, #32
240108ba:	d130      	bne.n	2401091e <HAL_I2CEx_DisableWakeUp+0x76>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
240108bc:	687b      	ldr	r3, [r7, #4]
240108be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
240108c2:	2b01      	cmp	r3, #1
240108c4:	d101      	bne.n	240108ca <HAL_I2CEx_DisableWakeUp+0x22>
240108c6:	2302      	movs	r3, #2
240108c8:	e02a      	b.n	24010920 <HAL_I2CEx_DisableWakeUp+0x78>
240108ca:	687b      	ldr	r3, [r7, #4]
240108cc:	2201      	movs	r2, #1
240108ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
240108d2:	687b      	ldr	r3, [r7, #4]
240108d4:	2224      	movs	r2, #36	@ 0x24
240108d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
240108da:	687b      	ldr	r3, [r7, #4]
240108dc:	681b      	ldr	r3, [r3, #0]
240108de:	681a      	ldr	r2, [r3, #0]
240108e0:	687b      	ldr	r3, [r7, #4]
240108e2:	681b      	ldr	r3, [r3, #0]
240108e4:	f022 0201 	bic.w	r2, r2, #1
240108e8:	601a      	str	r2, [r3, #0]

    /* Enable wakeup from stop mode */
    hi2c->Instance->CR1 &= ~(I2C_CR1_WUPEN);
240108ea:	687b      	ldr	r3, [r7, #4]
240108ec:	681b      	ldr	r3, [r3, #0]
240108ee:	681a      	ldr	r2, [r3, #0]
240108f0:	687b      	ldr	r3, [r7, #4]
240108f2:	681b      	ldr	r3, [r3, #0]
240108f4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
240108f8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
240108fa:	687b      	ldr	r3, [r7, #4]
240108fc:	681b      	ldr	r3, [r3, #0]
240108fe:	681a      	ldr	r2, [r3, #0]
24010900:	687b      	ldr	r3, [r7, #4]
24010902:	681b      	ldr	r3, [r3, #0]
24010904:	f042 0201 	orr.w	r2, r2, #1
24010908:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
2401090a:	687b      	ldr	r3, [r7, #4]
2401090c:	2220      	movs	r2, #32
2401090e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
24010912:	687b      	ldr	r3, [r7, #4]
24010914:	2200      	movs	r2, #0
24010916:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
2401091a:	2300      	movs	r3, #0
2401091c:	e000      	b.n	24010920 <HAL_I2CEx_DisableWakeUp+0x78>
  }
  else
  {
    return HAL_BUSY;
2401091e:	2302      	movs	r3, #2
  }
}
24010920:	4618      	mov	r0, r3
24010922:	370c      	adds	r7, #12
24010924:	46bd      	mov	sp, r7
24010926:	f85d 7b04 	ldr.w	r7, [sp], #4
2401092a:	4770      	bx	lr

2401092c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
2401092c:	b480      	push	{r7}
2401092e:	b085      	sub	sp, #20
24010930:	af00      	add	r7, sp, #0
24010932:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
24010934:	4b0d      	ldr	r3, [pc, #52]	@ (2401096c <HAL_I2CEx_EnableFastModePlus+0x40>)
24010936:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
2401093a:	4a0c      	ldr	r2, [pc, #48]	@ (2401096c <HAL_I2CEx_EnableFastModePlus+0x40>)
2401093c:	f043 0302 	orr.w	r3, r3, #2
24010940:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
24010944:	4b09      	ldr	r3, [pc, #36]	@ (2401096c <HAL_I2CEx_EnableFastModePlus+0x40>)
24010946:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
2401094a:	f003 0302 	and.w	r3, r3, #2
2401094e:	60fb      	str	r3, [r7, #12]
24010950:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
24010952:	4b07      	ldr	r3, [pc, #28]	@ (24010970 <HAL_I2CEx_EnableFastModePlus+0x44>)
24010954:	685a      	ldr	r2, [r3, #4]
24010956:	4906      	ldr	r1, [pc, #24]	@ (24010970 <HAL_I2CEx_EnableFastModePlus+0x44>)
24010958:	687b      	ldr	r3, [r7, #4]
2401095a:	4313      	orrs	r3, r2
2401095c:	604b      	str	r3, [r1, #4]
}
2401095e:	bf00      	nop
24010960:	3714      	adds	r7, #20
24010962:	46bd      	mov	sp, r7
24010964:	f85d 7b04 	ldr.w	r7, [sp], #4
24010968:	4770      	bx	lr
2401096a:	bf00      	nop
2401096c:	58024400 	.word	0x58024400
24010970:	58000400 	.word	0x58000400

24010974 <HAL_I2CEx_DisableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be disabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_DisableFastModePlus(uint32_t ConfigFastModePlus)
{
24010974:	b480      	push	{r7}
24010976:	b085      	sub	sp, #20
24010978:	af00      	add	r7, sp, #0
2401097a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
2401097c:	4b0d      	ldr	r3, [pc, #52]	@ (240109b4 <HAL_I2CEx_DisableFastModePlus+0x40>)
2401097e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
24010982:	4a0c      	ldr	r2, [pc, #48]	@ (240109b4 <HAL_I2CEx_DisableFastModePlus+0x40>)
24010984:	f043 0302 	orr.w	r3, r3, #2
24010988:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
2401098c:	4b09      	ldr	r3, [pc, #36]	@ (240109b4 <HAL_I2CEx_DisableFastModePlus+0x40>)
2401098e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
24010992:	f003 0302 	and.w	r3, r3, #2
24010996:	60fb      	str	r3, [r7, #12]
24010998:	68fb      	ldr	r3, [r7, #12]

  /* Disable fast mode plus driving capability for selected pin */
  CLEAR_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
2401099a:	4b07      	ldr	r3, [pc, #28]	@ (240109b8 <HAL_I2CEx_DisableFastModePlus+0x44>)
2401099c:	685a      	ldr	r2, [r3, #4]
2401099e:	687b      	ldr	r3, [r7, #4]
240109a0:	43db      	mvns	r3, r3
240109a2:	4905      	ldr	r1, [pc, #20]	@ (240109b8 <HAL_I2CEx_DisableFastModePlus+0x44>)
240109a4:	4013      	ands	r3, r2
240109a6:	604b      	str	r3, [r1, #4]
}
240109a8:	bf00      	nop
240109aa:	3714      	adds	r7, #20
240109ac:	46bd      	mov	sp, r7
240109ae:	f85d 7b04 	ldr.w	r7, [sp], #4
240109b2:	4770      	bx	lr
240109b4:	58024400 	.word	0x58024400
240109b8:	58000400 	.word	0x58000400

240109bc <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
240109bc:	b580      	push	{r7, lr}
240109be:	b084      	sub	sp, #16
240109c0:	af00      	add	r7, sp, #0
240109c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
240109c4:	f7f2 f994 	bl	24002cf0 <HAL_GetTick>
240109c8:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
240109ca:	687b      	ldr	r3, [r7, #4]
240109cc:	2b00      	cmp	r3, #0
240109ce:	d101      	bne.n	240109d4 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
240109d0:	2301      	movs	r3, #1
240109d2:	e03b      	b.n	24010a4c <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
240109d4:	687b      	ldr	r3, [r7, #4]
240109d6:	2200      	movs	r2, #0
240109d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
240109dc:	687b      	ldr	r3, [r7, #4]
240109de:	2202      	movs	r2, #2
240109e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
240109e4:	687b      	ldr	r3, [r7, #4]
240109e6:	681b      	ldr	r3, [r3, #0]
240109e8:	68da      	ldr	r2, [r3, #12]
240109ea:	687b      	ldr	r3, [r7, #4]
240109ec:	681b      	ldr	r3, [r3, #0]
240109ee:	f022 0201 	bic.w	r2, r2, #1
240109f2:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
240109f4:	e00f      	b.n	24010a16 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
240109f6:	f7f2 f97b 	bl	24002cf0 <HAL_GetTick>
240109fa:	4602      	mov	r2, r0
240109fc:	68fb      	ldr	r3, [r7, #12]
240109fe:	1ad3      	subs	r3, r2, r3
24010a00:	2b05      	cmp	r3, #5
24010a02:	d908      	bls.n	24010a16 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
24010a04:	687b      	ldr	r3, [r7, #4]
24010a06:	2240      	movs	r2, #64	@ 0x40
24010a08:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
24010a0a:	687b      	ldr	r3, [r7, #4]
24010a0c:	2203      	movs	r2, #3
24010a0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
24010a12:	2301      	movs	r3, #1
24010a14:	e01a      	b.n	24010a4c <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
24010a16:	687b      	ldr	r3, [r7, #4]
24010a18:	681b      	ldr	r3, [r3, #0]
24010a1a:	68db      	ldr	r3, [r3, #12]
24010a1c:	f003 0301 	and.w	r3, r3, #1
24010a20:	2b00      	cmp	r3, #0
24010a22:	d1e8      	bne.n	240109f6 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
24010a24:	6878      	ldr	r0, [r7, #4]
24010a26:	f001 f899 	bl	24011b5c <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
24010a2a:	687b      	ldr	r3, [r7, #4]
24010a2c:	2200      	movs	r2, #0
24010a2e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
24010a30:	687b      	ldr	r3, [r7, #4]
24010a32:	2200      	movs	r2, #0
24010a34:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
24010a36:	687b      	ldr	r3, [r7, #4]
24010a38:	2200      	movs	r2, #0
24010a3a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
24010a3c:	687b      	ldr	r3, [r7, #4]
24010a3e:	2200      	movs	r2, #0
24010a40:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
24010a42:	687b      	ldr	r3, [r7, #4]
24010a44:	2201      	movs	r2, #1
24010a46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
24010a4a:	2300      	movs	r3, #0
}
24010a4c:	4618      	mov	r0, r3
24010a4e:	3710      	adds	r7, #16
24010a50:	46bd      	mov	sp, r7
24010a52:	bd80      	pop	{r7, pc}

24010a54 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
24010a54:	b480      	push	{r7}
24010a56:	b083      	sub	sp, #12
24010a58:	af00      	add	r7, sp, #0
24010a5a:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
24010a5c:	687b      	ldr	r3, [r7, #4]
24010a5e:	2b00      	cmp	r3, #0
24010a60:	d101      	bne.n	24010a66 <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
24010a62:	2301      	movs	r3, #1
24010a64:	e048      	b.n	24010af8 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
24010a66:	687b      	ldr	r3, [r7, #4]
24010a68:	681b      	ldr	r3, [r3, #0]
24010a6a:	68da      	ldr	r2, [r3, #12]
24010a6c:	687b      	ldr	r3, [r7, #4]
24010a6e:	681b      	ldr	r3, [r3, #0]
24010a70:	f022 0201 	bic.w	r2, r2, #1
24010a74:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
24010a76:	687b      	ldr	r3, [r7, #4]
24010a78:	681b      	ldr	r3, [r3, #0]
24010a7a:	2200      	movs	r2, #0
24010a7c:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
24010a7e:	687b      	ldr	r3, [r7, #4]
24010a80:	681b      	ldr	r3, [r3, #0]
24010a82:	2200      	movs	r2, #0
24010a84:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
24010a86:	687b      	ldr	r3, [r7, #4]
24010a88:	681b      	ldr	r3, [r3, #0]
24010a8a:	2200      	movs	r2, #0
24010a8c:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
24010a8e:	687b      	ldr	r3, [r7, #4]
24010a90:	681b      	ldr	r3, [r3, #0]
24010a92:	2200      	movs	r2, #0
24010a94:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
24010a96:	687b      	ldr	r3, [r7, #4]
24010a98:	681b      	ldr	r3, [r3, #0]
24010a9a:	2200      	movs	r2, #0
24010a9c:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
24010a9e:	687b      	ldr	r3, [r7, #4]
24010aa0:	681b      	ldr	r3, [r3, #0]
24010aa2:	2200      	movs	r2, #0
24010aa4:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
24010aa6:	687b      	ldr	r3, [r7, #4]
24010aa8:	681b      	ldr	r3, [r3, #0]
24010aaa:	2200      	movs	r2, #0
24010aac:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
24010aae:	687b      	ldr	r3, [r7, #4]
24010ab0:	681b      	ldr	r3, [r3, #0]
24010ab2:	2200      	movs	r2, #0
24010ab4:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
24010ab6:	687b      	ldr	r3, [r7, #4]
24010ab8:	681b      	ldr	r3, [r3, #0]
24010aba:	2200      	movs	r2, #0
24010abc:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
24010abe:	687b      	ldr	r3, [r7, #4]
24010ac0:	681b      	ldr	r3, [r3, #0]
24010ac2:	2200      	movs	r2, #0
24010ac4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
24010ac6:	687b      	ldr	r3, [r7, #4]
24010ac8:	681b      	ldr	r3, [r3, #0]
24010aca:	221f      	movs	r2, #31
24010acc:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
24010ace:	687b      	ldr	r3, [r7, #4]
24010ad0:	2200      	movs	r2, #0
24010ad2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
24010ad4:	687b      	ldr	r3, [r7, #4]
24010ad6:	2200      	movs	r2, #0
24010ad8:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
24010ada:	687b      	ldr	r3, [r7, #4]
24010adc:	2200      	movs	r2, #0
24010ade:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
24010ae0:	687b      	ldr	r3, [r7, #4]
24010ae2:	2200      	movs	r2, #0
24010ae4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
24010ae6:	687b      	ldr	r3, [r7, #4]
24010ae8:	2200      	movs	r2, #0
24010aea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
24010aee:	687b      	ldr	r3, [r7, #4]
24010af0:	2200      	movs	r2, #0
24010af2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
24010af6:	2300      	movs	r3, #0
}
24010af8:	4618      	mov	r0, r3
24010afa:	370c      	adds	r7, #12
24010afc:	46bd      	mov	sp, r7
24010afe:	f85d 7b04 	ldr.w	r7, [sp], #4
24010b02:	4770      	bx	lr

24010b04 <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
24010b04:	b480      	push	{r7}
24010b06:	b087      	sub	sp, #28
24010b08:	af00      	add	r7, sp, #0
24010b0a:	60f8      	str	r0, [r7, #12]
24010b0c:	60b9      	str	r1, [r7, #8]
24010b0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
24010b10:	2300      	movs	r3, #0
24010b12:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
24010b14:	68fb      	ldr	r3, [r7, #12]
24010b16:	2b00      	cmp	r3, #0
24010b18:	d101      	bne.n	24010b1e <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
24010b1a:	2301      	movs	r3, #1
24010b1c:	e03e      	b.n	24010b9c <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
24010b1e:	68fb      	ldr	r3, [r7, #12]
24010b20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
24010b24:	2b01      	cmp	r3, #1
24010b26:	d101      	bne.n	24010b2c <HAL_MDMA_ConfigPostRequestMask+0x28>
24010b28:	2302      	movs	r3, #2
24010b2a:	e037      	b.n	24010b9c <HAL_MDMA_ConfigPostRequestMask+0x98>
24010b2c:	68fb      	ldr	r3, [r7, #12]
24010b2e:	2201      	movs	r2, #1
24010b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
24010b34:	68fb      	ldr	r3, [r7, #12]
24010b36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
24010b3a:	b2db      	uxtb	r3, r3
24010b3c:	2b01      	cmp	r3, #1
24010b3e:	d126      	bne.n	24010b8e <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
24010b40:	68fb      	ldr	r3, [r7, #12]
24010b42:	681b      	ldr	r3, [r3, #0]
24010b44:	691b      	ldr	r3, [r3, #16]
24010b46:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
24010b4a:	2b00      	cmp	r3, #0
24010b4c:	d11c      	bne.n	24010b88 <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
24010b4e:	68fb      	ldr	r3, [r7, #12]
24010b50:	681b      	ldr	r3, [r3, #0]
24010b52:	68ba      	ldr	r2, [r7, #8]
24010b54:	631a      	str	r2, [r3, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
24010b56:	68fb      	ldr	r3, [r7, #12]
24010b58:	681b      	ldr	r3, [r3, #0]
24010b5a:	687a      	ldr	r2, [r7, #4]
24010b5c:	635a      	str	r2, [r3, #52]	@ 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
24010b5e:	68bb      	ldr	r3, [r7, #8]
24010b60:	2b00      	cmp	r3, #0
24010b62:	d108      	bne.n	24010b76 <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
24010b64:	68fb      	ldr	r3, [r7, #12]
24010b66:	681b      	ldr	r3, [r3, #0]
24010b68:	691a      	ldr	r2, [r3, #16]
24010b6a:	68fb      	ldr	r3, [r7, #12]
24010b6c:	681b      	ldr	r3, [r3, #0]
24010b6e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
24010b72:	611a      	str	r2, [r3, #16]
24010b74:	e00d      	b.n	24010b92 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
24010b76:	68fb      	ldr	r3, [r7, #12]
24010b78:	681b      	ldr	r3, [r3, #0]
24010b7a:	691a      	ldr	r2, [r3, #16]
24010b7c:	68fb      	ldr	r3, [r7, #12]
24010b7e:	681b      	ldr	r3, [r3, #0]
24010b80:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
24010b84:	611a      	str	r2, [r3, #16]
24010b86:	e004      	b.n	24010b92 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
24010b88:	2301      	movs	r3, #1
24010b8a:	75fb      	strb	r3, [r7, #23]
24010b8c:	e001      	b.n	24010b92 <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
24010b8e:	2301      	movs	r3, #1
24010b90:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
24010b92:	68fb      	ldr	r3, [r7, #12]
24010b94:	2200      	movs	r2, #0
24010b96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
24010b9a:	7dfb      	ldrb	r3, [r7, #23]
}
24010b9c:	4618      	mov	r0, r3
24010b9e:	371c      	adds	r7, #28
24010ba0:	46bd      	mov	sp, r7
24010ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
24010ba6:	4770      	bx	lr

24010ba8 <HAL_MDMA_RegisterCallback>:
  * @param  CallbackID:           User Callback identifier
  * @param  pCallback:            pointer to callbacsk function.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_RegisterCallback(MDMA_HandleTypeDef *hmdma, HAL_MDMA_CallbackIDTypeDef CallbackID, void (* pCallback)(MDMA_HandleTypeDef *_hmdma))
{
24010ba8:	b480      	push	{r7}
24010baa:	b087      	sub	sp, #28
24010bac:	af00      	add	r7, sp, #0
24010bae:	60f8      	str	r0, [r7, #12]
24010bb0:	460b      	mov	r3, r1
24010bb2:	607a      	str	r2, [r7, #4]
24010bb4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
24010bb6:	2300      	movs	r3, #0
24010bb8:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
24010bba:	68fb      	ldr	r3, [r7, #12]
24010bbc:	2b00      	cmp	r3, #0
24010bbe:	d101      	bne.n	24010bc4 <HAL_MDMA_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
24010bc0:	2301      	movs	r3, #1
24010bc2:	e044      	b.n	24010c4e <HAL_MDMA_RegisterCallback+0xa6>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
24010bc4:	68fb      	ldr	r3, [r7, #12]
24010bc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
24010bca:	2b01      	cmp	r3, #1
24010bcc:	d101      	bne.n	24010bd2 <HAL_MDMA_RegisterCallback+0x2a>
24010bce:	2302      	movs	r3, #2
24010bd0:	e03d      	b.n	24010c4e <HAL_MDMA_RegisterCallback+0xa6>
24010bd2:	68fb      	ldr	r3, [r7, #12]
24010bd4:	2201      	movs	r2, #1
24010bd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
24010bda:	68fb      	ldr	r3, [r7, #12]
24010bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
24010be0:	b2db      	uxtb	r3, r3
24010be2:	2b01      	cmp	r3, #1
24010be4:	d12a      	bne.n	24010c3c <HAL_MDMA_RegisterCallback+0x94>
  {
    switch (CallbackID)
24010be6:	7afb      	ldrb	r3, [r7, #11]
24010be8:	2b05      	cmp	r3, #5
24010bea:	d82a      	bhi.n	24010c42 <HAL_MDMA_RegisterCallback+0x9a>
24010bec:	a201      	add	r2, pc, #4	@ (adr r2, 24010bf4 <HAL_MDMA_RegisterCallback+0x4c>)
24010bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24010bf2:	bf00      	nop
24010bf4:	24010c0d 	.word	0x24010c0d
24010bf8:	24010c15 	.word	0x24010c15
24010bfc:	24010c1d 	.word	0x24010c1d
24010c00:	24010c25 	.word	0x24010c25
24010c04:	24010c2d 	.word	0x24010c2d
24010c08:	24010c35 	.word	0x24010c35
    {
    case  HAL_MDMA_XFER_CPLT_CB_ID:
      hmdma->XferCpltCallback = pCallback;
24010c0c:	68fb      	ldr	r3, [r7, #12]
24010c0e:	687a      	ldr	r2, [r7, #4]
24010c10:	645a      	str	r2, [r3, #68]	@ 0x44
      break;
24010c12:	e017      	b.n	24010c44 <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_BUFFERCPLT_CB_ID:
      hmdma->XferBufferCpltCallback = pCallback;
24010c14:	68fb      	ldr	r3, [r7, #12]
24010c16:	687a      	ldr	r2, [r7, #4]
24010c18:	649a      	str	r2, [r3, #72]	@ 0x48
      break;
24010c1a:	e013      	b.n	24010c44 <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_BLOCKCPLT_CB_ID:
      hmdma->XferBlockCpltCallback = pCallback;
24010c1c:	68fb      	ldr	r3, [r7, #12]
24010c1e:	687a      	ldr	r2, [r7, #4]
24010c20:	64da      	str	r2, [r3, #76]	@ 0x4c
      break;
24010c22:	e00f      	b.n	24010c44 <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_REPBLOCKCPLT_CB_ID:
      hmdma->XferRepeatBlockCpltCallback = pCallback;
24010c24:	68fb      	ldr	r3, [r7, #12]
24010c26:	687a      	ldr	r2, [r7, #4]
24010c28:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
24010c2a:	e00b      	b.n	24010c44 <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_ERROR_CB_ID:
      hmdma->XferErrorCallback = pCallback;
24010c2c:	68fb      	ldr	r3, [r7, #12]
24010c2e:	687a      	ldr	r2, [r7, #4]
24010c30:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
24010c32:	e007      	b.n	24010c44 <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_ABORT_CB_ID:
      hmdma->XferAbortCallback = pCallback;
24010c34:	68fb      	ldr	r3, [r7, #12]
24010c36:	687a      	ldr	r2, [r7, #4]
24010c38:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
24010c3a:	e003      	b.n	24010c44 <HAL_MDMA_RegisterCallback+0x9c>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
24010c3c:	2301      	movs	r3, #1
24010c3e:	75fb      	strb	r3, [r7, #23]
24010c40:	e000      	b.n	24010c44 <HAL_MDMA_RegisterCallback+0x9c>
      break;
24010c42:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
24010c44:	68fb      	ldr	r3, [r7, #12]
24010c46:	2200      	movs	r2, #0
24010c48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
24010c4c:	7dfb      	ldrb	r3, [r7, #23]
}
24010c4e:	4618      	mov	r0, r3
24010c50:	371c      	adds	r7, #28
24010c52:	46bd      	mov	sp, r7
24010c54:	f85d 7b04 	ldr.w	r7, [sp], #4
24010c58:	4770      	bx	lr
24010c5a:	bf00      	nop

24010c5c <HAL_MDMA_UnRegisterCallback>:
  * @param  CallbackID:           User Callback identifier
  *                               a HAL_MDMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_UnRegisterCallback(MDMA_HandleTypeDef *hmdma, HAL_MDMA_CallbackIDTypeDef CallbackID)
{
24010c5c:	b480      	push	{r7}
24010c5e:	b085      	sub	sp, #20
24010c60:	af00      	add	r7, sp, #0
24010c62:	6078      	str	r0, [r7, #4]
24010c64:	460b      	mov	r3, r1
24010c66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
24010c68:	2300      	movs	r3, #0
24010c6a:	73fb      	strb	r3, [r7, #15]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
24010c6c:	687b      	ldr	r3, [r7, #4]
24010c6e:	2b00      	cmp	r3, #0
24010c70:	d101      	bne.n	24010c76 <HAL_MDMA_UnRegisterCallback+0x1a>
  {
    return HAL_ERROR;
24010c72:	2301      	movs	r3, #1
24010c74:	e059      	b.n	24010d2a <HAL_MDMA_UnRegisterCallback+0xce>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
24010c76:	687b      	ldr	r3, [r7, #4]
24010c78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
24010c7c:	2b01      	cmp	r3, #1
24010c7e:	d101      	bne.n	24010c84 <HAL_MDMA_UnRegisterCallback+0x28>
24010c80:	2302      	movs	r3, #2
24010c82:	e052      	b.n	24010d2a <HAL_MDMA_UnRegisterCallback+0xce>
24010c84:	687b      	ldr	r3, [r7, #4]
24010c86:	2201      	movs	r2, #1
24010c88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
24010c8c:	687b      	ldr	r3, [r7, #4]
24010c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
24010c92:	b2db      	uxtb	r3, r3
24010c94:	2b01      	cmp	r3, #1
24010c96:	d141      	bne.n	24010d1c <HAL_MDMA_UnRegisterCallback+0xc0>
  {
    switch (CallbackID)
24010c98:	78fb      	ldrb	r3, [r7, #3]
24010c9a:	2b06      	cmp	r3, #6
24010c9c:	d83b      	bhi.n	24010d16 <HAL_MDMA_UnRegisterCallback+0xba>
24010c9e:	a201      	add	r2, pc, #4	@ (adr r2, 24010ca4 <HAL_MDMA_UnRegisterCallback+0x48>)
24010ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24010ca4:	24010cc1 	.word	0x24010cc1
24010ca8:	24010cc9 	.word	0x24010cc9
24010cac:	24010cd1 	.word	0x24010cd1
24010cb0:	24010cd9 	.word	0x24010cd9
24010cb4:	24010ce1 	.word	0x24010ce1
24010cb8:	24010ce9 	.word	0x24010ce9
24010cbc:	24010cf1 	.word	0x24010cf1
    {
    case  HAL_MDMA_XFER_CPLT_CB_ID:
      hmdma->XferCpltCallback = NULL;
24010cc0:	687b      	ldr	r3, [r7, #4]
24010cc2:	2200      	movs	r2, #0
24010cc4:	645a      	str	r2, [r3, #68]	@ 0x44
      break;
24010cc6:	e02b      	b.n	24010d20 <HAL_MDMA_UnRegisterCallback+0xc4>

    case  HAL_MDMA_XFER_BUFFERCPLT_CB_ID:
      hmdma->XferBufferCpltCallback = NULL;
24010cc8:	687b      	ldr	r3, [r7, #4]
24010cca:	2200      	movs	r2, #0
24010ccc:	649a      	str	r2, [r3, #72]	@ 0x48
      break;
24010cce:	e027      	b.n	24010d20 <HAL_MDMA_UnRegisterCallback+0xc4>

    case  HAL_MDMA_XFER_BLOCKCPLT_CB_ID:
      hmdma->XferBlockCpltCallback = NULL;
24010cd0:	687b      	ldr	r3, [r7, #4]
24010cd2:	2200      	movs	r2, #0
24010cd4:	64da      	str	r2, [r3, #76]	@ 0x4c
      break;
24010cd6:	e023      	b.n	24010d20 <HAL_MDMA_UnRegisterCallback+0xc4>

    case  HAL_MDMA_XFER_REPBLOCKCPLT_CB_ID:
      hmdma->XferRepeatBlockCpltCallback = NULL;
24010cd8:	687b      	ldr	r3, [r7, #4]
24010cda:	2200      	movs	r2, #0
24010cdc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
24010cde:	e01f      	b.n	24010d20 <HAL_MDMA_UnRegisterCallback+0xc4>

    case  HAL_MDMA_XFER_ERROR_CB_ID:
      hmdma->XferErrorCallback = NULL;
24010ce0:	687b      	ldr	r3, [r7, #4]
24010ce2:	2200      	movs	r2, #0
24010ce4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
24010ce6:	e01b      	b.n	24010d20 <HAL_MDMA_UnRegisterCallback+0xc4>

    case  HAL_MDMA_XFER_ABORT_CB_ID:
      hmdma->XferAbortCallback = NULL;
24010ce8:	687b      	ldr	r3, [r7, #4]
24010cea:	2200      	movs	r2, #0
24010cec:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
24010cee:	e017      	b.n	24010d20 <HAL_MDMA_UnRegisterCallback+0xc4>

    case   HAL_MDMA_XFER_ALL_CB_ID:
      hmdma->XferCpltCallback = NULL;
24010cf0:	687b      	ldr	r3, [r7, #4]
24010cf2:	2200      	movs	r2, #0
24010cf4:	645a      	str	r2, [r3, #68]	@ 0x44
      hmdma->XferBufferCpltCallback = NULL;
24010cf6:	687b      	ldr	r3, [r7, #4]
24010cf8:	2200      	movs	r2, #0
24010cfa:	649a      	str	r2, [r3, #72]	@ 0x48
      hmdma->XferBlockCpltCallback = NULL;
24010cfc:	687b      	ldr	r3, [r7, #4]
24010cfe:	2200      	movs	r2, #0
24010d00:	64da      	str	r2, [r3, #76]	@ 0x4c
      hmdma->XferRepeatBlockCpltCallback = NULL;
24010d02:	687b      	ldr	r3, [r7, #4]
24010d04:	2200      	movs	r2, #0
24010d06:	651a      	str	r2, [r3, #80]	@ 0x50
      hmdma->XferErrorCallback = NULL;
24010d08:	687b      	ldr	r3, [r7, #4]
24010d0a:	2200      	movs	r2, #0
24010d0c:	655a      	str	r2, [r3, #84]	@ 0x54
      hmdma->XferAbortCallback = NULL;
24010d0e:	687b      	ldr	r3, [r7, #4]
24010d10:	2200      	movs	r2, #0
24010d12:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
24010d14:	e004      	b.n	24010d20 <HAL_MDMA_UnRegisterCallback+0xc4>

    default:
      status = HAL_ERROR;
24010d16:	2301      	movs	r3, #1
24010d18:	73fb      	strb	r3, [r7, #15]
      break;
24010d1a:	e001      	b.n	24010d20 <HAL_MDMA_UnRegisterCallback+0xc4>
    }
  }
  else
  {
    status = HAL_ERROR;
24010d1c:	2301      	movs	r3, #1
24010d1e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
24010d20:	687b      	ldr	r3, [r7, #4]
24010d22:	2200      	movs	r2, #0
24010d24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
24010d28:	7bfb      	ldrb	r3, [r7, #15]
}
24010d2a:	4618      	mov	r0, r3
24010d2c:	3714      	adds	r7, #20
24010d2e:	46bd      	mov	sp, r7
24010d30:	f85d 7b04 	ldr.w	r7, [sp], #4
24010d34:	4770      	bx	lr
24010d36:	bf00      	nop

24010d38 <HAL_MDMA_LinkedList_CreateNode>:
  * @param  pNodeConfig: Pointer to a MDMA_LinkNodeConfTypeDef structure that contains
  *               the configuration information for the specified MDMA Linked List Node.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_LinkedList_CreateNode(MDMA_LinkNodeTypeDef *pNode, MDMA_LinkNodeConfTypeDef *pNodeConfig)
{
24010d38:	b480      	push	{r7}
24010d3a:	b085      	sub	sp, #20
24010d3c:	af00      	add	r7, sp, #0
24010d3e:	6078      	str	r0, [r7, #4]
24010d40:	6039      	str	r1, [r7, #0]
  uint32_t addressMask;
  uint32_t blockoffset;

  /* Check the MDMA peripheral state */
  if((pNode == NULL) || (pNodeConfig == NULL))
24010d42:	687b      	ldr	r3, [r7, #4]
24010d44:	2b00      	cmp	r3, #0
24010d46:	d002      	beq.n	24010d4e <HAL_MDMA_LinkedList_CreateNode+0x16>
24010d48:	683b      	ldr	r3, [r7, #0]
24010d4a:	2b00      	cmp	r3, #0
24010d4c:	d101      	bne.n	24010d52 <HAL_MDMA_LinkedList_CreateNode+0x1a>
  {
    return HAL_ERROR;
24010d4e:	2301      	movs	r3, #1
24010d50:	e0c8      	b.n	24010ee4 <HAL_MDMA_LinkedList_CreateNode+0x1ac>
  assert_param(IS_MDMA_TRANSFER_LENGTH(pNodeConfig->BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(pNodeConfig->BlockCount));


  /* Configure next Link node Address Register to zero */
  pNode->CLAR =  0;
24010d52:	687b      	ldr	r3, [r7, #4]
24010d54:	2200      	movs	r2, #0
24010d56:	615a      	str	r2, [r3, #20]

  /* Configure the Link Node registers*/
  pNode->CTBR   = 0;
24010d58:	687b      	ldr	r3, [r7, #4]
24010d5a:	2200      	movs	r2, #0
24010d5c:	619a      	str	r2, [r3, #24]
  pNode->CMAR   = 0;
24010d5e:	687b      	ldr	r3, [r7, #4]
24010d60:	2200      	movs	r2, #0
24010d62:	621a      	str	r2, [r3, #32]
  pNode->CMDR   = 0;
24010d64:	687b      	ldr	r3, [r7, #4]
24010d66:	2200      	movs	r2, #0
24010d68:	625a      	str	r2, [r3, #36]	@ 0x24
  pNode->Reserved = 0;
24010d6a:	687b      	ldr	r3, [r7, #4]
24010d6c:	2200      	movs	r2, #0
24010d6e:	61da      	str	r2, [r3, #28]

  /* Write new CTCR Register value */
  pNode->CTCR =  pNodeConfig->Init.SourceInc | pNodeConfig->Init.DestinationInc | \
24010d70:	683b      	ldr	r3, [r7, #0]
24010d72:	691a      	ldr	r2, [r3, #16]
24010d74:	683b      	ldr	r3, [r7, #0]
24010d76:	695b      	ldr	r3, [r3, #20]
24010d78:	431a      	orrs	r2, r3
    pNodeConfig->Init.SourceDataSize | pNodeConfig->Init.DestDataSize           | \
24010d7a:	683b      	ldr	r3, [r7, #0]
24010d7c:	699b      	ldr	r3, [r3, #24]
  pNode->CTCR =  pNodeConfig->Init.SourceInc | pNodeConfig->Init.DestinationInc | \
24010d7e:	431a      	orrs	r2, r3
    pNodeConfig->Init.SourceDataSize | pNodeConfig->Init.DestDataSize           | \
24010d80:	683b      	ldr	r3, [r7, #0]
24010d82:	69db      	ldr	r3, [r3, #28]
24010d84:	431a      	orrs	r2, r3
      pNodeConfig->Init.DataAlignment| pNodeConfig->Init.SourceBurst            | \
24010d86:	683b      	ldr	r3, [r7, #0]
24010d88:	6a1b      	ldr	r3, [r3, #32]
    pNodeConfig->Init.SourceDataSize | pNodeConfig->Init.DestDataSize           | \
24010d8a:	431a      	orrs	r2, r3
      pNodeConfig->Init.DataAlignment| pNodeConfig->Init.SourceBurst            | \
24010d8c:	683b      	ldr	r3, [r7, #0]
24010d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
24010d90:	431a      	orrs	r2, r3
        pNodeConfig->Init.DestBurst                                             | \
24010d92:	683b      	ldr	r3, [r7, #0]
24010d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      pNodeConfig->Init.DataAlignment| pNodeConfig->Init.SourceBurst            | \
24010d96:	431a      	orrs	r2, r3
          ((pNodeConfig->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
24010d98:	683b      	ldr	r3, [r7, #0]
24010d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
24010d9c:	3b01      	subs	r3, #1
24010d9e:	049b      	lsls	r3, r3, #18
        pNodeConfig->Init.DestBurst                                             | \
24010da0:	431a      	orrs	r2, r3
            pNodeConfig->Init.TransferTriggerMode;
24010da2:	683b      	ldr	r3, [r7, #0]
24010da4:	685b      	ldr	r3, [r3, #4]
          ((pNodeConfig->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
24010da6:	431a      	orrs	r2, r3
  pNode->CTCR =  pNodeConfig->Init.SourceInc | pNodeConfig->Init.DestinationInc | \
24010da8:	687b      	ldr	r3, [r7, #4]
24010daa:	601a      	str	r2, [r3, #0]

  /* If SW request set the CTCR register to SW Request Mode*/
  if(pNodeConfig->Init.Request == MDMA_REQUEST_SW)
24010dac:	683b      	ldr	r3, [r7, #0]
24010dae:	681b      	ldr	r3, [r3, #0]
24010db0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
24010db4:	d105      	bne.n	24010dc2 <HAL_MDMA_LinkedList_CreateNode+0x8a>
  {
    pNode->CTCR |= MDMA_CTCR_SWRM;
24010db6:	687b      	ldr	r3, [r7, #4]
24010db8:	681b      	ldr	r3, [r3, #0]
24010dba:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
24010dbe:	687b      	ldr	r3, [r7, #4]
24010dc0:	601a      	str	r2, [r3, #0]
  -If the request is done by SW : BWM could be set to 1 or 0.
  -If the request is done by a peripheral :
     If mask address not set (0) => BWM must be set to 0
     If mask address set (different than 0) => BWM could be set to 1 or 0
  */
  if((pNodeConfig->Init.Request == MDMA_REQUEST_SW) || (pNodeConfig->PostRequestMaskAddress != 0U))
24010dc2:	683b      	ldr	r3, [r7, #0]
24010dc4:	681b      	ldr	r3, [r3, #0]
24010dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
24010dca:	d003      	beq.n	24010dd4 <HAL_MDMA_LinkedList_CreateNode+0x9c>
24010dcc:	683b      	ldr	r3, [r7, #0]
24010dce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
24010dd0:	2b00      	cmp	r3, #0
24010dd2:	d005      	beq.n	24010de0 <HAL_MDMA_LinkedList_CreateNode+0xa8>
  {
    pNode->CTCR |=  MDMA_CTCR_BWM;
24010dd4:	687b      	ldr	r3, [r7, #4]
24010dd6:	681b      	ldr	r3, [r3, #0]
24010dd8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
24010ddc:	687b      	ldr	r3, [r7, #4]
24010dde:	601a      	str	r2, [r3, #0]
  }

  /* Set the new CBNDTR Register value */
  pNode->CBNDTR = ((pNodeConfig->BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC;
24010de0:	683b      	ldr	r3, [r7, #0]
24010de2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
24010de4:	3b01      	subs	r3, #1
24010de6:	051a      	lsls	r2, r3, #20
24010de8:	687b      	ldr	r3, [r7, #4]
24010dea:	605a      	str	r2, [r3, #4]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(pNodeConfig->Init.SourceBlockAddressOffset < 0)
24010dec:	683b      	ldr	r3, [r7, #0]
24010dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
24010df0:	2b00      	cmp	r3, #0
24010df2:	da0e      	bge.n	24010e12 <HAL_MDMA_LinkedList_CreateNode+0xda>
  {
    pNode->CBNDTR |= MDMA_CBNDTR_BRSUM;
24010df4:	687b      	ldr	r3, [r7, #4]
24010df6:	685b      	ldr	r3, [r3, #4]
24010df8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
24010dfc:	687b      	ldr	r3, [r7, #4]
24010dfe:	605a      	str	r2, [r3, #4]
    /*write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- pNodeConfig->Init.SourceBlockAddressOffset);
24010e00:	683b      	ldr	r3, [r7, #0]
24010e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
24010e04:	425b      	negs	r3, r3
24010e06:	60fb      	str	r3, [r7, #12]
    pNode->CBRUR = blockoffset & 0x0000FFFFU;
24010e08:	68fb      	ldr	r3, [r7, #12]
24010e0a:	b29a      	uxth	r2, r3
24010e0c:	687b      	ldr	r3, [r7, #4]
24010e0e:	611a      	str	r2, [r3, #16]
24010e10:	e004      	b.n	24010e1c <HAL_MDMA_LinkedList_CreateNode+0xe4>
  }
  else
  {
    /*write new CBRUR Register value : source repeat block offset */
    pNode->CBRUR = (((uint32_t) pNodeConfig->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
24010e12:	683b      	ldr	r3, [r7, #0]
24010e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
24010e16:	b29a      	uxth	r2, r3
24010e18:	687b      	ldr	r3, [r7, #4]
24010e1a:	611a      	str	r2, [r3, #16]
  }

  /* if block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(pNodeConfig->Init.DestBlockAddressOffset < 0)
24010e1c:	683b      	ldr	r3, [r7, #0]
24010e1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
24010e20:	2b00      	cmp	r3, #0
24010e22:	da11      	bge.n	24010e48 <HAL_MDMA_LinkedList_CreateNode+0x110>
  {
    pNode->CBNDTR |= MDMA_CBNDTR_BRDUM;
24010e24:	687b      	ldr	r3, [r7, #4]
24010e26:	685b      	ldr	r3, [r3, #4]
24010e28:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
24010e2c:	687b      	ldr	r3, [r7, #4]
24010e2e:	605a      	str	r2, [r3, #4]
    /*write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- pNodeConfig->Init.DestBlockAddressOffset);
24010e30:	683b      	ldr	r3, [r7, #0]
24010e32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
24010e34:	425b      	negs	r3, r3
24010e36:	60fb      	str	r3, [r7, #12]
    pNode->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
24010e38:	687b      	ldr	r3, [r7, #4]
24010e3a:	691a      	ldr	r2, [r3, #16]
24010e3c:	68fb      	ldr	r3, [r7, #12]
24010e3e:	041b      	lsls	r3, r3, #16
24010e40:	431a      	orrs	r2, r3
24010e42:	687b      	ldr	r3, [r7, #4]
24010e44:	611a      	str	r2, [r3, #16]
24010e46:	e007      	b.n	24010e58 <HAL_MDMA_LinkedList_CreateNode+0x120>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    pNode->CBRUR |= ((((uint32_t)pNodeConfig->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
24010e48:	687b      	ldr	r3, [r7, #4]
24010e4a:	691a      	ldr	r2, [r3, #16]
24010e4c:	683b      	ldr	r3, [r7, #0]
24010e4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
24010e50:	041b      	lsls	r3, r3, #16
24010e52:	431a      	orrs	r2, r3
24010e54:	687b      	ldr	r3, [r7, #4]
24010e56:	611a      	str	r2, [r3, #16]
  }

  /* Configure MDMA Link Node data length */
  pNode->CBNDTR |=  pNodeConfig->BlockDataLength;
24010e58:	687b      	ldr	r3, [r7, #4]
24010e5a:	685a      	ldr	r2, [r3, #4]
24010e5c:	683b      	ldr	r3, [r7, #0]
24010e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
24010e60:	431a      	orrs	r2, r3
24010e62:	687b      	ldr	r3, [r7, #4]
24010e64:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Link Node destination address */
  pNode->CDAR = pNodeConfig->DstAddress;
24010e66:	683b      	ldr	r3, [r7, #0]
24010e68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
24010e6a:	687b      	ldr	r3, [r7, #4]
24010e6c:	60da      	str	r2, [r3, #12]

  /* Configure MDMA Link Node Source address */
  pNode->CSAR = pNodeConfig->SrcAddress;
24010e6e:	683b      	ldr	r3, [r7, #0]
24010e70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
24010e72:	687b      	ldr	r3, [r7, #4]
24010e74:	609a      	str	r2, [r3, #8]

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData,  */
  if(pNodeConfig->Init.Request != MDMA_REQUEST_SW)
24010e76:	683b      	ldr	r3, [r7, #0]
24010e78:	681b      	ldr	r3, [r3, #0]
24010e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
24010e7e:	d00c      	beq.n	24010e9a <HAL_MDMA_LinkedList_CreateNode+0x162>
  {
    /* Set the HW request in CTBR register  */
    pNode->CTBR = pNodeConfig->Init.Request & MDMA_CTBR_TSEL;
24010e80:	683b      	ldr	r3, [r7, #0]
24010e82:	681b      	ldr	r3, [r3, #0]
24010e84:	b2da      	uxtb	r2, r3
24010e86:	687b      	ldr	r3, [r7, #4]
24010e88:	619a      	str	r2, [r3, #24]
    /* Set the HW request clear Mask and Data */
    pNode->CMAR = pNodeConfig->PostRequestMaskAddress;
24010e8a:	683b      	ldr	r3, [r7, #0]
24010e8c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
24010e8e:	687b      	ldr	r3, [r7, #4]
24010e90:	621a      	str	r2, [r3, #32]
    pNode->CMDR = pNodeConfig->PostRequestMaskData;
24010e92:	683b      	ldr	r3, [r7, #0]
24010e94:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
24010e96:	687b      	ldr	r3, [r7, #4]
24010e98:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  addressMask = pNodeConfig->SrcAddress & 0xFF000000U;
24010e9a:	683b      	ldr	r3, [r7, #0]
24010e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
24010e9e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
24010ea2:	60bb      	str	r3, [r7, #8]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
24010ea4:	68bb      	ldr	r3, [r7, #8]
24010ea6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
24010eaa:	d002      	beq.n	24010eb2 <HAL_MDMA_LinkedList_CreateNode+0x17a>
24010eac:	68bb      	ldr	r3, [r7, #8]
24010eae:	2b00      	cmp	r3, #0
24010eb0:	d105      	bne.n	24010ebe <HAL_MDMA_LinkedList_CreateNode+0x186>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    pNode->CTBR |= MDMA_CTBR_SBUS;
24010eb2:	687b      	ldr	r3, [r7, #4]
24010eb4:	699b      	ldr	r3, [r3, #24]
24010eb6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
24010eba:	687b      	ldr	r3, [r7, #4]
24010ebc:	619a      	str	r2, [r3, #24]
  }

  addressMask = pNodeConfig->DstAddress & 0xFF000000U;
24010ebe:	683b      	ldr	r3, [r7, #0]
24010ec0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
24010ec2:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
24010ec6:	60bb      	str	r3, [r7, #8]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
24010ec8:	68bb      	ldr	r3, [r7, #8]
24010eca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
24010ece:	d002      	beq.n	24010ed6 <HAL_MDMA_LinkedList_CreateNode+0x19e>
24010ed0:	68bb      	ldr	r3, [r7, #8]
24010ed2:	2b00      	cmp	r3, #0
24010ed4:	d105      	bne.n	24010ee2 <HAL_MDMA_LinkedList_CreateNode+0x1aa>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    pNode->CTBR |= MDMA_CTBR_DBUS;
24010ed6:	687b      	ldr	r3, [r7, #4]
24010ed8:	699b      	ldr	r3, [r3, #24]
24010eda:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
24010ede:	687b      	ldr	r3, [r7, #4]
24010ee0:	619a      	str	r2, [r3, #24]
  }

  return HAL_OK;
24010ee2:	2300      	movs	r3, #0
}
24010ee4:	4618      	mov	r0, r3
24010ee6:	3714      	adds	r7, #20
24010ee8:	46bd      	mov	sp, r7
24010eea:	f85d 7b04 	ldr.w	r7, [sp], #4
24010eee:	4770      	bx	lr

24010ef0 <HAL_MDMA_LinkedList_AddNode>:
  *                    at the end of the list
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_LinkedList_AddNode(MDMA_HandleTypeDef *hmdma, MDMA_LinkNodeTypeDef *pNewNode, MDMA_LinkNodeTypeDef *pPrevNode)
{
24010ef0:	b480      	push	{r7}
24010ef2:	b089      	sub	sp, #36	@ 0x24
24010ef4:	af00      	add	r7, sp, #0
24010ef6:	60f8      	str	r0, [r7, #12]
24010ef8:	60b9      	str	r1, [r7, #8]
24010efa:	607a      	str	r2, [r7, #4]
  MDMA_LinkNodeTypeDef *pNode;
  uint32_t counter = 0, nodeInserted = 0;
24010efc:	2300      	movs	r3, #0
24010efe:	61bb      	str	r3, [r7, #24]
24010f00:	2300      	movs	r3, #0
24010f02:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef hal_status = HAL_OK;
24010f04:	2300      	movs	r3, #0
24010f06:	74fb      	strb	r3, [r7, #19]

  /* Check the MDMA peripheral handle */
  if((hmdma == NULL) || (pNewNode == NULL))
24010f08:	68fb      	ldr	r3, [r7, #12]
24010f0a:	2b00      	cmp	r3, #0
24010f0c:	d002      	beq.n	24010f14 <HAL_MDMA_LinkedList_AddNode+0x24>
24010f0e:	68bb      	ldr	r3, [r7, #8]
24010f10:	2b00      	cmp	r3, #0
24010f12:	d101      	bne.n	24010f18 <HAL_MDMA_LinkedList_AddNode+0x28>
  {
    return HAL_ERROR;
24010f14:	2301      	movs	r3, #1
24010f16:	e0a9      	b.n	2401106c <HAL_MDMA_LinkedList_AddNode+0x17c>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
24010f18:	68fb      	ldr	r3, [r7, #12]
24010f1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
24010f1e:	2b01      	cmp	r3, #1
24010f20:	d101      	bne.n	24010f26 <HAL_MDMA_LinkedList_AddNode+0x36>
24010f22:	2302      	movs	r3, #2
24010f24:	e0a2      	b.n	2401106c <HAL_MDMA_LinkedList_AddNode+0x17c>
24010f26:	68fb      	ldr	r3, [r7, #12]
24010f28:	2201      	movs	r2, #1
24010f2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
24010f2e:	68fb      	ldr	r3, [r7, #12]
24010f30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
24010f34:	b2db      	uxtb	r3, r3
24010f36:	2b01      	cmp	r3, #1
24010f38:	f040 8093 	bne.w	24011062 <HAL_MDMA_LinkedList_AddNode+0x172>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
24010f3c:	68fb      	ldr	r3, [r7, #12]
24010f3e:	2202      	movs	r2, #2
24010f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Check if this is the first node (after the Inititlization node) */
    if((uint32_t)hmdma->FirstLinkedListNodeAddress == 0U)
24010f44:	68fb      	ldr	r3, [r7, #12]
24010f46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
24010f48:	2b00      	cmp	r3, #0
24010f4a:	d116      	bne.n	24010f7a <HAL_MDMA_LinkedList_AddNode+0x8a>
    {
      if(pPrevNode == NULL)
24010f4c:	687b      	ldr	r3, [r7, #4]
24010f4e:	2b00      	cmp	r3, #0
24010f50:	d110      	bne.n	24010f74 <HAL_MDMA_LinkedList_AddNode+0x84>
      {
        /* if this is the first node after the initialization
        connect this node to the node 0 by updating
        the MDMA channel CLAR register to this node address */
        hmdma->Instance->CLAR = (uint32_t)pNewNode;
24010f52:	68fb      	ldr	r3, [r7, #12]
24010f54:	681b      	ldr	r3, [r3, #0]
24010f56:	68ba      	ldr	r2, [r7, #8]
24010f58:	625a      	str	r2, [r3, #36]	@ 0x24
        /* Set the MDMA handle First linked List node*/
        hmdma->FirstLinkedListNodeAddress = pNewNode;
24010f5a:	68fb      	ldr	r3, [r7, #12]
24010f5c:	68ba      	ldr	r2, [r7, #8]
24010f5e:	65da      	str	r2, [r3, #92]	@ 0x5c

        /*reset New node link */
        pNewNode->CLAR = 0;
24010f60:	68bb      	ldr	r3, [r7, #8]
24010f62:	2200      	movs	r2, #0
24010f64:	615a      	str	r2, [r3, #20]

        /* Update the Handle last node address */
        hmdma->LastLinkedListNodeAddress = pNewNode;
24010f66:	68fb      	ldr	r3, [r7, #12]
24010f68:	68ba      	ldr	r2, [r7, #8]
24010f6a:	661a      	str	r2, [r3, #96]	@ 0x60

        hmdma->LinkedListNodeCounter = 1;
24010f6c:	68fb      	ldr	r3, [r7, #12]
24010f6e:	2201      	movs	r2, #1
24010f70:	665a      	str	r2, [r3, #100]	@ 0x64
24010f72:	e06c      	b.n	2401104e <HAL_MDMA_LinkedList_AddNode+0x15e>
      }
      else
      {
        hal_status = HAL_ERROR;
24010f74:	2301      	movs	r3, #1
24010f76:	74fb      	strb	r3, [r7, #19]
24010f78:	e069      	b.n	2401104e <HAL_MDMA_LinkedList_AddNode+0x15e>
      }
    }
    else if(hmdma->FirstLinkedListNodeAddress != pNewNode)
24010f7a:	68fb      	ldr	r3, [r7, #12]
24010f7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
24010f7e:	68ba      	ldr	r2, [r7, #8]
24010f80:	429a      	cmp	r2, r3
24010f82:	d062      	beq.n	2401104a <HAL_MDMA_LinkedList_AddNode+0x15a>
    {
      /* Check if the node to insert already exists*/
      pNode = hmdma->FirstLinkedListNodeAddress;
24010f84:	68fb      	ldr	r3, [r7, #12]
24010f86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
24010f88:	61fb      	str	r3, [r7, #28]
      while((counter < hmdma->LinkedListNodeCounter) && (hal_status == HAL_OK))
24010f8a:	e00c      	b.n	24010fa6 <HAL_MDMA_LinkedList_AddNode+0xb6>
      {
        if(pNode->CLAR == (uint32_t)pNewNode)
24010f8c:	69fb      	ldr	r3, [r7, #28]
24010f8e:	695a      	ldr	r2, [r3, #20]
24010f90:	68bb      	ldr	r3, [r7, #8]
24010f92:	429a      	cmp	r2, r3
24010f94:	d101      	bne.n	24010f9a <HAL_MDMA_LinkedList_AddNode+0xaa>
        {
          hal_status = HAL_ERROR; /* error this node already exist in the linked list and it is not first node */
24010f96:	2301      	movs	r3, #1
24010f98:	74fb      	strb	r3, [r7, #19]
        }
        pNode = (MDMA_LinkNodeTypeDef *)pNode->CLAR;
24010f9a:	69fb      	ldr	r3, [r7, #28]
24010f9c:	695b      	ldr	r3, [r3, #20]
24010f9e:	61fb      	str	r3, [r7, #28]
        counter++;
24010fa0:	69bb      	ldr	r3, [r7, #24]
24010fa2:	3301      	adds	r3, #1
24010fa4:	61bb      	str	r3, [r7, #24]
      while((counter < hmdma->LinkedListNodeCounter) && (hal_status == HAL_OK))
24010fa6:	68fb      	ldr	r3, [r7, #12]
24010fa8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
24010faa:	69ba      	ldr	r2, [r7, #24]
24010fac:	429a      	cmp	r2, r3
24010fae:	d202      	bcs.n	24010fb6 <HAL_MDMA_LinkedList_AddNode+0xc6>
24010fb0:	7cfb      	ldrb	r3, [r7, #19]
24010fb2:	2b00      	cmp	r3, #0
24010fb4:	d0ea      	beq.n	24010f8c <HAL_MDMA_LinkedList_AddNode+0x9c>
      }

      if(hal_status == HAL_OK)
24010fb6:	7cfb      	ldrb	r3, [r7, #19]
24010fb8:	2b00      	cmp	r3, #0
24010fba:	d148      	bne.n	2401104e <HAL_MDMA_LinkedList_AddNode+0x15e>
      {
        /* Check if the previous node is the last one in the current list or zero */
        if((pPrevNode == hmdma->LastLinkedListNodeAddress) || (pPrevNode == NULL))
24010fbc:	68fb      	ldr	r3, [r7, #12]
24010fbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
24010fc0:	687a      	ldr	r2, [r7, #4]
24010fc2:	429a      	cmp	r2, r3
24010fc4:	d002      	beq.n	24010fcc <HAL_MDMA_LinkedList_AddNode+0xdc>
24010fc6:	687b      	ldr	r3, [r7, #4]
24010fc8:	2b00      	cmp	r3, #0
24010fca:	d111      	bne.n	24010ff0 <HAL_MDMA_LinkedList_AddNode+0x100>
        {
          /* insert the new node at the end of the list */
          pNewNode->CLAR = hmdma->LastLinkedListNodeAddress->CLAR;
24010fcc:	68fb      	ldr	r3, [r7, #12]
24010fce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
24010fd0:	695a      	ldr	r2, [r3, #20]
24010fd2:	68bb      	ldr	r3, [r7, #8]
24010fd4:	615a      	str	r2, [r3, #20]
          hmdma->LastLinkedListNodeAddress->CLAR = (uint32_t)pNewNode;
24010fd6:	68fb      	ldr	r3, [r7, #12]
24010fd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
24010fda:	68ba      	ldr	r2, [r7, #8]
24010fdc:	615a      	str	r2, [r3, #20]
          /* Update the Handle last node address */
          hmdma->LastLinkedListNodeAddress = pNewNode;
24010fde:	68fb      	ldr	r3, [r7, #12]
24010fe0:	68ba      	ldr	r2, [r7, #8]
24010fe2:	661a      	str	r2, [r3, #96]	@ 0x60
          /* Increment the linked list node counter */
          hmdma->LinkedListNodeCounter++;
24010fe4:	68fb      	ldr	r3, [r7, #12]
24010fe6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
24010fe8:	1c5a      	adds	r2, r3, #1
24010fea:	68fb      	ldr	r3, [r7, #12]
24010fec:	665a      	str	r2, [r3, #100]	@ 0x64
24010fee:	e02e      	b.n	2401104e <HAL_MDMA_LinkedList_AddNode+0x15e>
        }
        else
        {
          /*insert the new node after the pPreviousNode node */
          pNode = hmdma->FirstLinkedListNodeAddress;
24010ff0:	68fb      	ldr	r3, [r7, #12]
24010ff2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
24010ff4:	61fb      	str	r3, [r7, #28]
          counter = 0;
24010ff6:	2300      	movs	r3, #0
24010ff8:	61bb      	str	r3, [r7, #24]
          while((counter < hmdma->LinkedListNodeCounter) && (nodeInserted == 0U))
24010ffa:	e018      	b.n	2401102e <HAL_MDMA_LinkedList_AddNode+0x13e>
          {
            counter++;
24010ffc:	69bb      	ldr	r3, [r7, #24]
24010ffe:	3301      	adds	r3, #1
24011000:	61bb      	str	r3, [r7, #24]
            if(pNode == pPrevNode)
24011002:	69fa      	ldr	r2, [r7, #28]
24011004:	687b      	ldr	r3, [r7, #4]
24011006:	429a      	cmp	r2, r3
24011008:	d10e      	bne.n	24011028 <HAL_MDMA_LinkedList_AddNode+0x138>
            {
              /*Insert the new node after the previous one */
              pNewNode->CLAR = pNode->CLAR;
2401100a:	69fb      	ldr	r3, [r7, #28]
2401100c:	695a      	ldr	r2, [r3, #20]
2401100e:	68bb      	ldr	r3, [r7, #8]
24011010:	615a      	str	r2, [r3, #20]
              pNode->CLAR = (uint32_t)pNewNode;
24011012:	68ba      	ldr	r2, [r7, #8]
24011014:	69fb      	ldr	r3, [r7, #28]
24011016:	615a      	str	r2, [r3, #20]
              /* Increment the linked list node counter */
              hmdma->LinkedListNodeCounter++;
24011018:	68fb      	ldr	r3, [r7, #12]
2401101a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
2401101c:	1c5a      	adds	r2, r3, #1
2401101e:	68fb      	ldr	r3, [r7, #12]
24011020:	665a      	str	r2, [r3, #100]	@ 0x64
              nodeInserted = 1;
24011022:	2301      	movs	r3, #1
24011024:	617b      	str	r3, [r7, #20]
24011026:	e002      	b.n	2401102e <HAL_MDMA_LinkedList_AddNode+0x13e>
            }
            else
            {
              pNode = (MDMA_LinkNodeTypeDef *)pNode->CLAR;
24011028:	69fb      	ldr	r3, [r7, #28]
2401102a:	695b      	ldr	r3, [r3, #20]
2401102c:	61fb      	str	r3, [r7, #28]
          while((counter < hmdma->LinkedListNodeCounter) && (nodeInserted == 0U))
2401102e:	68fb      	ldr	r3, [r7, #12]
24011030:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
24011032:	69ba      	ldr	r2, [r7, #24]
24011034:	429a      	cmp	r2, r3
24011036:	d202      	bcs.n	2401103e <HAL_MDMA_LinkedList_AddNode+0x14e>
24011038:	697b      	ldr	r3, [r7, #20]
2401103a:	2b00      	cmp	r3, #0
2401103c:	d0de      	beq.n	24010ffc <HAL_MDMA_LinkedList_AddNode+0x10c>
            }
          }

          if(nodeInserted == 0U)
2401103e:	697b      	ldr	r3, [r7, #20]
24011040:	2b00      	cmp	r3, #0
24011042:	d104      	bne.n	2401104e <HAL_MDMA_LinkedList_AddNode+0x15e>
          {
            hal_status = HAL_ERROR;
24011044:	2301      	movs	r3, #1
24011046:	74fb      	strb	r3, [r7, #19]
24011048:	e001      	b.n	2401104e <HAL_MDMA_LinkedList_AddNode+0x15e>
        }
      }
    }
    else
    {
      hal_status = HAL_ERROR;
2401104a:	2301      	movs	r3, #1
2401104c:	74fb      	strb	r3, [r7, #19]
    }

    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
2401104e:	68fb      	ldr	r3, [r7, #12]
24011050:	2200      	movs	r2, #0
24011052:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    hmdma->State = HAL_MDMA_STATE_READY;
24011056:	68fb      	ldr	r3, [r7, #12]
24011058:	2201      	movs	r2, #1
2401105a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return hal_status;
2401105e:	7cfb      	ldrb	r3, [r7, #19]
24011060:	e004      	b.n	2401106c <HAL_MDMA_LinkedList_AddNode+0x17c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
24011062:	68fb      	ldr	r3, [r7, #12]
24011064:	2200      	movs	r2, #0
24011066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return error status */
    return HAL_BUSY;
2401106a:	2302      	movs	r3, #2
  }
}
2401106c:	4618      	mov	r0, r3
2401106e:	3724      	adds	r7, #36	@ 0x24
24011070:	46bd      	mov	sp, r7
24011072:	f85d 7b04 	ldr.w	r7, [sp], #4
24011076:	4770      	bx	lr

24011078 <HAL_MDMA_LinkedList_RemoveNode>:
  *                 to be removed from the list.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_LinkedList_RemoveNode(MDMA_HandleTypeDef *hmdma, MDMA_LinkNodeTypeDef *pNode)
{
24011078:	b480      	push	{r7}
2401107a:	b087      	sub	sp, #28
2401107c:	af00      	add	r7, sp, #0
2401107e:	6078      	str	r0, [r7, #4]
24011080:	6039      	str	r1, [r7, #0]
  MDMA_LinkNodeTypeDef *ptmpNode;
  uint32_t counter = 0, nodeDeleted = 0;
24011082:	2300      	movs	r3, #0
24011084:	613b      	str	r3, [r7, #16]
24011086:	2300      	movs	r3, #0
24011088:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef hal_status = HAL_OK;
2401108a:	2300      	movs	r3, #0
2401108c:	72fb      	strb	r3, [r7, #11]

  /* Check the MDMA peripheral handle */
  if((hmdma == NULL) || (pNode == NULL))
2401108e:	687b      	ldr	r3, [r7, #4]
24011090:	2b00      	cmp	r3, #0
24011092:	d002      	beq.n	2401109a <HAL_MDMA_LinkedList_RemoveNode+0x22>
24011094:	683b      	ldr	r3, [r7, #0]
24011096:	2b00      	cmp	r3, #0
24011098:	d101      	bne.n	2401109e <HAL_MDMA_LinkedList_RemoveNode+0x26>
  {
    return HAL_ERROR;
2401109a:	2301      	movs	r3, #1
2401109c:	e099      	b.n	240111d2 <HAL_MDMA_LinkedList_RemoveNode+0x15a>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
2401109e:	687b      	ldr	r3, [r7, #4]
240110a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
240110a4:	2b01      	cmp	r3, #1
240110a6:	d101      	bne.n	240110ac <HAL_MDMA_LinkedList_RemoveNode+0x34>
240110a8:	2302      	movs	r3, #2
240110aa:	e092      	b.n	240111d2 <HAL_MDMA_LinkedList_RemoveNode+0x15a>
240110ac:	687b      	ldr	r3, [r7, #4]
240110ae:	2201      	movs	r2, #1
240110b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
240110b4:	687b      	ldr	r3, [r7, #4]
240110b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
240110ba:	b2db      	uxtb	r3, r3
240110bc:	2b01      	cmp	r3, #1
240110be:	f040 8083 	bne.w	240111c8 <HAL_MDMA_LinkedList_RemoveNode+0x150>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
240110c2:	687b      	ldr	r3, [r7, #4]
240110c4:	2202      	movs	r2, #2
240110c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* If first and last node are null (no nodes in the list) : return error*/
    if(((uint32_t)hmdma->FirstLinkedListNodeAddress == 0U) || ((uint32_t)hmdma->LastLinkedListNodeAddress == 0U) || (hmdma->LinkedListNodeCounter == 0U))
240110ca:	687b      	ldr	r3, [r7, #4]
240110cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
240110ce:	2b00      	cmp	r3, #0
240110d0:	d007      	beq.n	240110e2 <HAL_MDMA_LinkedList_RemoveNode+0x6a>
240110d2:	687b      	ldr	r3, [r7, #4]
240110d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
240110d6:	2b00      	cmp	r3, #0
240110d8:	d003      	beq.n	240110e2 <HAL_MDMA_LinkedList_RemoveNode+0x6a>
240110da:	687b      	ldr	r3, [r7, #4]
240110dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
240110de:	2b00      	cmp	r3, #0
240110e0:	d102      	bne.n	240110e8 <HAL_MDMA_LinkedList_RemoveNode+0x70>
    {
      hal_status = HAL_ERROR;
240110e2:	2301      	movs	r3, #1
240110e4:	72fb      	strb	r3, [r7, #11]
240110e6:	e065      	b.n	240111b4 <HAL_MDMA_LinkedList_RemoveNode+0x13c>
    }
    else if(hmdma->FirstLinkedListNodeAddress == pNode) /* Deleting first node */
240110e8:	687b      	ldr	r3, [r7, #4]
240110ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
240110ec:	683a      	ldr	r2, [r7, #0]
240110ee:	429a      	cmp	r2, r3
240110f0:	d130      	bne.n	24011154 <HAL_MDMA_LinkedList_RemoveNode+0xdc>
    {
      /* Delete 1st node */
      if(hmdma->LastLinkedListNodeAddress == pNode)
240110f2:	687b      	ldr	r3, [r7, #4]
240110f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
240110f6:	683a      	ldr	r2, [r7, #0]
240110f8:	429a      	cmp	r2, r3
240110fa:	d10d      	bne.n	24011118 <HAL_MDMA_LinkedList_RemoveNode+0xa0>
      {
        /*if the last node is at the same time the first one (1 single node after the init node 0)
        then update the last node too */

        hmdma->FirstLinkedListNodeAddress = 0;
240110fc:	687b      	ldr	r3, [r7, #4]
240110fe:	2200      	movs	r2, #0
24011100:	65da      	str	r2, [r3, #92]	@ 0x5c
        hmdma->LastLinkedListNodeAddress  = 0;
24011102:	687b      	ldr	r3, [r7, #4]
24011104:	2200      	movs	r2, #0
24011106:	661a      	str	r2, [r3, #96]	@ 0x60
        hmdma->LinkedListNodeCounter = 0;
24011108:	687b      	ldr	r3, [r7, #4]
2401110a:	2200      	movs	r2, #0
2401110c:	665a      	str	r2, [r3, #100]	@ 0x64

        hmdma->Instance->CLAR = 0;
2401110e:	687b      	ldr	r3, [r7, #4]
24011110:	681b      	ldr	r3, [r3, #0]
24011112:	2200      	movs	r2, #0
24011114:	625a      	str	r2, [r3, #36]	@ 0x24
24011116:	e04d      	b.n	240111b4 <HAL_MDMA_LinkedList_RemoveNode+0x13c>
      }
      else
      {
        if((uint32_t)hmdma->FirstLinkedListNodeAddress == hmdma->LastLinkedListNodeAddress->CLAR)
24011118:	687b      	ldr	r3, [r7, #4]
2401111a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
2401111c:	461a      	mov	r2, r3
2401111e:	687b      	ldr	r3, [r7, #4]
24011120:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
24011122:	695b      	ldr	r3, [r3, #20]
24011124:	429a      	cmp	r2, r3
24011126:	d104      	bne.n	24011132 <HAL_MDMA_LinkedList_RemoveNode+0xba>
        {
          /* if last node is looping to first (circular list) one update the last node connection */
          hmdma->LastLinkedListNodeAddress->CLAR = pNode->CLAR;
24011128:	687b      	ldr	r3, [r7, #4]
2401112a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
2401112c:	683a      	ldr	r2, [r7, #0]
2401112e:	6952      	ldr	r2, [r2, #20]
24011130:	615a      	str	r2, [r3, #20]
        }

        /* if deleting the first node after the initialization
        connect the next node to the node 0 by updating
        the MDMA channel CLAR register to this node address */
        hmdma->Instance->CLAR = pNode->CLAR;
24011132:	687b      	ldr	r3, [r7, #4]
24011134:	681b      	ldr	r3, [r3, #0]
24011136:	683a      	ldr	r2, [r7, #0]
24011138:	6952      	ldr	r2, [r2, #20]
2401113a:	625a      	str	r2, [r3, #36]	@ 0x24
        hmdma->FirstLinkedListNodeAddress = (MDMA_LinkNodeTypeDef *)hmdma->Instance->CLAR;
2401113c:	687b      	ldr	r3, [r7, #4]
2401113e:	681b      	ldr	r3, [r3, #0]
24011140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
24011142:	461a      	mov	r2, r3
24011144:	687b      	ldr	r3, [r7, #4]
24011146:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Update the Handle node counter */
        hmdma->LinkedListNodeCounter--;
24011148:	687b      	ldr	r3, [r7, #4]
2401114a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
2401114c:	1e5a      	subs	r2, r3, #1
2401114e:	687b      	ldr	r3, [r7, #4]
24011150:	665a      	str	r2, [r3, #100]	@ 0x64
24011152:	e02f      	b.n	240111b4 <HAL_MDMA_LinkedList_RemoveNode+0x13c>
      }
    }
    else /* Deleting any other node */
    {
      /*Deleted node is not the first one : find it  */
      ptmpNode = hmdma->FirstLinkedListNodeAddress;
24011154:	687b      	ldr	r3, [r7, #4]
24011156:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
24011158:	617b      	str	r3, [r7, #20]
      while((counter < hmdma->LinkedListNodeCounter) && (nodeDeleted == 0U))
2401115a:	e01e      	b.n	2401119a <HAL_MDMA_LinkedList_RemoveNode+0x122>
      {
        counter++;
2401115c:	693b      	ldr	r3, [r7, #16]
2401115e:	3301      	adds	r3, #1
24011160:	613b      	str	r3, [r7, #16]
        if(ptmpNode->CLAR == ((uint32_t)pNode))
24011162:	697b      	ldr	r3, [r7, #20]
24011164:	695a      	ldr	r2, [r3, #20]
24011166:	683b      	ldr	r3, [r7, #0]
24011168:	429a      	cmp	r2, r3
2401116a:	d113      	bne.n	24011194 <HAL_MDMA_LinkedList_RemoveNode+0x11c>
        {
          /* if deleting the last node */
          if(pNode == hmdma->LastLinkedListNodeAddress)
2401116c:	687b      	ldr	r3, [r7, #4]
2401116e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
24011170:	683a      	ldr	r2, [r7, #0]
24011172:	429a      	cmp	r2, r3
24011174:	d102      	bne.n	2401117c <HAL_MDMA_LinkedList_RemoveNode+0x104>
          {
            /*Update the linked list last node address in the handle*/
            hmdma->LastLinkedListNodeAddress = ptmpNode;
24011176:	687b      	ldr	r3, [r7, #4]
24011178:	697a      	ldr	r2, [r7, #20]
2401117a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          /* update the next node link after deleting pMDMA_LinkedListNode */
          ptmpNode->CLAR = pNode->CLAR;
2401117c:	683b      	ldr	r3, [r7, #0]
2401117e:	695a      	ldr	r2, [r3, #20]
24011180:	697b      	ldr	r3, [r7, #20]
24011182:	615a      	str	r2, [r3, #20]
          nodeDeleted = 1;
24011184:	2301      	movs	r3, #1
24011186:	60fb      	str	r3, [r7, #12]
          /* Update the Handle node counter */
          hmdma->LinkedListNodeCounter--;
24011188:	687b      	ldr	r3, [r7, #4]
2401118a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
2401118c:	1e5a      	subs	r2, r3, #1
2401118e:	687b      	ldr	r3, [r7, #4]
24011190:	665a      	str	r2, [r3, #100]	@ 0x64
24011192:	e002      	b.n	2401119a <HAL_MDMA_LinkedList_RemoveNode+0x122>
        }
        else
        {
          ptmpNode = (MDMA_LinkNodeTypeDef *)ptmpNode->CLAR;
24011194:	697b      	ldr	r3, [r7, #20]
24011196:	695b      	ldr	r3, [r3, #20]
24011198:	617b      	str	r3, [r7, #20]
      while((counter < hmdma->LinkedListNodeCounter) && (nodeDeleted == 0U))
2401119a:	687b      	ldr	r3, [r7, #4]
2401119c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
2401119e:	693a      	ldr	r2, [r7, #16]
240111a0:	429a      	cmp	r2, r3
240111a2:	d202      	bcs.n	240111aa <HAL_MDMA_LinkedList_RemoveNode+0x132>
240111a4:	68fb      	ldr	r3, [r7, #12]
240111a6:	2b00      	cmp	r3, #0
240111a8:	d0d8      	beq.n	2401115c <HAL_MDMA_LinkedList_RemoveNode+0xe4>
        }
      }

      if(nodeDeleted == 0U)
240111aa:	68fb      	ldr	r3, [r7, #12]
240111ac:	2b00      	cmp	r3, #0
240111ae:	d101      	bne.n	240111b4 <HAL_MDMA_LinkedList_RemoveNode+0x13c>
      {
        /* last node reashed without finding the node to delete : return error */
        hal_status = HAL_ERROR;
240111b0:	2301      	movs	r3, #1
240111b2:	72fb      	strb	r3, [r7, #11]
      }
    }

    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
240111b4:	687b      	ldr	r3, [r7, #4]
240111b6:	2200      	movs	r2, #0
240111b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    hmdma->State = HAL_MDMA_STATE_READY;
240111bc:	687b      	ldr	r3, [r7, #4]
240111be:	2201      	movs	r2, #1
240111c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return hal_status;
240111c4:	7afb      	ldrb	r3, [r7, #11]
240111c6:	e004      	b.n	240111d2 <HAL_MDMA_LinkedList_RemoveNode+0x15a>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
240111c8:	687b      	ldr	r3, [r7, #4]
240111ca:	2200      	movs	r2, #0
240111cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return error status */
    return HAL_BUSY;
240111d0:	2302      	movs	r3, #2
  }
}
240111d2:	4618      	mov	r0, r3
240111d4:	371c      	adds	r7, #28
240111d6:	46bd      	mov	sp, r7
240111d8:	f85d 7b04 	ldr.w	r7, [sp], #4
240111dc:	4770      	bx	lr

240111de <HAL_MDMA_LinkedList_EnableCircularMode>:
  * @param  hmdma : Pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_LinkedList_EnableCircularMode(MDMA_HandleTypeDef *hmdma)
{
240111de:	b480      	push	{r7}
240111e0:	b085      	sub	sp, #20
240111e2:	af00      	add	r7, sp, #0
240111e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
240111e6:	2300      	movs	r3, #0
240111e8:	73fb      	strb	r3, [r7, #15]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
240111ea:	687b      	ldr	r3, [r7, #4]
240111ec:	2b00      	cmp	r3, #0
240111ee:	d101      	bne.n	240111f4 <HAL_MDMA_LinkedList_EnableCircularMode+0x16>
  {
    return HAL_ERROR;
240111f0:	2301      	movs	r3, #1
240111f2:	e031      	b.n	24011258 <HAL_MDMA_LinkedList_EnableCircularMode+0x7a>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
240111f4:	687b      	ldr	r3, [r7, #4]
240111f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
240111fa:	2b01      	cmp	r3, #1
240111fc:	d101      	bne.n	24011202 <HAL_MDMA_LinkedList_EnableCircularMode+0x24>
240111fe:	2302      	movs	r3, #2
24011200:	e02a      	b.n	24011258 <HAL_MDMA_LinkedList_EnableCircularMode+0x7a>
24011202:	687b      	ldr	r3, [r7, #4]
24011204:	2201      	movs	r2, #1
24011206:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
2401120a:	687b      	ldr	r3, [r7, #4]
2401120c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
24011210:	b2db      	uxtb	r3, r3
24011212:	2b01      	cmp	r3, #1
24011214:	d117      	bne.n	24011246 <HAL_MDMA_LinkedList_EnableCircularMode+0x68>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
24011216:	687b      	ldr	r3, [r7, #4]
24011218:	2202      	movs	r2, #2
2401121a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* If first and last node are null (no nodes in the list) : return error*/
    if(((uint32_t)hmdma->FirstLinkedListNodeAddress == 0U) || ((uint32_t)hmdma->LastLinkedListNodeAddress == 0U) || (hmdma->LinkedListNodeCounter == 0U))
2401121e:	687b      	ldr	r3, [r7, #4]
24011220:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
24011222:	2b00      	cmp	r3, #0
24011224:	d007      	beq.n	24011236 <HAL_MDMA_LinkedList_EnableCircularMode+0x58>
24011226:	687b      	ldr	r3, [r7, #4]
24011228:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
2401122a:	2b00      	cmp	r3, #0
2401122c:	d003      	beq.n	24011236 <HAL_MDMA_LinkedList_EnableCircularMode+0x58>
2401122e:	687b      	ldr	r3, [r7, #4]
24011230:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
24011232:	2b00      	cmp	r3, #0
24011234:	d102      	bne.n	2401123c <HAL_MDMA_LinkedList_EnableCircularMode+0x5e>
    {
      hal_status = HAL_ERROR;
24011236:	2301      	movs	r3, #1
24011238:	73fb      	strb	r3, [r7, #15]
2401123a:	e004      	b.n	24011246 <HAL_MDMA_LinkedList_EnableCircularMode+0x68>
    }
    else
    {
      /* to enable circular mode Last Node should be connected to first node */
      hmdma->LastLinkedListNodeAddress->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
2401123c:	687b      	ldr	r3, [r7, #4]
2401123e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
24011240:	687b      	ldr	r3, [r7, #4]
24011242:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
24011244:	615a      	str	r2, [r3, #20]
    }

  }
  /* Process unlocked */
  __HAL_UNLOCK(hmdma);
24011246:	687b      	ldr	r3, [r7, #4]
24011248:	2200      	movs	r2, #0
2401124a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  hmdma->State = HAL_MDMA_STATE_READY;
2401124e:	687b      	ldr	r3, [r7, #4]
24011250:	2201      	movs	r2, #1
24011252:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return hal_status;
24011256:	7bfb      	ldrb	r3, [r7, #15]
}
24011258:	4618      	mov	r0, r3
2401125a:	3714      	adds	r7, #20
2401125c:	46bd      	mov	sp, r7
2401125e:	f85d 7b04 	ldr.w	r7, [sp], #4
24011262:	4770      	bx	lr

24011264 <HAL_MDMA_LinkedList_DisableCircularMode>:
  * @param  hmdma : Pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_LinkedList_DisableCircularMode(MDMA_HandleTypeDef *hmdma)
{
24011264:	b480      	push	{r7}
24011266:	b085      	sub	sp, #20
24011268:	af00      	add	r7, sp, #0
2401126a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
2401126c:	2300      	movs	r3, #0
2401126e:	73fb      	strb	r3, [r7, #15]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
24011270:	687b      	ldr	r3, [r7, #4]
24011272:	2b00      	cmp	r3, #0
24011274:	d101      	bne.n	2401127a <HAL_MDMA_LinkedList_DisableCircularMode+0x16>
  {
    return HAL_ERROR;
24011276:	2301      	movs	r3, #1
24011278:	e030      	b.n	240112dc <HAL_MDMA_LinkedList_DisableCircularMode+0x78>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
2401127a:	687b      	ldr	r3, [r7, #4]
2401127c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
24011280:	2b01      	cmp	r3, #1
24011282:	d101      	bne.n	24011288 <HAL_MDMA_LinkedList_DisableCircularMode+0x24>
24011284:	2302      	movs	r3, #2
24011286:	e029      	b.n	240112dc <HAL_MDMA_LinkedList_DisableCircularMode+0x78>
24011288:	687b      	ldr	r3, [r7, #4]
2401128a:	2201      	movs	r2, #1
2401128c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
24011290:	687b      	ldr	r3, [r7, #4]
24011292:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
24011296:	b2db      	uxtb	r3, r3
24011298:	2b01      	cmp	r3, #1
2401129a:	d116      	bne.n	240112ca <HAL_MDMA_LinkedList_DisableCircularMode+0x66>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
2401129c:	687b      	ldr	r3, [r7, #4]
2401129e:	2202      	movs	r2, #2
240112a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* If first and last node are null (no nodes in the list) : return error*/
    if(((uint32_t)hmdma->FirstLinkedListNodeAddress == 0U) || ((uint32_t)hmdma->LastLinkedListNodeAddress == 0U) || (hmdma->LinkedListNodeCounter == 0U))
240112a4:	687b      	ldr	r3, [r7, #4]
240112a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
240112a8:	2b00      	cmp	r3, #0
240112aa:	d007      	beq.n	240112bc <HAL_MDMA_LinkedList_DisableCircularMode+0x58>
240112ac:	687b      	ldr	r3, [r7, #4]
240112ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
240112b0:	2b00      	cmp	r3, #0
240112b2:	d003      	beq.n	240112bc <HAL_MDMA_LinkedList_DisableCircularMode+0x58>
240112b4:	687b      	ldr	r3, [r7, #4]
240112b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
240112b8:	2b00      	cmp	r3, #0
240112ba:	d102      	bne.n	240112c2 <HAL_MDMA_LinkedList_DisableCircularMode+0x5e>
    {
      hal_status = HAL_ERROR;
240112bc:	2301      	movs	r3, #1
240112be:	73fb      	strb	r3, [r7, #15]
240112c0:	e003      	b.n	240112ca <HAL_MDMA_LinkedList_DisableCircularMode+0x66>
    }
    else
    {
      /* to disable circular mode Last Node should be connected to NULL */
      hmdma->LastLinkedListNodeAddress->CLAR = 0;
240112c2:	687b      	ldr	r3, [r7, #4]
240112c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
240112c6:	2200      	movs	r2, #0
240112c8:	615a      	str	r2, [r3, #20]
    }

  }
  /* Process unlocked */
  __HAL_UNLOCK(hmdma);
240112ca:	687b      	ldr	r3, [r7, #4]
240112cc:	2200      	movs	r2, #0
240112ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  hmdma->State = HAL_MDMA_STATE_READY;
240112d2:	687b      	ldr	r3, [r7, #4]
240112d4:	2201      	movs	r2, #1
240112d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return hal_status;
240112da:	7bfb      	ldrb	r3, [r7, #15]
}
240112dc:	4618      	mov	r0, r3
240112de:	3714      	adds	r7, #20
240112e0:	46bd      	mov	sp, r7
240112e2:	f85d 7b04 	ldr.w	r7, [sp], #4
240112e6:	4770      	bx	lr

240112e8 <HAL_MDMA_Start>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
240112e8:	b580      	push	{r7, lr}
240112ea:	b086      	sub	sp, #24
240112ec:	af02      	add	r7, sp, #8
240112ee:	60f8      	str	r0, [r7, #12]
240112f0:	60b9      	str	r1, [r7, #8]
240112f2:	607a      	str	r2, [r7, #4]
240112f4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
240112f6:	68fb      	ldr	r3, [r7, #12]
240112f8:	2b00      	cmp	r3, #0
240112fa:	d101      	bne.n	24011300 <HAL_MDMA_Start+0x18>
  {
    return HAL_ERROR;
240112fc:	2301      	movs	r3, #1
240112fe:	e044      	b.n	2401138a <HAL_MDMA_Start+0xa2>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
24011300:	68fb      	ldr	r3, [r7, #12]
24011302:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
24011306:	2b01      	cmp	r3, #1
24011308:	d101      	bne.n	2401130e <HAL_MDMA_Start+0x26>
2401130a:	2302      	movs	r3, #2
2401130c:	e03d      	b.n	2401138a <HAL_MDMA_Start+0xa2>
2401130e:	68fb      	ldr	r3, [r7, #12]
24011310:	2201      	movs	r2, #1
24011312:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
24011316:	68fb      	ldr	r3, [r7, #12]
24011318:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
2401131c:	b2db      	uxtb	r3, r3
2401131e:	2b01      	cmp	r3, #1
24011320:	d12c      	bne.n	2401137c <HAL_MDMA_Start+0x94>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
24011322:	68fb      	ldr	r3, [r7, #12]
24011324:	2202      	movs	r2, #2
24011326:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
2401132a:	68fb      	ldr	r3, [r7, #12]
2401132c:	2200      	movs	r2, #0
2401132e:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
24011330:	68fb      	ldr	r3, [r7, #12]
24011332:	681b      	ldr	r3, [r3, #0]
24011334:	68da      	ldr	r2, [r3, #12]
24011336:	68fb      	ldr	r3, [r7, #12]
24011338:	681b      	ldr	r3, [r3, #0]
2401133a:	f022 0201 	bic.w	r2, r2, #1
2401133e:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
24011340:	69bb      	ldr	r3, [r7, #24]
24011342:	9300      	str	r3, [sp, #0]
24011344:	683b      	ldr	r3, [r7, #0]
24011346:	687a      	ldr	r2, [r7, #4]
24011348:	68b9      	ldr	r1, [r7, #8]
2401134a:	68f8      	ldr	r0, [r7, #12]
2401134c:	f000 fb96 	bl	24011a7c <MDMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
24011350:	68fb      	ldr	r3, [r7, #12]
24011352:	681b      	ldr	r3, [r3, #0]
24011354:	68da      	ldr	r2, [r3, #12]
24011356:	68fb      	ldr	r3, [r7, #12]
24011358:	681b      	ldr	r3, [r3, #0]
2401135a:	f042 0201 	orr.w	r2, r2, #1
2401135e:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
24011360:	68fb      	ldr	r3, [r7, #12]
24011362:	685b      	ldr	r3, [r3, #4]
24011364:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
24011368:	d10e      	bne.n	24011388 <HAL_MDMA_Start+0xa0>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
2401136a:	68fb      	ldr	r3, [r7, #12]
2401136c:	681b      	ldr	r3, [r3, #0]
2401136e:	68da      	ldr	r2, [r3, #12]
24011370:	68fb      	ldr	r3, [r7, #12]
24011372:	681b      	ldr	r3, [r3, #0]
24011374:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
24011378:	60da      	str	r2, [r3, #12]
2401137a:	e005      	b.n	24011388 <HAL_MDMA_Start+0xa0>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
2401137c:	68fb      	ldr	r3, [r7, #12]
2401137e:	2200      	movs	r2, #0
24011380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return error status */
    return HAL_BUSY;
24011384:	2302      	movs	r3, #2
24011386:	e000      	b.n	2401138a <HAL_MDMA_Start+0xa2>
  }

  return HAL_OK;
24011388:	2300      	movs	r3, #0
}
2401138a:	4618      	mov	r0, r3
2401138c:	3710      	adds	r7, #16
2401138e:	46bd      	mov	sp, r7
24011390:	bd80      	pop	{r7, pc}

24011392 <HAL_MDMA_Start_IT>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start_IT(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
24011392:	b580      	push	{r7, lr}
24011394:	b086      	sub	sp, #24
24011396:	af02      	add	r7, sp, #8
24011398:	60f8      	str	r0, [r7, #12]
2401139a:	60b9      	str	r1, [r7, #8]
2401139c:	607a      	str	r2, [r7, #4]
2401139e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
240113a0:	68fb      	ldr	r3, [r7, #12]
240113a2:	2b00      	cmp	r3, #0
240113a4:	d101      	bne.n	240113aa <HAL_MDMA_Start_IT+0x18>
  {
    return HAL_ERROR;
240113a6:	2301      	movs	r3, #1
240113a8:	e070      	b.n	2401148c <HAL_MDMA_Start_IT+0xfa>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
240113aa:	68fb      	ldr	r3, [r7, #12]
240113ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
240113b0:	2b01      	cmp	r3, #1
240113b2:	d101      	bne.n	240113b8 <HAL_MDMA_Start_IT+0x26>
240113b4:	2302      	movs	r3, #2
240113b6:	e069      	b.n	2401148c <HAL_MDMA_Start_IT+0xfa>
240113b8:	68fb      	ldr	r3, [r7, #12]
240113ba:	2201      	movs	r2, #1
240113bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
240113c0:	68fb      	ldr	r3, [r7, #12]
240113c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
240113c6:	b2db      	uxtb	r3, r3
240113c8:	2b01      	cmp	r3, #1
240113ca:	d158      	bne.n	2401147e <HAL_MDMA_Start_IT+0xec>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
240113cc:	68fb      	ldr	r3, [r7, #12]
240113ce:	2202      	movs	r2, #2
240113d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
240113d4:	68fb      	ldr	r3, [r7, #12]
240113d6:	2200      	movs	r2, #0
240113d8:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
240113da:	68fb      	ldr	r3, [r7, #12]
240113dc:	681b      	ldr	r3, [r3, #0]
240113de:	68da      	ldr	r2, [r3, #12]
240113e0:	68fb      	ldr	r3, [r7, #12]
240113e2:	681b      	ldr	r3, [r3, #0]
240113e4:	f022 0201 	bic.w	r2, r2, #1
240113e8:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
240113ea:	69bb      	ldr	r3, [r7, #24]
240113ec:	9300      	str	r3, [sp, #0]
240113ee:	683b      	ldr	r3, [r7, #0]
240113f0:	687a      	ldr	r2, [r7, #4]
240113f2:	68b9      	ldr	r1, [r7, #8]
240113f4:	68f8      	ldr	r0, [r7, #12]
240113f6:	f000 fb41 	bl	24011a7c <MDMA_SetConfig>

    /* Enable Common interrupts i.e Transfer Error IT and Channel Transfer Complete IT*/
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
240113fa:	68fb      	ldr	r3, [r7, #12]
240113fc:	681b      	ldr	r3, [r3, #0]
240113fe:	68da      	ldr	r2, [r3, #12]
24011400:	68fb      	ldr	r3, [r7, #12]
24011402:	681b      	ldr	r3, [r3, #0]
24011404:	f042 0206 	orr.w	r2, r2, #6
24011408:	60da      	str	r2, [r3, #12]

    if(hmdma->XferBlockCpltCallback != NULL)
2401140a:	68fb      	ldr	r3, [r7, #12]
2401140c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
2401140e:	2b00      	cmp	r3, #0
24011410:	d007      	beq.n	24011422 <HAL_MDMA_Start_IT+0x90>
    {
      /* if Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
24011412:	68fb      	ldr	r3, [r7, #12]
24011414:	681b      	ldr	r3, [r3, #0]
24011416:	68da      	ldr	r2, [r3, #12]
24011418:	68fb      	ldr	r3, [r7, #12]
2401141a:	681b      	ldr	r3, [r3, #0]
2401141c:	f042 0210 	orr.w	r2, r2, #16
24011420:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferRepeatBlockCpltCallback != NULL)
24011422:	68fb      	ldr	r3, [r7, #12]
24011424:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
24011426:	2b00      	cmp	r3, #0
24011428:	d007      	beq.n	2401143a <HAL_MDMA_Start_IT+0xa8>
    {
      /* if Repeated Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
2401142a:	68fb      	ldr	r3, [r7, #12]
2401142c:	681b      	ldr	r3, [r3, #0]
2401142e:	68da      	ldr	r2, [r3, #12]
24011430:	68fb      	ldr	r3, [r7, #12]
24011432:	681b      	ldr	r3, [r3, #0]
24011434:	f042 0208 	orr.w	r2, r2, #8
24011438:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferBufferCpltCallback != NULL)
2401143a:	68fb      	ldr	r3, [r7, #12]
2401143c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
2401143e:	2b00      	cmp	r3, #0
24011440:	d007      	beq.n	24011452 <HAL_MDMA_Start_IT+0xc0>
    {
      /* if buffer transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
24011442:	68fb      	ldr	r3, [r7, #12]
24011444:	681b      	ldr	r3, [r3, #0]
24011446:	68da      	ldr	r2, [r3, #12]
24011448:	68fb      	ldr	r3, [r7, #12]
2401144a:	681b      	ldr	r3, [r3, #0]
2401144c:	f042 0220 	orr.w	r2, r2, #32
24011450:	60da      	str	r2, [r3, #12]
    }

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
24011452:	68fb      	ldr	r3, [r7, #12]
24011454:	681b      	ldr	r3, [r3, #0]
24011456:	68da      	ldr	r2, [r3, #12]
24011458:	68fb      	ldr	r3, [r7, #12]
2401145a:	681b      	ldr	r3, [r3, #0]
2401145c:	f042 0201 	orr.w	r2, r2, #1
24011460:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
24011462:	68fb      	ldr	r3, [r7, #12]
24011464:	685b      	ldr	r3, [r3, #4]
24011466:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
2401146a:	d10e      	bne.n	2401148a <HAL_MDMA_Start_IT+0xf8>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
2401146c:	68fb      	ldr	r3, [r7, #12]
2401146e:	681b      	ldr	r3, [r3, #0]
24011470:	68da      	ldr	r2, [r3, #12]
24011472:	68fb      	ldr	r3, [r7, #12]
24011474:	681b      	ldr	r3, [r3, #0]
24011476:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
2401147a:	60da      	str	r2, [r3, #12]
2401147c:	e005      	b.n	2401148a <HAL_MDMA_Start_IT+0xf8>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
2401147e:	68fb      	ldr	r3, [r7, #12]
24011480:	2200      	movs	r2, #0
24011482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return error status */
    return HAL_BUSY;
24011486:	2302      	movs	r3, #2
24011488:	e000      	b.n	2401148c <HAL_MDMA_Start_IT+0xfa>
  }

  return HAL_OK;
2401148a:	2300      	movs	r3, #0
}
2401148c:	4618      	mov	r0, r3
2401148e:	3710      	adds	r7, #16
24011490:	46bd      	mov	sp, r7
24011492:	bd80      	pop	{r7, pc}

24011494 <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
24011494:	b580      	push	{r7, lr}
24011496:	b084      	sub	sp, #16
24011498:	af00      	add	r7, sp, #0
2401149a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart =  HAL_GetTick();
2401149c:	f7f1 fc28 	bl	24002cf0 <HAL_GetTick>
240114a0:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
240114a2:	687b      	ldr	r3, [r7, #4]
240114a4:	2b00      	cmp	r3, #0
240114a6:	d101      	bne.n	240114ac <HAL_MDMA_Abort+0x18>
  {
    return HAL_ERROR;
240114a8:	2301      	movs	r3, #1
240114aa:	e04a      	b.n	24011542 <HAL_MDMA_Abort+0xae>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
240114ac:	687b      	ldr	r3, [r7, #4]
240114ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
240114b2:	b2db      	uxtb	r3, r3
240114b4:	2b02      	cmp	r3, #2
240114b6:	d008      	beq.n	240114ca <HAL_MDMA_Abort+0x36>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
240114b8:	687b      	ldr	r3, [r7, #4]
240114ba:	2280      	movs	r2, #128	@ 0x80
240114bc:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
240114be:	687b      	ldr	r3, [r7, #4]
240114c0:	2200      	movs	r2, #0
240114c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
240114c6:	2301      	movs	r3, #1
240114c8:	e03b      	b.n	24011542 <HAL_MDMA_Abort+0xae>
  }
  else
  {
    /* Disable all the transfer interrupts */
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
240114ca:	687b      	ldr	r3, [r7, #4]
240114cc:	681b      	ldr	r3, [r3, #0]
240114ce:	68da      	ldr	r2, [r3, #12]
240114d0:	687b      	ldr	r3, [r7, #4]
240114d2:	681b      	ldr	r3, [r3, #0]
240114d4:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
240114d8:	60da      	str	r2, [r3, #12]

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
240114da:	687b      	ldr	r3, [r7, #4]
240114dc:	681b      	ldr	r3, [r3, #0]
240114de:	68da      	ldr	r2, [r3, #12]
240114e0:	687b      	ldr	r3, [r7, #4]
240114e2:	681b      	ldr	r3, [r3, #0]
240114e4:	f022 0201 	bic.w	r2, r2, #1
240114e8:	60da      	str	r2, [r3, #12]

    /* Check if the MDMA Channel is effectively disabled */
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
240114ea:	e016      	b.n	2401151a <HAL_MDMA_Abort+0x86>
    {
      /* Check for the Timeout */
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
240114ec:	f7f1 fc00 	bl	24002cf0 <HAL_GetTick>
240114f0:	4602      	mov	r2, r0
240114f2:	68fb      	ldr	r3, [r7, #12]
240114f4:	1ad3      	subs	r3, r2, r3
240114f6:	2b05      	cmp	r3, #5
240114f8:	d90f      	bls.n	2401151a <HAL_MDMA_Abort+0x86>
      {
        /* Update error code */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
240114fa:	687b      	ldr	r3, [r7, #4]
240114fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
240114fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
24011502:	687b      	ldr	r3, [r7, #4]
24011504:	669a      	str	r2, [r3, #104]	@ 0x68

        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
24011506:	687b      	ldr	r3, [r7, #4]
24011508:	2200      	movs	r2, #0
2401150a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the MDMA state */
        hmdma->State = HAL_MDMA_STATE_ERROR;
2401150e:	687b      	ldr	r3, [r7, #4]
24011510:	2203      	movs	r2, #3
24011512:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        return HAL_ERROR;
24011516:	2301      	movs	r3, #1
24011518:	e013      	b.n	24011542 <HAL_MDMA_Abort+0xae>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
2401151a:	687b      	ldr	r3, [r7, #4]
2401151c:	681b      	ldr	r3, [r3, #0]
2401151e:	68db      	ldr	r3, [r3, #12]
24011520:	f003 0301 	and.w	r3, r3, #1
24011524:	2b00      	cmp	r3, #0
24011526:	d1e1      	bne.n	240114ec <HAL_MDMA_Abort+0x58>
      }
    }

    /* Clear all interrupt flags */
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
24011528:	687b      	ldr	r3, [r7, #4]
2401152a:	681b      	ldr	r3, [r3, #0]
2401152c:	221f      	movs	r2, #31
2401152e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
24011530:	687b      	ldr	r3, [r7, #4]
24011532:	2200      	movs	r2, #0
24011534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
24011538:	687b      	ldr	r3, [r7, #4]
2401153a:	2201      	movs	r2, #1
2401153c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

  return HAL_OK;
24011540:	2300      	movs	r3, #0
}
24011542:	4618      	mov	r0, r3
24011544:	3710      	adds	r7, #16
24011546:	46bd      	mov	sp, r7
24011548:	bd80      	pop	{r7, pc}

2401154a <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
2401154a:	b480      	push	{r7}
2401154c:	b083      	sub	sp, #12
2401154e:	af00      	add	r7, sp, #0
24011550:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
24011552:	687b      	ldr	r3, [r7, #4]
24011554:	2b00      	cmp	r3, #0
24011556:	d101      	bne.n	2401155c <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
24011558:	2301      	movs	r3, #1
2401155a:	e017      	b.n	2401158c <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
2401155c:	687b      	ldr	r3, [r7, #4]
2401155e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
24011562:	b2db      	uxtb	r3, r3
24011564:	2b02      	cmp	r3, #2
24011566:	d004      	beq.n	24011572 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
24011568:	687b      	ldr	r3, [r7, #4]
2401156a:	2280      	movs	r2, #128	@ 0x80
2401156c:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
2401156e:	2301      	movs	r3, #1
24011570:	e00c      	b.n	2401158c <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
24011572:	687b      	ldr	r3, [r7, #4]
24011574:	2204      	movs	r2, #4
24011576:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
2401157a:	687b      	ldr	r3, [r7, #4]
2401157c:	681b      	ldr	r3, [r3, #0]
2401157e:	68da      	ldr	r2, [r3, #12]
24011580:	687b      	ldr	r3, [r7, #4]
24011582:	681b      	ldr	r3, [r3, #0]
24011584:	f022 0201 	bic.w	r2, r2, #1
24011588:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
2401158a:	2300      	movs	r3, #0
}
2401158c:	4618      	mov	r0, r3
2401158e:	370c      	adds	r7, #12
24011590:	46bd      	mov	sp, r7
24011592:	f85d 7b04 	ldr.w	r7, [sp], #4
24011596:	4770      	bx	lr

24011598 <HAL_MDMA_PollForTransfer>:
  * @param  CompleteLevel: Specifies the MDMA level complete.
  * @param  Timeout:       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_PollForTransfer(MDMA_HandleTypeDef *hmdma, HAL_MDMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
24011598:	b580      	push	{r7, lr}
2401159a:	b088      	sub	sp, #32
2401159c:	af00      	add	r7, sp, #0
2401159e:	60f8      	str	r0, [r7, #12]
240115a0:	460b      	mov	r3, r1
240115a2:	607a      	str	r2, [r7, #4]
240115a4:	72fb      	strb	r3, [r7, #11]

  /* Check the parameters */
  assert_param(IS_MDMA_LEVEL_COMPLETE(CompleteLevel));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
240115a6:	68fb      	ldr	r3, [r7, #12]
240115a8:	2b00      	cmp	r3, #0
240115aa:	d101      	bne.n	240115b0 <HAL_MDMA_PollForTransfer+0x18>
  {
    return HAL_ERROR;
240115ac:	2301      	movs	r3, #1
240115ae:	e0b9      	b.n	24011724 <HAL_MDMA_PollForTransfer+0x18c>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
240115b0:	68fb      	ldr	r3, [r7, #12]
240115b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
240115b6:	b2db      	uxtb	r3, r3
240115b8:	2b02      	cmp	r3, #2
240115ba:	d004      	beq.n	240115c6 <HAL_MDMA_PollForTransfer+0x2e>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
240115bc:	68fb      	ldr	r3, [r7, #12]
240115be:	2280      	movs	r2, #128	@ 0x80
240115c0:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
240115c2:	2301      	movs	r3, #1
240115c4:	e0ae      	b.n	24011724 <HAL_MDMA_PollForTransfer+0x18c>
  }

  /* Get the level transfer complete flag */
  levelFlag = ((CompleteLevel == HAL_MDMA_FULL_TRANSFER)  ? MDMA_FLAG_CTC  : \
240115c6:	7afb      	ldrb	r3, [r7, #11]
240115c8:	2b00      	cmp	r3, #0
240115ca:	d00b      	beq.n	240115e4 <HAL_MDMA_PollForTransfer+0x4c>
               (CompleteLevel == HAL_MDMA_BUFFER_TRANSFER)? MDMA_FLAG_BFTC : \
240115cc:	7afb      	ldrb	r3, [r7, #11]
240115ce:	2b01      	cmp	r3, #1
240115d0:	d006      	beq.n	240115e0 <HAL_MDMA_PollForTransfer+0x48>
               (CompleteLevel == HAL_MDMA_BLOCK_TRANSFER) ? MDMA_FLAG_BT   : \
240115d2:	7afb      	ldrb	r3, [r7, #11]
240115d4:	2b02      	cmp	r3, #2
240115d6:	d101      	bne.n	240115dc <HAL_MDMA_PollForTransfer+0x44>
240115d8:	2308      	movs	r3, #8
240115da:	e004      	b.n	240115e6 <HAL_MDMA_PollForTransfer+0x4e>
240115dc:	2304      	movs	r3, #4
240115de:	e002      	b.n	240115e6 <HAL_MDMA_PollForTransfer+0x4e>
               (CompleteLevel == HAL_MDMA_BUFFER_TRANSFER)? MDMA_FLAG_BFTC : \
240115e0:	2310      	movs	r3, #16
240115e2:	e000      	b.n	240115e6 <HAL_MDMA_PollForTransfer+0x4e>
  levelFlag = ((CompleteLevel == HAL_MDMA_FULL_TRANSFER)  ? MDMA_FLAG_CTC  : \
240115e4:	2302      	movs	r3, #2
240115e6:	61fb      	str	r3, [r7, #28]
               MDMA_FLAG_BRT);


  /* Get timeout */
  tickstart = HAL_GetTick();
240115e8:	f7f1 fb82 	bl	24002cf0 <HAL_GetTick>
240115ec:	61b8      	str	r0, [r7, #24]

  while(__HAL_MDMA_GET_FLAG(hmdma, levelFlag) == 0U)
240115ee:	e067      	b.n	240116c0 <HAL_MDMA_PollForTransfer+0x128>
  {
    if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
240115f0:	68fb      	ldr	r3, [r7, #12]
240115f2:	681b      	ldr	r3, [r3, #0]
240115f4:	681b      	ldr	r3, [r3, #0]
240115f6:	f003 0301 	and.w	r3, r3, #1
240115fa:	2b00      	cmp	r3, #0
240115fc:	d046      	beq.n	2401168c <HAL_MDMA_PollForTransfer+0xf4>
    {
      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
240115fe:	68fb      	ldr	r3, [r7, #12]
24011600:	681b      	ldr	r3, [r3, #0]
24011602:	689b      	ldr	r3, [r3, #8]
24011604:	617b      	str	r3, [r7, #20]

      if((errorFlag & MDMA_CESR_TED) == 0U)
24011606:	697b      	ldr	r3, [r7, #20]
24011608:	f003 0380 	and.w	r3, r3, #128	@ 0x80
2401160c:	2b00      	cmp	r3, #0
2401160e:	d106      	bne.n	2401161e <HAL_MDMA_PollForTransfer+0x86>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
24011610:	68fb      	ldr	r3, [r7, #12]
24011612:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
24011614:	f043 0201 	orr.w	r2, r3, #1
24011618:	68fb      	ldr	r3, [r7, #12]
2401161a:	669a      	str	r2, [r3, #104]	@ 0x68
2401161c:	e005      	b.n	2401162a <HAL_MDMA_PollForTransfer+0x92>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
2401161e:	68fb      	ldr	r3, [r7, #12]
24011620:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
24011622:	f043 0202 	orr.w	r2, r3, #2
24011626:	68fb      	ldr	r3, [r7, #12]
24011628:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
2401162a:	697b      	ldr	r3, [r7, #20]
2401162c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
24011630:	2b00      	cmp	r3, #0
24011632:	d005      	beq.n	24011640 <HAL_MDMA_PollForTransfer+0xa8>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
24011634:	68fb      	ldr	r3, [r7, #12]
24011636:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
24011638:	f043 0204 	orr.w	r2, r3, #4
2401163c:	68fb      	ldr	r3, [r7, #12]
2401163e:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
24011640:	697b      	ldr	r3, [r7, #20]
24011642:	f403 7380 	and.w	r3, r3, #256	@ 0x100
24011646:	2b00      	cmp	r3, #0
24011648:	d005      	beq.n	24011656 <HAL_MDMA_PollForTransfer+0xbe>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
2401164a:	68fb      	ldr	r3, [r7, #12]
2401164c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
2401164e:	f043 0208 	orr.w	r2, r3, #8
24011652:	68fb      	ldr	r3, [r7, #12]
24011654:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
24011656:	697b      	ldr	r3, [r7, #20]
24011658:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
2401165c:	2b00      	cmp	r3, #0
2401165e:	d005      	beq.n	2401166c <HAL_MDMA_PollForTransfer+0xd4>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
24011660:	68fb      	ldr	r3, [r7, #12]
24011662:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
24011664:	f043 0210 	orr.w	r2, r3, #16
24011668:	68fb      	ldr	r3, [r7, #12]
2401166a:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
2401166c:	697b      	ldr	r3, [r7, #20]
2401166e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
24011672:	2b00      	cmp	r3, #0
24011674:	d005      	beq.n	24011682 <HAL_MDMA_PollForTransfer+0xea>
      {
        /* Update error code : Block Size error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
24011676:	68fb      	ldr	r3, [r7, #12]
24011678:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
2401167a:	f043 0220 	orr.w	r2, r3, #32
2401167e:	68fb      	ldr	r3, [r7, #12]
24011680:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      (void) HAL_MDMA_Abort(hmdma); /* if error then abort the current transfer */
24011682:	68f8      	ldr	r0, [r7, #12]
24011684:	f7ff ff06 	bl	24011494 <HAL_MDMA_Abort>
          - Clear all transfer flags
          - Unlock
          - Set the State
      */

      return HAL_ERROR;
24011688:	2301      	movs	r3, #1
2401168a:	e04b      	b.n	24011724 <HAL_MDMA_PollForTransfer+0x18c>

    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
2401168c:	687b      	ldr	r3, [r7, #4]
2401168e:	f1b3 3fff 	cmp.w	r3, #4294967295
24011692:	d015      	beq.n	240116c0 <HAL_MDMA_PollForTransfer+0x128>
    {
      if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
24011694:	f7f1 fb2c 	bl	24002cf0 <HAL_GetTick>
24011698:	4602      	mov	r2, r0
2401169a:	69bb      	ldr	r3, [r7, #24]
2401169c:	1ad3      	subs	r3, r2, r3
2401169e:	687a      	ldr	r2, [r7, #4]
240116a0:	429a      	cmp	r2, r3
240116a2:	d302      	bcc.n	240116aa <HAL_MDMA_PollForTransfer+0x112>
240116a4:	687b      	ldr	r3, [r7, #4]
240116a6:	2b00      	cmp	r3, #0
240116a8:	d10a      	bne.n	240116c0 <HAL_MDMA_PollForTransfer+0x128>
      {
        /* Update error code */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
240116aa:	68fb      	ldr	r3, [r7, #12]
240116ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
240116ae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
240116b2:	68fb      	ldr	r3, [r7, #12]
240116b4:	669a      	str	r2, [r3, #104]	@ 0x68

        (void) HAL_MDMA_Abort(hmdma); /* if timeout then abort the current transfer */
240116b6:	68f8      	ldr	r0, [r7, #12]
240116b8:	f7ff feec 	bl	24011494 <HAL_MDMA_Abort>
            - Clear all transfer flags
            - Unlock
            - Set the State
        */

        return HAL_ERROR;
240116bc:	2301      	movs	r3, #1
240116be:	e031      	b.n	24011724 <HAL_MDMA_PollForTransfer+0x18c>
  while(__HAL_MDMA_GET_FLAG(hmdma, levelFlag) == 0U)
240116c0:	68fb      	ldr	r3, [r7, #12]
240116c2:	681b      	ldr	r3, [r3, #0]
240116c4:	681a      	ldr	r2, [r3, #0]
240116c6:	69fb      	ldr	r3, [r7, #28]
240116c8:	4013      	ands	r3, r2
240116ca:	2b00      	cmp	r3, #0
240116cc:	d090      	beq.n	240115f0 <HAL_MDMA_PollForTransfer+0x58>
      }
    }
  }

  /* Clear the transfer level flag */
  if(CompleteLevel == HAL_MDMA_BUFFER_TRANSFER)
240116ce:	7afb      	ldrb	r3, [r7, #11]
240116d0:	2b01      	cmp	r3, #1
240116d2:	d104      	bne.n	240116de <HAL_MDMA_PollForTransfer+0x146>
  {
    __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
240116d4:	68fb      	ldr	r3, [r7, #12]
240116d6:	681b      	ldr	r3, [r3, #0]
240116d8:	2210      	movs	r2, #16
240116da:	605a      	str	r2, [r3, #4]
240116dc:	e021      	b.n	24011722 <HAL_MDMA_PollForTransfer+0x18a>

  }
  else if(CompleteLevel == HAL_MDMA_BLOCK_TRANSFER)
240116de:	7afb      	ldrb	r3, [r7, #11]
240116e0:	2b02      	cmp	r3, #2
240116e2:	d104      	bne.n	240116ee <HAL_MDMA_PollForTransfer+0x156>
  {
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_BFTC | MDMA_FLAG_BT));
240116e4:	68fb      	ldr	r3, [r7, #12]
240116e6:	681b      	ldr	r3, [r3, #0]
240116e8:	2218      	movs	r2, #24
240116ea:	605a      	str	r2, [r3, #4]
240116ec:	e019      	b.n	24011722 <HAL_MDMA_PollForTransfer+0x18a>

  }
  else if(CompleteLevel == HAL_MDMA_REPEAT_BLOCK_TRANSFER)
240116ee:	7afb      	ldrb	r3, [r7, #11]
240116f0:	2b03      	cmp	r3, #3
240116f2:	d104      	bne.n	240116fe <HAL_MDMA_PollForTransfer+0x166>
  {
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_BFTC | MDMA_FLAG_BT | MDMA_FLAG_BRT));
240116f4:	68fb      	ldr	r3, [r7, #12]
240116f6:	681b      	ldr	r3, [r3, #0]
240116f8:	221c      	movs	r2, #28
240116fa:	605a      	str	r2, [r3, #4]
240116fc:	e011      	b.n	24011722 <HAL_MDMA_PollForTransfer+0x18a>
  }
  else if(CompleteLevel == HAL_MDMA_FULL_TRANSFER)
240116fe:	7afb      	ldrb	r3, [r7, #11]
24011700:	2b00      	cmp	r3, #0
24011702:	d10c      	bne.n	2401171e <HAL_MDMA_PollForTransfer+0x186>
  {
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC | MDMA_FLAG_CTC));
24011704:	68fb      	ldr	r3, [r7, #12]
24011706:	681b      	ldr	r3, [r3, #0]
24011708:	221e      	movs	r2, #30
2401170a:	605a      	str	r2, [r3, #4]

    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
2401170c:	68fb      	ldr	r3, [r7, #12]
2401170e:	2200      	movs	r2, #0
24011710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    hmdma->State = HAL_MDMA_STATE_READY;
24011714:	68fb      	ldr	r3, [r7, #12]
24011716:	2201      	movs	r2, #1
24011718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
2401171c:	e001      	b.n	24011722 <HAL_MDMA_PollForTransfer+0x18a>
  }
  else
  {
    return HAL_ERROR;
2401171e:	2301      	movs	r3, #1
24011720:	e000      	b.n	24011724 <HAL_MDMA_PollForTransfer+0x18c>
  }

  return HAL_OK;
24011722:	2300      	movs	r3, #0
}
24011724:	4618      	mov	r0, r3
24011726:	3720      	adds	r7, #32
24011728:	46bd      	mov	sp, r7
2401172a:	bd80      	pop	{r7, pc}

2401172c <HAL_MDMA_GenerateSWRequest>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_GenerateSWRequest(MDMA_HandleTypeDef *hmdma)
{
2401172c:	b480      	push	{r7}
2401172e:	b085      	sub	sp, #20
24011730:	af00      	add	r7, sp, #0
24011732:	6078      	str	r0, [r7, #4]
  uint32_t request_mode;

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
24011734:	687b      	ldr	r3, [r7, #4]
24011736:	2b00      	cmp	r3, #0
24011738:	d101      	bne.n	2401173e <HAL_MDMA_GenerateSWRequest+0x12>
  {
    return HAL_ERROR;
2401173a:	2301      	movs	r3, #1
2401173c:	e02a      	b.n	24011794 <HAL_MDMA_GenerateSWRequest+0x68>
  }

  /* Get the softawre request mode */
  request_mode = hmdma->Instance->CTCR & MDMA_CTCR_SWRM;
2401173e:	687b      	ldr	r3, [r7, #4]
24011740:	681b      	ldr	r3, [r3, #0]
24011742:	691b      	ldr	r3, [r3, #16]
24011744:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
24011748:	60fb      	str	r3, [r7, #12]

  if((hmdma->Instance->CCR &  MDMA_CCR_EN) == 0U)
2401174a:	687b      	ldr	r3, [r7, #4]
2401174c:	681b      	ldr	r3, [r3, #0]
2401174e:	68db      	ldr	r3, [r3, #12]
24011750:	f003 0301 	and.w	r3, r3, #1
24011754:	2b00      	cmp	r3, #0
24011756:	d104      	bne.n	24011762 <HAL_MDMA_GenerateSWRequest+0x36>
  {
    /* if no Transfer on going (MDMA enable bit not set) return error */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
24011758:	687b      	ldr	r3, [r7, #4]
2401175a:	2280      	movs	r2, #128	@ 0x80
2401175c:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
2401175e:	2301      	movs	r3, #1
24011760:	e018      	b.n	24011794 <HAL_MDMA_GenerateSWRequest+0x68>
  }
  else if(((hmdma->Instance->CISR &  MDMA_CISR_CRQA) != 0U) || (request_mode == 0U))
24011762:	687b      	ldr	r3, [r7, #4]
24011764:	681b      	ldr	r3, [r3, #0]
24011766:	681b      	ldr	r3, [r3, #0]
24011768:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
2401176c:	2b00      	cmp	r3, #0
2401176e:	d102      	bne.n	24011776 <HAL_MDMA_GenerateSWRequest+0x4a>
24011770:	68fb      	ldr	r3, [r7, #12]
24011772:	2b00      	cmp	r3, #0
24011774:	d105      	bne.n	24011782 <HAL_MDMA_GenerateSWRequest+0x56>
  {
    /* if an MDMA ongoing request has not yet end or if request mode is not SW request return error */
    hmdma->ErrorCode = HAL_MDMA_ERROR_BUSY;
24011776:	687b      	ldr	r3, [r7, #4]
24011778:	f44f 7280 	mov.w	r2, #256	@ 0x100
2401177c:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
2401177e:	2301      	movs	r3, #1
24011780:	e008      	b.n	24011794 <HAL_MDMA_GenerateSWRequest+0x68>
  }
  else
  {
    /* Set the SW request bit to activate the request on the Channel */
    hmdma->Instance->CCR |= MDMA_CCR_SWRQ;
24011782:	687b      	ldr	r3, [r7, #4]
24011784:	681b      	ldr	r3, [r3, #0]
24011786:	68da      	ldr	r2, [r3, #12]
24011788:	687b      	ldr	r3, [r7, #4]
2401178a:	681b      	ldr	r3, [r3, #0]
2401178c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
24011790:	60da      	str	r2, [r3, #12]

    return HAL_OK;
24011792:	2300      	movs	r3, #0
  }
}
24011794:	4618      	mov	r0, r3
24011796:	3714      	adds	r7, #20
24011798:	46bd      	mov	sp, r7
2401179a:	f85d 7b04 	ldr.w	r7, [sp], #4
2401179e:	4770      	bx	lr

240117a0 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
240117a0:	b580      	push	{r7, lr}
240117a2:	b086      	sub	sp, #24
240117a4:	af00      	add	r7, sp, #0
240117a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
240117a8:	2300      	movs	r3, #0
240117aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
240117ac:	4b91      	ldr	r3, [pc, #580]	@ (240119f4 <HAL_MDMA_IRQHandler+0x254>)
240117ae:	681b      	ldr	r3, [r3, #0]
240117b0:	4a91      	ldr	r2, [pc, #580]	@ (240119f8 <HAL_MDMA_IRQHandler+0x258>)
240117b2:	fba2 2303 	umull	r2, r3, r2, r3
240117b6:	0a9b      	lsrs	r3, r3, #10
240117b8:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
240117ba:	687b      	ldr	r3, [r7, #4]
240117bc:	681b      	ldr	r3, [r3, #0]
240117be:	461a      	mov	r2, r3
240117c0:	4b8e      	ldr	r3, [pc, #568]	@ (240119fc <HAL_MDMA_IRQHandler+0x25c>)
240117c2:	4413      	add	r3, r2
240117c4:	099b      	lsrs	r3, r3, #6
240117c6:	f003 031f 	and.w	r3, r3, #31
240117ca:	2201      	movs	r2, #1
240117cc:	fa02 f303 	lsl.w	r3, r2, r3
240117d0:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
240117d2:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
240117d6:	681a      	ldr	r2, [r3, #0]
240117d8:	693b      	ldr	r3, [r7, #16]
240117da:	4013      	ands	r3, r2
240117dc:	2b00      	cmp	r3, #0
240117de:	f000 812d 	beq.w	24011a3c <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
240117e2:	687b      	ldr	r3, [r7, #4]
240117e4:	681b      	ldr	r3, [r3, #0]
240117e6:	681b      	ldr	r3, [r3, #0]
240117e8:	f003 0301 	and.w	r3, r3, #1
240117ec:	2b00      	cmp	r3, #0
240117ee:	d054      	beq.n	2401189a <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
240117f0:	687b      	ldr	r3, [r7, #4]
240117f2:	681b      	ldr	r3, [r3, #0]
240117f4:	68db      	ldr	r3, [r3, #12]
240117f6:	f003 0302 	and.w	r3, r3, #2
240117fa:	2b00      	cmp	r3, #0
240117fc:	d04d      	beq.n	2401189a <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
240117fe:	687b      	ldr	r3, [r7, #4]
24011800:	681b      	ldr	r3, [r3, #0]
24011802:	68da      	ldr	r2, [r3, #12]
24011804:	687b      	ldr	r3, [r7, #4]
24011806:	681b      	ldr	r3, [r3, #0]
24011808:	f022 0202 	bic.w	r2, r2, #2
2401180c:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
2401180e:	687b      	ldr	r3, [r7, #4]
24011810:	681b      	ldr	r3, [r3, #0]
24011812:	689b      	ldr	r3, [r3, #8]
24011814:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
24011816:	68fb      	ldr	r3, [r7, #12]
24011818:	f003 0380 	and.w	r3, r3, #128	@ 0x80
2401181c:	2b00      	cmp	r3, #0
2401181e:	d106      	bne.n	2401182e <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
24011820:	687b      	ldr	r3, [r7, #4]
24011822:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
24011824:	f043 0201 	orr.w	r2, r3, #1
24011828:	687b      	ldr	r3, [r7, #4]
2401182a:	669a      	str	r2, [r3, #104]	@ 0x68
2401182c:	e005      	b.n	2401183a <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
2401182e:	687b      	ldr	r3, [r7, #4]
24011830:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
24011832:	f043 0202 	orr.w	r2, r3, #2
24011836:	687b      	ldr	r3, [r7, #4]
24011838:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
2401183a:	68fb      	ldr	r3, [r7, #12]
2401183c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
24011840:	2b00      	cmp	r3, #0
24011842:	d005      	beq.n	24011850 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
24011844:	687b      	ldr	r3, [r7, #4]
24011846:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
24011848:	f043 0204 	orr.w	r2, r3, #4
2401184c:	687b      	ldr	r3, [r7, #4]
2401184e:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
24011850:	68fb      	ldr	r3, [r7, #12]
24011852:	f403 7380 	and.w	r3, r3, #256	@ 0x100
24011856:	2b00      	cmp	r3, #0
24011858:	d005      	beq.n	24011866 <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
2401185a:	687b      	ldr	r3, [r7, #4]
2401185c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
2401185e:	f043 0208 	orr.w	r2, r3, #8
24011862:	687b      	ldr	r3, [r7, #4]
24011864:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
24011866:	68fb      	ldr	r3, [r7, #12]
24011868:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
2401186c:	2b00      	cmp	r3, #0
2401186e:	d005      	beq.n	2401187c <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
24011870:	687b      	ldr	r3, [r7, #4]
24011872:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
24011874:	f043 0210 	orr.w	r2, r3, #16
24011878:	687b      	ldr	r3, [r7, #4]
2401187a:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
2401187c:	68fb      	ldr	r3, [r7, #12]
2401187e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
24011882:	2b00      	cmp	r3, #0
24011884:	d005      	beq.n	24011892 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
24011886:	687b      	ldr	r3, [r7, #4]
24011888:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
2401188a:	f043 0220 	orr.w	r2, r3, #32
2401188e:	687b      	ldr	r3, [r7, #4]
24011890:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
24011892:	687b      	ldr	r3, [r7, #4]
24011894:	681b      	ldr	r3, [r3, #0]
24011896:	2201      	movs	r2, #1
24011898:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
2401189a:	687b      	ldr	r3, [r7, #4]
2401189c:	681b      	ldr	r3, [r3, #0]
2401189e:	681b      	ldr	r3, [r3, #0]
240118a0:	f003 0310 	and.w	r3, r3, #16
240118a4:	2b00      	cmp	r3, #0
240118a6:	d012      	beq.n	240118ce <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
240118a8:	687b      	ldr	r3, [r7, #4]
240118aa:	681b      	ldr	r3, [r3, #0]
240118ac:	68db      	ldr	r3, [r3, #12]
240118ae:	f003 0320 	and.w	r3, r3, #32
240118b2:	2b00      	cmp	r3, #0
240118b4:	d00b      	beq.n	240118ce <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
240118b6:	687b      	ldr	r3, [r7, #4]
240118b8:	681b      	ldr	r3, [r3, #0]
240118ba:	2210      	movs	r2, #16
240118bc:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
240118be:	687b      	ldr	r3, [r7, #4]
240118c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
240118c2:	2b00      	cmp	r3, #0
240118c4:	d003      	beq.n	240118ce <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
240118c6:	687b      	ldr	r3, [r7, #4]
240118c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
240118ca:	6878      	ldr	r0, [r7, #4]
240118cc:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
240118ce:	687b      	ldr	r3, [r7, #4]
240118d0:	681b      	ldr	r3, [r3, #0]
240118d2:	681b      	ldr	r3, [r3, #0]
240118d4:	f003 0308 	and.w	r3, r3, #8
240118d8:	2b00      	cmp	r3, #0
240118da:	d012      	beq.n	24011902 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
240118dc:	687b      	ldr	r3, [r7, #4]
240118de:	681b      	ldr	r3, [r3, #0]
240118e0:	68db      	ldr	r3, [r3, #12]
240118e2:	f003 0310 	and.w	r3, r3, #16
240118e6:	2b00      	cmp	r3, #0
240118e8:	d00b      	beq.n	24011902 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
240118ea:	687b      	ldr	r3, [r7, #4]
240118ec:	681b      	ldr	r3, [r3, #0]
240118ee:	2208      	movs	r2, #8
240118f0:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
240118f2:	687b      	ldr	r3, [r7, #4]
240118f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
240118f6:	2b00      	cmp	r3, #0
240118f8:	d003      	beq.n	24011902 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
240118fa:	687b      	ldr	r3, [r7, #4]
240118fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
240118fe:	6878      	ldr	r0, [r7, #4]
24011900:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
24011902:	687b      	ldr	r3, [r7, #4]
24011904:	681b      	ldr	r3, [r3, #0]
24011906:	681b      	ldr	r3, [r3, #0]
24011908:	f003 0304 	and.w	r3, r3, #4
2401190c:	2b00      	cmp	r3, #0
2401190e:	d012      	beq.n	24011936 <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
24011910:	687b      	ldr	r3, [r7, #4]
24011912:	681b      	ldr	r3, [r3, #0]
24011914:	68db      	ldr	r3, [r3, #12]
24011916:	f003 0308 	and.w	r3, r3, #8
2401191a:	2b00      	cmp	r3, #0
2401191c:	d00b      	beq.n	24011936 <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
2401191e:	687b      	ldr	r3, [r7, #4]
24011920:	681b      	ldr	r3, [r3, #0]
24011922:	2204      	movs	r2, #4
24011924:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
24011926:	687b      	ldr	r3, [r7, #4]
24011928:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2401192a:	2b00      	cmp	r3, #0
2401192c:	d003      	beq.n	24011936 <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
2401192e:	687b      	ldr	r3, [r7, #4]
24011930:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
24011932:	6878      	ldr	r0, [r7, #4]
24011934:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
24011936:	687b      	ldr	r3, [r7, #4]
24011938:	681b      	ldr	r3, [r3, #0]
2401193a:	681b      	ldr	r3, [r3, #0]
2401193c:	f003 0302 	and.w	r3, r3, #2
24011940:	2b00      	cmp	r3, #0
24011942:	d039      	beq.n	240119b8 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
24011944:	687b      	ldr	r3, [r7, #4]
24011946:	681b      	ldr	r3, [r3, #0]
24011948:	68db      	ldr	r3, [r3, #12]
2401194a:	f003 0304 	and.w	r3, r3, #4
2401194e:	2b00      	cmp	r3, #0
24011950:	d032      	beq.n	240119b8 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
24011952:	687b      	ldr	r3, [r7, #4]
24011954:	681b      	ldr	r3, [r3, #0]
24011956:	68da      	ldr	r2, [r3, #12]
24011958:	687b      	ldr	r3, [r7, #4]
2401195a:	681b      	ldr	r3, [r3, #0]
2401195c:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
24011960:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
24011962:	687b      	ldr	r3, [r7, #4]
24011964:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
24011968:	b2db      	uxtb	r3, r3
2401196a:	2b04      	cmp	r3, #4
2401196c:	d110      	bne.n	24011990 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
2401196e:	687b      	ldr	r3, [r7, #4]
24011970:	2200      	movs	r2, #0
24011972:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
24011976:	687b      	ldr	r3, [r7, #4]
24011978:	2201      	movs	r2, #1
2401197a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        if(hmdma->XferAbortCallback != NULL)
2401197e:	687b      	ldr	r3, [r7, #4]
24011980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
24011982:	2b00      	cmp	r3, #0
24011984:	d05c      	beq.n	24011a40 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
24011986:	687b      	ldr	r3, [r7, #4]
24011988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
2401198a:	6878      	ldr	r0, [r7, #4]
2401198c:	4798      	blx	r3
        }
        return;
2401198e:	e057      	b.n	24011a40 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
24011990:	687b      	ldr	r3, [r7, #4]
24011992:	681b      	ldr	r3, [r3, #0]
24011994:	2202      	movs	r2, #2
24011996:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
24011998:	687b      	ldr	r3, [r7, #4]
2401199a:	2200      	movs	r2, #0
2401199c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
240119a0:	687b      	ldr	r3, [r7, #4]
240119a2:	2201      	movs	r2, #1
240119a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if(hmdma->XferCpltCallback != NULL)
240119a8:	687b      	ldr	r3, [r7, #4]
240119aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
240119ac:	2b00      	cmp	r3, #0
240119ae:	d003      	beq.n	240119b8 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
240119b0:	687b      	ldr	r3, [r7, #4]
240119b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
240119b4:	6878      	ldr	r0, [r7, #4]
240119b6:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
240119b8:	687b      	ldr	r3, [r7, #4]
240119ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
240119bc:	2b00      	cmp	r3, #0
240119be:	d040      	beq.n	24011a42 <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
240119c0:	687b      	ldr	r3, [r7, #4]
240119c2:	2204      	movs	r2, #4
240119c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
240119c8:	687b      	ldr	r3, [r7, #4]
240119ca:	681b      	ldr	r3, [r3, #0]
240119cc:	68da      	ldr	r2, [r3, #12]
240119ce:	687b      	ldr	r3, [r7, #4]
240119d0:	681b      	ldr	r3, [r3, #0]
240119d2:	f022 0201 	bic.w	r2, r2, #1
240119d6:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
240119d8:	68bb      	ldr	r3, [r7, #8]
240119da:	3301      	adds	r3, #1
240119dc:	60bb      	str	r3, [r7, #8]
240119de:	697a      	ldr	r2, [r7, #20]
240119e0:	429a      	cmp	r2, r3
240119e2:	d30d      	bcc.n	24011a00 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
240119e4:	687b      	ldr	r3, [r7, #4]
240119e6:	681b      	ldr	r3, [r3, #0]
240119e8:	68db      	ldr	r3, [r3, #12]
240119ea:	f003 0301 	and.w	r3, r3, #1
240119ee:	2b00      	cmp	r3, #0
240119f0:	d1f2      	bne.n	240119d8 <HAL_MDMA_IRQHandler+0x238>
240119f2:	e006      	b.n	24011a02 <HAL_MDMA_IRQHandler+0x262>
240119f4:	240004b8 	.word	0x240004b8
240119f8:	1b4e81b5 	.word	0x1b4e81b5
240119fc:	adffffc0 	.word	0xadffffc0
        break;
24011a00:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
24011a02:	687b      	ldr	r3, [r7, #4]
24011a04:	2200      	movs	r2, #0
24011a06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
24011a0a:	687b      	ldr	r3, [r7, #4]
24011a0c:	681b      	ldr	r3, [r3, #0]
24011a0e:	68db      	ldr	r3, [r3, #12]
24011a10:	f003 0301 	and.w	r3, r3, #1
24011a14:	2b00      	cmp	r3, #0
24011a16:	d004      	beq.n	24011a22 <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
24011a18:	687b      	ldr	r3, [r7, #4]
24011a1a:	2203      	movs	r2, #3
24011a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
24011a20:	e003      	b.n	24011a2a <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
24011a22:	687b      	ldr	r3, [r7, #4]
24011a24:	2201      	movs	r2, #1
24011a26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
24011a2a:	687b      	ldr	r3, [r7, #4]
24011a2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
24011a2e:	2b00      	cmp	r3, #0
24011a30:	d007      	beq.n	24011a42 <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
24011a32:	687b      	ldr	r3, [r7, #4]
24011a34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
24011a36:	6878      	ldr	r0, [r7, #4]
24011a38:	4798      	blx	r3
24011a3a:	e002      	b.n	24011a42 <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
24011a3c:	bf00      	nop
24011a3e:	e000      	b.n	24011a42 <HAL_MDMA_IRQHandler+0x2a2>
        return;
24011a40:	bf00      	nop
    }
  }
}
24011a42:	3718      	adds	r7, #24
24011a44:	46bd      	mov	sp, r7
24011a46:	bd80      	pop	{r7, pc}

24011a48 <HAL_MDMA_GetState>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL state
  */
HAL_MDMA_StateTypeDef HAL_MDMA_GetState(MDMA_HandleTypeDef *hmdma)
{
24011a48:	b480      	push	{r7}
24011a4a:	b083      	sub	sp, #12
24011a4c:	af00      	add	r7, sp, #0
24011a4e:	6078      	str	r0, [r7, #4]
  return hmdma->State;
24011a50:	687b      	ldr	r3, [r7, #4]
24011a52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
24011a56:	b2db      	uxtb	r3, r3
}
24011a58:	4618      	mov	r0, r3
24011a5a:	370c      	adds	r7, #12
24011a5c:	46bd      	mov	sp, r7
24011a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
24011a62:	4770      	bx	lr

24011a64 <HAL_MDMA_GetError>:
  * @param  hmdma : pointer to a MDMA_HandleTypeDef structure that contains
  *              the configuration information for the specified MDMA Channel.
  * @retval MDMA Error Code
  */
uint32_t HAL_MDMA_GetError(MDMA_HandleTypeDef *hmdma)
{
24011a64:	b480      	push	{r7}
24011a66:	b083      	sub	sp, #12
24011a68:	af00      	add	r7, sp, #0
24011a6a:	6078      	str	r0, [r7, #4]
  return hmdma->ErrorCode;
24011a6c:	687b      	ldr	r3, [r7, #4]
24011a6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
}
24011a70:	4618      	mov	r0, r3
24011a72:	370c      	adds	r7, #12
24011a74:	46bd      	mov	sp, r7
24011a76:	f85d 7b04 	ldr.w	r7, [sp], #4
24011a7a:	4770      	bx	lr

24011a7c <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
24011a7c:	b480      	push	{r7}
24011a7e:	b087      	sub	sp, #28
24011a80:	af00      	add	r7, sp, #0
24011a82:	60f8      	str	r0, [r7, #12]
24011a84:	60b9      	str	r1, [r7, #8]
24011a86:	607a      	str	r2, [r7, #4]
24011a88:	603b      	str	r3, [r7, #0]
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
24011a8a:	68fb      	ldr	r3, [r7, #12]
24011a8c:	681b      	ldr	r3, [r3, #0]
24011a8e:	695a      	ldr	r2, [r3, #20]
24011a90:	4b31      	ldr	r3, [pc, #196]	@ (24011b58 <MDMA_SetConfig+0xdc>)
24011a92:	4013      	ands	r3, r2
24011a94:	683a      	ldr	r2, [r7, #0]
24011a96:	f3c2 0110 	ubfx	r1, r2, #0, #17
24011a9a:	68fa      	ldr	r2, [r7, #12]
24011a9c:	6812      	ldr	r2, [r2, #0]
24011a9e:	430b      	orrs	r3, r1
24011aa0:	6153      	str	r3, [r2, #20]

  /* Configure the MDMA block repeat count */
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
24011aa2:	68fb      	ldr	r3, [r7, #12]
24011aa4:	681b      	ldr	r3, [r3, #0]
24011aa6:	695b      	ldr	r3, [r3, #20]
24011aa8:	f3c3 0113 	ubfx	r1, r3, #0, #20
24011aac:	6a3b      	ldr	r3, [r7, #32]
24011aae:	3b01      	subs	r3, #1
24011ab0:	051a      	lsls	r2, r3, #20
24011ab2:	68fb      	ldr	r3, [r7, #12]
24011ab4:	681b      	ldr	r3, [r3, #0]
24011ab6:	430a      	orrs	r2, r1
24011ab8:	615a      	str	r2, [r3, #20]

  /* Clear all interrupt flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
24011aba:	68fb      	ldr	r3, [r7, #12]
24011abc:	681b      	ldr	r3, [r3, #0]
24011abe:	221f      	movs	r2, #31
24011ac0:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Channel destination address */
  hmdma->Instance->CDAR = DstAddress;
24011ac2:	68fb      	ldr	r3, [r7, #12]
24011ac4:	681b      	ldr	r3, [r3, #0]
24011ac6:	687a      	ldr	r2, [r7, #4]
24011ac8:	61da      	str	r2, [r3, #28]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;
24011aca:	68fb      	ldr	r3, [r7, #12]
24011acc:	681b      	ldr	r3, [r3, #0]
24011ace:	68ba      	ldr	r2, [r7, #8]
24011ad0:	619a      	str	r2, [r3, #24]

  addressMask = SrcAddress & 0xFF000000U;
24011ad2:	68bb      	ldr	r3, [r7, #8]
24011ad4:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
24011ad8:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
24011ada:	697b      	ldr	r3, [r7, #20]
24011adc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
24011ae0:	d002      	beq.n	24011ae8 <MDMA_SetConfig+0x6c>
24011ae2:	697b      	ldr	r3, [r7, #20]
24011ae4:	2b00      	cmp	r3, #0
24011ae6:	d108      	bne.n	24011afa <MDMA_SetConfig+0x7e>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
24011ae8:	68fb      	ldr	r3, [r7, #12]
24011aea:	681b      	ldr	r3, [r3, #0]
24011aec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
24011aee:	68fb      	ldr	r3, [r7, #12]
24011af0:	681b      	ldr	r3, [r3, #0]
24011af2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
24011af6:	629a      	str	r2, [r3, #40]	@ 0x28
24011af8:	e007      	b.n	24011b0a <MDMA_SetConfig+0x8e>
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
24011afa:	68fb      	ldr	r3, [r7, #12]
24011afc:	681b      	ldr	r3, [r3, #0]
24011afe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
24011b00:	68fb      	ldr	r3, [r7, #12]
24011b02:	681b      	ldr	r3, [r3, #0]
24011b04:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
24011b08:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  addressMask = DstAddress & 0xFF000000U;
24011b0a:	687b      	ldr	r3, [r7, #4]
24011b0c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
24011b10:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
24011b12:	697b      	ldr	r3, [r7, #20]
24011b14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
24011b18:	d002      	beq.n	24011b20 <MDMA_SetConfig+0xa4>
24011b1a:	697b      	ldr	r3, [r7, #20]
24011b1c:	2b00      	cmp	r3, #0
24011b1e:	d108      	bne.n	24011b32 <MDMA_SetConfig+0xb6>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
24011b20:	68fb      	ldr	r3, [r7, #12]
24011b22:	681b      	ldr	r3, [r3, #0]
24011b24:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
24011b26:	68fb      	ldr	r3, [r7, #12]
24011b28:	681b      	ldr	r3, [r3, #0]
24011b2a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
24011b2e:	629a      	str	r2, [r3, #40]	@ 0x28
24011b30:	e007      	b.n	24011b42 <MDMA_SetConfig+0xc6>
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
24011b32:	68fb      	ldr	r3, [r7, #12]
24011b34:	681b      	ldr	r3, [r3, #0]
24011b36:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
24011b38:	68fb      	ldr	r3, [r7, #12]
24011b3a:	681b      	ldr	r3, [r3, #0]
24011b3c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
24011b40:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
24011b42:	68fb      	ldr	r3, [r7, #12]
24011b44:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
24011b46:	68fb      	ldr	r3, [r7, #12]
24011b48:	681b      	ldr	r3, [r3, #0]
24011b4a:	625a      	str	r2, [r3, #36]	@ 0x24
}
24011b4c:	bf00      	nop
24011b4e:	371c      	adds	r7, #28
24011b50:	46bd      	mov	sp, r7
24011b52:	f85d 7b04 	ldr.w	r7, [sp], #4
24011b56:	4770      	bx	lr
24011b58:	fffe0000 	.word	0xfffe0000

24011b5c <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
24011b5c:	b480      	push	{r7}
24011b5e:	b085      	sub	sp, #20
24011b60:	af00      	add	r7, sp, #0
24011b62:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
24011b64:	687b      	ldr	r3, [r7, #4]
24011b66:	68d9      	ldr	r1, [r3, #12]
24011b68:	687b      	ldr	r3, [r7, #4]
24011b6a:	691a      	ldr	r2, [r3, #16]
24011b6c:	687b      	ldr	r3, [r7, #4]
24011b6e:	681b      	ldr	r3, [r3, #0]
24011b70:	430a      	orrs	r2, r1
24011b72:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
24011b74:	687b      	ldr	r3, [r7, #4]
24011b76:	695a      	ldr	r2, [r3, #20]
24011b78:	687b      	ldr	r3, [r7, #4]
24011b7a:	699b      	ldr	r3, [r3, #24]
24011b7c:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
24011b7e:	687b      	ldr	r3, [r7, #4]
24011b80:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
24011b82:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
24011b84:	687b      	ldr	r3, [r7, #4]
24011b86:	6a1b      	ldr	r3, [r3, #32]
24011b88:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
24011b8a:	687b      	ldr	r3, [r7, #4]
24011b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
24011b8e:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
24011b90:	687b      	ldr	r3, [r7, #4]
24011b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
24011b94:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
24011b96:	687b      	ldr	r3, [r7, #4]
24011b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
24011b9a:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
24011b9c:	687b      	ldr	r3, [r7, #4]
24011b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
24011ba0:	3b01      	subs	r3, #1
24011ba2:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
24011ba4:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
24011ba8:	687b      	ldr	r3, [r7, #4]
24011baa:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
24011bac:	687b      	ldr	r3, [r7, #4]
24011bae:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
24011bb0:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
24011bb2:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
24011bb4:	687b      	ldr	r3, [r7, #4]
24011bb6:	685b      	ldr	r3, [r3, #4]
24011bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
24011bbc:	d107      	bne.n	24011bce <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
24011bbe:	687b      	ldr	r3, [r7, #4]
24011bc0:	681b      	ldr	r3, [r3, #0]
24011bc2:	691a      	ldr	r2, [r3, #16]
24011bc4:	687b      	ldr	r3, [r7, #4]
24011bc6:	681b      	ldr	r3, [r3, #0]
24011bc8:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
24011bcc:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
24011bce:	687b      	ldr	r3, [r7, #4]
24011bd0:	681b      	ldr	r3, [r3, #0]
24011bd2:	2200      	movs	r2, #0
24011bd4:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
24011bd6:	687b      	ldr	r3, [r7, #4]
24011bd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
24011bda:	2b00      	cmp	r3, #0
24011bdc:	da11      	bge.n	24011c02 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
24011bde:	687b      	ldr	r3, [r7, #4]
24011be0:	681b      	ldr	r3, [r3, #0]
24011be2:	695a      	ldr	r2, [r3, #20]
24011be4:	687b      	ldr	r3, [r7, #4]
24011be6:	681b      	ldr	r3, [r3, #0]
24011be8:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
24011bec:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
24011bee:	687b      	ldr	r3, [r7, #4]
24011bf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
24011bf2:	425b      	negs	r3, r3
24011bf4:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
24011bf6:	687b      	ldr	r3, [r7, #4]
24011bf8:	681b      	ldr	r3, [r3, #0]
24011bfa:	68fa      	ldr	r2, [r7, #12]
24011bfc:	b292      	uxth	r2, r2
24011bfe:	621a      	str	r2, [r3, #32]
24011c00:	e006      	b.n	24011c10 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
24011c02:	687b      	ldr	r3, [r7, #4]
24011c04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
24011c06:	461a      	mov	r2, r3
24011c08:	687b      	ldr	r3, [r7, #4]
24011c0a:	681b      	ldr	r3, [r3, #0]
24011c0c:	b292      	uxth	r2, r2
24011c0e:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
24011c10:	687b      	ldr	r3, [r7, #4]
24011c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
24011c14:	2b00      	cmp	r3, #0
24011c16:	da15      	bge.n	24011c44 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
24011c18:	687b      	ldr	r3, [r7, #4]
24011c1a:	681b      	ldr	r3, [r3, #0]
24011c1c:	695a      	ldr	r2, [r3, #20]
24011c1e:	687b      	ldr	r3, [r7, #4]
24011c20:	681b      	ldr	r3, [r3, #0]
24011c22:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
24011c26:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
24011c28:	687b      	ldr	r3, [r7, #4]
24011c2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
24011c2c:	425b      	negs	r3, r3
24011c2e:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
24011c30:	687b      	ldr	r3, [r7, #4]
24011c32:	681b      	ldr	r3, [r3, #0]
24011c34:	6a19      	ldr	r1, [r3, #32]
24011c36:	68fb      	ldr	r3, [r7, #12]
24011c38:	041a      	lsls	r2, r3, #16
24011c3a:	687b      	ldr	r3, [r7, #4]
24011c3c:	681b      	ldr	r3, [r3, #0]
24011c3e:	430a      	orrs	r2, r1
24011c40:	621a      	str	r2, [r3, #32]
24011c42:	e009      	b.n	24011c58 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
24011c44:	687b      	ldr	r3, [r7, #4]
24011c46:	681b      	ldr	r3, [r3, #0]
24011c48:	6a19      	ldr	r1, [r3, #32]
24011c4a:	687b      	ldr	r3, [r7, #4]
24011c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
24011c4e:	041a      	lsls	r2, r3, #16
24011c50:	687b      	ldr	r3, [r7, #4]
24011c52:	681b      	ldr	r3, [r3, #0]
24011c54:	430a      	orrs	r2, r1
24011c56:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
24011c58:	687b      	ldr	r3, [r7, #4]
24011c5a:	685b      	ldr	r3, [r3, #4]
24011c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
24011c60:	d006      	beq.n	24011c70 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
24011c62:	687b      	ldr	r3, [r7, #4]
24011c64:	685a      	ldr	r2, [r3, #4]
24011c66:	687b      	ldr	r3, [r7, #4]
24011c68:	681b      	ldr	r3, [r3, #0]
24011c6a:	b2d2      	uxtb	r2, r2
24011c6c:	629a      	str	r2, [r3, #40]	@ 0x28
24011c6e:	e003      	b.n	24011c78 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
24011c70:	687b      	ldr	r3, [r7, #4]
24011c72:	681b      	ldr	r3, [r3, #0]
24011c74:	2200      	movs	r2, #0
24011c76:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
24011c78:	687b      	ldr	r3, [r7, #4]
24011c7a:	681b      	ldr	r3, [r3, #0]
24011c7c:	2200      	movs	r2, #0
24011c7e:	625a      	str	r2, [r3, #36]	@ 0x24
}
24011c80:	bf00      	nop
24011c82:	3714      	adds	r7, #20
24011c84:	46bd      	mov	sp, r7
24011c86:	f85d 7b04 	ldr.w	r7, [sp], #4
24011c8a:	4770      	bx	lr

24011c8c <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
24011c8c:	b580      	push	{r7, lr}
24011c8e:	b086      	sub	sp, #24
24011c90:	af02      	add	r7, sp, #8
24011c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
24011c94:	2300      	movs	r3, #0
24011c96:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
24011c98:	f7f1 f82a 	bl	24002cf0 <HAL_GetTick>
24011c9c:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
24011c9e:	687b      	ldr	r3, [r7, #4]
24011ca0:	2b00      	cmp	r3, #0
24011ca2:	d102      	bne.n	24011caa <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
24011ca4:	2301      	movs	r3, #1
24011ca6:	73fb      	strb	r3, [r7, #15]
24011ca8:	e0a5      	b.n	24011df6 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
24011caa:	687b      	ldr	r3, [r7, #4]
24011cac:	2200      	movs	r2, #0
24011cae:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
24011cb0:	687b      	ldr	r3, [r7, #4]
24011cb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
24011cb4:	2b00      	cmp	r3, #0
24011cb6:	f040 809e 	bne.w	24011df6 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
24011cba:	6878      	ldr	r0, [r7, #4]
24011cbc:	f008 fedc 	bl	2401aa78 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
24011cc0:	f241 3188 	movw	r1, #5000	@ 0x1388
24011cc4:	6878      	ldr	r0, [r7, #4]
24011cc6:	f001 f9e8 	bl	2401309a <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
24011cca:	687b      	ldr	r3, [r7, #4]
24011ccc:	681b      	ldr	r3, [r3, #0]
24011cce:	689a      	ldr	r2, [r3, #8]
24011cd0:	4b4b      	ldr	r3, [pc, #300]	@ (24011e00 <HAL_OSPI_Init+0x174>)
24011cd2:	4013      	ands	r3, r2
24011cd4:	687a      	ldr	r2, [r7, #4]
24011cd6:	68d1      	ldr	r1, [r2, #12]
24011cd8:	687a      	ldr	r2, [r7, #4]
24011cda:	6912      	ldr	r2, [r2, #16]
24011cdc:	3a01      	subs	r2, #1
24011cde:	0412      	lsls	r2, r2, #16
24011ce0:	4311      	orrs	r1, r2
24011ce2:	687a      	ldr	r2, [r7, #4]
24011ce4:	6952      	ldr	r2, [r2, #20]
24011ce6:	3a01      	subs	r2, #1
24011ce8:	0212      	lsls	r2, r2, #8
24011cea:	4311      	orrs	r1, r2
24011cec:	687a      	ldr	r2, [r7, #4]
24011cee:	6b52      	ldr	r2, [r2, #52]	@ 0x34
24011cf0:	4311      	orrs	r1, r2
24011cf2:	687a      	ldr	r2, [r7, #4]
24011cf4:	69d2      	ldr	r2, [r2, #28]
24011cf6:	4311      	orrs	r1, r2
24011cf8:	687a      	ldr	r2, [r7, #4]
24011cfa:	6812      	ldr	r2, [r2, #0]
24011cfc:	430b      	orrs	r3, r1
24011cfe:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
24011d00:	687b      	ldr	r3, [r7, #4]
24011d02:	681b      	ldr	r3, [r3, #0]
24011d04:	68db      	ldr	r3, [r3, #12]
24011d06:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
24011d0a:	687b      	ldr	r3, [r7, #4]
24011d0c:	6a1a      	ldr	r2, [r3, #32]
24011d0e:	687b      	ldr	r3, [r7, #4]
24011d10:	681b      	ldr	r3, [r3, #0]
24011d12:	430a      	orrs	r2, r1
24011d14:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
24011d16:	687b      	ldr	r3, [r7, #4]
24011d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
24011d1a:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
24011d1c:	687b      	ldr	r3, [r7, #4]
24011d1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
24011d20:	687b      	ldr	r3, [r7, #4]
24011d22:	681b      	ldr	r3, [r3, #0]
24011d24:	430a      	orrs	r2, r1
24011d26:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
24011d28:	687b      	ldr	r3, [r7, #4]
24011d2a:	681b      	ldr	r3, [r3, #0]
24011d2c:	687a      	ldr	r2, [r7, #4]
24011d2e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
24011d30:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
24011d32:	687b      	ldr	r3, [r7, #4]
24011d34:	681b      	ldr	r3, [r3, #0]
24011d36:	681b      	ldr	r3, [r3, #0]
24011d38:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
24011d3c:	687b      	ldr	r3, [r7, #4]
24011d3e:	685b      	ldr	r3, [r3, #4]
24011d40:	3b01      	subs	r3, #1
24011d42:	021a      	lsls	r2, r3, #8
24011d44:	687b      	ldr	r3, [r7, #4]
24011d46:	681b      	ldr	r3, [r3, #0]
24011d48:	430a      	orrs	r2, r1
24011d4a:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
24011d4c:	687b      	ldr	r3, [r7, #4]
24011d4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
24011d50:	9300      	str	r3, [sp, #0]
24011d52:	68bb      	ldr	r3, [r7, #8]
24011d54:	2200      	movs	r2, #0
24011d56:	2120      	movs	r1, #32
24011d58:	6878      	ldr	r0, [r7, #4]
24011d5a:	f001 ff78 	bl	24013c4e <OSPI_WaitFlagStateUntilTimeout>
24011d5e:	4603      	mov	r3, r0
24011d60:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
24011d62:	7bfb      	ldrb	r3, [r7, #15]
24011d64:	2b00      	cmp	r3, #0
24011d66:	d146      	bne.n	24011df6 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
24011d68:	687b      	ldr	r3, [r7, #4]
24011d6a:	681b      	ldr	r3, [r3, #0]
24011d6c:	68db      	ldr	r3, [r3, #12]
24011d6e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
24011d72:	687b      	ldr	r3, [r7, #4]
24011d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
24011d76:	1e5a      	subs	r2, r3, #1
24011d78:	687b      	ldr	r3, [r7, #4]
24011d7a:	681b      	ldr	r3, [r3, #0]
24011d7c:	430a      	orrs	r2, r1
24011d7e:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
24011d80:	687b      	ldr	r3, [r7, #4]
24011d82:	681b      	ldr	r3, [r3, #0]
24011d84:	681b      	ldr	r3, [r3, #0]
24011d86:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
24011d8a:	687b      	ldr	r3, [r7, #4]
24011d8c:	689a      	ldr	r2, [r3, #8]
24011d8e:	687b      	ldr	r3, [r7, #4]
24011d90:	681b      	ldr	r3, [r3, #0]
24011d92:	430a      	orrs	r2, r1
24011d94:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
24011d96:	687b      	ldr	r3, [r7, #4]
24011d98:	681b      	ldr	r3, [r3, #0]
24011d9a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
24011d9e:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
24011da2:	687b      	ldr	r3, [r7, #4]
24011da4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
24011da6:	687b      	ldr	r3, [r7, #4]
24011da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
24011daa:	431a      	orrs	r2, r3
24011dac:	687b      	ldr	r3, [r7, #4]
24011dae:	681b      	ldr	r3, [r3, #0]
24011db0:	430a      	orrs	r2, r1
24011db2:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
24011db6:	687b      	ldr	r3, [r7, #4]
24011db8:	681b      	ldr	r3, [r3, #0]
24011dba:	681a      	ldr	r2, [r3, #0]
24011dbc:	687b      	ldr	r3, [r7, #4]
24011dbe:	681b      	ldr	r3, [r3, #0]
24011dc0:	f042 0201 	orr.w	r2, r2, #1
24011dc4:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
24011dc6:	687b      	ldr	r3, [r7, #4]
24011dc8:	699b      	ldr	r3, [r3, #24]
24011dca:	2b02      	cmp	r3, #2
24011dcc:	d107      	bne.n	24011dde <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
24011dce:	687b      	ldr	r3, [r7, #4]
24011dd0:	681b      	ldr	r3, [r3, #0]
24011dd2:	689a      	ldr	r2, [r3, #8]
24011dd4:	687b      	ldr	r3, [r7, #4]
24011dd6:	681b      	ldr	r3, [r3, #0]
24011dd8:	f042 0202 	orr.w	r2, r2, #2
24011ddc:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
24011dde:	687b      	ldr	r3, [r7, #4]
24011de0:	68db      	ldr	r3, [r3, #12]
24011de2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
24011de6:	d103      	bne.n	24011df0 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
24011de8:	687b      	ldr	r3, [r7, #4]
24011dea:	2201      	movs	r2, #1
24011dec:	651a      	str	r2, [r3, #80]	@ 0x50
24011dee:	e002      	b.n	24011df6 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
24011df0:	687b      	ldr	r3, [r7, #4]
24011df2:	2202      	movs	r2, #2
24011df4:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
24011df6:	7bfb      	ldrb	r3, [r7, #15]
}
24011df8:	4618      	mov	r0, r3
24011dfa:	3710      	adds	r7, #16
24011dfc:	46bd      	mov	sp, r7
24011dfe:	bd80      	pop	{r7, pc}
24011e00:	f8e0f8f4 	.word	0xf8e0f8f4
  * @brief  Initialize the OSPI MSP.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_MspInit(OSPI_HandleTypeDef *hospi)
{
24011e04:	b480      	push	{r7}
24011e06:	b083      	sub	sp, #12
24011e08:	af00      	add	r7, sp, #0
24011e0a:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_MspInit can be implemented in the user file
   */
}
24011e0c:	bf00      	nop
24011e0e:	370c      	adds	r7, #12
24011e10:	46bd      	mov	sp, r7
24011e12:	f85d 7b04 	ldr.w	r7, [sp], #4
24011e16:	4770      	bx	lr

24011e18 <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
24011e18:	b580      	push	{r7, lr}
24011e1a:	b084      	sub	sp, #16
24011e1c:	af00      	add	r7, sp, #0
24011e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
24011e20:	2300      	movs	r3, #0
24011e22:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
24011e24:	687b      	ldr	r3, [r7, #4]
24011e26:	2b00      	cmp	r3, #0
24011e28:	d102      	bne.n	24011e30 <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
24011e2a:	2301      	movs	r3, #1
24011e2c:	73fb      	strb	r3, [r7, #15]
24011e2e:	e015      	b.n	24011e5c <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
    /* Disable OctoSPI */
    __HAL_OSPI_DISABLE(hospi);
24011e30:	687b      	ldr	r3, [r7, #4]
24011e32:	681b      	ldr	r3, [r3, #0]
24011e34:	681a      	ldr	r2, [r3, #0]
24011e36:	687b      	ldr	r3, [r7, #4]
24011e38:	681b      	ldr	r3, [r3, #0]
24011e3a:	f022 0201 	bic.w	r2, r2, #1
24011e3e:	601a      	str	r2, [r3, #0]

    /* Disable free running clock if needed : must be done after OSPI disable */
    CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
24011e40:	687b      	ldr	r3, [r7, #4]
24011e42:	681b      	ldr	r3, [r3, #0]
24011e44:	689a      	ldr	r2, [r3, #8]
24011e46:	687b      	ldr	r3, [r7, #4]
24011e48:	681b      	ldr	r3, [r3, #0]
24011e4a:	f022 0202 	bic.w	r2, r2, #2
24011e4e:	609a      	str	r2, [r3, #8]

    /* DeInit the low level hardware */
    hospi->MspDeInitCallback(hospi);
#else
    /* De-initialize the low-level hardware */
    HAL_OSPI_MspDeInit(hospi);
24011e50:	6878      	ldr	r0, [r7, #4]
24011e52:	f008 fed5 	bl	2401ac00 <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

    /* Reset the driver state */
    hospi->State = HAL_OSPI_STATE_RESET;
24011e56:	687b      	ldr	r3, [r7, #4]
24011e58:	2200      	movs	r2, #0
24011e5a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  return status;
24011e5c:	7bfb      	ldrb	r3, [r7, #15]
}
24011e5e:	4618      	mov	r0, r3
24011e60:	3710      	adds	r7, #16
24011e62:	46bd      	mov	sp, r7
24011e64:	bd80      	pop	{r7, pc}
  * @brief  DeInitialize the OSPI MSP.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef *hospi)
{
24011e66:	b480      	push	{r7}
24011e68:	b083      	sub	sp, #12
24011e6a:	af00      	add	r7, sp, #0
24011e6c:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_MspDeInit can be implemented in the user file
   */
}
24011e6e:	bf00      	nop
24011e70:	370c      	adds	r7, #12
24011e72:	46bd      	mov	sp, r7
24011e74:	f85d 7b04 	ldr.w	r7, [sp], #4
24011e78:	4770      	bx	lr
	...

24011e7c <HAL_OSPI_IRQHandler>:
  * @brief  Handle OSPI interrupt request.
  * @param  hospi : OSPI handle
  * @retval None
  */
void HAL_OSPI_IRQHandler(OSPI_HandleTypeDef *hospi)
{
24011e7c:	b580      	push	{r7, lr}
24011e7e:	b086      	sub	sp, #24
24011e80:	af00      	add	r7, sp, #0
24011e82:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
24011e84:	687b      	ldr	r3, [r7, #4]
24011e86:	681b      	ldr	r3, [r3, #0]
24011e88:	3350      	adds	r3, #80	@ 0x50
24011e8a:	617b      	str	r3, [r7, #20]
  uint32_t flag           = hospi->Instance->SR;
24011e8c:	687b      	ldr	r3, [r7, #4]
24011e8e:	681b      	ldr	r3, [r3, #0]
24011e90:	6a1b      	ldr	r3, [r3, #32]
24011e92:	613b      	str	r3, [r7, #16]
  uint32_t itsource       = hospi->Instance->CR;
24011e94:	687b      	ldr	r3, [r7, #4]
24011e96:	681b      	ldr	r3, [r3, #0]
24011e98:	681b      	ldr	r3, [r3, #0]
24011e9a:	60fb      	str	r3, [r7, #12]
  uint32_t currentstate   = hospi->State;
24011e9c:	687b      	ldr	r3, [r7, #4]
24011e9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
24011ea0:	60bb      	str	r3, [r7, #8]

  /* OctoSPI fifo threshold interrupt occurred -------------------------------*/
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
24011ea2:	693b      	ldr	r3, [r7, #16]
24011ea4:	f003 0304 	and.w	r3, r3, #4
24011ea8:	2b00      	cmp	r3, #0
24011eaa:	d03a      	beq.n	24011f22 <HAL_OSPI_IRQHandler+0xa6>
24011eac:	68fb      	ldr	r3, [r7, #12]
24011eae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
24011eb2:	2b00      	cmp	r3, #0
24011eb4:	d035      	beq.n	24011f22 <HAL_OSPI_IRQHandler+0xa6>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
24011eb6:	68bb      	ldr	r3, [r7, #8]
24011eb8:	2b18      	cmp	r3, #24
24011eba:	d10f      	bne.n	24011edc <HAL_OSPI_IRQHandler+0x60>
    {
      /* Write a data in the fifo */
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
24011ebc:	687b      	ldr	r3, [r7, #4]
24011ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
24011ec0:	781a      	ldrb	r2, [r3, #0]
24011ec2:	697b      	ldr	r3, [r7, #20]
24011ec4:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
24011ec6:	687b      	ldr	r3, [r7, #4]
24011ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
24011eca:	1c5a      	adds	r2, r3, #1
24011ecc:	687b      	ldr	r3, [r7, #4]
24011ece:	641a      	str	r2, [r3, #64]	@ 0x40
      hospi->XferCount--;
24011ed0:	687b      	ldr	r3, [r7, #4]
24011ed2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
24011ed4:	1e5a      	subs	r2, r3, #1
24011ed6:	687b      	ldr	r3, [r7, #4]
24011ed8:	649a      	str	r2, [r3, #72]	@ 0x48
24011eda:	e012      	b.n	24011f02 <HAL_OSPI_IRQHandler+0x86>
    }
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
24011edc:	68bb      	ldr	r3, [r7, #8]
24011ede:	2b28      	cmp	r3, #40	@ 0x28
24011ee0:	d10f      	bne.n	24011f02 <HAL_OSPI_IRQHandler+0x86>
    {
      /* Read a data from the fifo */
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
24011ee2:	687b      	ldr	r3, [r7, #4]
24011ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
24011ee6:	697a      	ldr	r2, [r7, #20]
24011ee8:	7812      	ldrb	r2, [r2, #0]
24011eea:	b2d2      	uxtb	r2, r2
24011eec:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
24011eee:	687b      	ldr	r3, [r7, #4]
24011ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
24011ef2:	1c5a      	adds	r2, r3, #1
24011ef4:	687b      	ldr	r3, [r7, #4]
24011ef6:	641a      	str	r2, [r3, #64]	@ 0x40
      hospi->XferCount--;
24011ef8:	687b      	ldr	r3, [r7, #4]
24011efa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
24011efc:	1e5a      	subs	r2, r3, #1
24011efe:	687b      	ldr	r3, [r7, #4]
24011f00:	649a      	str	r2, [r3, #72]	@ 0x48
    else
    {
      /* Nothing to do */
    }

    if (hospi->XferCount == 0U)
24011f02:	687b      	ldr	r3, [r7, #4]
24011f04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
24011f06:	2b00      	cmp	r3, #0
24011f08:	d107      	bne.n	24011f1a <HAL_OSPI_IRQHandler+0x9e>
    {
      /* All data have been received or transmitted for the transfer */
      /* Disable fifo threshold interrupt */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
24011f0a:	687b      	ldr	r3, [r7, #4]
24011f0c:	681b      	ldr	r3, [r3, #0]
24011f0e:	681a      	ldr	r2, [r3, #0]
24011f10:	687b      	ldr	r3, [r7, #4]
24011f12:	681b      	ldr	r3, [r3, #0]
24011f14:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
24011f18:	601a      	str	r2, [r3, #0]

    /* Fifo threshold callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->FifoThresholdCallback(hospi);
#else
    HAL_OSPI_FifoThresholdCallback(hospi);
24011f1a:	6878      	ldr	r0, [r7, #4]
24011f1c:	f000 ff4a 	bl	24012db4 <HAL_OSPI_FifoThresholdCallback>
24011f20:	e0e7      	b.n	240120f2 <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
  /* OctoSPI transfer complete interrupt occurred ----------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
24011f22:	693b      	ldr	r3, [r7, #16]
24011f24:	f003 0302 	and.w	r3, r3, #2
24011f28:	2b00      	cmp	r3, #0
24011f2a:	d067      	beq.n	24011ffc <HAL_OSPI_IRQHandler+0x180>
24011f2c:	68fb      	ldr	r3, [r7, #12]
24011f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
24011f32:	2b00      	cmp	r3, #0
24011f34:	d062      	beq.n	24011ffc <HAL_OSPI_IRQHandler+0x180>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
24011f36:	68bb      	ldr	r3, [r7, #8]
24011f38:	2b28      	cmp	r3, #40	@ 0x28
24011f3a:	d131      	bne.n	24011fa0 <HAL_OSPI_IRQHandler+0x124>
    {
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
24011f3c:	687b      	ldr	r3, [r7, #4]
24011f3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
24011f40:	2b00      	cmp	r3, #0
24011f42:	d015      	beq.n	24011f70 <HAL_OSPI_IRQHandler+0xf4>
24011f44:	693b      	ldr	r3, [r7, #16]
24011f46:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
24011f4a:	2b00      	cmp	r3, #0
24011f4c:	d010      	beq.n	24011f70 <HAL_OSPI_IRQHandler+0xf4>
      {
        /* Read the last data received in the fifo */
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
24011f4e:	687b      	ldr	r3, [r7, #4]
24011f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
24011f52:	697a      	ldr	r2, [r7, #20]
24011f54:	7812      	ldrb	r2, [r2, #0]
24011f56:	b2d2      	uxtb	r2, r2
24011f58:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
24011f5a:	687b      	ldr	r3, [r7, #4]
24011f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
24011f5e:	1c5a      	adds	r2, r3, #1
24011f60:	687b      	ldr	r3, [r7, #4]
24011f62:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
24011f64:	687b      	ldr	r3, [r7, #4]
24011f66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
24011f68:	1e5a      	subs	r2, r3, #1
24011f6a:	687b      	ldr	r3, [r7, #4]
24011f6c:	649a      	str	r2, [r3, #72]	@ 0x48
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
24011f6e:	e0bd      	b.n	240120ec <HAL_OSPI_IRQHandler+0x270>
      }
      else if (hospi->XferCount == 0U)
24011f70:	687b      	ldr	r3, [r7, #4]
24011f72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
24011f74:	2b00      	cmp	r3, #0
24011f76:	f040 80b9 	bne.w	240120ec <HAL_OSPI_IRQHandler+0x270>
      {
        /* Clear flag */
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
24011f7a:	687b      	ldr	r3, [r7, #4]
24011f7c:	681b      	ldr	r3, [r3, #0]
24011f7e:	2202      	movs	r2, #2
24011f80:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Disable the interrupts */
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
24011f82:	687b      	ldr	r3, [r7, #4]
24011f84:	681b      	ldr	r3, [r3, #0]
24011f86:	681a      	ldr	r2, [r3, #0]
24011f88:	687b      	ldr	r3, [r7, #4]
24011f8a:	681b      	ldr	r3, [r3, #0]
24011f8c:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
24011f90:	601a      	str	r2, [r3, #0]

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
24011f92:	687b      	ldr	r3, [r7, #4]
24011f94:	2202      	movs	r2, #2
24011f96:	651a      	str	r2, [r3, #80]	@ 0x50

        /* RX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->RxCpltCallback(hospi);
#else
        HAL_OSPI_RxCpltCallback(hospi);
24011f98:	6878      	ldr	r0, [r7, #4]
24011f9a:	f000 ff1f 	bl	24012ddc <HAL_OSPI_RxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
24011f9e:	e0a5      	b.n	240120ec <HAL_OSPI_IRQHandler+0x270>
      }
    }
    else
    {
      /* Clear flag */
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
24011fa0:	687b      	ldr	r3, [r7, #4]
24011fa2:	681b      	ldr	r3, [r3, #0]
24011fa4:	2202      	movs	r2, #2
24011fa6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
24011fa8:	687b      	ldr	r3, [r7, #4]
24011faa:	681b      	ldr	r3, [r3, #0]
24011fac:	681a      	ldr	r2, [r3, #0]
24011fae:	687b      	ldr	r3, [r7, #4]
24011fb0:	681b      	ldr	r3, [r3, #0]
24011fb2:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
24011fb6:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
24011fb8:	687b      	ldr	r3, [r7, #4]
24011fba:	2202      	movs	r2, #2
24011fbc:	651a      	str	r2, [r3, #80]	@ 0x50

      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
24011fbe:	68bb      	ldr	r3, [r7, #8]
24011fc0:	2b18      	cmp	r3, #24
24011fc2:	d103      	bne.n	24011fcc <HAL_OSPI_IRQHandler+0x150>
      {
        /* TX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->TxCpltCallback(hospi);
#else
        HAL_OSPI_TxCpltCallback(hospi);
24011fc4:	6878      	ldr	r0, [r7, #4]
24011fc6:	f000 ff13 	bl	24012df0 <HAL_OSPI_TxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
24011fca:	e08f      	b.n	240120ec <HAL_OSPI_IRQHandler+0x270>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
24011fcc:	68bb      	ldr	r3, [r7, #8]
24011fce:	2b08      	cmp	r3, #8
24011fd0:	d103      	bne.n	24011fda <HAL_OSPI_IRQHandler+0x15e>
      {
        /* Command complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->CmdCpltCallback(hospi);
#else
        HAL_OSPI_CmdCpltCallback(hospi);
24011fd2:	6878      	ldr	r0, [r7, #4]
24011fd4:	f000 fef8 	bl	24012dc8 <HAL_OSPI_CmdCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
24011fd8:	e088      	b.n	240120ec <HAL_OSPI_IRQHandler+0x270>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_ABORT)
24011fda:	68bb      	ldr	r3, [r7, #8]
24011fdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
24011fe0:	f040 8084 	bne.w	240120ec <HAL_OSPI_IRQHandler+0x270>
      {
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
24011fe4:	687b      	ldr	r3, [r7, #4]
24011fe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
24011fe8:	2b00      	cmp	r3, #0
24011fea:	d103      	bne.n	24011ff4 <HAL_OSPI_IRQHandler+0x178>
          /* Abort called by the user */
          /* Abort complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->AbortCpltCallback(hospi);
#else
          HAL_OSPI_AbortCpltCallback(hospi);
24011fec:	6878      	ldr	r0, [r7, #4]
24011fee:	f000 fed7 	bl	24012da0 <HAL_OSPI_AbortCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
24011ff2:	e07b      	b.n	240120ec <HAL_OSPI_IRQHandler+0x270>
          /* Abort due to an error (eg : DMA error) */
          /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->ErrorCallback(hospi);
#else
          HAL_OSPI_ErrorCallback(hospi);
24011ff4:	6878      	ldr	r0, [r7, #4]
24011ff6:	f000 fec9 	bl	24012d8c <HAL_OSPI_ErrorCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
24011ffa:	e077      	b.n	240120ec <HAL_OSPI_IRQHandler+0x270>
        /* Nothing to do */
      }
    }
  }
  /* OctoSPI status match interrupt occurred ---------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
24011ffc:	693b      	ldr	r3, [r7, #16]
24011ffe:	f003 0308 	and.w	r3, r3, #8
24012002:	2b00      	cmp	r3, #0
24012004:	d01e      	beq.n	24012044 <HAL_OSPI_IRQHandler+0x1c8>
24012006:	68fb      	ldr	r3, [r7, #12]
24012008:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
2401200c:	2b00      	cmp	r3, #0
2401200e:	d019      	beq.n	24012044 <HAL_OSPI_IRQHandler+0x1c8>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
24012010:	687b      	ldr	r3, [r7, #4]
24012012:	681b      	ldr	r3, [r3, #0]
24012014:	2208      	movs	r2, #8
24012016:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Check if automatic poll mode stop is activated */
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
24012018:	687b      	ldr	r3, [r7, #4]
2401201a:	681b      	ldr	r3, [r3, #0]
2401201c:	681b      	ldr	r3, [r3, #0]
2401201e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
24012022:	2b00      	cmp	r3, #0
24012024:	d00a      	beq.n	2401203c <HAL_OSPI_IRQHandler+0x1c0>
    {
      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
24012026:	687b      	ldr	r3, [r7, #4]
24012028:	681b      	ldr	r3, [r3, #0]
2401202a:	681a      	ldr	r2, [r3, #0]
2401202c:	687b      	ldr	r3, [r7, #4]
2401202e:	681b      	ldr	r3, [r3, #0]
24012030:	f422 2210 	bic.w	r2, r2, #589824	@ 0x90000
24012034:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
24012036:	687b      	ldr	r3, [r7, #4]
24012038:	2202      	movs	r2, #2
2401203a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Status match callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->StatusMatchCallback(hospi);
#else
    HAL_OSPI_StatusMatchCallback(hospi);
2401203c:	6878      	ldr	r0, [r7, #4]
2401203e:	f000 fef5 	bl	24012e2c <HAL_OSPI_StatusMatchCallback>
24012042:	e056      	b.n	240120f2 <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
  }
  /* OctoSPI transfer error interrupt occurred -------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
24012044:	693b      	ldr	r3, [r7, #16]
24012046:	f003 0301 	and.w	r3, r3, #1
2401204a:	2b00      	cmp	r3, #0
2401204c:	d03c      	beq.n	240120c8 <HAL_OSPI_IRQHandler+0x24c>
2401204e:	68fb      	ldr	r3, [r7, #12]
24012050:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
24012054:	2b00      	cmp	r3, #0
24012056:	d037      	beq.n	240120c8 <HAL_OSPI_IRQHandler+0x24c>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
24012058:	687b      	ldr	r3, [r7, #4]
2401205a:	681b      	ldr	r3, [r3, #0]
2401205c:	2201      	movs	r2, #1
2401205e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable all interrupts */
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
24012060:	687b      	ldr	r3, [r7, #4]
24012062:	681b      	ldr	r3, [r3, #0]
24012064:	681a      	ldr	r2, [r3, #0]
24012066:	687b      	ldr	r3, [r7, #4]
24012068:	681b      	ldr	r3, [r3, #0]
2401206a:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
2401206e:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
24012070:	687b      	ldr	r3, [r7, #4]
24012072:	2202      	movs	r2, #2
24012074:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
24012076:	687b      	ldr	r3, [r7, #4]
24012078:	681b      	ldr	r3, [r3, #0]
2401207a:	681b      	ldr	r3, [r3, #0]
2401207c:	f003 0304 	and.w	r3, r3, #4
24012080:	2b00      	cmp	r3, #0
24012082:	d01a      	beq.n	240120ba <HAL_OSPI_IRQHandler+0x23e>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
24012084:	687b      	ldr	r3, [r7, #4]
24012086:	681b      	ldr	r3, [r3, #0]
24012088:	681a      	ldr	r2, [r3, #0]
2401208a:	687b      	ldr	r3, [r7, #4]
2401208c:	681b      	ldr	r3, [r3, #0]
2401208e:	f022 0204 	bic.w	r2, r2, #4
24012092:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      hospi->hmdma->XferAbortCallback = OSPI_DMAAbortCplt;
24012094:	687b      	ldr	r3, [r7, #4]
24012096:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
24012098:	4a18      	ldr	r2, [pc, #96]	@ (240120fc <HAL_OSPI_IRQHandler+0x280>)
2401209a:	659a      	str	r2, [r3, #88]	@ 0x58
      if (HAL_MDMA_Abort_IT(hospi->hmdma) != HAL_OK)
2401209c:	687b      	ldr	r3, [r7, #4]
2401209e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
240120a0:	4618      	mov	r0, r3
240120a2:	f7ff fa52 	bl	2401154a <HAL_MDMA_Abort_IT>
240120a6:	4603      	mov	r3, r0
240120a8:	2b00      	cmp	r3, #0
240120aa:	d021      	beq.n	240120f0 <HAL_OSPI_IRQHandler+0x274>
      {
        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
240120ac:	687b      	ldr	r3, [r7, #4]
240120ae:	2202      	movs	r2, #2
240120b0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->ErrorCallback(hospi);
#else
        HAL_OSPI_ErrorCallback(hospi);
240120b2:	6878      	ldr	r0, [r7, #4]
240120b4:	f000 fe6a 	bl	24012d8c <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
240120b8:	e01a      	b.n	240120f0 <HAL_OSPI_IRQHandler+0x274>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
240120ba:	687b      	ldr	r3, [r7, #4]
240120bc:	2202      	movs	r2, #2
240120be:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
      hospi->ErrorCallback(hospi);
#else
      HAL_OSPI_ErrorCallback(hospi);
240120c0:	6878      	ldr	r0, [r7, #4]
240120c2:	f000 fe63 	bl	24012d8c <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
240120c6:	e013      	b.n	240120f0 <HAL_OSPI_IRQHandler+0x274>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
    }
  }
  /* OctoSPI timeout interrupt occurred --------------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
240120c8:	693b      	ldr	r3, [r7, #16]
240120ca:	f003 0310 	and.w	r3, r3, #16
240120ce:	2b00      	cmp	r3, #0
240120d0:	d00f      	beq.n	240120f2 <HAL_OSPI_IRQHandler+0x276>
240120d2:	68fb      	ldr	r3, [r7, #12]
240120d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
240120d8:	2b00      	cmp	r3, #0
240120da:	d00a      	beq.n	240120f2 <HAL_OSPI_IRQHandler+0x276>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
240120dc:	687b      	ldr	r3, [r7, #4]
240120de:	681b      	ldr	r3, [r3, #0]
240120e0:	2210      	movs	r2, #16
240120e2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Timeout callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->TimeOutCallback(hospi);
#else
    HAL_OSPI_TimeOutCallback(hospi);
240120e4:	6878      	ldr	r0, [r7, #4]
240120e6:	f000 feab 	bl	24012e40 <HAL_OSPI_TimeOutCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
240120ea:	e002      	b.n	240120f2 <HAL_OSPI_IRQHandler+0x276>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
240120ec:	bf00      	nop
240120ee:	e000      	b.n	240120f2 <HAL_OSPI_IRQHandler+0x276>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
240120f0:	bf00      	nop
}
240120f2:	bf00      	nop
240120f4:	3718      	adds	r7, #24
240120f6:	46bd      	mov	sp, r7
240120f8:	bd80      	pop	{r7, pc}
240120fa:	bf00      	nop
240120fc:	24013bd7 	.word	0x24013bd7

24012100 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
24012100:	b580      	push	{r7, lr}
24012102:	b08a      	sub	sp, #40	@ 0x28
24012104:	af02      	add	r7, sp, #8
24012106:	60f8      	str	r0, [r7, #12]
24012108:	60b9      	str	r1, [r7, #8]
2401210a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
2401210c:	f7f0 fdf0 	bl	24002cf0 <HAL_GetTick>
24012110:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE(cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
24012112:	68bb      	ldr	r3, [r7, #8]
24012114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
24012116:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE(cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
24012118:	68fb      	ldr	r3, [r7, #12]
2401211a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2401211c:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
2401211e:	697b      	ldr	r3, [r7, #20]
24012120:	2b02      	cmp	r3, #2
24012122:	d104      	bne.n	2401212e <HAL_OSPI_Command+0x2e>
24012124:	68fb      	ldr	r3, [r7, #12]
24012126:	68db      	ldr	r3, [r3, #12]
24012128:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
2401212c:	d115      	bne.n	2401215a <HAL_OSPI_Command+0x5a>
2401212e:	697b      	ldr	r3, [r7, #20]
24012130:	2b14      	cmp	r3, #20
24012132:	d107      	bne.n	24012144 <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
24012134:	68bb      	ldr	r3, [r7, #8]
24012136:	681b      	ldr	r3, [r3, #0]
24012138:	2b02      	cmp	r3, #2
2401213a:	d00e      	beq.n	2401215a <HAL_OSPI_Command+0x5a>
                                                   || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
2401213c:	68bb      	ldr	r3, [r7, #8]
2401213e:	681b      	ldr	r3, [r3, #0]
24012140:	2b03      	cmp	r3, #3
24012142:	d00a      	beq.n	2401215a <HAL_OSPI_Command+0x5a>
24012144:	697b      	ldr	r3, [r7, #20]
24012146:	2b24      	cmp	r3, #36	@ 0x24
24012148:	d15b      	bne.n	24012202 <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
2401214a:	68bb      	ldr	r3, [r7, #8]
2401214c:	681b      	ldr	r3, [r3, #0]
2401214e:	2b01      	cmp	r3, #1
24012150:	d003      	beq.n	2401215a <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
24012152:	68bb      	ldr	r3, [r7, #8]
24012154:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
24012156:	2b03      	cmp	r3, #3
24012158:	d153      	bne.n	24012202 <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
2401215a:	687b      	ldr	r3, [r7, #4]
2401215c:	9300      	str	r3, [sp, #0]
2401215e:	69bb      	ldr	r3, [r7, #24]
24012160:	2200      	movs	r2, #0
24012162:	2120      	movs	r1, #32
24012164:	68f8      	ldr	r0, [r7, #12]
24012166:	f001 fd72 	bl	24013c4e <OSPI_WaitFlagStateUntilTimeout>
2401216a:	4603      	mov	r3, r0
2401216c:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
2401216e:	7ffb      	ldrb	r3, [r7, #31]
24012170:	2b00      	cmp	r3, #0
24012172:	d14c      	bne.n	2401220e <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
24012174:	68fb      	ldr	r3, [r7, #12]
24012176:	2200      	movs	r2, #0
24012178:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
2401217a:	68b9      	ldr	r1, [r7, #8]
2401217c:	68f8      	ldr	r0, [r7, #12]
2401217e:	f001 fd9d 	bl	24013cbc <OSPI_ConfigCmd>
24012182:	4603      	mov	r3, r0
24012184:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
24012186:	7ffb      	ldrb	r3, [r7, #31]
24012188:	2b00      	cmp	r3, #0
2401218a:	d140      	bne.n	2401220e <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
2401218c:	68bb      	ldr	r3, [r7, #8]
2401218e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
24012190:	2b00      	cmp	r3, #0
24012192:	d10e      	bne.n	240121b2 <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
24012194:	687b      	ldr	r3, [r7, #4]
24012196:	9300      	str	r3, [sp, #0]
24012198:	69bb      	ldr	r3, [r7, #24]
2401219a:	2201      	movs	r2, #1
2401219c:	2102      	movs	r1, #2
2401219e:	68f8      	ldr	r0, [r7, #12]
240121a0:	f001 fd55 	bl	24013c4e <OSPI_WaitFlagStateUntilTimeout>
240121a4:	4603      	mov	r3, r0
240121a6:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
240121a8:	68fb      	ldr	r3, [r7, #12]
240121aa:	681b      	ldr	r3, [r3, #0]
240121ac:	2202      	movs	r2, #2
240121ae:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
240121b0:	e02d      	b.n	2401220e <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
240121b2:	68bb      	ldr	r3, [r7, #8]
240121b4:	681b      	ldr	r3, [r3, #0]
240121b6:	2b00      	cmp	r3, #0
240121b8:	d103      	bne.n	240121c2 <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
240121ba:	68fb      	ldr	r3, [r7, #12]
240121bc:	2204      	movs	r2, #4
240121be:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
240121c0:	e025      	b.n	2401220e <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
240121c2:	68bb      	ldr	r3, [r7, #8]
240121c4:	681b      	ldr	r3, [r3, #0]
240121c6:	2b01      	cmp	r3, #1
240121c8:	d10b      	bne.n	240121e2 <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
240121ca:	68fb      	ldr	r3, [r7, #12]
240121cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
240121ce:	2b24      	cmp	r3, #36	@ 0x24
240121d0:	d103      	bne.n	240121da <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
240121d2:	68fb      	ldr	r3, [r7, #12]
240121d4:	2204      	movs	r2, #4
240121d6:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
240121d8:	e019      	b.n	2401220e <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
240121da:	68fb      	ldr	r3, [r7, #12]
240121dc:	2214      	movs	r2, #20
240121de:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
240121e0:	e015      	b.n	2401220e <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
240121e2:	68bb      	ldr	r3, [r7, #8]
240121e4:	681b      	ldr	r3, [r3, #0]
240121e6:	2b02      	cmp	r3, #2
240121e8:	d111      	bne.n	2401220e <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
240121ea:	68fb      	ldr	r3, [r7, #12]
240121ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
240121ee:	2b14      	cmp	r3, #20
240121f0:	d103      	bne.n	240121fa <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
240121f2:	68fb      	ldr	r3, [r7, #12]
240121f4:	2204      	movs	r2, #4
240121f6:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
240121f8:	e009      	b.n	2401220e <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
240121fa:	68fb      	ldr	r3, [r7, #12]
240121fc:	2224      	movs	r2, #36	@ 0x24
240121fe:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
24012200:	e005      	b.n	2401220e <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
24012202:	2301      	movs	r3, #1
24012204:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
24012206:	68fb      	ldr	r3, [r7, #12]
24012208:	2210      	movs	r2, #16
2401220a:	655a      	str	r2, [r3, #84]	@ 0x54
2401220c:	e000      	b.n	24012210 <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
2401220e:	bf00      	nop
  }

  /* Return function status */
  return status;
24012210:	7ffb      	ldrb	r3, [r7, #31]
}
24012212:	4618      	mov	r0, r3
24012214:	3720      	adds	r7, #32
24012216:	46bd      	mov	sp, r7
24012218:	bd80      	pop	{r7, pc}

2401221a <HAL_OSPI_Command_IT>:
  * @param  cmd   : structure that contains the command configuration information
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command_IT(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
2401221a:	b580      	push	{r7, lr}
2401221c:	b086      	sub	sp, #24
2401221e:	af02      	add	r7, sp, #8
24012220:	6078      	str	r0, [r7, #4]
24012222:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
24012224:	f7f0 fd64 	bl	24002cf0 <HAL_GetTick>
24012228:	60b8      	str	r0, [r7, #8]

  assert_param(IS_OSPI_DQS_MODE(cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  if ((hospi->State  == HAL_OSPI_STATE_READY) && (cmd->OperationType     == HAL_OSPI_OPTYPE_COMMON_CFG) &&
2401222a:	687b      	ldr	r3, [r7, #4]
2401222c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2401222e:	2b02      	cmp	r3, #2
24012230:	d136      	bne.n	240122a0 <HAL_OSPI_Command_IT+0x86>
24012232:	683b      	ldr	r3, [r7, #0]
24012234:	681b      	ldr	r3, [r3, #0]
24012236:	2b00      	cmp	r3, #0
24012238:	d132      	bne.n	240122a0 <HAL_OSPI_Command_IT+0x86>
      (cmd->DataMode == HAL_OSPI_DATA_NONE)   && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS))
2401223a:	683b      	ldr	r3, [r7, #0]
2401223c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hospi->State  == HAL_OSPI_STATE_READY) && (cmd->OperationType     == HAL_OSPI_OPTYPE_COMMON_CFG) &&
2401223e:	2b00      	cmp	r3, #0
24012240:	d12e      	bne.n	240122a0 <HAL_OSPI_Command_IT+0x86>
      (cmd->DataMode == HAL_OSPI_DATA_NONE)   && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS))
24012242:	687b      	ldr	r3, [r7, #4]
24012244:	68db      	ldr	r3, [r3, #12]
24012246:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
2401224a:	d029      	beq.n	240122a0 <HAL_OSPI_Command_IT+0x86>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
2401224c:	687b      	ldr	r3, [r7, #4]
2401224e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
24012250:	9300      	str	r3, [sp, #0]
24012252:	68bb      	ldr	r3, [r7, #8]
24012254:	2200      	movs	r2, #0
24012256:	2120      	movs	r1, #32
24012258:	6878      	ldr	r0, [r7, #4]
2401225a:	f001 fcf8 	bl	24013c4e <OSPI_WaitFlagStateUntilTimeout>
2401225e:	4603      	mov	r3, r0
24012260:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
24012262:	7bfb      	ldrb	r3, [r7, #15]
24012264:	2b00      	cmp	r3, #0
24012266:	d121      	bne.n	240122ac <HAL_OSPI_Command_IT+0x92>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
24012268:	687b      	ldr	r3, [r7, #4]
2401226a:	2200      	movs	r2, #0
2401226c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Clear flags related to interrupt */
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TE | HAL_OSPI_FLAG_TC);
2401226e:	687b      	ldr	r3, [r7, #4]
24012270:	681b      	ldr	r3, [r3, #0]
24012272:	2203      	movs	r2, #3
24012274:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
24012276:	6839      	ldr	r1, [r7, #0]
24012278:	6878      	ldr	r0, [r7, #4]
2401227a:	f001 fd1f 	bl	24013cbc <OSPI_ConfigCmd>
2401227e:	4603      	mov	r3, r0
24012280:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
24012282:	7bfb      	ldrb	r3, [r7, #15]
24012284:	2b00      	cmp	r3, #0
24012286:	d111      	bne.n	240122ac <HAL_OSPI_Command_IT+0x92>
      {
        /* Update the state */
        hospi->State = HAL_OSPI_STATE_BUSY_CMD;
24012288:	687b      	ldr	r3, [r7, #4]
2401228a:	2208      	movs	r2, #8
2401228c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the transfer complete and transfer error interrupts */
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_TE);
2401228e:	687b      	ldr	r3, [r7, #4]
24012290:	681b      	ldr	r3, [r3, #0]
24012292:	681a      	ldr	r2, [r3, #0]
24012294:	687b      	ldr	r3, [r7, #4]
24012296:	681b      	ldr	r3, [r3, #0]
24012298:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
2401229c:	601a      	str	r2, [r3, #0]
    if (status == HAL_OK)
2401229e:	e005      	b.n	240122ac <HAL_OSPI_Command_IT+0x92>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
240122a0:	2301      	movs	r3, #1
240122a2:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
240122a4:	687b      	ldr	r3, [r7, #4]
240122a6:	2210      	movs	r2, #16
240122a8:	655a      	str	r2, [r3, #84]	@ 0x54
240122aa:	e000      	b.n	240122ae <HAL_OSPI_Command_IT+0x94>
    if (status == HAL_OK)
240122ac:	bf00      	nop
  }

  /* Return function status */
  return status;
240122ae:	7bfb      	ldrb	r3, [r7, #15]
}
240122b0:	4618      	mov	r0, r3
240122b2:	3710      	adds	r7, #16
240122b4:	46bd      	mov	sp, r7
240122b6:	bd80      	pop	{r7, pc}

240122b8 <HAL_OSPI_HyperbusCfg>:
  * @param  cfg     : Structure containing the Hyperbus configuration
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_HyperbusCfg(OSPI_HandleTypeDef *hospi, OSPI_HyperbusCfgTypeDef *cfg, uint32_t Timeout)
{
240122b8:	b580      	push	{r7, lr}
240122ba:	b08a      	sub	sp, #40	@ 0x28
240122bc:	af02      	add	r7, sp, #8
240122be:	60f8      	str	r0, [r7, #12]
240122c0:	60b9      	str	r1, [r7, #8]
240122c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
240122c4:	f7f0 fd14 	bl	24002cf0 <HAL_GetTick>
240122c8:	61b8      	str	r0, [r7, #24]
  assert_param(IS_OSPI_ACCESS_TIME(cfg->AccessTime));
  assert_param(IS_OSPI_WRITE_ZERO_LATENCY(cfg->WriteZeroLatency));
  assert_param(IS_OSPI_LATENCY_MODE(cfg->LatencyMode));

  /* Check the state of the driver */
  state = hospi->State;
240122ca:	68fb      	ldr	r3, [r7, #12]
240122cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
240122ce:	617b      	str	r3, [r7, #20]
  if ((state == HAL_OSPI_STATE_HYPERBUS_INIT) || (state == HAL_OSPI_STATE_READY))
240122d0:	697b      	ldr	r3, [r7, #20]
240122d2:	2b01      	cmp	r3, #1
240122d4:	d002      	beq.n	240122dc <HAL_OSPI_HyperbusCfg+0x24>
240122d6:	697b      	ldr	r3, [r7, #20]
240122d8:	2b02      	cmp	r3, #2
240122da:	d122      	bne.n	24012322 <HAL_OSPI_HyperbusCfg+0x6a>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
240122dc:	687b      	ldr	r3, [r7, #4]
240122de:	9300      	str	r3, [sp, #0]
240122e0:	69bb      	ldr	r3, [r7, #24]
240122e2:	2200      	movs	r2, #0
240122e4:	2120      	movs	r1, #32
240122e6:	68f8      	ldr	r0, [r7, #12]
240122e8:	f001 fcb1 	bl	24013c4e <OSPI_WaitFlagStateUntilTimeout>
240122ec:	4603      	mov	r3, r0
240122ee:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
240122f0:	7ffb      	ldrb	r3, [r7, #31]
240122f2:	2b00      	cmp	r3, #0
240122f4:	d11a      	bne.n	2401232c <HAL_OSPI_HyperbusCfg+0x74>
    {
      /* Configure Hyperbus configuration Latency register */
      WRITE_REG(hospi->Instance->HLCR, ((cfg->RWRecoveryTime << OCTOSPI_HLCR_TRWR_Pos) |
240122f6:	68bb      	ldr	r3, [r7, #8]
240122f8:	681b      	ldr	r3, [r3, #0]
240122fa:	041a      	lsls	r2, r3, #16
240122fc:	68bb      	ldr	r3, [r7, #8]
240122fe:	685b      	ldr	r3, [r3, #4]
24012300:	021b      	lsls	r3, r3, #8
24012302:	431a      	orrs	r2, r3
24012304:	68bb      	ldr	r3, [r7, #8]
24012306:	689b      	ldr	r3, [r3, #8]
24012308:	ea42 0103 	orr.w	r1, r2, r3
2401230c:	68bb      	ldr	r3, [r7, #8]
2401230e:	68da      	ldr	r2, [r3, #12]
24012310:	68fb      	ldr	r3, [r7, #12]
24012312:	681b      	ldr	r3, [r3, #0]
24012314:	430a      	orrs	r2, r1
24012316:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
                                        (cfg->AccessTime << OCTOSPI_HLCR_TACC_Pos)     |
                                        cfg->WriteZeroLatency | cfg->LatencyMode));

      /* Update the state */
      hospi->State = HAL_OSPI_STATE_READY;
2401231a:	68fb      	ldr	r3, [r7, #12]
2401231c:	2202      	movs	r2, #2
2401231e:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
24012320:	e004      	b.n	2401232c <HAL_OSPI_HyperbusCfg+0x74>
    }
  }
  else
  {
    status = HAL_ERROR;
24012322:	2301      	movs	r3, #1
24012324:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
24012326:	68fb      	ldr	r3, [r7, #12]
24012328:	2210      	movs	r2, #16
2401232a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Return function status */
  return status;
2401232c:	7ffb      	ldrb	r3, [r7, #31]
}
2401232e:	4618      	mov	r0, r3
24012330:	3720      	adds	r7, #32
24012332:	46bd      	mov	sp, r7
24012334:	bd80      	pop	{r7, pc}

24012336 <HAL_OSPI_HyperbusCmd>:
  * @param  cmd     : Structure containing the Hyperbus command
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_HyperbusCmd(OSPI_HandleTypeDef *hospi, OSPI_HyperbusCmdTypeDef *cmd, uint32_t Timeout)
{
24012336:	b580      	push	{r7, lr}
24012338:	b088      	sub	sp, #32
2401233a:	af02      	add	r7, sp, #8
2401233c:	60f8      	str	r0, [r7, #12]
2401233e:	60b9      	str	r1, [r7, #8]
24012340:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
24012342:	f7f0 fcd5 	bl	24002cf0 <HAL_GetTick>
24012346:	6138      	str	r0, [r7, #16]
  assert_param(IS_OSPI_ADDRESS_SIZE(cmd->AddressSize));
  assert_param(IS_OSPI_NUMBER_DATA(cmd->NbData));
  assert_param(IS_OSPI_DQS_MODE(cmd->DQSMode));

  /* Check the state of the driver */
  if ((hospi->State == HAL_OSPI_STATE_READY) && (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS))
24012348:	68fb      	ldr	r3, [r7, #12]
2401234a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2401234c:	2b02      	cmp	r3, #2
2401234e:	d149      	bne.n	240123e4 <HAL_OSPI_HyperbusCmd+0xae>
24012350:	68fb      	ldr	r3, [r7, #12]
24012352:	68db      	ldr	r3, [r3, #12]
24012354:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
24012358:	d144      	bne.n	240123e4 <HAL_OSPI_HyperbusCmd+0xae>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
2401235a:	687b      	ldr	r3, [r7, #4]
2401235c:	9300      	str	r3, [sp, #0]
2401235e:	693b      	ldr	r3, [r7, #16]
24012360:	2200      	movs	r2, #0
24012362:	2120      	movs	r1, #32
24012364:	68f8      	ldr	r0, [r7, #12]
24012366:	f001 fc72 	bl	24013c4e <OSPI_WaitFlagStateUntilTimeout>
2401236a:	4603      	mov	r3, r0
2401236c:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
2401236e:	7dfb      	ldrb	r3, [r7, #23]
24012370:	2b00      	cmp	r3, #0
24012372:	d13c      	bne.n	240123ee <HAL_OSPI_HyperbusCmd+0xb8>
    {
      /* Re-initialize the value of the functional mode */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
24012374:	68fb      	ldr	r3, [r7, #12]
24012376:	681b      	ldr	r3, [r3, #0]
24012378:	681a      	ldr	r2, [r3, #0]
2401237a:	68fb      	ldr	r3, [r7, #12]
2401237c:	681b      	ldr	r3, [r3, #0]
2401237e:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
24012382:	601a      	str	r2, [r3, #0]

      /* Configure the address space in the DCR1 register */
      MODIFY_REG(hospi->Instance->DCR1, OCTOSPI_DCR1_MTYP_0, cmd->AddressSpace);
24012384:	68fb      	ldr	r3, [r7, #12]
24012386:	681b      	ldr	r3, [r3, #0]
24012388:	689b      	ldr	r3, [r3, #8]
2401238a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
2401238e:	68bb      	ldr	r3, [r7, #8]
24012390:	681a      	ldr	r2, [r3, #0]
24012392:	68fb      	ldr	r3, [r7, #12]
24012394:	681b      	ldr	r3, [r3, #0]
24012396:	430a      	orrs	r2, r1
24012398:	609a      	str	r2, [r3, #8]

      /* Configure the CCR and WCCR registers with the address size and the following configuration :
         - DQS signal enabled (used as RWDS)
         - DTR mode enabled on address and data
         - address and data on 8 lines */
      WRITE_REG(hospi->Instance->CCR, (cmd->DQSMode | OCTOSPI_CCR_DDTR | OCTOSPI_CCR_DMODE_2 |
2401239a:	68bb      	ldr	r3, [r7, #8]
2401239c:	691a      	ldr	r2, [r3, #16]
2401239e:	68bb      	ldr	r3, [r7, #8]
240123a0:	689b      	ldr	r3, [r3, #8]
240123a2:	431a      	orrs	r2, r3
240123a4:	68fb      	ldr	r3, [r7, #12]
240123a6:	681b      	ldr	r3, [r3, #0]
240123a8:	f042 220c 	orr.w	r2, r2, #201329664	@ 0xc000c00
240123ac:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
                                       cmd->AddressSize | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADMODE_2));
      WRITE_REG(hospi->Instance->WCCR, (cmd->DQSMode | OCTOSPI_WCCR_DDTR | OCTOSPI_WCCR_DMODE_2 |
240123b0:	68bb      	ldr	r3, [r7, #8]
240123b2:	691a      	ldr	r2, [r3, #16]
240123b4:	68bb      	ldr	r3, [r7, #8]
240123b6:	689b      	ldr	r3, [r3, #8]
240123b8:	431a      	orrs	r2, r3
240123ba:	68fb      	ldr	r3, [r7, #12]
240123bc:	681b      	ldr	r3, [r3, #0]
240123be:	f042 220c 	orr.w	r2, r2, #201329664	@ 0xc000c00
240123c2:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
                                        cmd->AddressSize | OCTOSPI_WCCR_ADDTR | OCTOSPI_WCCR_ADMODE_2));

      /* Configure the DLR register with the number of data */
      WRITE_REG(hospi->Instance->DLR, (cmd->NbData - 1U));
240123c6:	68bb      	ldr	r3, [r7, #8]
240123c8:	68da      	ldr	r2, [r3, #12]
240123ca:	68fb      	ldr	r3, [r7, #12]
240123cc:	681b      	ldr	r3, [r3, #0]
240123ce:	3a01      	subs	r2, #1
240123d0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure the AR register with the address value */
      WRITE_REG(hospi->Instance->AR, cmd->Address);
240123d2:	68fb      	ldr	r3, [r7, #12]
240123d4:	681b      	ldr	r3, [r3, #0]
240123d6:	68ba      	ldr	r2, [r7, #8]
240123d8:	6852      	ldr	r2, [r2, #4]
240123da:	649a      	str	r2, [r3, #72]	@ 0x48

      /* Update the state */
      hospi->State = HAL_OSPI_STATE_CMD_CFG;
240123dc:	68fb      	ldr	r3, [r7, #12]
240123de:	2204      	movs	r2, #4
240123e0:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
240123e2:	e004      	b.n	240123ee <HAL_OSPI_HyperbusCmd+0xb8>
    }
  }
  else
  {
    status = HAL_ERROR;
240123e4:	2301      	movs	r3, #1
240123e6:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
240123e8:	68fb      	ldr	r3, [r7, #12]
240123ea:	2210      	movs	r2, #16
240123ec:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Return function status */
  return status;
240123ee:	7dfb      	ldrb	r3, [r7, #23]
}
240123f0:	4618      	mov	r0, r3
240123f2:	3718      	adds	r7, #24
240123f4:	46bd      	mov	sp, r7
240123f6:	bd80      	pop	{r7, pc}

240123f8 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
240123f8:	b580      	push	{r7, lr}
240123fa:	b08a      	sub	sp, #40	@ 0x28
240123fc:	af02      	add	r7, sp, #8
240123fe:	60f8      	str	r0, [r7, #12]
24012400:	60b9      	str	r1, [r7, #8]
24012402:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
24012404:	f7f0 fc74 	bl	24002cf0 <HAL_GetTick>
24012408:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
2401240a:	68fb      	ldr	r3, [r7, #12]
2401240c:	681b      	ldr	r3, [r3, #0]
2401240e:	3350      	adds	r3, #80	@ 0x50
24012410:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
24012412:	68bb      	ldr	r3, [r7, #8]
24012414:	2b00      	cmp	r3, #0
24012416:	d105      	bne.n	24012424 <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
24012418:	2301      	movs	r3, #1
2401241a:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
2401241c:	68fb      	ldr	r3, [r7, #12]
2401241e:	2208      	movs	r2, #8
24012420:	655a      	str	r2, [r3, #84]	@ 0x54
24012422:	e057      	b.n	240124d4 <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
24012424:	68fb      	ldr	r3, [r7, #12]
24012426:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
24012428:	2b04      	cmp	r3, #4
2401242a:	d14e      	bne.n	240124ca <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
2401242c:	68fb      	ldr	r3, [r7, #12]
2401242e:	681b      	ldr	r3, [r3, #0]
24012430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
24012432:	1c5a      	adds	r2, r3, #1
24012434:	68fb      	ldr	r3, [r7, #12]
24012436:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
24012438:	68fb      	ldr	r3, [r7, #12]
2401243a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
2401243c:	68fb      	ldr	r3, [r7, #12]
2401243e:	645a      	str	r2, [r3, #68]	@ 0x44
      hospi->pBuffPtr  = pData;
24012440:	68fb      	ldr	r3, [r7, #12]
24012442:	68ba      	ldr	r2, [r7, #8]
24012444:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
24012446:	68fb      	ldr	r3, [r7, #12]
24012448:	681b      	ldr	r3, [r3, #0]
2401244a:	681a      	ldr	r2, [r3, #0]
2401244c:	68fb      	ldr	r3, [r7, #12]
2401244e:	681b      	ldr	r3, [r3, #0]
24012450:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
24012454:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
24012456:	687b      	ldr	r3, [r7, #4]
24012458:	9300      	str	r3, [sp, #0]
2401245a:	69bb      	ldr	r3, [r7, #24]
2401245c:	2201      	movs	r2, #1
2401245e:	2104      	movs	r1, #4
24012460:	68f8      	ldr	r0, [r7, #12]
24012462:	f001 fbf4 	bl	24013c4e <OSPI_WaitFlagStateUntilTimeout>
24012466:	4603      	mov	r3, r0
24012468:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
2401246a:	7ffb      	ldrb	r3, [r7, #31]
2401246c:	2b00      	cmp	r3, #0
2401246e:	d113      	bne.n	24012498 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
24012470:	68fb      	ldr	r3, [r7, #12]
24012472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
24012474:	781a      	ldrb	r2, [r3, #0]
24012476:	697b      	ldr	r3, [r7, #20]
24012478:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
2401247a:	68fb      	ldr	r3, [r7, #12]
2401247c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2401247e:	1c5a      	adds	r2, r3, #1
24012480:	68fb      	ldr	r3, [r7, #12]
24012482:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
24012484:	68fb      	ldr	r3, [r7, #12]
24012486:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
24012488:	1e5a      	subs	r2, r3, #1
2401248a:	68fb      	ldr	r3, [r7, #12]
2401248c:	649a      	str	r2, [r3, #72]	@ 0x48
      } while (hospi->XferCount > 0U);
2401248e:	68fb      	ldr	r3, [r7, #12]
24012490:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
24012492:	2b00      	cmp	r3, #0
24012494:	d1df      	bne.n	24012456 <HAL_OSPI_Transmit+0x5e>
24012496:	e000      	b.n	2401249a <HAL_OSPI_Transmit+0xa2>
          break;
24012498:	bf00      	nop

      if (status == HAL_OK)
2401249a:	7ffb      	ldrb	r3, [r7, #31]
2401249c:	2b00      	cmp	r3, #0
2401249e:	d119      	bne.n	240124d4 <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
240124a0:	687b      	ldr	r3, [r7, #4]
240124a2:	9300      	str	r3, [sp, #0]
240124a4:	69bb      	ldr	r3, [r7, #24]
240124a6:	2201      	movs	r2, #1
240124a8:	2102      	movs	r1, #2
240124aa:	68f8      	ldr	r0, [r7, #12]
240124ac:	f001 fbcf 	bl	24013c4e <OSPI_WaitFlagStateUntilTimeout>
240124b0:	4603      	mov	r3, r0
240124b2:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
240124b4:	7ffb      	ldrb	r3, [r7, #31]
240124b6:	2b00      	cmp	r3, #0
240124b8:	d10c      	bne.n	240124d4 <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
240124ba:	68fb      	ldr	r3, [r7, #12]
240124bc:	681b      	ldr	r3, [r3, #0]
240124be:	2202      	movs	r2, #2
240124c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
240124c2:	68fb      	ldr	r3, [r7, #12]
240124c4:	2202      	movs	r2, #2
240124c6:	651a      	str	r2, [r3, #80]	@ 0x50
240124c8:	e004      	b.n	240124d4 <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
240124ca:	2301      	movs	r3, #1
240124cc:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
240124ce:	68fb      	ldr	r3, [r7, #12]
240124d0:	2210      	movs	r2, #16
240124d2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
240124d4:	7ffb      	ldrb	r3, [r7, #31]
}
240124d6:	4618      	mov	r0, r3
240124d8:	3720      	adds	r7, #32
240124da:	46bd      	mov	sp, r7
240124dc:	bd80      	pop	{r7, pc}

240124de <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
240124de:	b580      	push	{r7, lr}
240124e0:	b08c      	sub	sp, #48	@ 0x30
240124e2:	af02      	add	r7, sp, #8
240124e4:	60f8      	str	r0, [r7, #12]
240124e6:	60b9      	str	r1, [r7, #8]
240124e8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
240124ea:	f7f0 fc01 	bl	24002cf0 <HAL_GetTick>
240124ee:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
240124f0:	68fb      	ldr	r3, [r7, #12]
240124f2:	681b      	ldr	r3, [r3, #0]
240124f4:	3350      	adds	r3, #80	@ 0x50
240124f6:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
240124f8:	68fb      	ldr	r3, [r7, #12]
240124fa:	681b      	ldr	r3, [r3, #0]
240124fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
240124fe:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
24012500:	68fb      	ldr	r3, [r7, #12]
24012502:	681b      	ldr	r3, [r3, #0]
24012504:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
24012508:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
2401250a:	68bb      	ldr	r3, [r7, #8]
2401250c:	2b00      	cmp	r3, #0
2401250e:	d106      	bne.n	2401251e <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
24012510:	2301      	movs	r3, #1
24012512:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
24012516:	68fb      	ldr	r3, [r7, #12]
24012518:	2208      	movs	r2, #8
2401251a:	655a      	str	r2, [r3, #84]	@ 0x54
2401251c:	e07c      	b.n	24012618 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
2401251e:	68fb      	ldr	r3, [r7, #12]
24012520:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
24012522:	2b04      	cmp	r3, #4
24012524:	d172      	bne.n	2401260c <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
24012526:	68fb      	ldr	r3, [r7, #12]
24012528:	681b      	ldr	r3, [r3, #0]
2401252a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2401252c:	1c5a      	adds	r2, r3, #1
2401252e:	68fb      	ldr	r3, [r7, #12]
24012530:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
24012532:	68fb      	ldr	r3, [r7, #12]
24012534:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
24012536:	68fb      	ldr	r3, [r7, #12]
24012538:	645a      	str	r2, [r3, #68]	@ 0x44
      hospi->pBuffPtr  = pData;
2401253a:	68fb      	ldr	r3, [r7, #12]
2401253c:	68ba      	ldr	r2, [r7, #8]
2401253e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
24012540:	68fb      	ldr	r3, [r7, #12]
24012542:	681b      	ldr	r3, [r3, #0]
24012544:	681b      	ldr	r3, [r3, #0]
24012546:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
2401254a:	68fb      	ldr	r3, [r7, #12]
2401254c:	681b      	ldr	r3, [r3, #0]
2401254e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
24012552:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
24012554:	68fb      	ldr	r3, [r7, #12]
24012556:	68db      	ldr	r3, [r3, #12]
24012558:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
2401255c:	d104      	bne.n	24012568 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
2401255e:	68fb      	ldr	r3, [r7, #12]
24012560:	681b      	ldr	r3, [r3, #0]
24012562:	69ba      	ldr	r2, [r7, #24]
24012564:	649a      	str	r2, [r3, #72]	@ 0x48
24012566:	e011      	b.n	2401258c <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
24012568:	68fb      	ldr	r3, [r7, #12]
2401256a:	681b      	ldr	r3, [r3, #0]
2401256c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
24012570:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
24012574:	2b00      	cmp	r3, #0
24012576:	d004      	beq.n	24012582 <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
24012578:	68fb      	ldr	r3, [r7, #12]
2401257a:	681b      	ldr	r3, [r3, #0]
2401257c:	69ba      	ldr	r2, [r7, #24]
2401257e:	649a      	str	r2, [r3, #72]	@ 0x48
24012580:	e004      	b.n	2401258c <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
24012582:	68fb      	ldr	r3, [r7, #12]
24012584:	681b      	ldr	r3, [r3, #0]
24012586:	697a      	ldr	r2, [r7, #20]
24012588:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
2401258c:	687b      	ldr	r3, [r7, #4]
2401258e:	9300      	str	r3, [sp, #0]
24012590:	6a3b      	ldr	r3, [r7, #32]
24012592:	2201      	movs	r2, #1
24012594:	2106      	movs	r1, #6
24012596:	68f8      	ldr	r0, [r7, #12]
24012598:	f001 fb59 	bl	24013c4e <OSPI_WaitFlagStateUntilTimeout>
2401259c:	4603      	mov	r3, r0
2401259e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status != HAL_OK)
240125a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
240125a6:	2b00      	cmp	r3, #0
240125a8:	d114      	bne.n	240125d4 <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
240125aa:	68fb      	ldr	r3, [r7, #12]
240125ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
240125ae:	69fa      	ldr	r2, [r7, #28]
240125b0:	7812      	ldrb	r2, [r2, #0]
240125b2:	b2d2      	uxtb	r2, r2
240125b4:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
240125b6:	68fb      	ldr	r3, [r7, #12]
240125b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
240125ba:	1c5a      	adds	r2, r3, #1
240125bc:	68fb      	ldr	r3, [r7, #12]
240125be:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
240125c0:	68fb      	ldr	r3, [r7, #12]
240125c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
240125c4:	1e5a      	subs	r2, r3, #1
240125c6:	68fb      	ldr	r3, [r7, #12]
240125c8:	649a      	str	r2, [r3, #72]	@ 0x48
      } while (hospi->XferCount > 0U);
240125ca:	68fb      	ldr	r3, [r7, #12]
240125cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
240125ce:	2b00      	cmp	r3, #0
240125d0:	d1dc      	bne.n	2401258c <HAL_OSPI_Receive+0xae>
240125d2:	e000      	b.n	240125d6 <HAL_OSPI_Receive+0xf8>
          break;
240125d4:	bf00      	nop

      if (status == HAL_OK)
240125d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
240125da:	2b00      	cmp	r3, #0
240125dc:	d11c      	bne.n	24012618 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
240125de:	687b      	ldr	r3, [r7, #4]
240125e0:	9300      	str	r3, [sp, #0]
240125e2:	6a3b      	ldr	r3, [r7, #32]
240125e4:	2201      	movs	r2, #1
240125e6:	2102      	movs	r1, #2
240125e8:	68f8      	ldr	r0, [r7, #12]
240125ea:	f001 fb30 	bl	24013c4e <OSPI_WaitFlagStateUntilTimeout>
240125ee:	4603      	mov	r3, r0
240125f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status == HAL_OK)
240125f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
240125f8:	2b00      	cmp	r3, #0
240125fa:	d10d      	bne.n	24012618 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
240125fc:	68fb      	ldr	r3, [r7, #12]
240125fe:	681b      	ldr	r3, [r3, #0]
24012600:	2202      	movs	r2, #2
24012602:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
24012604:	68fb      	ldr	r3, [r7, #12]
24012606:	2202      	movs	r2, #2
24012608:	651a      	str	r2, [r3, #80]	@ 0x50
2401260a:	e005      	b.n	24012618 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
2401260c:	2301      	movs	r3, #1
2401260e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
24012612:	68fb      	ldr	r3, [r7, #12]
24012614:	2210      	movs	r2, #16
24012616:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
24012618:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
2401261c:	4618      	mov	r0, r3
2401261e:	3728      	adds	r7, #40	@ 0x28
24012620:	46bd      	mov	sp, r7
24012622:	bd80      	pop	{r7, pc}

24012624 <HAL_OSPI_Transmit_IT>:
  * @param  pData : pointer to data buffer
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit_IT(OSPI_HandleTypeDef *hospi, uint8_t *pData)
{
24012624:	b480      	push	{r7}
24012626:	b085      	sub	sp, #20
24012628:	af00      	add	r7, sp, #0
2401262a:	6078      	str	r0, [r7, #4]
2401262c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
2401262e:	2300      	movs	r3, #0
24012630:	73fb      	strb	r3, [r7, #15]

  /* Check the data pointer allocation */
  if (pData == NULL)
24012632:	683b      	ldr	r3, [r7, #0]
24012634:	2b00      	cmp	r3, #0
24012636:	d105      	bne.n	24012644 <HAL_OSPI_Transmit_IT+0x20>
  {
    status = HAL_ERROR;
24012638:	2301      	movs	r3, #1
2401263a:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
2401263c:	687b      	ldr	r3, [r7, #4]
2401263e:	2208      	movs	r2, #8
24012640:	655a      	str	r2, [r3, #84]	@ 0x54
24012642:	e02d      	b.n	240126a0 <HAL_OSPI_Transmit_IT+0x7c>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
24012644:	687b      	ldr	r3, [r7, #4]
24012646:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
24012648:	2b04      	cmp	r3, #4
2401264a:	d124      	bne.n	24012696 <HAL_OSPI_Transmit_IT+0x72>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
2401264c:	687b      	ldr	r3, [r7, #4]
2401264e:	681b      	ldr	r3, [r3, #0]
24012650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
24012652:	1c5a      	adds	r2, r3, #1
24012654:	687b      	ldr	r3, [r7, #4]
24012656:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
24012658:	687b      	ldr	r3, [r7, #4]
2401265a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
2401265c:	687b      	ldr	r3, [r7, #4]
2401265e:	645a      	str	r2, [r3, #68]	@ 0x44
      hospi->pBuffPtr  = pData;
24012660:	687b      	ldr	r3, [r7, #4]
24012662:	683a      	ldr	r2, [r7, #0]
24012664:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
24012666:	687b      	ldr	r3, [r7, #4]
24012668:	681b      	ldr	r3, [r3, #0]
2401266a:	681a      	ldr	r2, [r3, #0]
2401266c:	687b      	ldr	r3, [r7, #4]
2401266e:	681b      	ldr	r3, [r3, #0]
24012670:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
24012674:	601a      	str	r2, [r3, #0]

      /* Clear flags related to interrupt */
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TE | HAL_OSPI_FLAG_TC);
24012676:	687b      	ldr	r3, [r7, #4]
24012678:	681b      	ldr	r3, [r3, #0]
2401267a:	2203      	movs	r2, #3
2401267c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update the state */
      hospi->State = HAL_OSPI_STATE_BUSY_TX;
2401267e:	687b      	ldr	r3, [r7, #4]
24012680:	2218      	movs	r2, #24
24012682:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the transfer complete, fifo threshold and transfer error interrupts */
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
24012684:	687b      	ldr	r3, [r7, #4]
24012686:	681b      	ldr	r3, [r3, #0]
24012688:	681a      	ldr	r2, [r3, #0]
2401268a:	687b      	ldr	r3, [r7, #4]
2401268c:	681b      	ldr	r3, [r3, #0]
2401268e:	f442 22e0 	orr.w	r2, r2, #458752	@ 0x70000
24012692:	601a      	str	r2, [r3, #0]
24012694:	e004      	b.n	240126a0 <HAL_OSPI_Transmit_IT+0x7c>
    }
    else
    {
      status = HAL_ERROR;
24012696:	2301      	movs	r3, #1
24012698:	73fb      	strb	r3, [r7, #15]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
2401269a:	687b      	ldr	r3, [r7, #4]
2401269c:	2210      	movs	r2, #16
2401269e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
240126a0:	7bfb      	ldrb	r3, [r7, #15]
}
240126a2:	4618      	mov	r0, r3
240126a4:	3714      	adds	r7, #20
240126a6:	46bd      	mov	sp, r7
240126a8:	f85d 7b04 	ldr.w	r7, [sp], #4
240126ac:	4770      	bx	lr

240126ae <HAL_OSPI_Receive_IT>:
  * @param  pData : pointer to data buffer
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive_IT(OSPI_HandleTypeDef *hospi, uint8_t *pData)
{
240126ae:	b480      	push	{r7}
240126b0:	b087      	sub	sp, #28
240126b2:	af00      	add	r7, sp, #0
240126b4:	6078      	str	r0, [r7, #4]
240126b6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
240126b8:	2300      	movs	r3, #0
240126ba:	75fb      	strb	r3, [r7, #23]
  uint32_t addr_reg = hospi->Instance->AR;
240126bc:	687b      	ldr	r3, [r7, #4]
240126be:	681b      	ldr	r3, [r3, #0]
240126c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
240126c2:	613b      	str	r3, [r7, #16]
  uint32_t ir_reg = hospi->Instance->IR;
240126c4:	687b      	ldr	r3, [r7, #4]
240126c6:	681b      	ldr	r3, [r3, #0]
240126c8:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
240126cc:	60fb      	str	r3, [r7, #12]

  /* Check the data pointer allocation */
  if (pData == NULL)
240126ce:	683b      	ldr	r3, [r7, #0]
240126d0:	2b00      	cmp	r3, #0
240126d2:	d105      	bne.n	240126e0 <HAL_OSPI_Receive_IT+0x32>
  {
    status = HAL_ERROR;
240126d4:	2301      	movs	r3, #1
240126d6:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
240126d8:	687b      	ldr	r3, [r7, #4]
240126da:	2208      	movs	r2, #8
240126dc:	655a      	str	r2, [r3, #84]	@ 0x54
240126de:	e04b      	b.n	24012778 <HAL_OSPI_Receive_IT+0xca>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
240126e0:	687b      	ldr	r3, [r7, #4]
240126e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
240126e4:	2b04      	cmp	r3, #4
240126e6:	d142      	bne.n	2401276e <HAL_OSPI_Receive_IT+0xc0>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
240126e8:	687b      	ldr	r3, [r7, #4]
240126ea:	681b      	ldr	r3, [r3, #0]
240126ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
240126ee:	1c5a      	adds	r2, r3, #1
240126f0:	687b      	ldr	r3, [r7, #4]
240126f2:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
240126f4:	687b      	ldr	r3, [r7, #4]
240126f6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
240126f8:	687b      	ldr	r3, [r7, #4]
240126fa:	645a      	str	r2, [r3, #68]	@ 0x44
      hospi->pBuffPtr  = pData;
240126fc:	687b      	ldr	r3, [r7, #4]
240126fe:	683a      	ldr	r2, [r7, #0]
24012700:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
24012702:	687b      	ldr	r3, [r7, #4]
24012704:	681b      	ldr	r3, [r3, #0]
24012706:	681b      	ldr	r3, [r3, #0]
24012708:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
2401270c:	687b      	ldr	r3, [r7, #4]
2401270e:	681b      	ldr	r3, [r3, #0]
24012710:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
24012714:	601a      	str	r2, [r3, #0]

      /* Clear flags related to interrupt */
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TE | HAL_OSPI_FLAG_TC);
24012716:	687b      	ldr	r3, [r7, #4]
24012718:	681b      	ldr	r3, [r3, #0]
2401271a:	2203      	movs	r2, #3
2401271c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update the state */
      hospi->State = HAL_OSPI_STATE_BUSY_RX;
2401271e:	687b      	ldr	r3, [r7, #4]
24012720:	2228      	movs	r2, #40	@ 0x28
24012722:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the transfer complete, fifo threshold and transfer error interrupts */
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
24012724:	687b      	ldr	r3, [r7, #4]
24012726:	681b      	ldr	r3, [r3, #0]
24012728:	681a      	ldr	r2, [r3, #0]
2401272a:	687b      	ldr	r3, [r7, #4]
2401272c:	681b      	ldr	r3, [r3, #0]
2401272e:	f442 22e0 	orr.w	r2, r2, #458752	@ 0x70000
24012732:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
24012734:	687b      	ldr	r3, [r7, #4]
24012736:	68db      	ldr	r3, [r3, #12]
24012738:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
2401273c:	d104      	bne.n	24012748 <HAL_OSPI_Receive_IT+0x9a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
2401273e:	687b      	ldr	r3, [r7, #4]
24012740:	681b      	ldr	r3, [r3, #0]
24012742:	693a      	ldr	r2, [r7, #16]
24012744:	649a      	str	r2, [r3, #72]	@ 0x48
24012746:	e017      	b.n	24012778 <HAL_OSPI_Receive_IT+0xca>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
24012748:	687b      	ldr	r3, [r7, #4]
2401274a:	681b      	ldr	r3, [r3, #0]
2401274c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
24012750:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
24012754:	2b00      	cmp	r3, #0
24012756:	d004      	beq.n	24012762 <HAL_OSPI_Receive_IT+0xb4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
24012758:	687b      	ldr	r3, [r7, #4]
2401275a:	681b      	ldr	r3, [r3, #0]
2401275c:	693a      	ldr	r2, [r7, #16]
2401275e:	649a      	str	r2, [r3, #72]	@ 0x48
24012760:	e00a      	b.n	24012778 <HAL_OSPI_Receive_IT+0xca>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
24012762:	687b      	ldr	r3, [r7, #4]
24012764:	681b      	ldr	r3, [r3, #0]
24012766:	68fa      	ldr	r2, [r7, #12]
24012768:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
2401276c:	e004      	b.n	24012778 <HAL_OSPI_Receive_IT+0xca>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
2401276e:	2301      	movs	r3, #1
24012770:	75fb      	strb	r3, [r7, #23]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
24012772:	687b      	ldr	r3, [r7, #4]
24012774:	2210      	movs	r2, #16
24012776:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
24012778:	7dfb      	ldrb	r3, [r7, #23]
}
2401277a:	4618      	mov	r0, r3
2401277c:	371c      	adds	r7, #28
2401277e:	46bd      	mov	sp, r7
24012780:	f85d 7b04 	ldr.w	r7, [sp], #4
24012784:	4770      	bx	lr
	...

24012788 <HAL_OSPI_Transmit_DMA>:
  * @note   If DMA peripheral access is configured as word, the number
  *         of data and the fifo threshold should be aligned on word
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit_DMA(OSPI_HandleTypeDef *hospi, uint8_t *pData)
{
24012788:	b590      	push	{r4, r7, lr}
2401278a:	b087      	sub	sp, #28
2401278c:	af02      	add	r7, sp, #8
2401278e:	6078      	str	r0, [r7, #4]
24012790:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
24012792:	2300      	movs	r3, #0
24012794:	73fb      	strb	r3, [r7, #15]
  uint32_t data_size = hospi->Instance->DLR + 1U;
24012796:	687b      	ldr	r3, [r7, #4]
24012798:	681b      	ldr	r3, [r3, #0]
2401279a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2401279c:	3301      	adds	r3, #1
2401279e:	60bb      	str	r3, [r7, #8]

  /* Check the data pointer allocation */
  if (pData == NULL)
240127a0:	683b      	ldr	r3, [r7, #0]
240127a2:	2b00      	cmp	r3, #0
240127a4:	d105      	bne.n	240127b2 <HAL_OSPI_Transmit_DMA+0x2a>
  {
    status = HAL_ERROR;
240127a6:	2301      	movs	r3, #1
240127a8:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
240127aa:	687b      	ldr	r3, [r7, #4]
240127ac:	2208      	movs	r2, #8
240127ae:	655a      	str	r2, [r3, #84]	@ 0x54
240127b0:	e0a2      	b.n	240128f8 <HAL_OSPI_Transmit_DMA+0x170>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
240127b2:	687b      	ldr	r3, [r7, #4]
240127b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
240127b6:	2b04      	cmp	r3, #4
240127b8:	f040 8099 	bne.w	240128ee <HAL_OSPI_Transmit_DMA+0x166>
    {
      hospi->XferCount = data_size;
240127bc:	687b      	ldr	r3, [r7, #4]
240127be:	68ba      	ldr	r2, [r7, #8]
240127c0:	649a      	str	r2, [r3, #72]	@ 0x48

      {
        hospi->XferSize = hospi->XferCount;
240127c2:	687b      	ldr	r3, [r7, #4]
240127c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
240127c6:	687b      	ldr	r3, [r7, #4]
240127c8:	645a      	str	r2, [r3, #68]	@ 0x44
        hospi->pBuffPtr = pData;
240127ca:	687b      	ldr	r3, [r7, #4]
240127cc:	683a      	ldr	r2, [r7, #0]
240127ce:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Configure CR register with functional mode as indirect write */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
240127d0:	687b      	ldr	r3, [r7, #4]
240127d2:	681b      	ldr	r3, [r3, #0]
240127d4:	681a      	ldr	r2, [r3, #0]
240127d6:	687b      	ldr	r3, [r7, #4]
240127d8:	681b      	ldr	r3, [r3, #0]
240127da:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
240127de:	601a      	str	r2, [r3, #0]

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TE | HAL_OSPI_FLAG_TC);
240127e0:	687b      	ldr	r3, [r7, #4]
240127e2:	681b      	ldr	r3, [r3, #0]
240127e4:	2203      	movs	r2, #3
240127e6:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the state */
        hospi->State = HAL_OSPI_STATE_BUSY_TX;
240127e8:	687b      	ldr	r3, [r7, #4]
240127ea:	2218      	movs	r2, #24
240127ec:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Set the MDMA transfer complete callback */
        hospi->hmdma->XferCpltCallback = OSPI_DMACplt;
240127ee:	687b      	ldr	r3, [r7, #4]
240127f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
240127f2:	4a44      	ldr	r2, [pc, #272]	@ (24012904 <HAL_OSPI_Transmit_DMA+0x17c>)
240127f4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Set the MDMA error callback */
        hospi->hmdma->XferErrorCallback = OSPI_DMAError;
240127f6:	687b      	ldr	r3, [r7, #4]
240127f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
240127fa:	4a43      	ldr	r2, [pc, #268]	@ (24012908 <HAL_OSPI_Transmit_DMA+0x180>)
240127fc:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear the MDMA abort callback */
        hospi->hmdma->XferAbortCallback = NULL;
240127fe:	687b      	ldr	r3, [r7, #4]
24012800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
24012802:	2200      	movs	r2, #0
24012804:	659a      	str	r2, [r3, #88]	@ 0x58

        /* In Transmit mode , the MDMA destination is the OSPI DR register : Force the MDMA Destination Increment
           to disable */
        MODIFY_REG(hospi->hmdma->Instance->CTCR, (MDMA_CTCR_DINC | MDMA_CTCR_DINCOS), MDMA_DEST_INC_DISABLE);
24012806:	687b      	ldr	r3, [r7, #4]
24012808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
2401280a:	681b      	ldr	r3, [r3, #0]
2401280c:	6919      	ldr	r1, [r3, #16]
2401280e:	687b      	ldr	r3, [r7, #4]
24012810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
24012812:	681a      	ldr	r2, [r3, #0]
24012814:	4b3d      	ldr	r3, [pc, #244]	@ (2401290c <HAL_OSPI_Transmit_DMA+0x184>)
24012816:	400b      	ands	r3, r1
24012818:	6113      	str	r3, [r2, #16]

        /* Update MDMA configuration with the correct SourceInc field for Write operation */
        if (hospi->hmdma->Init.SourceDataSize == MDMA_SRC_DATASIZE_BYTE)
2401281a:	687b      	ldr	r3, [r7, #4]
2401281c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
2401281e:	69db      	ldr	r3, [r3, #28]
24012820:	2b00      	cmp	r3, #0
24012822:	d10c      	bne.n	2401283e <HAL_OSPI_Transmit_DMA+0xb6>
        {
          MODIFY_REG(hospi->hmdma->Instance->CTCR, (MDMA_CTCR_SINC | MDMA_CTCR_SINCOS), MDMA_SRC_INC_BYTE);
24012824:	687b      	ldr	r3, [r7, #4]
24012826:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
24012828:	681b      	ldr	r3, [r3, #0]
2401282a:	691a      	ldr	r2, [r3, #16]
2401282c:	4b38      	ldr	r3, [pc, #224]	@ (24012910 <HAL_OSPI_Transmit_DMA+0x188>)
2401282e:	4013      	ands	r3, r2
24012830:	687a      	ldr	r2, [r7, #4]
24012832:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
24012834:	6812      	ldr	r2, [r2, #0]
24012836:	f043 0302 	orr.w	r3, r3, #2
2401283a:	6113      	str	r3, [r2, #16]
2401283c:	e02c      	b.n	24012898 <HAL_OSPI_Transmit_DMA+0x110>
        }
        else if (hospi->hmdma->Init.SourceDataSize == MDMA_SRC_DATASIZE_HALFWORD)
2401283e:	687b      	ldr	r3, [r7, #4]
24012840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
24012842:	69db      	ldr	r3, [r3, #28]
24012844:	2b10      	cmp	r3, #16
24012846:	d10c      	bne.n	24012862 <HAL_OSPI_Transmit_DMA+0xda>
        {
          MODIFY_REG(hospi->hmdma->Instance->CTCR, (MDMA_CTCR_SINC | MDMA_CTCR_SINCOS), MDMA_SRC_INC_HALFWORD);
24012848:	687b      	ldr	r3, [r7, #4]
2401284a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
2401284c:	681b      	ldr	r3, [r3, #0]
2401284e:	691a      	ldr	r2, [r3, #16]
24012850:	4b2f      	ldr	r3, [pc, #188]	@ (24012910 <HAL_OSPI_Transmit_DMA+0x188>)
24012852:	4013      	ands	r3, r2
24012854:	687a      	ldr	r2, [r7, #4]
24012856:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
24012858:	6812      	ldr	r2, [r2, #0]
2401285a:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
2401285e:	6113      	str	r3, [r2, #16]
24012860:	e01a      	b.n	24012898 <HAL_OSPI_Transmit_DMA+0x110>
        }
        else if (hospi->hmdma->Init.SourceDataSize == MDMA_SRC_DATASIZE_WORD)
24012862:	687b      	ldr	r3, [r7, #4]
24012864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
24012866:	69db      	ldr	r3, [r3, #28]
24012868:	2b20      	cmp	r3, #32
2401286a:	d10d      	bne.n	24012888 <HAL_OSPI_Transmit_DMA+0x100>
        {
          MODIFY_REG(hospi->hmdma->Instance->CTCR, (MDMA_CTCR_SINC | MDMA_CTCR_SINCOS), MDMA_SRC_INC_WORD);
2401286c:	687b      	ldr	r3, [r7, #4]
2401286e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
24012870:	681b      	ldr	r3, [r3, #0]
24012872:	691b      	ldr	r3, [r3, #16]
24012874:	4a26      	ldr	r2, [pc, #152]	@ (24012910 <HAL_OSPI_Transmit_DMA+0x188>)
24012876:	401a      	ands	r2, r3
24012878:	687b      	ldr	r3, [r7, #4]
2401287a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
2401287c:	6819      	ldr	r1, [r3, #0]
2401287e:	f240 2302 	movw	r3, #514	@ 0x202
24012882:	4313      	orrs	r3, r2
24012884:	610b      	str	r3, [r1, #16]
24012886:	e007      	b.n	24012898 <HAL_OSPI_Transmit_DMA+0x110>
        }
        else
        {
          /* in case of incorrect source data size */
          hospi->ErrorCode |= HAL_OSPI_ERROR_DMA;
24012888:	687b      	ldr	r3, [r7, #4]
2401288a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
2401288c:	f043 0204 	orr.w	r2, r3, #4
24012890:	687b      	ldr	r3, [r7, #4]
24012892:	655a      	str	r2, [r3, #84]	@ 0x54
          status = HAL_ERROR;
24012894:	2301      	movs	r3, #1
24012896:	73fb      	strb	r3, [r7, #15]
        }

        /* Enable the transmit MDMA Channel */
        if (HAL_MDMA_Start_IT(hospi->hmdma, (uint32_t)pData, (uint32_t)&hospi->Instance->DR, hospi->XferSize, 1) == \
24012898:	687b      	ldr	r3, [r7, #4]
2401289a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
2401289c:	6839      	ldr	r1, [r7, #0]
2401289e:	687b      	ldr	r3, [r7, #4]
240128a0:	681b      	ldr	r3, [r3, #0]
240128a2:	3350      	adds	r3, #80	@ 0x50
240128a4:	461c      	mov	r4, r3
240128a6:	687b      	ldr	r3, [r7, #4]
240128a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
240128aa:	2201      	movs	r2, #1
240128ac:	9200      	str	r2, [sp, #0]
240128ae:	4622      	mov	r2, r4
240128b0:	f7fe fd6f 	bl	24011392 <HAL_MDMA_Start_IT>
240128b4:	4603      	mov	r3, r0
240128b6:	2b00      	cmp	r3, #0
240128b8:	d110      	bne.n	240128dc <HAL_OSPI_Transmit_DMA+0x154>
            HAL_OK)
        {
          /* Enable the transfer error interrupt */
          __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TE);
240128ba:	687b      	ldr	r3, [r7, #4]
240128bc:	681b      	ldr	r3, [r3, #0]
240128be:	681a      	ldr	r2, [r3, #0]
240128c0:	687b      	ldr	r3, [r7, #4]
240128c2:	681b      	ldr	r3, [r3, #0]
240128c4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
240128c8:	601a      	str	r2, [r3, #0]

          /* Enable the DMA transfer by setting the DMAEN bit  */
          SET_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
240128ca:	687b      	ldr	r3, [r7, #4]
240128cc:	681b      	ldr	r3, [r3, #0]
240128ce:	681a      	ldr	r2, [r3, #0]
240128d0:	687b      	ldr	r3, [r7, #4]
240128d2:	681b      	ldr	r3, [r3, #0]
240128d4:	f042 0204 	orr.w	r2, r2, #4
240128d8:	601a      	str	r2, [r3, #0]
240128da:	e00d      	b.n	240128f8 <HAL_OSPI_Transmit_DMA+0x170>
        }
        else
        {
          status = HAL_ERROR;
240128dc:	2301      	movs	r3, #1
240128de:	73fb      	strb	r3, [r7, #15]
          hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
240128e0:	687b      	ldr	r3, [r7, #4]
240128e2:	2204      	movs	r2, #4
240128e4:	655a      	str	r2, [r3, #84]	@ 0x54
          hospi->State = HAL_OSPI_STATE_READY;
240128e6:	687b      	ldr	r3, [r7, #4]
240128e8:	2202      	movs	r2, #2
240128ea:	651a      	str	r2, [r3, #80]	@ 0x50
240128ec:	e004      	b.n	240128f8 <HAL_OSPI_Transmit_DMA+0x170>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
240128ee:	2301      	movs	r3, #1
240128f0:	73fb      	strb	r3, [r7, #15]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
240128f2:	687b      	ldr	r3, [r7, #4]
240128f4:	2210      	movs	r2, #16
240128f6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
240128f8:	7bfb      	ldrb	r3, [r7, #15]
}
240128fa:	4618      	mov	r0, r3
240128fc:	3714      	adds	r7, #20
240128fe:	46bd      	mov	sp, r7
24012900:	bd90      	pop	{r4, r7, pc}
24012902:	bf00      	nop
24012904:	24013ab9 	.word	0x24013ab9
24012908:	24013b09 	.word	0x24013b09
2401290c:	fffff3f3 	.word	0xfffff3f3
24012910:	fffffcfc 	.word	0xfffffcfc

24012914 <HAL_OSPI_Receive_DMA>:
  * @note   If DMA peripheral access is configured as word, the number
  *         of data and the fifo threshold should be aligned on word
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive_DMA(OSPI_HandleTypeDef *hospi, uint8_t *pData)
{
24012914:	b590      	push	{r4, r7, lr}
24012916:	b089      	sub	sp, #36	@ 0x24
24012918:	af02      	add	r7, sp, #8
2401291a:	6078      	str	r0, [r7, #4]
2401291c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
2401291e:	2300      	movs	r3, #0
24012920:	75fb      	strb	r3, [r7, #23]
  uint32_t data_size = hospi->Instance->DLR + 1U;
24012922:	687b      	ldr	r3, [r7, #4]
24012924:	681b      	ldr	r3, [r3, #0]
24012926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
24012928:	3301      	adds	r3, #1
2401292a:	613b      	str	r3, [r7, #16]
  uint32_t addr_reg = hospi->Instance->AR;
2401292c:	687b      	ldr	r3, [r7, #4]
2401292e:	681b      	ldr	r3, [r3, #0]
24012930:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
24012932:	60fb      	str	r3, [r7, #12]
  uint32_t ir_reg = hospi->Instance->IR;
24012934:	687b      	ldr	r3, [r7, #4]
24012936:	681b      	ldr	r3, [r3, #0]
24012938:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
2401293c:	60bb      	str	r3, [r7, #8]
  /* Check the data pointer allocation */
  if (pData == NULL)
2401293e:	683b      	ldr	r3, [r7, #0]
24012940:	2b00      	cmp	r3, #0
24012942:	d105      	bne.n	24012950 <HAL_OSPI_Receive_DMA+0x3c>
  {
    status = HAL_ERROR;
24012944:	2301      	movs	r3, #1
24012946:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
24012948:	687b      	ldr	r3, [r7, #4]
2401294a:	2208      	movs	r2, #8
2401294c:	655a      	str	r2, [r3, #84]	@ 0x54
2401294e:	e0c0      	b.n	24012ad2 <HAL_OSPI_Receive_DMA+0x1be>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
24012950:	687b      	ldr	r3, [r7, #4]
24012952:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
24012954:	2b04      	cmp	r3, #4
24012956:	f040 80b7 	bne.w	24012ac8 <HAL_OSPI_Receive_DMA+0x1b4>
    {
      hospi->XferCount = data_size;
2401295a:	687b      	ldr	r3, [r7, #4]
2401295c:	693a      	ldr	r2, [r7, #16]
2401295e:	649a      	str	r2, [r3, #72]	@ 0x48

      {
        hospi->XferSize  = hospi->XferCount;
24012960:	687b      	ldr	r3, [r7, #4]
24012962:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
24012964:	687b      	ldr	r3, [r7, #4]
24012966:	645a      	str	r2, [r3, #68]	@ 0x44
        hospi->pBuffPtr  = pData;
24012968:	687b      	ldr	r3, [r7, #4]
2401296a:	683a      	ldr	r2, [r7, #0]
2401296c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Configure CR register with functional mode as indirect read */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
2401296e:	687b      	ldr	r3, [r7, #4]
24012970:	681b      	ldr	r3, [r3, #0]
24012972:	681b      	ldr	r3, [r3, #0]
24012974:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
24012978:	687b      	ldr	r3, [r7, #4]
2401297a:	681b      	ldr	r3, [r3, #0]
2401297c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
24012980:	601a      	str	r2, [r3, #0]

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TE | HAL_OSPI_FLAG_TC);
24012982:	687b      	ldr	r3, [r7, #4]
24012984:	681b      	ldr	r3, [r3, #0]
24012986:	2203      	movs	r2, #3
24012988:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the state */
        hospi->State = HAL_OSPI_STATE_BUSY_RX;
2401298a:	687b      	ldr	r3, [r7, #4]
2401298c:	2228      	movs	r2, #40	@ 0x28
2401298e:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Set the DMA transfer complete callback */
        hospi->hmdma->XferCpltCallback = OSPI_DMACplt;
24012990:	687b      	ldr	r3, [r7, #4]
24012992:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
24012994:	4a51      	ldr	r2, [pc, #324]	@ (24012adc <HAL_OSPI_Receive_DMA+0x1c8>)
24012996:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Set the DMA error callback */
        hospi->hmdma->XferErrorCallback = OSPI_DMAError;
24012998:	687b      	ldr	r3, [r7, #4]
2401299a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
2401299c:	4a50      	ldr	r2, [pc, #320]	@ (24012ae0 <HAL_OSPI_Receive_DMA+0x1cc>)
2401299e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear the DMA abort callback */
        hospi->hmdma->XferAbortCallback = NULL;
240129a0:	687b      	ldr	r3, [r7, #4]
240129a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
240129a4:	2200      	movs	r2, #0
240129a6:	659a      	str	r2, [r3, #88]	@ 0x58

        /* In Receive mode , the MDMA source is the OSPI DR register : Force the MDMA Source Increment to disable */
        MODIFY_REG(hospi->hmdma->Instance->CTCR, (MDMA_CTCR_SINC | MDMA_CTCR_SINCOS), MDMA_SRC_INC_DISABLE);
240129a8:	687b      	ldr	r3, [r7, #4]
240129aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
240129ac:	681b      	ldr	r3, [r3, #0]
240129ae:	6919      	ldr	r1, [r3, #16]
240129b0:	687b      	ldr	r3, [r7, #4]
240129b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
240129b4:	681a      	ldr	r2, [r3, #0]
240129b6:	4b4b      	ldr	r3, [pc, #300]	@ (24012ae4 <HAL_OSPI_Receive_DMA+0x1d0>)
240129b8:	400b      	ands	r3, r1
240129ba:	6113      	str	r3, [r2, #16]

        /* Update MDMA configuration with the correct DestinationInc field for read operation */
        if (hospi->hmdma->Init.DestDataSize == MDMA_DEST_DATASIZE_BYTE)
240129bc:	687b      	ldr	r3, [r7, #4]
240129be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
240129c0:	6a1b      	ldr	r3, [r3, #32]
240129c2:	2b00      	cmp	r3, #0
240129c4:	d10c      	bne.n	240129e0 <HAL_OSPI_Receive_DMA+0xcc>
        {
          MODIFY_REG(hospi->hmdma->Instance->CTCR, (MDMA_CTCR_DINC | MDMA_CTCR_DINCOS), MDMA_DEST_INC_BYTE);
240129c6:	687b      	ldr	r3, [r7, #4]
240129c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
240129ca:	681b      	ldr	r3, [r3, #0]
240129cc:	691a      	ldr	r2, [r3, #16]
240129ce:	4b46      	ldr	r3, [pc, #280]	@ (24012ae8 <HAL_OSPI_Receive_DMA+0x1d4>)
240129d0:	4013      	ands	r3, r2
240129d2:	687a      	ldr	r2, [r7, #4]
240129d4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
240129d6:	6812      	ldr	r2, [r2, #0]
240129d8:	f043 0308 	orr.w	r3, r3, #8
240129dc:	6113      	str	r3, [r2, #16]
240129de:	e02c      	b.n	24012a3a <HAL_OSPI_Receive_DMA+0x126>
        }
        else if (hospi->hmdma->Init.DestDataSize == MDMA_DEST_DATASIZE_HALFWORD)
240129e0:	687b      	ldr	r3, [r7, #4]
240129e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
240129e4:	6a1b      	ldr	r3, [r3, #32]
240129e6:	2b40      	cmp	r3, #64	@ 0x40
240129e8:	d10c      	bne.n	24012a04 <HAL_OSPI_Receive_DMA+0xf0>
        {
          MODIFY_REG(hospi->hmdma->Instance->CTCR, (MDMA_CTCR_DINC | MDMA_CTCR_DINCOS), MDMA_DEST_INC_HALFWORD);
240129ea:	687b      	ldr	r3, [r7, #4]
240129ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
240129ee:	681b      	ldr	r3, [r3, #0]
240129f0:	691a      	ldr	r2, [r3, #16]
240129f2:	4b3d      	ldr	r3, [pc, #244]	@ (24012ae8 <HAL_OSPI_Receive_DMA+0x1d4>)
240129f4:	4013      	ands	r3, r2
240129f6:	687a      	ldr	r2, [r7, #4]
240129f8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
240129fa:	6812      	ldr	r2, [r2, #0]
240129fc:	f443 6381 	orr.w	r3, r3, #1032	@ 0x408
24012a00:	6113      	str	r3, [r2, #16]
24012a02:	e01a      	b.n	24012a3a <HAL_OSPI_Receive_DMA+0x126>
        }
        else if (hospi->hmdma->Init.DestDataSize == MDMA_DEST_DATASIZE_WORD)
24012a04:	687b      	ldr	r3, [r7, #4]
24012a06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
24012a08:	6a1b      	ldr	r3, [r3, #32]
24012a0a:	2b80      	cmp	r3, #128	@ 0x80
24012a0c:	d10d      	bne.n	24012a2a <HAL_OSPI_Receive_DMA+0x116>
        {
          MODIFY_REG(hospi->hmdma->Instance->CTCR, (MDMA_CTCR_DINC | MDMA_CTCR_DINCOS), MDMA_DEST_INC_WORD);
24012a0e:	687b      	ldr	r3, [r7, #4]
24012a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
24012a12:	681b      	ldr	r3, [r3, #0]
24012a14:	691b      	ldr	r3, [r3, #16]
24012a16:	4a34      	ldr	r2, [pc, #208]	@ (24012ae8 <HAL_OSPI_Receive_DMA+0x1d4>)
24012a18:	401a      	ands	r2, r3
24012a1a:	687b      	ldr	r3, [r7, #4]
24012a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
24012a1e:	6819      	ldr	r1, [r3, #0]
24012a20:	f640 0308 	movw	r3, #2056	@ 0x808
24012a24:	4313      	orrs	r3, r2
24012a26:	610b      	str	r3, [r1, #16]
24012a28:	e007      	b.n	24012a3a <HAL_OSPI_Receive_DMA+0x126>
        }
        else
        {
          /* in case of incorrect destination data size */
          hospi->ErrorCode |= HAL_OSPI_ERROR_DMA;
24012a2a:	687b      	ldr	r3, [r7, #4]
24012a2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
24012a2e:	f043 0204 	orr.w	r2, r3, #4
24012a32:	687b      	ldr	r3, [r7, #4]
24012a34:	655a      	str	r2, [r3, #84]	@ 0x54
          status = HAL_ERROR;
24012a36:	2301      	movs	r3, #1
24012a38:	75fb      	strb	r3, [r7, #23]
        }

        /* Enable the transmit MDMA Channel */
        if (HAL_MDMA_Start_IT(hospi->hmdma, (uint32_t)pData, (uint32_t)&hospi->Instance->DR, hospi->XferSize, 1) == \
24012a3a:	687b      	ldr	r3, [r7, #4]
24012a3c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
24012a3e:	6839      	ldr	r1, [r7, #0]
24012a40:	687b      	ldr	r3, [r7, #4]
24012a42:	681b      	ldr	r3, [r3, #0]
24012a44:	3350      	adds	r3, #80	@ 0x50
24012a46:	461c      	mov	r4, r3
24012a48:	687b      	ldr	r3, [r7, #4]
24012a4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
24012a4c:	2201      	movs	r2, #1
24012a4e:	9200      	str	r2, [sp, #0]
24012a50:	4622      	mov	r2, r4
24012a52:	f7fe fc9e 	bl	24011392 <HAL_MDMA_Start_IT>
24012a56:	4603      	mov	r3, r0
24012a58:	2b00      	cmp	r3, #0
24012a5a:	d12c      	bne.n	24012ab6 <HAL_OSPI_Receive_DMA+0x1a2>
            HAL_OK)
        {
          /* Enable the transfer error interrupt */
          __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TE);
24012a5c:	687b      	ldr	r3, [r7, #4]
24012a5e:	681b      	ldr	r3, [r3, #0]
24012a60:	681a      	ldr	r2, [r3, #0]
24012a62:	687b      	ldr	r3, [r7, #4]
24012a64:	681b      	ldr	r3, [r3, #0]
24012a66:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
24012a6a:	601a      	str	r2, [r3, #0]

          /* Trig the transfer by re-writing address or instruction register */
          if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
24012a6c:	687b      	ldr	r3, [r7, #4]
24012a6e:	68db      	ldr	r3, [r3, #12]
24012a70:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
24012a74:	d104      	bne.n	24012a80 <HAL_OSPI_Receive_DMA+0x16c>
          {
            WRITE_REG(hospi->Instance->AR, addr_reg);
24012a76:	687b      	ldr	r3, [r7, #4]
24012a78:	681b      	ldr	r3, [r3, #0]
24012a7a:	68fa      	ldr	r2, [r7, #12]
24012a7c:	649a      	str	r2, [r3, #72]	@ 0x48
24012a7e:	e011      	b.n	24012aa4 <HAL_OSPI_Receive_DMA+0x190>
          }
          else
          {
            if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
24012a80:	687b      	ldr	r3, [r7, #4]
24012a82:	681b      	ldr	r3, [r3, #0]
24012a84:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
24012a88:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
24012a8c:	2b00      	cmp	r3, #0
24012a8e:	d004      	beq.n	24012a9a <HAL_OSPI_Receive_DMA+0x186>
            {
              WRITE_REG(hospi->Instance->AR, addr_reg);
24012a90:	687b      	ldr	r3, [r7, #4]
24012a92:	681b      	ldr	r3, [r3, #0]
24012a94:	68fa      	ldr	r2, [r7, #12]
24012a96:	649a      	str	r2, [r3, #72]	@ 0x48
24012a98:	e004      	b.n	24012aa4 <HAL_OSPI_Receive_DMA+0x190>
            }
            else
            {
              WRITE_REG(hospi->Instance->IR, ir_reg);
24012a9a:	687b      	ldr	r3, [r7, #4]
24012a9c:	681b      	ldr	r3, [r3, #0]
24012a9e:	68ba      	ldr	r2, [r7, #8]
24012aa0:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
            }
          }

          /* Enable the DMA transfer by setting the DMAEN bit  */
          SET_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
24012aa4:	687b      	ldr	r3, [r7, #4]
24012aa6:	681b      	ldr	r3, [r3, #0]
24012aa8:	681a      	ldr	r2, [r3, #0]
24012aaa:	687b      	ldr	r3, [r7, #4]
24012aac:	681b      	ldr	r3, [r3, #0]
24012aae:	f042 0204 	orr.w	r2, r2, #4
24012ab2:	601a      	str	r2, [r3, #0]
24012ab4:	e00d      	b.n	24012ad2 <HAL_OSPI_Receive_DMA+0x1be>
        }
        else
        {
          status = HAL_ERROR;
24012ab6:	2301      	movs	r3, #1
24012ab8:	75fb      	strb	r3, [r7, #23]
          hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
24012aba:	687b      	ldr	r3, [r7, #4]
24012abc:	2204      	movs	r2, #4
24012abe:	655a      	str	r2, [r3, #84]	@ 0x54
          hospi->State = HAL_OSPI_STATE_READY;
24012ac0:	687b      	ldr	r3, [r7, #4]
24012ac2:	2202      	movs	r2, #2
24012ac4:	651a      	str	r2, [r3, #80]	@ 0x50
24012ac6:	e004      	b.n	24012ad2 <HAL_OSPI_Receive_DMA+0x1be>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
24012ac8:	2301      	movs	r3, #1
24012aca:	75fb      	strb	r3, [r7, #23]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
24012acc:	687b      	ldr	r3, [r7, #4]
24012ace:	2210      	movs	r2, #16
24012ad0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
24012ad2:	7dfb      	ldrb	r3, [r7, #23]
}
24012ad4:	4618      	mov	r0, r3
24012ad6:	371c      	adds	r7, #28
24012ad8:	46bd      	mov	sp, r7
24012ada:	bd90      	pop	{r4, r7, pc}
24012adc:	24013ab9 	.word	0x24013ab9
24012ae0:	24013b09 	.word	0x24013b09
24012ae4:	fffffcfc 	.word	0xfffffcfc
24012ae8:	fffff3f3 	.word	0xfffff3f3

24012aec <HAL_OSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
24012aec:	b580      	push	{r7, lr}
24012aee:	b08a      	sub	sp, #40	@ 0x28
24012af0:	af02      	add	r7, sp, #8
24012af2:	60f8      	str	r0, [r7, #12]
24012af4:	60b9      	str	r1, [r7, #8]
24012af6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
24012af8:	f7f0 f8fa 	bl	24002cf0 <HAL_GetTick>
24012afc:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
24012afe:	68fb      	ldr	r3, [r7, #12]
24012b00:	681b      	ldr	r3, [r3, #0]
24012b02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
24012b04:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
24012b06:	68fb      	ldr	r3, [r7, #12]
24012b08:	681b      	ldr	r3, [r3, #0]
24012b0a:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
24012b0e:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP(cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL(cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
24012b10:	68fb      	ldr	r3, [r7, #12]
24012b12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
24012b14:	2b04      	cmp	r3, #4
24012b16:	d164      	bne.n	24012be2 <HAL_OSPI_AutoPolling+0xf6>
24012b18:	68bb      	ldr	r3, [r7, #8]
24012b1a:	68db      	ldr	r3, [r3, #12]
24012b1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
24012b20:	d15f      	bne.n	24012be2 <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
24012b22:	687b      	ldr	r3, [r7, #4]
24012b24:	9300      	str	r3, [sp, #0]
24012b26:	69bb      	ldr	r3, [r7, #24]
24012b28:	2200      	movs	r2, #0
24012b2a:	2120      	movs	r1, #32
24012b2c:	68f8      	ldr	r0, [r7, #12]
24012b2e:	f001 f88e 	bl	24013c4e <OSPI_WaitFlagStateUntilTimeout>
24012b32:	4603      	mov	r3, r0
24012b34:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
24012b36:	7ffb      	ldrb	r3, [r7, #31]
24012b38:	2b00      	cmp	r3, #0
24012b3a:	d158      	bne.n	24012bee <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG(hospi->Instance->PSMAR, cfg->Match);
24012b3c:	68fb      	ldr	r3, [r7, #12]
24012b3e:	681b      	ldr	r3, [r3, #0]
24012b40:	68ba      	ldr	r2, [r7, #8]
24012b42:	6812      	ldr	r2, [r2, #0]
24012b44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      WRITE_REG(hospi->Instance->PSMKR, cfg->Mask);
24012b48:	68fb      	ldr	r3, [r7, #12]
24012b4a:	681b      	ldr	r3, [r3, #0]
24012b4c:	68ba      	ldr	r2, [r7, #8]
24012b4e:	6852      	ldr	r2, [r2, #4]
24012b50:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      WRITE_REG(hospi->Instance->PIR,   cfg->Interval);
24012b54:	68fb      	ldr	r3, [r7, #12]
24012b56:	681b      	ldr	r3, [r3, #0]
24012b58:	68ba      	ldr	r2, [r7, #8]
24012b5a:	6912      	ldr	r2, [r2, #16]
24012b5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
24012b60:	68fb      	ldr	r3, [r7, #12]
24012b62:	681b      	ldr	r3, [r3, #0]
24012b64:	681b      	ldr	r3, [r3, #0]
24012b66:	f023 5243 	bic.w	r2, r3, #817889280	@ 0x30c00000
24012b6a:	68bb      	ldr	r3, [r7, #8]
24012b6c:	6899      	ldr	r1, [r3, #8]
24012b6e:	68bb      	ldr	r3, [r7, #8]
24012b70:	68db      	ldr	r3, [r3, #12]
24012b72:	430b      	orrs	r3, r1
24012b74:	431a      	orrs	r2, r3
24012b76:	68fb      	ldr	r3, [r7, #12]
24012b78:	681b      	ldr	r3, [r3, #0]
24012b7a:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
24012b7e:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
24012b80:	68fb      	ldr	r3, [r7, #12]
24012b82:	68db      	ldr	r3, [r3, #12]
24012b84:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
24012b88:	d104      	bne.n	24012b94 <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
24012b8a:	68fb      	ldr	r3, [r7, #12]
24012b8c:	681b      	ldr	r3, [r3, #0]
24012b8e:	697a      	ldr	r2, [r7, #20]
24012b90:	649a      	str	r2, [r3, #72]	@ 0x48
24012b92:	e011      	b.n	24012bb8 <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
24012b94:	68fb      	ldr	r3, [r7, #12]
24012b96:	681b      	ldr	r3, [r3, #0]
24012b98:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
24012b9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
24012ba0:	2b00      	cmp	r3, #0
24012ba2:	d004      	beq.n	24012bae <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
24012ba4:	68fb      	ldr	r3, [r7, #12]
24012ba6:	681b      	ldr	r3, [r3, #0]
24012ba8:	697a      	ldr	r2, [r7, #20]
24012baa:	649a      	str	r2, [r3, #72]	@ 0x48
24012bac:	e004      	b.n	24012bb8 <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
24012bae:	68fb      	ldr	r3, [r7, #12]
24012bb0:	681b      	ldr	r3, [r3, #0]
24012bb2:	693a      	ldr	r2, [r7, #16]
24012bb4:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
24012bb8:	687b      	ldr	r3, [r7, #4]
24012bba:	9300      	str	r3, [sp, #0]
24012bbc:	69bb      	ldr	r3, [r7, #24]
24012bbe:	2201      	movs	r2, #1
24012bc0:	2108      	movs	r1, #8
24012bc2:	68f8      	ldr	r0, [r7, #12]
24012bc4:	f001 f843 	bl	24013c4e <OSPI_WaitFlagStateUntilTimeout>
24012bc8:	4603      	mov	r3, r0
24012bca:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
24012bcc:	7ffb      	ldrb	r3, [r7, #31]
24012bce:	2b00      	cmp	r3, #0
24012bd0:	d10d      	bne.n	24012bee <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
24012bd2:	68fb      	ldr	r3, [r7, #12]
24012bd4:	681b      	ldr	r3, [r3, #0]
24012bd6:	2208      	movs	r2, #8
24012bd8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
24012bda:	68fb      	ldr	r3, [r7, #12]
24012bdc:	2202      	movs	r2, #2
24012bde:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
24012be0:	e005      	b.n	24012bee <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
24012be2:	2301      	movs	r3, #1
24012be4:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
24012be6:	68fb      	ldr	r3, [r7, #12]
24012be8:	2210      	movs	r2, #16
24012bea:	655a      	str	r2, [r3, #84]	@ 0x54
24012bec:	e000      	b.n	24012bf0 <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
24012bee:	bf00      	nop
  }

  /* Return function status */
  return status;
24012bf0:	7ffb      	ldrb	r3, [r7, #31]
}
24012bf2:	4618      	mov	r0, r3
24012bf4:	3720      	adds	r7, #32
24012bf6:	46bd      	mov	sp, r7
24012bf8:	bd80      	pop	{r7, pc}

24012bfa <HAL_OSPI_AutoPolling_IT>:
  * @param  cfg   : structure that contains the polling configuration information.
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling_IT(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg)
{
24012bfa:	b580      	push	{r7, lr}
24012bfc:	b088      	sub	sp, #32
24012bfe:	af02      	add	r7, sp, #8
24012c00:	6078      	str	r0, [r7, #4]
24012c02:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
24012c04:	f7f0 f874 	bl	24002cf0 <HAL_GetTick>
24012c08:	6138      	str	r0, [r7, #16]
  uint32_t addr_reg = hospi->Instance->AR;
24012c0a:	687b      	ldr	r3, [r7, #4]
24012c0c:	681b      	ldr	r3, [r3, #0]
24012c0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
24012c10:	60fb      	str	r3, [r7, #12]
  uint32_t ir_reg = hospi->Instance->IR;
24012c12:	687b      	ldr	r3, [r7, #4]
24012c14:	681b      	ldr	r3, [r3, #0]
24012c16:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
24012c1a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_OSPI_AUTOMATIC_STOP(cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL(cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
24012c1c:	687b      	ldr	r3, [r7, #4]
24012c1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
24012c20:	2b04      	cmp	r3, #4
24012c22:	d15b      	bne.n	24012cdc <HAL_OSPI_AutoPolling_IT+0xe2>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
24012c24:	687b      	ldr	r3, [r7, #4]
24012c26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
24012c28:	9300      	str	r3, [sp, #0]
24012c2a:	693b      	ldr	r3, [r7, #16]
24012c2c:	2200      	movs	r2, #0
24012c2e:	2120      	movs	r1, #32
24012c30:	6878      	ldr	r0, [r7, #4]
24012c32:	f001 f80c 	bl	24013c4e <OSPI_WaitFlagStateUntilTimeout>
24012c36:	4603      	mov	r3, r0
24012c38:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
24012c3a:	7dfb      	ldrb	r3, [r7, #23]
24012c3c:	2b00      	cmp	r3, #0
24012c3e:	d152      	bne.n	24012ce6 <HAL_OSPI_AutoPolling_IT+0xec>
    {
      /* Configure registers */
      WRITE_REG(hospi->Instance->PSMAR, cfg->Match);
24012c40:	687b      	ldr	r3, [r7, #4]
24012c42:	681b      	ldr	r3, [r3, #0]
24012c44:	683a      	ldr	r2, [r7, #0]
24012c46:	6812      	ldr	r2, [r2, #0]
24012c48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      WRITE_REG(hospi->Instance->PSMKR, cfg->Mask);
24012c4c:	687b      	ldr	r3, [r7, #4]
24012c4e:	681b      	ldr	r3, [r3, #0]
24012c50:	683a      	ldr	r2, [r7, #0]
24012c52:	6852      	ldr	r2, [r2, #4]
24012c54:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      WRITE_REG(hospi->Instance->PIR,   cfg->Interval);
24012c58:	687b      	ldr	r3, [r7, #4]
24012c5a:	681b      	ldr	r3, [r3, #0]
24012c5c:	683a      	ldr	r2, [r7, #0]
24012c5e:	6912      	ldr	r2, [r2, #16]
24012c60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
24012c64:	687b      	ldr	r3, [r7, #4]
24012c66:	681b      	ldr	r3, [r3, #0]
24012c68:	681b      	ldr	r3, [r3, #0]
24012c6a:	f023 5243 	bic.w	r2, r3, #817889280	@ 0x30c00000
24012c6e:	683b      	ldr	r3, [r7, #0]
24012c70:	6899      	ldr	r1, [r3, #8]
24012c72:	683b      	ldr	r3, [r7, #0]
24012c74:	68db      	ldr	r3, [r3, #12]
24012c76:	430b      	orrs	r3, r1
24012c78:	431a      	orrs	r2, r3
24012c7a:	687b      	ldr	r3, [r7, #4]
24012c7c:	681b      	ldr	r3, [r3, #0]
24012c7e:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
24012c82:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Clear flags related to interrupt */
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TE | HAL_OSPI_FLAG_SM);
24012c84:	687b      	ldr	r3, [r7, #4]
24012c86:	681b      	ldr	r3, [r3, #0]
24012c88:	2209      	movs	r2, #9
24012c8a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update state */
      hospi->State = HAL_OSPI_STATE_BUSY_AUTO_POLLING;
24012c8c:	687b      	ldr	r3, [r7, #4]
24012c8e:	2248      	movs	r2, #72	@ 0x48
24012c90:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the status match and transfer error interrupts */
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
24012c92:	687b      	ldr	r3, [r7, #4]
24012c94:	681b      	ldr	r3, [r3, #0]
24012c96:	681a      	ldr	r2, [r3, #0]
24012c98:	687b      	ldr	r3, [r7, #4]
24012c9a:	681b      	ldr	r3, [r3, #0]
24012c9c:	f442 2210 	orr.w	r2, r2, #589824	@ 0x90000
24012ca0:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
24012ca2:	687b      	ldr	r3, [r7, #4]
24012ca4:	68db      	ldr	r3, [r3, #12]
24012ca6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
24012caa:	d104      	bne.n	24012cb6 <HAL_OSPI_AutoPolling_IT+0xbc>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
24012cac:	687b      	ldr	r3, [r7, #4]
24012cae:	681b      	ldr	r3, [r3, #0]
24012cb0:	68fa      	ldr	r2, [r7, #12]
24012cb2:	649a      	str	r2, [r3, #72]	@ 0x48
24012cb4:	e017      	b.n	24012ce6 <HAL_OSPI_AutoPolling_IT+0xec>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
24012cb6:	687b      	ldr	r3, [r7, #4]
24012cb8:	681b      	ldr	r3, [r3, #0]
24012cba:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
24012cbe:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
24012cc2:	2b00      	cmp	r3, #0
24012cc4:	d004      	beq.n	24012cd0 <HAL_OSPI_AutoPolling_IT+0xd6>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
24012cc6:	687b      	ldr	r3, [r7, #4]
24012cc8:	681b      	ldr	r3, [r3, #0]
24012cca:	68fa      	ldr	r2, [r7, #12]
24012ccc:	649a      	str	r2, [r3, #72]	@ 0x48
24012cce:	e00a      	b.n	24012ce6 <HAL_OSPI_AutoPolling_IT+0xec>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
24012cd0:	687b      	ldr	r3, [r7, #4]
24012cd2:	681b      	ldr	r3, [r3, #0]
24012cd4:	68ba      	ldr	r2, [r7, #8]
24012cd6:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
24012cda:	e004      	b.n	24012ce6 <HAL_OSPI_AutoPolling_IT+0xec>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
24012cdc:	2301      	movs	r3, #1
24012cde:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
24012ce0:	687b      	ldr	r3, [r7, #4]
24012ce2:	2210      	movs	r2, #16
24012ce4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Return function status */
  return status;
24012ce6:	7dfb      	ldrb	r3, [r7, #23]
}
24012ce8:	4618      	mov	r0, r3
24012cea:	3718      	adds	r7, #24
24012cec:	46bd      	mov	sp, r7
24012cee:	bd80      	pop	{r7, pc}

24012cf0 <HAL_OSPI_MemoryMapped>:
  * @param  cfg   : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_MemoryMapped(OSPI_HandleTypeDef *hospi, OSPI_MemoryMappedTypeDef *cfg)
{
24012cf0:	b580      	push	{r7, lr}
24012cf2:	b086      	sub	sp, #24
24012cf4:	af02      	add	r7, sp, #8
24012cf6:	6078      	str	r0, [r7, #4]
24012cf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
24012cfa:	f7ef fff9 	bl	24002cf0 <HAL_GetTick>
24012cfe:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_OSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
24012d00:	687b      	ldr	r3, [r7, #4]
24012d02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
24012d04:	2b04      	cmp	r3, #4
24012d06:	d134      	bne.n	24012d72 <HAL_OSPI_MemoryMapped+0x82>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
24012d08:	687b      	ldr	r3, [r7, #4]
24012d0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
24012d0c:	9300      	str	r3, [sp, #0]
24012d0e:	68bb      	ldr	r3, [r7, #8]
24012d10:	2200      	movs	r2, #0
24012d12:	2120      	movs	r1, #32
24012d14:	6878      	ldr	r0, [r7, #4]
24012d16:	f000 ff9a 	bl	24013c4e <OSPI_WaitFlagStateUntilTimeout>
24012d1a:	4603      	mov	r3, r0
24012d1c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
24012d1e:	7bfb      	ldrb	r3, [r7, #15]
24012d20:	2b00      	cmp	r3, #0
24012d22:	d12b      	bne.n	24012d7c <HAL_OSPI_MemoryMapped+0x8c>
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
24012d24:	687b      	ldr	r3, [r7, #4]
24012d26:	2288      	movs	r2, #136	@ 0x88
24012d28:	651a      	str	r2, [r3, #80]	@ 0x50

      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
24012d2a:	683b      	ldr	r3, [r7, #0]
24012d2c:	681b      	ldr	r3, [r3, #0]
24012d2e:	2b08      	cmp	r3, #8
24012d30:	d111      	bne.n	24012d56 <HAL_OSPI_MemoryMapped+0x66>
      {
        assert_param(IS_OSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure register */
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
24012d32:	687b      	ldr	r3, [r7, #4]
24012d34:	681b      	ldr	r3, [r3, #0]
24012d36:	683a      	ldr	r2, [r7, #0]
24012d38:	6852      	ldr	r2, [r2, #4]
24012d3a:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
24012d3e:	687b      	ldr	r3, [r7, #4]
24012d40:	681b      	ldr	r3, [r3, #0]
24012d42:	2210      	movs	r2, #16
24012d44:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Enable the timeout interrupt */
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
24012d46:	687b      	ldr	r3, [r7, #4]
24012d48:	681b      	ldr	r3, [r3, #0]
24012d4a:	681a      	ldr	r2, [r3, #0]
24012d4c:	687b      	ldr	r3, [r7, #4]
24012d4e:	681b      	ldr	r3, [r3, #0]
24012d50:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
24012d54:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
24012d56:	687b      	ldr	r3, [r7, #4]
24012d58:	681b      	ldr	r3, [r3, #0]
24012d5a:	681a      	ldr	r2, [r3, #0]
24012d5c:	4b0a      	ldr	r3, [pc, #40]	@ (24012d88 <HAL_OSPI_MemoryMapped+0x98>)
24012d5e:	4013      	ands	r3, r2
24012d60:	683a      	ldr	r2, [r7, #0]
24012d62:	6812      	ldr	r2, [r2, #0]
24012d64:	431a      	orrs	r2, r3
24012d66:	687b      	ldr	r3, [r7, #4]
24012d68:	681b      	ldr	r3, [r3, #0]
24012d6a:	f042 5240 	orr.w	r2, r2, #805306368	@ 0x30000000
24012d6e:	601a      	str	r2, [r3, #0]
24012d70:	e004      	b.n	24012d7c <HAL_OSPI_MemoryMapped+0x8c>
                 (cfg->TimeOutActivation | OSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
24012d72:	2301      	movs	r3, #1
24012d74:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
24012d76:	687b      	ldr	r3, [r7, #4]
24012d78:	2210      	movs	r2, #16
24012d7a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Return function status */
  return status;
24012d7c:	7bfb      	ldrb	r3, [r7, #15]
}
24012d7e:	4618      	mov	r0, r3
24012d80:	3710      	adds	r7, #16
24012d82:	46bd      	mov	sp, r7
24012d84:	bd80      	pop	{r7, pc}
24012d86:	bf00      	nop
24012d88:	cffffff7 	.word	0xcffffff7

24012d8c <HAL_OSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_ErrorCallback(OSPI_HandleTypeDef *hospi)
{
24012d8c:	b480      	push	{r7}
24012d8e:	b083      	sub	sp, #12
24012d90:	af00      	add	r7, sp, #0
24012d92:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_ErrorCallback could be implemented in the user file
   */
}
24012d94:	bf00      	nop
24012d96:	370c      	adds	r7, #12
24012d98:	46bd      	mov	sp, r7
24012d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
24012d9e:	4770      	bx	lr

24012da0 <HAL_OSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_AbortCpltCallback(OSPI_HandleTypeDef *hospi)
{
24012da0:	b480      	push	{r7}
24012da2:	b083      	sub	sp, #12
24012da4:	af00      	add	r7, sp, #0
24012da6:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_AbortCpltCallback could be implemented in the user file
   */
}
24012da8:	bf00      	nop
24012daa:	370c      	adds	r7, #12
24012dac:	46bd      	mov	sp, r7
24012dae:	f85d 7b04 	ldr.w	r7, [sp], #4
24012db2:	4770      	bx	lr

24012db4 <HAL_OSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_FifoThresholdCallback(OSPI_HandleTypeDef *hospi)
{
24012db4:	b480      	push	{r7}
24012db6:	b083      	sub	sp, #12
24012db8:	af00      	add	r7, sp, #0
24012dba:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
24012dbc:	bf00      	nop
24012dbe:	370c      	adds	r7, #12
24012dc0:	46bd      	mov	sp, r7
24012dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
24012dc6:	4770      	bx	lr

24012dc8 <HAL_OSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_CmdCpltCallback(OSPI_HandleTypeDef *hospi)
{
24012dc8:	b480      	push	{r7}
24012dca:	b083      	sub	sp, #12
24012dcc:	af00      	add	r7, sp, #0
24012dce:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_CmdCpltCallback could be implemented in the user file
   */
}
24012dd0:	bf00      	nop
24012dd2:	370c      	adds	r7, #12
24012dd4:	46bd      	mov	sp, r7
24012dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
24012dda:	4770      	bx	lr

24012ddc <HAL_OSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_RxCpltCallback(OSPI_HandleTypeDef *hospi)
{
24012ddc:	b480      	push	{r7}
24012dde:	b083      	sub	sp, #12
24012de0:	af00      	add	r7, sp, #0
24012de2:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_RxCpltCallback could be implemented in the user file
   */
}
24012de4:	bf00      	nop
24012de6:	370c      	adds	r7, #12
24012de8:	46bd      	mov	sp, r7
24012dea:	f85d 7b04 	ldr.w	r7, [sp], #4
24012dee:	4770      	bx	lr

24012df0 <HAL_OSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TxCpltCallback(OSPI_HandleTypeDef *hospi)
{
24012df0:	b480      	push	{r7}
24012df2:	b083      	sub	sp, #12
24012df4:	af00      	add	r7, sp, #0
24012df6:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_TxCpltCallback could be implemented in the user file
   */
}
24012df8:	bf00      	nop
24012dfa:	370c      	adds	r7, #12
24012dfc:	46bd      	mov	sp, r7
24012dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
24012e02:	4770      	bx	lr

24012e04 <HAL_OSPI_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_RxHalfCpltCallback(OSPI_HandleTypeDef *hospi)
{
24012e04:	b480      	push	{r7}
24012e06:	b083      	sub	sp, #12
24012e08:	af00      	add	r7, sp, #0
24012e0a:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_RxHalfCpltCallback could be implemented in the user file
   */
}
24012e0c:	bf00      	nop
24012e0e:	370c      	adds	r7, #12
24012e10:	46bd      	mov	sp, r7
24012e12:	f85d 7b04 	ldr.w	r7, [sp], #4
24012e16:	4770      	bx	lr

24012e18 <HAL_OSPI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TxHalfCpltCallback(OSPI_HandleTypeDef *hospi)
{
24012e18:	b480      	push	{r7}
24012e1a:	b083      	sub	sp, #12
24012e1c:	af00      	add	r7, sp, #0
24012e1e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_TxHalfCpltCallback could be implemented in the user file
   */
}
24012e20:	bf00      	nop
24012e22:	370c      	adds	r7, #12
24012e24:	46bd      	mov	sp, r7
24012e26:	f85d 7b04 	ldr.w	r7, [sp], #4
24012e2a:	4770      	bx	lr

24012e2c <HAL_OSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_StatusMatchCallback(OSPI_HandleTypeDef *hospi)
{
24012e2c:	b480      	push	{r7}
24012e2e:	b083      	sub	sp, #12
24012e30:	af00      	add	r7, sp, #0
24012e32:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_StatusMatchCallback could be implemented in the user file
   */
}
24012e34:	bf00      	nop
24012e36:	370c      	adds	r7, #12
24012e38:	46bd      	mov	sp, r7
24012e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
24012e3e:	4770      	bx	lr

24012e40 <HAL_OSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TimeOutCallback(OSPI_HandleTypeDef *hospi)
{
24012e40:	b480      	push	{r7}
24012e42:	b083      	sub	sp, #12
24012e44:	af00      	add	r7, sp, #0
24012e46:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_TimeOutCallback could be implemented in the user file
   */
}
24012e48:	bf00      	nop
24012e4a:	370c      	adds	r7, #12
24012e4c:	46bd      	mov	sp, r7
24012e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
24012e52:	4770      	bx	lr

24012e54 <HAL_OSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
24012e54:	b580      	push	{r7, lr}
24012e56:	b088      	sub	sp, #32
24012e58:	af02      	add	r7, sp, #8
24012e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
24012e5c:	2300      	movs	r3, #0
24012e5e:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
24012e60:	f7ef ff46 	bl	24002cf0 <HAL_GetTick>
24012e64:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
24012e66:	687b      	ldr	r3, [r7, #4]
24012e68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
24012e6a:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
24012e6c:	68fb      	ldr	r3, [r7, #12]
24012e6e:	f003 0308 	and.w	r3, r3, #8
24012e72:	2b00      	cmp	r3, #0
24012e74:	d104      	bne.n	24012e80 <HAL_OSPI_Abort+0x2c>
24012e76:	68fb      	ldr	r3, [r7, #12]
24012e78:	f003 0304 	and.w	r3, r3, #4
24012e7c:	2b00      	cmp	r3, #0
24012e7e:	d052      	beq.n	24012f26 <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
24012e80:	687b      	ldr	r3, [r7, #4]
24012e82:	681b      	ldr	r3, [r3, #0]
24012e84:	681b      	ldr	r3, [r3, #0]
24012e86:	f003 0304 	and.w	r3, r3, #4
24012e8a:	2b00      	cmp	r3, #0
24012e8c:	d014      	beq.n	24012eb8 <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
24012e8e:	687b      	ldr	r3, [r7, #4]
24012e90:	681b      	ldr	r3, [r3, #0]
24012e92:	681a      	ldr	r2, [r3, #0]
24012e94:	687b      	ldr	r3, [r7, #4]
24012e96:	681b      	ldr	r3, [r3, #0]
24012e98:	f022 0204 	bic.w	r2, r2, #4
24012e9c:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_MDMA_Abort(hospi->hmdma);
24012e9e:	687b      	ldr	r3, [r7, #4]
24012ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
24012ea2:	4618      	mov	r0, r3
24012ea4:	f7fe faf6 	bl	24011494 <HAL_MDMA_Abort>
24012ea8:	4603      	mov	r3, r0
24012eaa:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
24012eac:	7dfb      	ldrb	r3, [r7, #23]
24012eae:	2b00      	cmp	r3, #0
24012eb0:	d002      	beq.n	24012eb8 <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
24012eb2:	687b      	ldr	r3, [r7, #4]
24012eb4:	2204      	movs	r2, #4
24012eb6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
24012eb8:	687b      	ldr	r3, [r7, #4]
24012eba:	681b      	ldr	r3, [r3, #0]
24012ebc:	6a1b      	ldr	r3, [r3, #32]
24012ebe:	f003 0320 	and.w	r3, r3, #32
24012ec2:	2b00      	cmp	r3, #0
24012ec4:	d02b      	beq.n	24012f1e <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
24012ec6:	687b      	ldr	r3, [r7, #4]
24012ec8:	681b      	ldr	r3, [r3, #0]
24012eca:	681a      	ldr	r2, [r3, #0]
24012ecc:	687b      	ldr	r3, [r7, #4]
24012ece:	681b      	ldr	r3, [r3, #0]
24012ed0:	f042 0202 	orr.w	r2, r2, #2
24012ed4:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
24012ed6:	687b      	ldr	r3, [r7, #4]
24012ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
24012eda:	9300      	str	r3, [sp, #0]
24012edc:	693b      	ldr	r3, [r7, #16]
24012ede:	2201      	movs	r2, #1
24012ee0:	2102      	movs	r1, #2
24012ee2:	6878      	ldr	r0, [r7, #4]
24012ee4:	f000 feb3 	bl	24013c4e <OSPI_WaitFlagStateUntilTimeout>
24012ee8:	4603      	mov	r3, r0
24012eea:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
24012eec:	7dfb      	ldrb	r3, [r7, #23]
24012eee:	2b00      	cmp	r3, #0
24012ef0:	d11f      	bne.n	24012f32 <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
24012ef2:	687b      	ldr	r3, [r7, #4]
24012ef4:	681b      	ldr	r3, [r3, #0]
24012ef6:	2202      	movs	r2, #2
24012ef8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
24012efa:	687b      	ldr	r3, [r7, #4]
24012efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
24012efe:	9300      	str	r3, [sp, #0]
24012f00:	693b      	ldr	r3, [r7, #16]
24012f02:	2200      	movs	r2, #0
24012f04:	2120      	movs	r1, #32
24012f06:	6878      	ldr	r0, [r7, #4]
24012f08:	f000 fea1 	bl	24013c4e <OSPI_WaitFlagStateUntilTimeout>
24012f0c:	4603      	mov	r3, r0
24012f0e:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
24012f10:	7dfb      	ldrb	r3, [r7, #23]
24012f12:	2b00      	cmp	r3, #0
24012f14:	d10d      	bne.n	24012f32 <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
24012f16:	687b      	ldr	r3, [r7, #4]
24012f18:	2202      	movs	r2, #2
24012f1a:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
24012f1c:	e009      	b.n	24012f32 <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
24012f1e:	687b      	ldr	r3, [r7, #4]
24012f20:	2202      	movs	r2, #2
24012f22:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
24012f24:	e005      	b.n	24012f32 <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
24012f26:	2301      	movs	r3, #1
24012f28:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
24012f2a:	687b      	ldr	r3, [r7, #4]
24012f2c:	2210      	movs	r2, #16
24012f2e:	655a      	str	r2, [r3, #84]	@ 0x54
24012f30:	e000      	b.n	24012f34 <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
24012f32:	bf00      	nop
  }

  /* Return function status */
  return status;
24012f34:	7dfb      	ldrb	r3, [r7, #23]
}
24012f36:	4618      	mov	r0, r3
24012f38:	3718      	adds	r7, #24
24012f3a:	46bd      	mov	sp, r7
24012f3c:	bd80      	pop	{r7, pc}
	...

24012f40 <HAL_OSPI_Abort_IT>:
  * @brief  Abort the current transmission (non-blocking function)
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort_IT(OSPI_HandleTypeDef *hospi)
{
24012f40:	b580      	push	{r7, lr}
24012f42:	b084      	sub	sp, #16
24012f44:	af00      	add	r7, sp, #0
24012f46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
24012f48:	2300      	movs	r3, #0
24012f4a:	73fb      	strb	r3, [r7, #15]
  uint32_t state;

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
24012f4c:	687b      	ldr	r3, [r7, #4]
24012f4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
24012f50:	60bb      	str	r3, [r7, #8]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
24012f52:	68bb      	ldr	r3, [r7, #8]
24012f54:	f003 0308 	and.w	r3, r3, #8
24012f58:	2b00      	cmp	r3, #0
24012f5a:	d104      	bne.n	24012f66 <HAL_OSPI_Abort_IT+0x26>
24012f5c:	68bb      	ldr	r3, [r7, #8]
24012f5e:	f003 0304 	and.w	r3, r3, #4
24012f62:	2b00      	cmp	r3, #0
24012f64:	d050      	beq.n	24013008 <HAL_OSPI_Abort_IT+0xc8>
  {
    /* Disable all interrupts */
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
24012f66:	687b      	ldr	r3, [r7, #4]
24012f68:	681b      	ldr	r3, [r3, #0]
24012f6a:	681a      	ldr	r2, [r3, #0]
24012f6c:	687b      	ldr	r3, [r7, #4]
24012f6e:	681b      	ldr	r3, [r3, #0]
24012f70:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
24012f74:	601a      	str	r2, [r3, #0]

    /* Update state */
    hospi->State = HAL_OSPI_STATE_ABORT;
24012f76:	687b      	ldr	r3, [r7, #4]
24012f78:	f44f 7280 	mov.w	r2, #256	@ 0x100
24012f7c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
24012f7e:	687b      	ldr	r3, [r7, #4]
24012f80:	681b      	ldr	r3, [r3, #0]
24012f82:	681b      	ldr	r3, [r3, #0]
24012f84:	f003 0304 	and.w	r3, r3, #4
24012f88:	2b00      	cmp	r3, #0
24012f8a:	d01a      	beq.n	24012fc2 <HAL_OSPI_Abort_IT+0x82>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
24012f8c:	687b      	ldr	r3, [r7, #4]
24012f8e:	681b      	ldr	r3, [r3, #0]
24012f90:	681a      	ldr	r2, [r3, #0]
24012f92:	687b      	ldr	r3, [r7, #4]
24012f94:	681b      	ldr	r3, [r3, #0]
24012f96:	f022 0204 	bic.w	r2, r2, #4
24012f9a:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      hospi->hmdma->XferAbortCallback = OSPI_DMAAbortCplt;
24012f9c:	687b      	ldr	r3, [r7, #4]
24012f9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
24012fa0:	4a1f      	ldr	r2, [pc, #124]	@ (24013020 <HAL_OSPI_Abort_IT+0xe0>)
24012fa2:	659a      	str	r2, [r3, #88]	@ 0x58
      if (HAL_MDMA_Abort_IT(hospi->hmdma) != HAL_OK)
24012fa4:	687b      	ldr	r3, [r7, #4]
24012fa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
24012fa8:	4618      	mov	r0, r3
24012faa:	f7fe face 	bl	2401154a <HAL_MDMA_Abort_IT>
24012fae:	4603      	mov	r3, r0
24012fb0:	2b00      	cmp	r3, #0
24012fb2:	d02f      	beq.n	24013014 <HAL_OSPI_Abort_IT+0xd4>
      {
        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
24012fb4:	687b      	ldr	r3, [r7, #4]
24012fb6:	2202      	movs	r2, #2
24012fb8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->AbortCpltCallback(hospi);
#else
        HAL_OSPI_AbortCpltCallback(hospi);
24012fba:	6878      	ldr	r0, [r7, #4]
24012fbc:	f7ff fef0 	bl	24012da0 <HAL_OSPI_AbortCpltCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
24012fc0:	e028      	b.n	24013014 <HAL_OSPI_Abort_IT+0xd4>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
      }
    }
    else
    {
      if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
24012fc2:	687b      	ldr	r3, [r7, #4]
24012fc4:	681b      	ldr	r3, [r3, #0]
24012fc6:	6a1b      	ldr	r3, [r3, #32]
24012fc8:	f003 0320 	and.w	r3, r3, #32
24012fcc:	2b00      	cmp	r3, #0
24012fce:	d014      	beq.n	24012ffa <HAL_OSPI_Abort_IT+0xba>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
24012fd0:	687b      	ldr	r3, [r7, #4]
24012fd2:	681b      	ldr	r3, [r3, #0]
24012fd4:	2202      	movs	r2, #2
24012fd6:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Enable the transfer complete interrupts */
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
24012fd8:	687b      	ldr	r3, [r7, #4]
24012fda:	681b      	ldr	r3, [r3, #0]
24012fdc:	681a      	ldr	r2, [r3, #0]
24012fde:	687b      	ldr	r3, [r7, #4]
24012fe0:	681b      	ldr	r3, [r3, #0]
24012fe2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
24012fe6:	601a      	str	r2, [r3, #0]

        /* Perform an abort of the OctoSPI */
        SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
24012fe8:	687b      	ldr	r3, [r7, #4]
24012fea:	681b      	ldr	r3, [r3, #0]
24012fec:	681a      	ldr	r2, [r3, #0]
24012fee:	687b      	ldr	r3, [r7, #4]
24012ff0:	681b      	ldr	r3, [r3, #0]
24012ff2:	f042 0202 	orr.w	r2, r2, #2
24012ff6:	601a      	str	r2, [r3, #0]
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
24012ff8:	e00c      	b.n	24013014 <HAL_OSPI_Abort_IT+0xd4>
      }
      else
      {
        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
24012ffa:	687b      	ldr	r3, [r7, #4]
24012ffc:	2202      	movs	r2, #2
24012ffe:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->AbortCpltCallback(hospi);
#else
        HAL_OSPI_AbortCpltCallback(hospi);
24013000:	6878      	ldr	r0, [r7, #4]
24013002:	f7ff fecd 	bl	24012da0 <HAL_OSPI_AbortCpltCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
24013006:	e005      	b.n	24013014 <HAL_OSPI_Abort_IT+0xd4>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
24013008:	2301      	movs	r3, #1
2401300a:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
2401300c:	687b      	ldr	r3, [r7, #4]
2401300e:	2210      	movs	r2, #16
24013010:	655a      	str	r2, [r3, #84]	@ 0x54
24013012:	e000      	b.n	24013016 <HAL_OSPI_Abort_IT+0xd6>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
24013014:	bf00      	nop
  }

  /* Return function status */
  return status;
24013016:	7bfb      	ldrb	r3, [r7, #15]
}
24013018:	4618      	mov	r0, r3
2401301a:	3710      	adds	r7, #16
2401301c:	46bd      	mov	sp, r7
2401301e:	bd80      	pop	{r7, pc}
24013020:	24013bd7 	.word	0x24013bd7

24013024 <HAL_OSPI_SetFifoThreshold>:
  * @param  hospi     : OSPI handle.
  * @param  Threshold : Threshold of the Fifo.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_SetFifoThreshold(OSPI_HandleTypeDef *hospi, uint32_t Threshold)
{
24013024:	b480      	push	{r7}
24013026:	b085      	sub	sp, #20
24013028:	af00      	add	r7, sp, #0
2401302a:	6078      	str	r0, [r7, #4]
2401302c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
2401302e:	2300      	movs	r3, #0
24013030:	73fb      	strb	r3, [r7, #15]

  /* Check the state */
  if ((hospi->State & OSPI_BUSY_STATE_MASK) == 0U)
24013032:	687b      	ldr	r3, [r7, #4]
24013034:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
24013036:	f003 0308 	and.w	r3, r3, #8
2401303a:	2b00      	cmp	r3, #0
2401303c:	d110      	bne.n	24013060 <HAL_OSPI_SetFifoThreshold+0x3c>
  {
    /* Synchronize initialization structure with the new fifo threshold value */
    hospi->Init.FifoThreshold = Threshold;
2401303e:	687b      	ldr	r3, [r7, #4]
24013040:	683a      	ldr	r2, [r7, #0]
24013042:	605a      	str	r2, [r3, #4]

    /* Configure new fifo threshold */
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
24013044:	687b      	ldr	r3, [r7, #4]
24013046:	681b      	ldr	r3, [r3, #0]
24013048:	681b      	ldr	r3, [r3, #0]
2401304a:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
2401304e:	687b      	ldr	r3, [r7, #4]
24013050:	685b      	ldr	r3, [r3, #4]
24013052:	3b01      	subs	r3, #1
24013054:	021a      	lsls	r2, r3, #8
24013056:	687b      	ldr	r3, [r7, #4]
24013058:	681b      	ldr	r3, [r3, #0]
2401305a:	430a      	orrs	r2, r1
2401305c:	601a      	str	r2, [r3, #0]
2401305e:	e004      	b.n	2401306a <HAL_OSPI_SetFifoThreshold+0x46>

  }
  else
  {
    status = HAL_ERROR;
24013060:	2301      	movs	r3, #1
24013062:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
24013064:	687b      	ldr	r3, [r7, #4]
24013066:	2210      	movs	r2, #16
24013068:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Return function status */
  return status;
2401306a:	7bfb      	ldrb	r3, [r7, #15]
}
2401306c:	4618      	mov	r0, r3
2401306e:	3714      	adds	r7, #20
24013070:	46bd      	mov	sp, r7
24013072:	f85d 7b04 	ldr.w	r7, [sp], #4
24013076:	4770      	bx	lr

24013078 <HAL_OSPI_GetFifoThreshold>:
/** @brief  Get OSPI Fifo threshold.
  * @param  hospi : OSPI handle.
  * @retval Fifo threshold
  */
uint32_t HAL_OSPI_GetFifoThreshold(const OSPI_HandleTypeDef *hospi)
{
24013078:	b480      	push	{r7}
2401307a:	b083      	sub	sp, #12
2401307c:	af00      	add	r7, sp, #0
2401307e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(hospi->Instance->CR, OCTOSPI_CR_FTHRES) >> OCTOSPI_CR_FTHRES_Pos) + 1U);
24013080:	687b      	ldr	r3, [r7, #4]
24013082:	681b      	ldr	r3, [r3, #0]
24013084:	681b      	ldr	r3, [r3, #0]
24013086:	0a1b      	lsrs	r3, r3, #8
24013088:	f003 031f 	and.w	r3, r3, #31
2401308c:	3301      	adds	r3, #1
}
2401308e:	4618      	mov	r0, r3
24013090:	370c      	adds	r7, #12
24013092:	46bd      	mov	sp, r7
24013094:	f85d 7b04 	ldr.w	r7, [sp], #4
24013098:	4770      	bx	lr

2401309a <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
2401309a:	b480      	push	{r7}
2401309c:	b083      	sub	sp, #12
2401309e:	af00      	add	r7, sp, #0
240130a0:	6078      	str	r0, [r7, #4]
240130a2:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
240130a4:	687b      	ldr	r3, [r7, #4]
240130a6:	683a      	ldr	r2, [r7, #0]
240130a8:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
240130aa:	2300      	movs	r3, #0
}
240130ac:	4618      	mov	r0, r3
240130ae:	370c      	adds	r7, #12
240130b0:	46bd      	mov	sp, r7
240130b2:	f85d 7b04 	ldr.w	r7, [sp], #4
240130b6:	4770      	bx	lr

240130b8 <HAL_OSPI_GetError>:
  * @brief  Return the OSPI error code.
  * @param  hospi : OSPI handle
  * @retval OSPI Error Code
  */
uint32_t HAL_OSPI_GetError(const OSPI_HandleTypeDef *hospi)
{
240130b8:	b480      	push	{r7}
240130ba:	b083      	sub	sp, #12
240130bc:	af00      	add	r7, sp, #0
240130be:	6078      	str	r0, [r7, #4]
  return hospi->ErrorCode;
240130c0:	687b      	ldr	r3, [r7, #4]
240130c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
240130c4:	4618      	mov	r0, r3
240130c6:	370c      	adds	r7, #12
240130c8:	46bd      	mov	sp, r7
240130ca:	f85d 7b04 	ldr.w	r7, [sp], #4
240130ce:	4770      	bx	lr

240130d0 <HAL_OSPI_GetState>:
  * @brief  Return the OSPI handle state.
  * @param  hospi : OSPI handle
  * @retval HAL state
  */
uint32_t HAL_OSPI_GetState(const OSPI_HandleTypeDef *hospi)
{
240130d0:	b480      	push	{r7}
240130d2:	b083      	sub	sp, #12
240130d4:	af00      	add	r7, sp, #0
240130d6:	6078      	str	r0, [r7, #4]
  /* Return OSPI handle state */
  return hospi->State;
240130d8:	687b      	ldr	r3, [r7, #4]
240130da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
}
240130dc:	4618      	mov	r0, r3
240130de:	370c      	adds	r7, #12
240130e0:	46bd      	mov	sp, r7
240130e2:	f85d 7b04 	ldr.w	r7, [sp], #4
240130e6:	4770      	bx	lr

240130e8 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
240130e8:	b580      	push	{r7, lr}
240130ea:	b094      	sub	sp, #80	@ 0x50
240130ec:	af00      	add	r7, sp, #0
240130ee:	60f8      	str	r0, [r7, #12]
240130f0:	60b9      	str	r1, [r7, #8]
240130f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
240130f4:	2300      	movs	r3, #0
240130f6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
240130fa:	2300      	movs	r3, #0
240130fc:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
24013100:	68fb      	ldr	r3, [r7, #12]
24013102:	681b      	ldr	r3, [r3, #0]
24013104:	4a9d      	ldr	r2, [pc, #628]	@ (2401337c <HAL_OSPIM_Config+0x294>)
24013106:	4293      	cmp	r3, r2
24013108:	d105      	bne.n	24013116 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
2401310a:	2300      	movs	r3, #0
2401310c:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
2401310e:	2301      	movs	r3, #1
24013110:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
24013114:	e004      	b.n	24013120 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
24013116:	2301      	movs	r3, #1
24013118:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
2401311a:	2300      	movs	r3, #0
2401311c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
24013120:	2300      	movs	r3, #0
24013122:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
24013126:	e01d      	b.n	24013164 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
24013128:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
2401312c:	3301      	adds	r3, #1
2401312e:	b2d8      	uxtb	r0, r3
24013130:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
24013134:	f107 0114 	add.w	r1, r7, #20
24013138:	4613      	mov	r3, r2
2401313a:	005b      	lsls	r3, r3, #1
2401313c:	4413      	add	r3, r2
2401313e:	00db      	lsls	r3, r3, #3
24013140:	440b      	add	r3, r1
24013142:	4619      	mov	r1, r3
24013144:	f000 ff34 	bl	24013fb0 <OSPIM_GetConfig>
24013148:	4603      	mov	r3, r0
2401314a:	2b00      	cmp	r3, #0
2401314c:	d005      	beq.n	2401315a <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
2401314e:	2301      	movs	r3, #1
24013150:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
24013154:	68fb      	ldr	r3, [r7, #12]
24013156:	2208      	movs	r2, #8
24013158:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
2401315a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
2401315e:	3301      	adds	r3, #1
24013160:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
24013164:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
24013168:	2b01      	cmp	r3, #1
2401316a:	d9dd      	bls.n	24013128 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
2401316c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
24013170:	2b00      	cmp	r3, #0
24013172:	f040 8495 	bne.w	24013aa0 <HAL_OSPIM_Config+0x9b8>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
24013176:	4b81      	ldr	r3, [pc, #516]	@ (2401337c <HAL_OSPIM_Config+0x294>)
24013178:	681b      	ldr	r3, [r3, #0]
2401317a:	f003 0301 	and.w	r3, r3, #1
2401317e:	2b00      	cmp	r3, #0
24013180:	d00b      	beq.n	2401319a <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
24013182:	4b7e      	ldr	r3, [pc, #504]	@ (2401337c <HAL_OSPIM_Config+0x294>)
24013184:	681b      	ldr	r3, [r3, #0]
24013186:	4a7d      	ldr	r2, [pc, #500]	@ (2401337c <HAL_OSPIM_Config+0x294>)
24013188:	f023 0301 	bic.w	r3, r3, #1
2401318c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
2401318e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
24013192:	f043 0301 	orr.w	r3, r3, #1
24013196:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
2401319a:	4b79      	ldr	r3, [pc, #484]	@ (24013380 <HAL_OSPIM_Config+0x298>)
2401319c:	681b      	ldr	r3, [r3, #0]
2401319e:	f003 0301 	and.w	r3, r3, #1
240131a2:	2b00      	cmp	r3, #0
240131a4:	d00b      	beq.n	240131be <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
240131a6:	4b76      	ldr	r3, [pc, #472]	@ (24013380 <HAL_OSPIM_Config+0x298>)
240131a8:	681b      	ldr	r3, [r3, #0]
240131aa:	4a75      	ldr	r2, [pc, #468]	@ (24013380 <HAL_OSPIM_Config+0x298>)
240131ac:	f023 0301 	bic.w	r3, r3, #1
240131b0:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
240131b2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
240131b6:	f043 0302 	orr.w	r3, r3, #2
240131ba:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
240131be:	4971      	ldr	r1, [pc, #452]	@ (24013384 <HAL_OSPIM_Config+0x29c>)
240131c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
240131c2:	4613      	mov	r3, r2
240131c4:	005b      	lsls	r3, r3, #1
240131c6:	4413      	add	r3, r2
240131c8:	00db      	lsls	r3, r3, #3
240131ca:	3350      	adds	r3, #80	@ 0x50
240131cc:	443b      	add	r3, r7
240131ce:	3b34      	subs	r3, #52	@ 0x34
240131d0:	681b      	ldr	r3, [r3, #0]
240131d2:	3b01      	subs	r3, #1
240131d4:	009b      	lsls	r3, r3, #2
240131d6:	440b      	add	r3, r1
240131d8:	6859      	ldr	r1, [r3, #4]
240131da:	486a      	ldr	r0, [pc, #424]	@ (24013384 <HAL_OSPIM_Config+0x29c>)
240131dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
240131de:	4613      	mov	r3, r2
240131e0:	005b      	lsls	r3, r3, #1
240131e2:	4413      	add	r3, r2
240131e4:	00db      	lsls	r3, r3, #3
240131e6:	3350      	adds	r3, #80	@ 0x50
240131e8:	443b      	add	r3, r7
240131ea:	3b34      	subs	r3, #52	@ 0x34
240131ec:	681b      	ldr	r3, [r3, #0]
240131ee:	3b01      	subs	r3, #1
240131f0:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
240131f4:	009b      	lsls	r3, r3, #2
240131f6:	4403      	add	r3, r0
240131f8:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
240131fa:	4b62      	ldr	r3, [pc, #392]	@ (24013384 <HAL_OSPIM_Config+0x29c>)
240131fc:	681b      	ldr	r3, [r3, #0]
240131fe:	f003 0301 	and.w	r3, r3, #1
24013202:	2b00      	cmp	r3, #0
24013204:	f000 80c0 	beq.w	24013388 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
24013208:	4b5e      	ldr	r3, [pc, #376]	@ (24013384 <HAL_OSPIM_Config+0x29c>)
2401320a:	681b      	ldr	r3, [r3, #0]
2401320c:	4a5d      	ldr	r2, [pc, #372]	@ (24013384 <HAL_OSPIM_Config+0x29c>)
2401320e:	f023 0301 	bic.w	r3, r3, #1
24013212:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
24013214:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
24013218:	2b01      	cmp	r3, #1
2401321a:	f040 8162 	bne.w	240134e2 <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
2401321e:	4959      	ldr	r1, [pc, #356]	@ (24013384 <HAL_OSPIM_Config+0x29c>)
24013220:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
24013224:	4613      	mov	r3, r2
24013226:	005b      	lsls	r3, r3, #1
24013228:	4413      	add	r3, r2
2401322a:	00db      	lsls	r3, r3, #3
2401322c:	3350      	adds	r3, #80	@ 0x50
2401322e:	443b      	add	r3, r7
24013230:	3b3c      	subs	r3, #60	@ 0x3c
24013232:	681b      	ldr	r3, [r3, #0]
24013234:	3b01      	subs	r3, #1
24013236:	009b      	lsls	r3, r3, #2
24013238:	440b      	add	r3, r1
2401323a:	6859      	ldr	r1, [r3, #4]
2401323c:	4851      	ldr	r0, [pc, #324]	@ (24013384 <HAL_OSPIM_Config+0x29c>)
2401323e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
24013242:	4613      	mov	r3, r2
24013244:	005b      	lsls	r3, r3, #1
24013246:	4413      	add	r3, r2
24013248:	00db      	lsls	r3, r3, #3
2401324a:	3350      	adds	r3, #80	@ 0x50
2401324c:	443b      	add	r3, r7
2401324e:	3b3c      	subs	r3, #60	@ 0x3c
24013250:	681b      	ldr	r3, [r3, #0]
24013252:	3b01      	subs	r3, #1
24013254:	f041 0202 	orr.w	r2, r1, #2
24013258:	009b      	lsls	r3, r3, #2
2401325a:	4403      	add	r3, r0
2401325c:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
2401325e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
24013262:	4613      	mov	r3, r2
24013264:	005b      	lsls	r3, r3, #1
24013266:	4413      	add	r3, r2
24013268:	00db      	lsls	r3, r3, #3
2401326a:	3350      	adds	r3, #80	@ 0x50
2401326c:	443b      	add	r3, r7
2401326e:	3b38      	subs	r3, #56	@ 0x38
24013270:	681b      	ldr	r3, [r3, #0]
24013272:	2b00      	cmp	r3, #0
24013274:	d01f      	beq.n	240132b6 <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
24013276:	4943      	ldr	r1, [pc, #268]	@ (24013384 <HAL_OSPIM_Config+0x29c>)
24013278:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
2401327c:	4613      	mov	r3, r2
2401327e:	005b      	lsls	r3, r3, #1
24013280:	4413      	add	r3, r2
24013282:	00db      	lsls	r3, r3, #3
24013284:	3350      	adds	r3, #80	@ 0x50
24013286:	443b      	add	r3, r7
24013288:	3b38      	subs	r3, #56	@ 0x38
2401328a:	681b      	ldr	r3, [r3, #0]
2401328c:	3b01      	subs	r3, #1
2401328e:	009b      	lsls	r3, r3, #2
24013290:	440b      	add	r3, r1
24013292:	6859      	ldr	r1, [r3, #4]
24013294:	483b      	ldr	r0, [pc, #236]	@ (24013384 <HAL_OSPIM_Config+0x29c>)
24013296:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
2401329a:	4613      	mov	r3, r2
2401329c:	005b      	lsls	r3, r3, #1
2401329e:	4413      	add	r3, r2
240132a0:	00db      	lsls	r3, r3, #3
240132a2:	3350      	adds	r3, #80	@ 0x50
240132a4:	443b      	add	r3, r7
240132a6:	3b38      	subs	r3, #56	@ 0x38
240132a8:	681b      	ldr	r3, [r3, #0]
240132aa:	3b01      	subs	r3, #1
240132ac:	f041 0220 	orr.w	r2, r1, #32
240132b0:	009b      	lsls	r3, r3, #2
240132b2:	4403      	add	r3, r0
240132b4:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
240132b6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
240132ba:	4613      	mov	r3, r2
240132bc:	005b      	lsls	r3, r3, #1
240132be:	4413      	add	r3, r2
240132c0:	00db      	lsls	r3, r3, #3
240132c2:	3350      	adds	r3, #80	@ 0x50
240132c4:	443b      	add	r3, r7
240132c6:	3b30      	subs	r3, #48	@ 0x30
240132c8:	681b      	ldr	r3, [r3, #0]
240132ca:	2b00      	cmp	r3, #0
240132cc:	d023      	beq.n	24013316 <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
240132ce:	492d      	ldr	r1, [pc, #180]	@ (24013384 <HAL_OSPIM_Config+0x29c>)
240132d0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
240132d4:	4613      	mov	r3, r2
240132d6:	005b      	lsls	r3, r3, #1
240132d8:	4413      	add	r3, r2
240132da:	00db      	lsls	r3, r3, #3
240132dc:	3350      	adds	r3, #80	@ 0x50
240132de:	443b      	add	r3, r7
240132e0:	3b30      	subs	r3, #48	@ 0x30
240132e2:	681b      	ldr	r3, [r3, #0]
240132e4:	3b01      	subs	r3, #1
240132e6:	f003 0301 	and.w	r3, r3, #1
240132ea:	009b      	lsls	r3, r3, #2
240132ec:	440b      	add	r3, r1
240132ee:	6859      	ldr	r1, [r3, #4]
240132f0:	4824      	ldr	r0, [pc, #144]	@ (24013384 <HAL_OSPIM_Config+0x29c>)
240132f2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
240132f6:	4613      	mov	r3, r2
240132f8:	005b      	lsls	r3, r3, #1
240132fa:	4413      	add	r3, r2
240132fc:	00db      	lsls	r3, r3, #3
240132fe:	3350      	adds	r3, #80	@ 0x50
24013300:	443b      	add	r3, r7
24013302:	3b30      	subs	r3, #48	@ 0x30
24013304:	681b      	ldr	r3, [r3, #0]
24013306:	3b01      	subs	r3, #1
24013308:	f003 0301 	and.w	r3, r3, #1
2401330c:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
24013310:	009b      	lsls	r3, r3, #2
24013312:	4403      	add	r3, r0
24013314:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
24013316:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
2401331a:	4613      	mov	r3, r2
2401331c:	005b      	lsls	r3, r3, #1
2401331e:	4413      	add	r3, r2
24013320:	00db      	lsls	r3, r3, #3
24013322:	3350      	adds	r3, #80	@ 0x50
24013324:	443b      	add	r3, r7
24013326:	3b2c      	subs	r3, #44	@ 0x2c
24013328:	681b      	ldr	r3, [r3, #0]
2401332a:	2b00      	cmp	r3, #0
2401332c:	f000 80d9 	beq.w	240134e2 <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
24013330:	4914      	ldr	r1, [pc, #80]	@ (24013384 <HAL_OSPIM_Config+0x29c>)
24013332:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
24013336:	4613      	mov	r3, r2
24013338:	005b      	lsls	r3, r3, #1
2401333a:	4413      	add	r3, r2
2401333c:	00db      	lsls	r3, r3, #3
2401333e:	3350      	adds	r3, #80	@ 0x50
24013340:	443b      	add	r3, r7
24013342:	3b2c      	subs	r3, #44	@ 0x2c
24013344:	681b      	ldr	r3, [r3, #0]
24013346:	3b01      	subs	r3, #1
24013348:	f003 0301 	and.w	r3, r3, #1
2401334c:	009b      	lsls	r3, r3, #2
2401334e:	440b      	add	r3, r1
24013350:	6859      	ldr	r1, [r3, #4]
24013352:	480c      	ldr	r0, [pc, #48]	@ (24013384 <HAL_OSPIM_Config+0x29c>)
24013354:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
24013358:	4613      	mov	r3, r2
2401335a:	005b      	lsls	r3, r3, #1
2401335c:	4413      	add	r3, r2
2401335e:	00db      	lsls	r3, r3, #3
24013360:	3350      	adds	r3, #80	@ 0x50
24013362:	443b      	add	r3, r7
24013364:	3b2c      	subs	r3, #44	@ 0x2c
24013366:	681b      	ldr	r3, [r3, #0]
24013368:	3b01      	subs	r3, #1
2401336a:	f003 0301 	and.w	r3, r3, #1
2401336e:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
24013372:	009b      	lsls	r3, r3, #2
24013374:	4403      	add	r3, r0
24013376:	605a      	str	r2, [r3, #4]
24013378:	e0b3      	b.n	240134e2 <HAL_OSPIM_Config+0x3fa>
2401337a:	bf00      	nop
2401337c:	52005000 	.word	0x52005000
24013380:	5200a000 	.word	0x5200a000
24013384:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
24013388:	6cba      	ldr	r2, [r7, #72]	@ 0x48
2401338a:	4613      	mov	r3, r2
2401338c:	005b      	lsls	r3, r3, #1
2401338e:	4413      	add	r3, r2
24013390:	00db      	lsls	r3, r3, #3
24013392:	3350      	adds	r3, #80	@ 0x50
24013394:	443b      	add	r3, r7
24013396:	3b3c      	subs	r3, #60	@ 0x3c
24013398:	681b      	ldr	r3, [r3, #0]
2401339a:	2b00      	cmp	r3, #0
2401339c:	f000 80a1 	beq.w	240134e2 <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
240133a0:	4993      	ldr	r1, [pc, #588]	@ (240135f0 <HAL_OSPIM_Config+0x508>)
240133a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
240133a4:	4613      	mov	r3, r2
240133a6:	005b      	lsls	r3, r3, #1
240133a8:	4413      	add	r3, r2
240133aa:	00db      	lsls	r3, r3, #3
240133ac:	3350      	adds	r3, #80	@ 0x50
240133ae:	443b      	add	r3, r7
240133b0:	3b3c      	subs	r3, #60	@ 0x3c
240133b2:	681b      	ldr	r3, [r3, #0]
240133b4:	3b01      	subs	r3, #1
240133b6:	009b      	lsls	r3, r3, #2
240133b8:	440b      	add	r3, r1
240133ba:	6859      	ldr	r1, [r3, #4]
240133bc:	488c      	ldr	r0, [pc, #560]	@ (240135f0 <HAL_OSPIM_Config+0x508>)
240133be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
240133c0:	4613      	mov	r3, r2
240133c2:	005b      	lsls	r3, r3, #1
240133c4:	4413      	add	r3, r2
240133c6:	00db      	lsls	r3, r3, #3
240133c8:	3350      	adds	r3, #80	@ 0x50
240133ca:	443b      	add	r3, r7
240133cc:	3b3c      	subs	r3, #60	@ 0x3c
240133ce:	681b      	ldr	r3, [r3, #0]
240133d0:	3b01      	subs	r3, #1
240133d2:	f021 0201 	bic.w	r2, r1, #1
240133d6:	009b      	lsls	r3, r3, #2
240133d8:	4403      	add	r3, r0
240133da:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
240133dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
240133de:	4613      	mov	r3, r2
240133e0:	005b      	lsls	r3, r3, #1
240133e2:	4413      	add	r3, r2
240133e4:	00db      	lsls	r3, r3, #3
240133e6:	3350      	adds	r3, #80	@ 0x50
240133e8:	443b      	add	r3, r7
240133ea:	3b38      	subs	r3, #56	@ 0x38
240133ec:	681b      	ldr	r3, [r3, #0]
240133ee:	2b00      	cmp	r3, #0
240133f0:	d01d      	beq.n	2401342e <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
240133f2:	497f      	ldr	r1, [pc, #508]	@ (240135f0 <HAL_OSPIM_Config+0x508>)
240133f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
240133f6:	4613      	mov	r3, r2
240133f8:	005b      	lsls	r3, r3, #1
240133fa:	4413      	add	r3, r2
240133fc:	00db      	lsls	r3, r3, #3
240133fe:	3350      	adds	r3, #80	@ 0x50
24013400:	443b      	add	r3, r7
24013402:	3b38      	subs	r3, #56	@ 0x38
24013404:	681b      	ldr	r3, [r3, #0]
24013406:	3b01      	subs	r3, #1
24013408:	009b      	lsls	r3, r3, #2
2401340a:	440b      	add	r3, r1
2401340c:	6859      	ldr	r1, [r3, #4]
2401340e:	4878      	ldr	r0, [pc, #480]	@ (240135f0 <HAL_OSPIM_Config+0x508>)
24013410:	6cba      	ldr	r2, [r7, #72]	@ 0x48
24013412:	4613      	mov	r3, r2
24013414:	005b      	lsls	r3, r3, #1
24013416:	4413      	add	r3, r2
24013418:	00db      	lsls	r3, r3, #3
2401341a:	3350      	adds	r3, #80	@ 0x50
2401341c:	443b      	add	r3, r7
2401341e:	3b38      	subs	r3, #56	@ 0x38
24013420:	681b      	ldr	r3, [r3, #0]
24013422:	3b01      	subs	r3, #1
24013424:	f021 0210 	bic.w	r2, r1, #16
24013428:	009b      	lsls	r3, r3, #2
2401342a:	4403      	add	r3, r0
2401342c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
2401342e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
24013430:	4613      	mov	r3, r2
24013432:	005b      	lsls	r3, r3, #1
24013434:	4413      	add	r3, r2
24013436:	00db      	lsls	r3, r3, #3
24013438:	3350      	adds	r3, #80	@ 0x50
2401343a:	443b      	add	r3, r7
2401343c:	3b30      	subs	r3, #48	@ 0x30
2401343e:	681b      	ldr	r3, [r3, #0]
24013440:	2b00      	cmp	r3, #0
24013442:	d021      	beq.n	24013488 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
24013444:	496a      	ldr	r1, [pc, #424]	@ (240135f0 <HAL_OSPIM_Config+0x508>)
24013446:	6cba      	ldr	r2, [r7, #72]	@ 0x48
24013448:	4613      	mov	r3, r2
2401344a:	005b      	lsls	r3, r3, #1
2401344c:	4413      	add	r3, r2
2401344e:	00db      	lsls	r3, r3, #3
24013450:	3350      	adds	r3, #80	@ 0x50
24013452:	443b      	add	r3, r7
24013454:	3b30      	subs	r3, #48	@ 0x30
24013456:	681b      	ldr	r3, [r3, #0]
24013458:	3b01      	subs	r3, #1
2401345a:	f003 0301 	and.w	r3, r3, #1
2401345e:	009b      	lsls	r3, r3, #2
24013460:	440b      	add	r3, r1
24013462:	6859      	ldr	r1, [r3, #4]
24013464:	4862      	ldr	r0, [pc, #392]	@ (240135f0 <HAL_OSPIM_Config+0x508>)
24013466:	6cba      	ldr	r2, [r7, #72]	@ 0x48
24013468:	4613      	mov	r3, r2
2401346a:	005b      	lsls	r3, r3, #1
2401346c:	4413      	add	r3, r2
2401346e:	00db      	lsls	r3, r3, #3
24013470:	3350      	adds	r3, #80	@ 0x50
24013472:	443b      	add	r3, r7
24013474:	3b30      	subs	r3, #48	@ 0x30
24013476:	681b      	ldr	r3, [r3, #0]
24013478:	3b01      	subs	r3, #1
2401347a:	f003 0301 	and.w	r3, r3, #1
2401347e:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
24013482:	009b      	lsls	r3, r3, #2
24013484:	4403      	add	r3, r0
24013486:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
24013488:	6cba      	ldr	r2, [r7, #72]	@ 0x48
2401348a:	4613      	mov	r3, r2
2401348c:	005b      	lsls	r3, r3, #1
2401348e:	4413      	add	r3, r2
24013490:	00db      	lsls	r3, r3, #3
24013492:	3350      	adds	r3, #80	@ 0x50
24013494:	443b      	add	r3, r7
24013496:	3b2c      	subs	r3, #44	@ 0x2c
24013498:	681b      	ldr	r3, [r3, #0]
2401349a:	2b00      	cmp	r3, #0
2401349c:	d021      	beq.n	240134e2 <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
2401349e:	4954      	ldr	r1, [pc, #336]	@ (240135f0 <HAL_OSPIM_Config+0x508>)
240134a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
240134a2:	4613      	mov	r3, r2
240134a4:	005b      	lsls	r3, r3, #1
240134a6:	4413      	add	r3, r2
240134a8:	00db      	lsls	r3, r3, #3
240134aa:	3350      	adds	r3, #80	@ 0x50
240134ac:	443b      	add	r3, r7
240134ae:	3b2c      	subs	r3, #44	@ 0x2c
240134b0:	681b      	ldr	r3, [r3, #0]
240134b2:	3b01      	subs	r3, #1
240134b4:	f003 0301 	and.w	r3, r3, #1
240134b8:	009b      	lsls	r3, r3, #2
240134ba:	440b      	add	r3, r1
240134bc:	6859      	ldr	r1, [r3, #4]
240134be:	484c      	ldr	r0, [pc, #304]	@ (240135f0 <HAL_OSPIM_Config+0x508>)
240134c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
240134c2:	4613      	mov	r3, r2
240134c4:	005b      	lsls	r3, r3, #1
240134c6:	4413      	add	r3, r2
240134c8:	00db      	lsls	r3, r3, #3
240134ca:	3350      	adds	r3, #80	@ 0x50
240134cc:	443b      	add	r3, r7
240134ce:	3b2c      	subs	r3, #44	@ 0x2c
240134d0:	681b      	ldr	r3, [r3, #0]
240134d2:	3b01      	subs	r3, #1
240134d4:	f003 0301 	and.w	r3, r3, #1
240134d8:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
240134dc:	009b      	lsls	r3, r3, #2
240134de:	4403      	add	r3, r0
240134e0:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
240134e2:	68bb      	ldr	r3, [r7, #8]
240134e4:	6819      	ldr	r1, [r3, #0]
240134e6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
240134ea:	4613      	mov	r3, r2
240134ec:	005b      	lsls	r3, r3, #1
240134ee:	4413      	add	r3, r2
240134f0:	00db      	lsls	r3, r3, #3
240134f2:	3350      	adds	r3, #80	@ 0x50
240134f4:	443b      	add	r3, r7
240134f6:	3b3c      	subs	r3, #60	@ 0x3c
240134f8:	681b      	ldr	r3, [r3, #0]
240134fa:	4299      	cmp	r1, r3
240134fc:	d038      	beq.n	24013570 <HAL_OSPIM_Config+0x488>
240134fe:	68bb      	ldr	r3, [r7, #8]
24013500:	6859      	ldr	r1, [r3, #4]
24013502:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
24013506:	4613      	mov	r3, r2
24013508:	005b      	lsls	r3, r3, #1
2401350a:	4413      	add	r3, r2
2401350c:	00db      	lsls	r3, r3, #3
2401350e:	3350      	adds	r3, #80	@ 0x50
24013510:	443b      	add	r3, r7
24013512:	3b38      	subs	r3, #56	@ 0x38
24013514:	681b      	ldr	r3, [r3, #0]
24013516:	4299      	cmp	r1, r3
24013518:	d02a      	beq.n	24013570 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
2401351a:	68bb      	ldr	r3, [r7, #8]
2401351c:	6899      	ldr	r1, [r3, #8]
2401351e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
24013522:	4613      	mov	r3, r2
24013524:	005b      	lsls	r3, r3, #1
24013526:	4413      	add	r3, r2
24013528:	00db      	lsls	r3, r3, #3
2401352a:	3350      	adds	r3, #80	@ 0x50
2401352c:	443b      	add	r3, r7
2401352e:	3b34      	subs	r3, #52	@ 0x34
24013530:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
24013532:	4299      	cmp	r1, r3
24013534:	d01c      	beq.n	24013570 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
24013536:	68bb      	ldr	r3, [r7, #8]
24013538:	68d9      	ldr	r1, [r3, #12]
2401353a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
2401353e:	4613      	mov	r3, r2
24013540:	005b      	lsls	r3, r3, #1
24013542:	4413      	add	r3, r2
24013544:	00db      	lsls	r3, r3, #3
24013546:	3350      	adds	r3, #80	@ 0x50
24013548:	443b      	add	r3, r7
2401354a:	3b30      	subs	r3, #48	@ 0x30
2401354c:	681b      	ldr	r3, [r3, #0]
2401354e:	4299      	cmp	r1, r3
24013550:	d00e      	beq.n	24013570 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
24013552:	68bb      	ldr	r3, [r7, #8]
24013554:	6919      	ldr	r1, [r3, #16]
24013556:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
2401355a:	4613      	mov	r3, r2
2401355c:	005b      	lsls	r3, r3, #1
2401355e:	4413      	add	r3, r2
24013560:	00db      	lsls	r3, r3, #3
24013562:	3350      	adds	r3, #80	@ 0x50
24013564:	443b      	add	r3, r7
24013566:	3b2c      	subs	r3, #44	@ 0x2c
24013568:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
2401356a:	4299      	cmp	r1, r3
2401356c:	f040 810e 	bne.w	2401378c <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
24013570:	68bb      	ldr	r3, [r7, #8]
24013572:	6819      	ldr	r1, [r3, #0]
24013574:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
24013578:	4613      	mov	r3, r2
2401357a:	005b      	lsls	r3, r3, #1
2401357c:	4413      	add	r3, r2
2401357e:	00db      	lsls	r3, r3, #3
24013580:	3350      	adds	r3, #80	@ 0x50
24013582:	443b      	add	r3, r7
24013584:	3b3c      	subs	r3, #60	@ 0x3c
24013586:	681b      	ldr	r3, [r3, #0]
24013588:	4299      	cmp	r1, r3
2401358a:	d133      	bne.n	240135f4 <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
2401358c:	68bb      	ldr	r3, [r7, #8]
2401358e:	6859      	ldr	r1, [r3, #4]
24013590:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
24013594:	4613      	mov	r3, r2
24013596:	005b      	lsls	r3, r3, #1
24013598:	4413      	add	r3, r2
2401359a:	00db      	lsls	r3, r3, #3
2401359c:	3350      	adds	r3, #80	@ 0x50
2401359e:	443b      	add	r3, r7
240135a0:	3b38      	subs	r3, #56	@ 0x38
240135a2:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
240135a4:	4299      	cmp	r1, r3
240135a6:	d125      	bne.n	240135f4 <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
240135a8:	68bb      	ldr	r3, [r7, #8]
240135aa:	68d9      	ldr	r1, [r3, #12]
240135ac:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
240135b0:	4613      	mov	r3, r2
240135b2:	005b      	lsls	r3, r3, #1
240135b4:	4413      	add	r3, r2
240135b6:	00db      	lsls	r3, r3, #3
240135b8:	3350      	adds	r3, #80	@ 0x50
240135ba:	443b      	add	r3, r7
240135bc:	3b30      	subs	r3, #48	@ 0x30
240135be:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
240135c0:	4299      	cmp	r1, r3
240135c2:	d117      	bne.n	240135f4 <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
240135c4:	68bb      	ldr	r3, [r7, #8]
240135c6:	6919      	ldr	r1, [r3, #16]
240135c8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
240135cc:	4613      	mov	r3, r2
240135ce:	005b      	lsls	r3, r3, #1
240135d0:	4413      	add	r3, r2
240135d2:	00db      	lsls	r3, r3, #3
240135d4:	3350      	adds	r3, #80	@ 0x50
240135d6:	443b      	add	r3, r7
240135d8:	3b2c      	subs	r3, #44	@ 0x2c
240135da:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
240135dc:	4299      	cmp	r1, r3
240135de:	d109      	bne.n	240135f4 <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
240135e0:	4b03      	ldr	r3, [pc, #12]	@ (240135f0 <HAL_OSPIM_Config+0x508>)
240135e2:	681b      	ldr	r3, [r3, #0]
240135e4:	4a02      	ldr	r2, [pc, #8]	@ (240135f0 <HAL_OSPIM_Config+0x508>)
240135e6:	f043 0301 	orr.w	r3, r3, #1
240135ea:	6013      	str	r3, [r2, #0]
240135ec:	e0ce      	b.n	2401378c <HAL_OSPIM_Config+0x6a4>
240135ee:	bf00      	nop
240135f0:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
240135f4:	49bb      	ldr	r1, [pc, #748]	@ (240138e4 <HAL_OSPIM_Config+0x7fc>)
240135f6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
240135fa:	4613      	mov	r3, r2
240135fc:	005b      	lsls	r3, r3, #1
240135fe:	4413      	add	r3, r2
24013600:	00db      	lsls	r3, r3, #3
24013602:	3350      	adds	r3, #80	@ 0x50
24013604:	443b      	add	r3, r7
24013606:	3b3c      	subs	r3, #60	@ 0x3c
24013608:	681b      	ldr	r3, [r3, #0]
2401360a:	3b01      	subs	r3, #1
2401360c:	009b      	lsls	r3, r3, #2
2401360e:	440b      	add	r3, r1
24013610:	6859      	ldr	r1, [r3, #4]
24013612:	48b4      	ldr	r0, [pc, #720]	@ (240138e4 <HAL_OSPIM_Config+0x7fc>)
24013614:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
24013618:	4613      	mov	r3, r2
2401361a:	005b      	lsls	r3, r3, #1
2401361c:	4413      	add	r3, r2
2401361e:	00db      	lsls	r3, r3, #3
24013620:	3350      	adds	r3, #80	@ 0x50
24013622:	443b      	add	r3, r7
24013624:	3b3c      	subs	r3, #60	@ 0x3c
24013626:	681b      	ldr	r3, [r3, #0]
24013628:	3b01      	subs	r3, #1
2401362a:	f021 0201 	bic.w	r2, r1, #1
2401362e:	009b      	lsls	r3, r3, #2
24013630:	4403      	add	r3, r0
24013632:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
24013634:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
24013638:	4613      	mov	r3, r2
2401363a:	005b      	lsls	r3, r3, #1
2401363c:	4413      	add	r3, r2
2401363e:	00db      	lsls	r3, r3, #3
24013640:	3350      	adds	r3, #80	@ 0x50
24013642:	443b      	add	r3, r7
24013644:	3b38      	subs	r3, #56	@ 0x38
24013646:	681b      	ldr	r3, [r3, #0]
24013648:	2b00      	cmp	r3, #0
2401364a:	d01f      	beq.n	2401368c <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
2401364c:	49a5      	ldr	r1, [pc, #660]	@ (240138e4 <HAL_OSPIM_Config+0x7fc>)
2401364e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
24013652:	4613      	mov	r3, r2
24013654:	005b      	lsls	r3, r3, #1
24013656:	4413      	add	r3, r2
24013658:	00db      	lsls	r3, r3, #3
2401365a:	3350      	adds	r3, #80	@ 0x50
2401365c:	443b      	add	r3, r7
2401365e:	3b38      	subs	r3, #56	@ 0x38
24013660:	681b      	ldr	r3, [r3, #0]
24013662:	3b01      	subs	r3, #1
24013664:	009b      	lsls	r3, r3, #2
24013666:	440b      	add	r3, r1
24013668:	6859      	ldr	r1, [r3, #4]
2401366a:	489e      	ldr	r0, [pc, #632]	@ (240138e4 <HAL_OSPIM_Config+0x7fc>)
2401366c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
24013670:	4613      	mov	r3, r2
24013672:	005b      	lsls	r3, r3, #1
24013674:	4413      	add	r3, r2
24013676:	00db      	lsls	r3, r3, #3
24013678:	3350      	adds	r3, #80	@ 0x50
2401367a:	443b      	add	r3, r7
2401367c:	3b38      	subs	r3, #56	@ 0x38
2401367e:	681b      	ldr	r3, [r3, #0]
24013680:	3b01      	subs	r3, #1
24013682:	f021 0210 	bic.w	r2, r1, #16
24013686:	009b      	lsls	r3, r3, #2
24013688:	4403      	add	r3, r0
2401368a:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
2401368c:	4995      	ldr	r1, [pc, #596]	@ (240138e4 <HAL_OSPIM_Config+0x7fc>)
2401368e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
24013692:	4613      	mov	r3, r2
24013694:	005b      	lsls	r3, r3, #1
24013696:	4413      	add	r3, r2
24013698:	00db      	lsls	r3, r3, #3
2401369a:	3350      	adds	r3, #80	@ 0x50
2401369c:	443b      	add	r3, r7
2401369e:	3b34      	subs	r3, #52	@ 0x34
240136a0:	681b      	ldr	r3, [r3, #0]
240136a2:	3b01      	subs	r3, #1
240136a4:	009b      	lsls	r3, r3, #2
240136a6:	440b      	add	r3, r1
240136a8:	6859      	ldr	r1, [r3, #4]
240136aa:	488e      	ldr	r0, [pc, #568]	@ (240138e4 <HAL_OSPIM_Config+0x7fc>)
240136ac:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
240136b0:	4613      	mov	r3, r2
240136b2:	005b      	lsls	r3, r3, #1
240136b4:	4413      	add	r3, r2
240136b6:	00db      	lsls	r3, r3, #3
240136b8:	3350      	adds	r3, #80	@ 0x50
240136ba:	443b      	add	r3, r7
240136bc:	3b34      	subs	r3, #52	@ 0x34
240136be:	681b      	ldr	r3, [r3, #0]
240136c0:	3b01      	subs	r3, #1
240136c2:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
240136c6:	009b      	lsls	r3, r3, #2
240136c8:	4403      	add	r3, r0
240136ca:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
240136cc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
240136d0:	4613      	mov	r3, r2
240136d2:	005b      	lsls	r3, r3, #1
240136d4:	4413      	add	r3, r2
240136d6:	00db      	lsls	r3, r3, #3
240136d8:	3350      	adds	r3, #80	@ 0x50
240136da:	443b      	add	r3, r7
240136dc:	3b30      	subs	r3, #48	@ 0x30
240136de:	681b      	ldr	r3, [r3, #0]
240136e0:	2b00      	cmp	r3, #0
240136e2:	d023      	beq.n	2401372c <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
240136e4:	497f      	ldr	r1, [pc, #508]	@ (240138e4 <HAL_OSPIM_Config+0x7fc>)
240136e6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
240136ea:	4613      	mov	r3, r2
240136ec:	005b      	lsls	r3, r3, #1
240136ee:	4413      	add	r3, r2
240136f0:	00db      	lsls	r3, r3, #3
240136f2:	3350      	adds	r3, #80	@ 0x50
240136f4:	443b      	add	r3, r7
240136f6:	3b30      	subs	r3, #48	@ 0x30
240136f8:	681b      	ldr	r3, [r3, #0]
240136fa:	3b01      	subs	r3, #1
240136fc:	f003 0301 	and.w	r3, r3, #1
24013700:	009b      	lsls	r3, r3, #2
24013702:	440b      	add	r3, r1
24013704:	6859      	ldr	r1, [r3, #4]
24013706:	4877      	ldr	r0, [pc, #476]	@ (240138e4 <HAL_OSPIM_Config+0x7fc>)
24013708:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
2401370c:	4613      	mov	r3, r2
2401370e:	005b      	lsls	r3, r3, #1
24013710:	4413      	add	r3, r2
24013712:	00db      	lsls	r3, r3, #3
24013714:	3350      	adds	r3, #80	@ 0x50
24013716:	443b      	add	r3, r7
24013718:	3b30      	subs	r3, #48	@ 0x30
2401371a:	681b      	ldr	r3, [r3, #0]
2401371c:	3b01      	subs	r3, #1
2401371e:	f003 0301 	and.w	r3, r3, #1
24013722:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
24013726:	009b      	lsls	r3, r3, #2
24013728:	4403      	add	r3, r0
2401372a:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
2401372c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
24013730:	4613      	mov	r3, r2
24013732:	005b      	lsls	r3, r3, #1
24013734:	4413      	add	r3, r2
24013736:	00db      	lsls	r3, r3, #3
24013738:	3350      	adds	r3, #80	@ 0x50
2401373a:	443b      	add	r3, r7
2401373c:	3b2c      	subs	r3, #44	@ 0x2c
2401373e:	681b      	ldr	r3, [r3, #0]
24013740:	2b00      	cmp	r3, #0
24013742:	d023      	beq.n	2401378c <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
24013744:	4967      	ldr	r1, [pc, #412]	@ (240138e4 <HAL_OSPIM_Config+0x7fc>)
24013746:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
2401374a:	4613      	mov	r3, r2
2401374c:	005b      	lsls	r3, r3, #1
2401374e:	4413      	add	r3, r2
24013750:	00db      	lsls	r3, r3, #3
24013752:	3350      	adds	r3, #80	@ 0x50
24013754:	443b      	add	r3, r7
24013756:	3b2c      	subs	r3, #44	@ 0x2c
24013758:	681b      	ldr	r3, [r3, #0]
2401375a:	3b01      	subs	r3, #1
2401375c:	f003 0301 	and.w	r3, r3, #1
24013760:	009b      	lsls	r3, r3, #2
24013762:	440b      	add	r3, r1
24013764:	6859      	ldr	r1, [r3, #4]
24013766:	485f      	ldr	r0, [pc, #380]	@ (240138e4 <HAL_OSPIM_Config+0x7fc>)
24013768:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
2401376c:	4613      	mov	r3, r2
2401376e:	005b      	lsls	r3, r3, #1
24013770:	4413      	add	r3, r2
24013772:	00db      	lsls	r3, r3, #3
24013774:	3350      	adds	r3, #80	@ 0x50
24013776:	443b      	add	r3, r7
24013778:	3b2c      	subs	r3, #44	@ 0x2c
2401377a:	681b      	ldr	r3, [r3, #0]
2401377c:	3b01      	subs	r3, #1
2401377e:	f003 0301 	and.w	r3, r3, #1
24013782:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
24013786:	009b      	lsls	r3, r3, #2
24013788:	4403      	add	r3, r0
2401378a:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
2401378c:	4a55      	ldr	r2, [pc, #340]	@ (240138e4 <HAL_OSPIM_Config+0x7fc>)
2401378e:	68bb      	ldr	r3, [r7, #8]
24013790:	689b      	ldr	r3, [r3, #8]
24013792:	3b01      	subs	r3, #1
24013794:	009b      	lsls	r3, r3, #2
24013796:	4413      	add	r3, r2
24013798:	685b      	ldr	r3, [r3, #4]
2401379a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
2401379e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
240137a0:	025b      	lsls	r3, r3, #9
240137a2:	431a      	orrs	r2, r3
240137a4:	494f      	ldr	r1, [pc, #316]	@ (240138e4 <HAL_OSPIM_Config+0x7fc>)
240137a6:	68bb      	ldr	r3, [r7, #8]
240137a8:	689b      	ldr	r3, [r3, #8]
240137aa:	3b01      	subs	r3, #1
240137ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
240137b0:	009b      	lsls	r3, r3, #2
240137b2:	440b      	add	r3, r1
240137b4:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
240137b6:	68bb      	ldr	r3, [r7, #8]
240137b8:	695b      	ldr	r3, [r3, #20]
240137ba:	1e5a      	subs	r2, r3, #1
240137bc:	4b49      	ldr	r3, [pc, #292]	@ (240138e4 <HAL_OSPIM_Config+0x7fc>)
240137be:	681b      	ldr	r3, [r3, #0]
240137c0:	0c1b      	lsrs	r3, r3, #16
240137c2:	b2db      	uxtb	r3, r3
240137c4:	429a      	cmp	r2, r3
240137c6:	d90a      	bls.n	240137de <HAL_OSPIM_Config+0x6f6>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
240137c8:	4b46      	ldr	r3, [pc, #280]	@ (240138e4 <HAL_OSPIM_Config+0x7fc>)
240137ca:	681b      	ldr	r3, [r3, #0]
240137cc:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
240137d0:	68bb      	ldr	r3, [r7, #8]
240137d2:	695b      	ldr	r3, [r3, #20]
240137d4:	3b01      	subs	r3, #1
240137d6:	041b      	lsls	r3, r3, #16
240137d8:	4942      	ldr	r1, [pc, #264]	@ (240138e4 <HAL_OSPIM_Config+0x7fc>)
240137da:	4313      	orrs	r3, r2
240137dc:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
240137de:	4b41      	ldr	r3, [pc, #260]	@ (240138e4 <HAL_OSPIM_Config+0x7fc>)
240137e0:	681b      	ldr	r3, [r3, #0]
240137e2:	f003 0301 	and.w	r3, r3, #1
240137e6:	2b00      	cmp	r3, #0
240137e8:	f000 809a 	beq.w	24013920 <HAL_OSPIM_Config+0x838>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
240137ec:	4a3d      	ldr	r2, [pc, #244]	@ (240138e4 <HAL_OSPIM_Config+0x7fc>)
240137ee:	68bb      	ldr	r3, [r7, #8]
240137f0:	681b      	ldr	r3, [r3, #0]
240137f2:	3b01      	subs	r3, #1
240137f4:	009b      	lsls	r3, r3, #2
240137f6:	4413      	add	r3, r2
240137f8:	685b      	ldr	r3, [r3, #4]
240137fa:	f023 0203 	bic.w	r2, r3, #3
240137fe:	4939      	ldr	r1, [pc, #228]	@ (240138e4 <HAL_OSPIM_Config+0x7fc>)
24013800:	68bb      	ldr	r3, [r7, #8]
24013802:	681b      	ldr	r3, [r3, #0]
24013804:	3b01      	subs	r3, #1
24013806:	f042 0201 	orr.w	r2, r2, #1
2401380a:	009b      	lsls	r3, r3, #2
2401380c:	440b      	add	r3, r1
2401380e:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
24013810:	68bb      	ldr	r3, [r7, #8]
24013812:	685b      	ldr	r3, [r3, #4]
24013814:	2b00      	cmp	r3, #0
24013816:	d011      	beq.n	2401383c <HAL_OSPIM_Config+0x754>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
24013818:	4a32      	ldr	r2, [pc, #200]	@ (240138e4 <HAL_OSPIM_Config+0x7fc>)
2401381a:	68bb      	ldr	r3, [r7, #8]
2401381c:	685b      	ldr	r3, [r3, #4]
2401381e:	3b01      	subs	r3, #1
24013820:	009b      	lsls	r3, r3, #2
24013822:	4413      	add	r3, r2
24013824:	685b      	ldr	r3, [r3, #4]
24013826:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
2401382a:	492e      	ldr	r1, [pc, #184]	@ (240138e4 <HAL_OSPIM_Config+0x7fc>)
2401382c:	68bb      	ldr	r3, [r7, #8]
2401382e:	685b      	ldr	r3, [r3, #4]
24013830:	3b01      	subs	r3, #1
24013832:	f042 0210 	orr.w	r2, r2, #16
24013836:	009b      	lsls	r3, r3, #2
24013838:	440b      	add	r3, r1
2401383a:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
2401383c:	68bb      	ldr	r3, [r7, #8]
2401383e:	68db      	ldr	r3, [r3, #12]
24013840:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
24013844:	2b00      	cmp	r3, #0
24013846:	d016      	beq.n	24013876 <HAL_OSPIM_Config+0x78e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
24013848:	4a26      	ldr	r2, [pc, #152]	@ (240138e4 <HAL_OSPIM_Config+0x7fc>)
2401384a:	68bb      	ldr	r3, [r7, #8]
2401384c:	68db      	ldr	r3, [r3, #12]
2401384e:	3b01      	subs	r3, #1
24013850:	f003 0301 	and.w	r3, r3, #1
24013854:	009b      	lsls	r3, r3, #2
24013856:	4413      	add	r3, r2
24013858:	685b      	ldr	r3, [r3, #4]
2401385a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
2401385e:	4921      	ldr	r1, [pc, #132]	@ (240138e4 <HAL_OSPIM_Config+0x7fc>)
24013860:	68bb      	ldr	r3, [r7, #8]
24013862:	68db      	ldr	r3, [r3, #12]
24013864:	3b01      	subs	r3, #1
24013866:	f003 0301 	and.w	r3, r3, #1
2401386a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
2401386e:	009b      	lsls	r3, r3, #2
24013870:	440b      	add	r3, r1
24013872:	605a      	str	r2, [r3, #4]
24013874:	e019      	b.n	240138aa <HAL_OSPIM_Config+0x7c2>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
24013876:	68bb      	ldr	r3, [r7, #8]
24013878:	68db      	ldr	r3, [r3, #12]
2401387a:	2b00      	cmp	r3, #0
2401387c:	d015      	beq.n	240138aa <HAL_OSPIM_Config+0x7c2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
2401387e:	4a19      	ldr	r2, [pc, #100]	@ (240138e4 <HAL_OSPIM_Config+0x7fc>)
24013880:	68bb      	ldr	r3, [r7, #8]
24013882:	68db      	ldr	r3, [r3, #12]
24013884:	3b01      	subs	r3, #1
24013886:	f003 0301 	and.w	r3, r3, #1
2401388a:	009b      	lsls	r3, r3, #2
2401388c:	4413      	add	r3, r2
2401388e:	685b      	ldr	r3, [r3, #4]
24013890:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
24013894:	4913      	ldr	r1, [pc, #76]	@ (240138e4 <HAL_OSPIM_Config+0x7fc>)
24013896:	68bb      	ldr	r3, [r7, #8]
24013898:	68db      	ldr	r3, [r3, #12]
2401389a:	3b01      	subs	r3, #1
2401389c:	f003 0301 	and.w	r3, r3, #1
240138a0:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
240138a4:	009b      	lsls	r3, r3, #2
240138a6:	440b      	add	r3, r1
240138a8:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
240138aa:	68bb      	ldr	r3, [r7, #8]
240138ac:	691b      	ldr	r3, [r3, #16]
240138ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
240138b2:	2b00      	cmp	r3, #0
240138b4:	d018      	beq.n	240138e8 <HAL_OSPIM_Config+0x800>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
240138b6:	4a0b      	ldr	r2, [pc, #44]	@ (240138e4 <HAL_OSPIM_Config+0x7fc>)
240138b8:	68bb      	ldr	r3, [r7, #8]
240138ba:	691b      	ldr	r3, [r3, #16]
240138bc:	3b01      	subs	r3, #1
240138be:	f003 0301 	and.w	r3, r3, #1
240138c2:	009b      	lsls	r3, r3, #2
240138c4:	4413      	add	r3, r2
240138c6:	685b      	ldr	r3, [r3, #4]
240138c8:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
240138cc:	4905      	ldr	r1, [pc, #20]	@ (240138e4 <HAL_OSPIM_Config+0x7fc>)
240138ce:	68bb      	ldr	r3, [r7, #8]
240138d0:	691b      	ldr	r3, [r3, #16]
240138d2:	3b01      	subs	r3, #1
240138d4:	f003 0301 	and.w	r3, r3, #1
240138d8:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
240138dc:	009b      	lsls	r3, r3, #2
240138de:	440b      	add	r3, r1
240138e0:	605a      	str	r2, [r3, #4]
240138e2:	e0c5      	b.n	24013a70 <HAL_OSPIM_Config+0x988>
240138e4:	5200b400 	.word	0x5200b400
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
240138e8:	68bb      	ldr	r3, [r7, #8]
240138ea:	691b      	ldr	r3, [r3, #16]
240138ec:	2b00      	cmp	r3, #0
240138ee:	f000 80bf 	beq.w	24013a70 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
240138f2:	4a6e      	ldr	r2, [pc, #440]	@ (24013aac <HAL_OSPIM_Config+0x9c4>)
240138f4:	68bb      	ldr	r3, [r7, #8]
240138f6:	691b      	ldr	r3, [r3, #16]
240138f8:	3b01      	subs	r3, #1
240138fa:	f003 0301 	and.w	r3, r3, #1
240138fe:	009b      	lsls	r3, r3, #2
24013900:	4413      	add	r3, r2
24013902:	685b      	ldr	r3, [r3, #4]
24013904:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
24013908:	4968      	ldr	r1, [pc, #416]	@ (24013aac <HAL_OSPIM_Config+0x9c4>)
2401390a:	68bb      	ldr	r3, [r7, #8]
2401390c:	691b      	ldr	r3, [r3, #16]
2401390e:	3b01      	subs	r3, #1
24013910:	f003 0301 	and.w	r3, r3, #1
24013914:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
24013918:	009b      	lsls	r3, r3, #2
2401391a:	440b      	add	r3, r1
2401391c:	605a      	str	r2, [r3, #4]
2401391e:	e0a7      	b.n	24013a70 <HAL_OSPIM_Config+0x988>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
24013920:	4a62      	ldr	r2, [pc, #392]	@ (24013aac <HAL_OSPIM_Config+0x9c4>)
24013922:	68bb      	ldr	r3, [r7, #8]
24013924:	681b      	ldr	r3, [r3, #0]
24013926:	3b01      	subs	r3, #1
24013928:	009b      	lsls	r3, r3, #2
2401392a:	4413      	add	r3, r2
2401392c:	685b      	ldr	r3, [r3, #4]
2401392e:	f023 0203 	bic.w	r2, r3, #3
24013932:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
24013934:	005b      	lsls	r3, r3, #1
24013936:	431a      	orrs	r2, r3
24013938:	495c      	ldr	r1, [pc, #368]	@ (24013aac <HAL_OSPIM_Config+0x9c4>)
2401393a:	68bb      	ldr	r3, [r7, #8]
2401393c:	681b      	ldr	r3, [r3, #0]
2401393e:	3b01      	subs	r3, #1
24013940:	f042 0201 	orr.w	r2, r2, #1
24013944:	009b      	lsls	r3, r3, #2
24013946:	440b      	add	r3, r1
24013948:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
2401394a:	68bb      	ldr	r3, [r7, #8]
2401394c:	685b      	ldr	r3, [r3, #4]
2401394e:	2b00      	cmp	r3, #0
24013950:	d014      	beq.n	2401397c <HAL_OSPIM_Config+0x894>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
24013952:	4a56      	ldr	r2, [pc, #344]	@ (24013aac <HAL_OSPIM_Config+0x9c4>)
24013954:	68bb      	ldr	r3, [r7, #8]
24013956:	685b      	ldr	r3, [r3, #4]
24013958:	3b01      	subs	r3, #1
2401395a:	009b      	lsls	r3, r3, #2
2401395c:	4413      	add	r3, r2
2401395e:	685b      	ldr	r3, [r3, #4]
24013960:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
24013964:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
24013966:	015b      	lsls	r3, r3, #5
24013968:	431a      	orrs	r2, r3
2401396a:	4950      	ldr	r1, [pc, #320]	@ (24013aac <HAL_OSPIM_Config+0x9c4>)
2401396c:	68bb      	ldr	r3, [r7, #8]
2401396e:	685b      	ldr	r3, [r3, #4]
24013970:	3b01      	subs	r3, #1
24013972:	f042 0210 	orr.w	r2, r2, #16
24013976:	009b      	lsls	r3, r3, #2
24013978:	440b      	add	r3, r1
2401397a:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
2401397c:	68bb      	ldr	r3, [r7, #8]
2401397e:	68db      	ldr	r3, [r3, #12]
24013980:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
24013984:	2b00      	cmp	r3, #0
24013986:	d019      	beq.n	240139bc <HAL_OSPIM_Config+0x8d4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
24013988:	4a48      	ldr	r2, [pc, #288]	@ (24013aac <HAL_OSPIM_Config+0x9c4>)
2401398a:	68bb      	ldr	r3, [r7, #8]
2401398c:	68db      	ldr	r3, [r3, #12]
2401398e:	3b01      	subs	r3, #1
24013990:	f003 0301 	and.w	r3, r3, #1
24013994:	009b      	lsls	r3, r3, #2
24013996:	4413      	add	r3, r2
24013998:	685b      	ldr	r3, [r3, #4]
2401399a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
2401399e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
240139a0:	049b      	lsls	r3, r3, #18
240139a2:	431a      	orrs	r2, r3
240139a4:	4941      	ldr	r1, [pc, #260]	@ (24013aac <HAL_OSPIM_Config+0x9c4>)
240139a6:	68bb      	ldr	r3, [r7, #8]
240139a8:	68db      	ldr	r3, [r3, #12]
240139aa:	3b01      	subs	r3, #1
240139ac:	f003 0301 	and.w	r3, r3, #1
240139b0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
240139b4:	009b      	lsls	r3, r3, #2
240139b6:	440b      	add	r3, r1
240139b8:	605a      	str	r2, [r3, #4]
240139ba:	e01c      	b.n	240139f6 <HAL_OSPIM_Config+0x90e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
240139bc:	68bb      	ldr	r3, [r7, #8]
240139be:	68db      	ldr	r3, [r3, #12]
240139c0:	2b00      	cmp	r3, #0
240139c2:	d018      	beq.n	240139f6 <HAL_OSPIM_Config+0x90e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
240139c4:	4a39      	ldr	r2, [pc, #228]	@ (24013aac <HAL_OSPIM_Config+0x9c4>)
240139c6:	68bb      	ldr	r3, [r7, #8]
240139c8:	68db      	ldr	r3, [r3, #12]
240139ca:	3b01      	subs	r3, #1
240139cc:	f003 0301 	and.w	r3, r3, #1
240139d0:	009b      	lsls	r3, r3, #2
240139d2:	4413      	add	r3, r2
240139d4:	685b      	ldr	r3, [r3, #4]
240139d6:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
240139da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
240139dc:	069b      	lsls	r3, r3, #26
240139de:	431a      	orrs	r2, r3
240139e0:	4932      	ldr	r1, [pc, #200]	@ (24013aac <HAL_OSPIM_Config+0x9c4>)
240139e2:	68bb      	ldr	r3, [r7, #8]
240139e4:	68db      	ldr	r3, [r3, #12]
240139e6:	3b01      	subs	r3, #1
240139e8:	f003 0301 	and.w	r3, r3, #1
240139ec:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
240139f0:	009b      	lsls	r3, r3, #2
240139f2:	440b      	add	r3, r1
240139f4:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
240139f6:	68bb      	ldr	r3, [r7, #8]
240139f8:	691b      	ldr	r3, [r3, #16]
240139fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
240139fe:	2b00      	cmp	r3, #0
24013a00:	d019      	beq.n	24013a36 <HAL_OSPIM_Config+0x94e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
24013a02:	4a2a      	ldr	r2, [pc, #168]	@ (24013aac <HAL_OSPIM_Config+0x9c4>)
24013a04:	68bb      	ldr	r3, [r7, #8]
24013a06:	691b      	ldr	r3, [r3, #16]
24013a08:	3b01      	subs	r3, #1
24013a0a:	f003 0301 	and.w	r3, r3, #1
24013a0e:	009b      	lsls	r3, r3, #2
24013a10:	4413      	add	r3, r2
24013a12:	685b      	ldr	r3, [r3, #4]
24013a14:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
24013a18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
24013a1a:	049b      	lsls	r3, r3, #18
24013a1c:	431a      	orrs	r2, r3
24013a1e:	4923      	ldr	r1, [pc, #140]	@ (24013aac <HAL_OSPIM_Config+0x9c4>)
24013a20:	68bb      	ldr	r3, [r7, #8]
24013a22:	691b      	ldr	r3, [r3, #16]
24013a24:	3b01      	subs	r3, #1
24013a26:	f003 0301 	and.w	r3, r3, #1
24013a2a:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
24013a2e:	009b      	lsls	r3, r3, #2
24013a30:	440b      	add	r3, r1
24013a32:	605a      	str	r2, [r3, #4]
24013a34:	e01c      	b.n	24013a70 <HAL_OSPIM_Config+0x988>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
24013a36:	68bb      	ldr	r3, [r7, #8]
24013a38:	691b      	ldr	r3, [r3, #16]
24013a3a:	2b00      	cmp	r3, #0
24013a3c:	d018      	beq.n	24013a70 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
24013a3e:	4a1b      	ldr	r2, [pc, #108]	@ (24013aac <HAL_OSPIM_Config+0x9c4>)
24013a40:	68bb      	ldr	r3, [r7, #8]
24013a42:	691b      	ldr	r3, [r3, #16]
24013a44:	3b01      	subs	r3, #1
24013a46:	f003 0301 	and.w	r3, r3, #1
24013a4a:	009b      	lsls	r3, r3, #2
24013a4c:	4413      	add	r3, r2
24013a4e:	685b      	ldr	r3, [r3, #4]
24013a50:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
24013a54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
24013a56:	069b      	lsls	r3, r3, #26
24013a58:	431a      	orrs	r2, r3
24013a5a:	4914      	ldr	r1, [pc, #80]	@ (24013aac <HAL_OSPIM_Config+0x9c4>)
24013a5c:	68bb      	ldr	r3, [r7, #8]
24013a5e:	691b      	ldr	r3, [r3, #16]
24013a60:	3b01      	subs	r3, #1
24013a62:	f003 0301 	and.w	r3, r3, #1
24013a66:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
24013a6a:	009b      	lsls	r3, r3, #2
24013a6c:	440b      	add	r3, r1
24013a6e:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
24013a70:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
24013a74:	f003 0301 	and.w	r3, r3, #1
24013a78:	2b00      	cmp	r3, #0
24013a7a:	d005      	beq.n	24013a88 <HAL_OSPIM_Config+0x9a0>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
24013a7c:	4b0c      	ldr	r3, [pc, #48]	@ (24013ab0 <HAL_OSPIM_Config+0x9c8>)
24013a7e:	681b      	ldr	r3, [r3, #0]
24013a80:	4a0b      	ldr	r2, [pc, #44]	@ (24013ab0 <HAL_OSPIM_Config+0x9c8>)
24013a82:	f043 0301 	orr.w	r3, r3, #1
24013a86:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
24013a88:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
24013a8c:	f003 0302 	and.w	r3, r3, #2
24013a90:	2b00      	cmp	r3, #0
24013a92:	d005      	beq.n	24013aa0 <HAL_OSPIM_Config+0x9b8>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
24013a94:	4b07      	ldr	r3, [pc, #28]	@ (24013ab4 <HAL_OSPIM_Config+0x9cc>)
24013a96:	681b      	ldr	r3, [r3, #0]
24013a98:	4a06      	ldr	r2, [pc, #24]	@ (24013ab4 <HAL_OSPIM_Config+0x9cc>)
24013a9a:	f043 0301 	orr.w	r3, r3, #1
24013a9e:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
24013aa0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
24013aa4:	4618      	mov	r0, r3
24013aa6:	3750      	adds	r7, #80	@ 0x50
24013aa8:	46bd      	mov	sp, r7
24013aaa:	bd80      	pop	{r7, pc}
24013aac:	5200b400 	.word	0x5200b400
24013ab0:	52005000 	.word	0x52005000
24013ab4:	5200a000 	.word	0x5200a000

24013ab8 <OSPI_DMACplt>:
  * @brief  DMA OSPI process complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void OSPI_DMACplt(MDMA_HandleTypeDef *hmdma)
{
24013ab8:	b480      	push	{r7}
24013aba:	b085      	sub	sp, #20
24013abc:	af00      	add	r7, sp, #0
24013abe:	6078      	str	r0, [r7, #4]
  OSPI_HandleTypeDef *hospi = (OSPI_HandleTypeDef *)(hmdma->Parent);
24013ac0:	687b      	ldr	r3, [r7, #4]
24013ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
24013ac4:	60fb      	str	r3, [r7, #12]
  hospi->XferCount = 0;
24013ac6:	68fb      	ldr	r3, [r7, #12]
24013ac8:	2200      	movs	r2, #0
24013aca:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Disable the DMA transfer on the OctoSPI side */
  CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
24013acc:	68fb      	ldr	r3, [r7, #12]
24013ace:	681b      	ldr	r3, [r3, #0]
24013ad0:	681a      	ldr	r2, [r3, #0]
24013ad2:	68fb      	ldr	r3, [r7, #12]
24013ad4:	681b      	ldr	r3, [r3, #0]
24013ad6:	f022 0204 	bic.w	r2, r2, #4
24013ada:	601a      	str	r2, [r3, #0]

  /* Disable the DMA channel */
  __HAL_MDMA_DISABLE(hmdma);
24013adc:	687b      	ldr	r3, [r7, #4]
24013ade:	681b      	ldr	r3, [r3, #0]
24013ae0:	68da      	ldr	r2, [r3, #12]
24013ae2:	687b      	ldr	r3, [r7, #4]
24013ae4:	681b      	ldr	r3, [r3, #0]
24013ae6:	f022 0201 	bic.w	r2, r2, #1
24013aea:	60da      	str	r2, [r3, #12]

  /* Enable the OSPI transfer complete Interrupt */
  __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
24013aec:	68fb      	ldr	r3, [r7, #12]
24013aee:	681b      	ldr	r3, [r3, #0]
24013af0:	681a      	ldr	r2, [r3, #0]
24013af2:	68fb      	ldr	r3, [r7, #12]
24013af4:	681b      	ldr	r3, [r3, #0]
24013af6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
24013afa:	601a      	str	r2, [r3, #0]
}
24013afc:	bf00      	nop
24013afe:	3714      	adds	r7, #20
24013b00:	46bd      	mov	sp, r7
24013b02:	f85d 7b04 	ldr.w	r7, [sp], #4
24013b06:	4770      	bx	lr

24013b08 <OSPI_DMAError>:
  * @brief  DMA OSPI communication error callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void OSPI_DMAError(MDMA_HandleTypeDef *hmdma)
{
24013b08:	b580      	push	{r7, lr}
24013b0a:	b084      	sub	sp, #16
24013b0c:	af00      	add	r7, sp, #0
24013b0e:	6078      	str	r0, [r7, #4]
  OSPI_HandleTypeDef *hospi = (OSPI_HandleTypeDef *)(hmdma->Parent);
24013b10:	687b      	ldr	r3, [r7, #4]
24013b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
24013b14:	60fb      	str	r3, [r7, #12]
  hospi->XferCount = 0;
24013b16:	68fb      	ldr	r3, [r7, #12]
24013b18:	2200      	movs	r2, #0
24013b1a:	649a      	str	r2, [r3, #72]	@ 0x48
  hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
24013b1c:	68fb      	ldr	r3, [r7, #12]
24013b1e:	2204      	movs	r2, #4
24013b20:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Disable the DMA transfer on the OctoSPI side */
  CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
24013b22:	68fb      	ldr	r3, [r7, #12]
24013b24:	681b      	ldr	r3, [r3, #0]
24013b26:	681a      	ldr	r2, [r3, #0]
24013b28:	68fb      	ldr	r3, [r7, #12]
24013b2a:	681b      	ldr	r3, [r3, #0]
24013b2c:	f022 0204 	bic.w	r2, r2, #4
24013b30:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
24013b32:	68fb      	ldr	r3, [r7, #12]
24013b34:	681b      	ldr	r3, [r3, #0]
24013b36:	681a      	ldr	r2, [r3, #0]
24013b38:	68fb      	ldr	r3, [r7, #12]
24013b3a:	681b      	ldr	r3, [r3, #0]
24013b3c:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
24013b40:	601a      	str	r2, [r3, #0]

  /* Update state */
  hospi->State = HAL_OSPI_STATE_ABORT;
24013b42:	68fb      	ldr	r3, [r7, #12]
24013b44:	f44f 7280 	mov.w	r2, #256	@ 0x100
24013b48:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Disable the DMA transfer on the DMA side */
  hospi->hmdma->XferAbortCallback = OSPI_DMAAbortOnError;
24013b4a:	68fb      	ldr	r3, [r7, #12]
24013b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
24013b4e:	4a0a      	ldr	r2, [pc, #40]	@ (24013b78 <OSPI_DMAError+0x70>)
24013b50:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_MDMA_Abort_IT(hospi->hmdma) != HAL_OK)
24013b52:	68fb      	ldr	r3, [r7, #12]
24013b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
24013b56:	4618      	mov	r0, r3
24013b58:	f7fd fcf7 	bl	2401154a <HAL_MDMA_Abort_IT>
24013b5c:	4603      	mov	r3, r0
24013b5e:	2b00      	cmp	r3, #0
24013b60:	d005      	beq.n	24013b6e <OSPI_DMAError+0x66>
  {
    /* Update state */
    hospi->State = HAL_OSPI_STATE_READY;
24013b62:	68fb      	ldr	r3, [r7, #12]
24013b64:	2202      	movs	r2, #2
24013b66:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->ErrorCallback(hospi);
#else
    HAL_OSPI_ErrorCallback(hospi);
24013b68:	68f8      	ldr	r0, [r7, #12]
24013b6a:	f7ff f90f 	bl	24012d8c <HAL_OSPI_ErrorCallback>
#endif /*(USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
  }
}
24013b6e:	bf00      	nop
24013b70:	3710      	adds	r7, #16
24013b72:	46bd      	mov	sp, r7
24013b74:	bd80      	pop	{r7, pc}
24013b76:	bf00      	nop
24013b78:	24013b7d 	.word	0x24013b7d

24013b7c <OSPI_DMAAbortOnError>:
  * @brief  DMA OSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void OSPI_DMAAbortOnError(MDMA_HandleTypeDef *hmdma)
{
24013b7c:	b580      	push	{r7, lr}
24013b7e:	b084      	sub	sp, #16
24013b80:	af00      	add	r7, sp, #0
24013b82:	6078      	str	r0, [r7, #4]
  OSPI_HandleTypeDef *hospi = (OSPI_HandleTypeDef *)(hmdma->Parent);
24013b84:	687b      	ldr	r3, [r7, #4]
24013b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
24013b88:	60fb      	str	r3, [r7, #12]

  /* DMA abort called by OctoSPI abort */
  if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
24013b8a:	68fb      	ldr	r3, [r7, #12]
24013b8c:	681b      	ldr	r3, [r3, #0]
24013b8e:	6a1b      	ldr	r3, [r3, #32]
24013b90:	f003 0320 	and.w	r3, r3, #32
24013b94:	2b00      	cmp	r3, #0
24013b96:	d014      	beq.n	24013bc2 <OSPI_DMAAbortOnError+0x46>
  {
    /* Clear transfer complete flag */
    __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
24013b98:	68fb      	ldr	r3, [r7, #12]
24013b9a:	681b      	ldr	r3, [r3, #0]
24013b9c:	2202      	movs	r2, #2
24013b9e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enable the transfer complete interrupts */
    __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
24013ba0:	68fb      	ldr	r3, [r7, #12]
24013ba2:	681b      	ldr	r3, [r3, #0]
24013ba4:	681a      	ldr	r2, [r3, #0]
24013ba6:	68fb      	ldr	r3, [r7, #12]
24013ba8:	681b      	ldr	r3, [r3, #0]
24013baa:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
24013bae:	601a      	str	r2, [r3, #0]

    /* Perform an abort of the OctoSPI */
    SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
24013bb0:	68fb      	ldr	r3, [r7, #12]
24013bb2:	681b      	ldr	r3, [r3, #0]
24013bb4:	681a      	ldr	r2, [r3, #0]
24013bb6:	68fb      	ldr	r3, [r7, #12]
24013bb8:	681b      	ldr	r3, [r3, #0]
24013bba:	f042 0202 	orr.w	r2, r2, #2
24013bbe:	601a      	str	r2, [r3, #0]
    hospi->ErrorCallback(hospi);
#else
    HAL_OSPI_ErrorCallback(hospi);
#endif /*(USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
  }
}
24013bc0:	e005      	b.n	24013bce <OSPI_DMAAbortOnError+0x52>
    hospi->State = HAL_OSPI_STATE_READY;
24013bc2:	68fb      	ldr	r3, [r7, #12]
24013bc4:	2202      	movs	r2, #2
24013bc6:	651a      	str	r2, [r3, #80]	@ 0x50
    HAL_OSPI_ErrorCallback(hospi);
24013bc8:	68f8      	ldr	r0, [r7, #12]
24013bca:	f7ff f8df 	bl	24012d8c <HAL_OSPI_ErrorCallback>
}
24013bce:	bf00      	nop
24013bd0:	3710      	adds	r7, #16
24013bd2:	46bd      	mov	sp, r7
24013bd4:	bd80      	pop	{r7, pc}

24013bd6 <OSPI_DMAAbortCplt>:
  * @brief  DMA OSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void OSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
24013bd6:	b580      	push	{r7, lr}
24013bd8:	b084      	sub	sp, #16
24013bda:	af00      	add	r7, sp, #0
24013bdc:	6078      	str	r0, [r7, #4]
  OSPI_HandleTypeDef *hospi = (OSPI_HandleTypeDef *)(hmdma->Parent);
24013bde:	687b      	ldr	r3, [r7, #4]
24013be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
24013be2:	60fb      	str	r3, [r7, #12]
  hospi->XferCount = 0;
24013be4:	68fb      	ldr	r3, [r7, #12]
24013be6:	2200      	movs	r2, #0
24013be8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_ABORT)
24013bea:	68fb      	ldr	r3, [r7, #12]
24013bec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
24013bee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
24013bf2:	d122      	bne.n	24013c3a <OSPI_DMAAbortCplt+0x64>
  {
    /* DMA abort called by OctoSPI abort */
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
24013bf4:	68fb      	ldr	r3, [r7, #12]
24013bf6:	681b      	ldr	r3, [r3, #0]
24013bf8:	6a1b      	ldr	r3, [r3, #32]
24013bfa:	f003 0320 	and.w	r3, r3, #32
24013bfe:	2b00      	cmp	r3, #0
24013c00:	d014      	beq.n	24013c2c <OSPI_DMAAbortCplt+0x56>
    {
      /* Clear transfer complete flag */
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
24013c02:	68fb      	ldr	r3, [r7, #12]
24013c04:	681b      	ldr	r3, [r3, #0]
24013c06:	2202      	movs	r2, #2
24013c08:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enable the transfer complete interrupts */
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
24013c0a:	68fb      	ldr	r3, [r7, #12]
24013c0c:	681b      	ldr	r3, [r3, #0]
24013c0e:	681a      	ldr	r2, [r3, #0]
24013c10:	68fb      	ldr	r3, [r7, #12]
24013c12:	681b      	ldr	r3, [r3, #0]
24013c14:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
24013c18:	601a      	str	r2, [r3, #0]

      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
24013c1a:	68fb      	ldr	r3, [r7, #12]
24013c1c:	681b      	ldr	r3, [r3, #0]
24013c1e:	681a      	ldr	r2, [r3, #0]
24013c20:	68fb      	ldr	r3, [r7, #12]
24013c22:	681b      	ldr	r3, [r3, #0]
24013c24:	f042 0202 	orr.w	r2, r2, #2
24013c28:	601a      	str	r2, [r3, #0]
    hospi->ErrorCallback(hospi);
#else
    HAL_OSPI_ErrorCallback(hospi);
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
}
24013c2a:	e00c      	b.n	24013c46 <OSPI_DMAAbortCplt+0x70>
      hospi->State = HAL_OSPI_STATE_READY;
24013c2c:	68fb      	ldr	r3, [r7, #12]
24013c2e:	2202      	movs	r2, #2
24013c30:	651a      	str	r2, [r3, #80]	@ 0x50
      HAL_OSPI_AbortCpltCallback(hospi);
24013c32:	68f8      	ldr	r0, [r7, #12]
24013c34:	f7ff f8b4 	bl	24012da0 <HAL_OSPI_AbortCpltCallback>
}
24013c38:	e005      	b.n	24013c46 <OSPI_DMAAbortCplt+0x70>
    hospi->State = HAL_OSPI_STATE_READY;
24013c3a:	68fb      	ldr	r3, [r7, #12]
24013c3c:	2202      	movs	r2, #2
24013c3e:	651a      	str	r2, [r3, #80]	@ 0x50
    HAL_OSPI_ErrorCallback(hospi);
24013c40:	68f8      	ldr	r0, [r7, #12]
24013c42:	f7ff f8a3 	bl	24012d8c <HAL_OSPI_ErrorCallback>
}
24013c46:	bf00      	nop
24013c48:	3710      	adds	r7, #16
24013c4a:	46bd      	mov	sp, r7
24013c4c:	bd80      	pop	{r7, pc}

24013c4e <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
24013c4e:	b580      	push	{r7, lr}
24013c50:	b084      	sub	sp, #16
24013c52:	af00      	add	r7, sp, #0
24013c54:	60f8      	str	r0, [r7, #12]
24013c56:	60b9      	str	r1, [r7, #8]
24013c58:	603b      	str	r3, [r7, #0]
24013c5a:	4613      	mov	r3, r2
24013c5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
24013c5e:	e01a      	b.n	24013c96 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
24013c60:	69bb      	ldr	r3, [r7, #24]
24013c62:	f1b3 3fff 	cmp.w	r3, #4294967295
24013c66:	d016      	beq.n	24013c96 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24013c68:	f7ef f842 	bl	24002cf0 <HAL_GetTick>
24013c6c:	4602      	mov	r2, r0
24013c6e:	683b      	ldr	r3, [r7, #0]
24013c70:	1ad3      	subs	r3, r2, r3
24013c72:	69ba      	ldr	r2, [r7, #24]
24013c74:	429a      	cmp	r2, r3
24013c76:	d302      	bcc.n	24013c7e <OSPI_WaitFlagStateUntilTimeout+0x30>
24013c78:	69bb      	ldr	r3, [r7, #24]
24013c7a:	2b00      	cmp	r3, #0
24013c7c:	d10b      	bne.n	24013c96 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
24013c7e:	68fb      	ldr	r3, [r7, #12]
24013c80:	f44f 7200 	mov.w	r2, #512	@ 0x200
24013c84:	651a      	str	r2, [r3, #80]	@ 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
24013c86:	68fb      	ldr	r3, [r7, #12]
24013c88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
24013c8a:	f043 0201 	orr.w	r2, r3, #1
24013c8e:	68fb      	ldr	r3, [r7, #12]
24013c90:	655a      	str	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
24013c92:	2301      	movs	r3, #1
24013c94:	e00e      	b.n	24013cb4 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
24013c96:	68fb      	ldr	r3, [r7, #12]
24013c98:	681b      	ldr	r3, [r3, #0]
24013c9a:	6a1a      	ldr	r2, [r3, #32]
24013c9c:	68bb      	ldr	r3, [r7, #8]
24013c9e:	4013      	ands	r3, r2
24013ca0:	2b00      	cmp	r3, #0
24013ca2:	bf14      	ite	ne
24013ca4:	2301      	movne	r3, #1
24013ca6:	2300      	moveq	r3, #0
24013ca8:	b2db      	uxtb	r3, r3
24013caa:	461a      	mov	r2, r3
24013cac:	79fb      	ldrb	r3, [r7, #7]
24013cae:	429a      	cmp	r2, r3
24013cb0:	d1d6      	bne.n	24013c60 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
24013cb2:	2300      	movs	r3, #0
}
24013cb4:	4618      	mov	r0, r3
24013cb6:	3710      	adds	r7, #16
24013cb8:	46bd      	mov	sp, r7
24013cba:	bd80      	pop	{r7, pc}

24013cbc <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
24013cbc:	b480      	push	{r7}
24013cbe:	b089      	sub	sp, #36	@ 0x24
24013cc0:	af00      	add	r7, sp, #0
24013cc2:	6078      	str	r0, [r7, #4]
24013cc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
24013cc6:	2300      	movs	r3, #0
24013cc8:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
24013cca:	687b      	ldr	r3, [r7, #4]
24013ccc:	681b      	ldr	r3, [r3, #0]
24013cce:	681a      	ldr	r2, [r3, #0]
24013cd0:	687b      	ldr	r3, [r7, #4]
24013cd2:	681b      	ldr	r3, [r3, #0]
24013cd4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
24013cd8:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
24013cda:	687b      	ldr	r3, [r7, #4]
24013cdc:	689b      	ldr	r3, [r3, #8]
24013cde:	2b00      	cmp	r3, #0
24013ce0:	d10a      	bne.n	24013cf8 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
24013ce2:	687b      	ldr	r3, [r7, #4]
24013ce4:	681b      	ldr	r3, [r3, #0]
24013ce6:	681b      	ldr	r3, [r3, #0]
24013ce8:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
24013cec:	683b      	ldr	r3, [r7, #0]
24013cee:	685a      	ldr	r2, [r3, #4]
24013cf0:	687b      	ldr	r3, [r7, #4]
24013cf2:	681b      	ldr	r3, [r3, #0]
24013cf4:	430a      	orrs	r2, r1
24013cf6:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
24013cf8:	683b      	ldr	r3, [r7, #0]
24013cfa:	681b      	ldr	r3, [r3, #0]
24013cfc:	2b02      	cmp	r3, #2
24013cfe:	d114      	bne.n	24013d2a <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
24013d00:	687b      	ldr	r3, [r7, #4]
24013d02:	681b      	ldr	r3, [r3, #0]
24013d04:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
24013d08:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
24013d0a:	687b      	ldr	r3, [r7, #4]
24013d0c:	681b      	ldr	r3, [r3, #0]
24013d0e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
24013d12:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
24013d14:	687b      	ldr	r3, [r7, #4]
24013d16:	681b      	ldr	r3, [r3, #0]
24013d18:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
24013d1c:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
24013d1e:	687b      	ldr	r3, [r7, #4]
24013d20:	681b      	ldr	r3, [r3, #0]
24013d22:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
24013d26:	60fb      	str	r3, [r7, #12]
24013d28:	e02c      	b.n	24013d84 <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
24013d2a:	683b      	ldr	r3, [r7, #0]
24013d2c:	681b      	ldr	r3, [r3, #0]
24013d2e:	2b03      	cmp	r3, #3
24013d30:	d114      	bne.n	24013d5c <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
24013d32:	687b      	ldr	r3, [r7, #4]
24013d34:	681b      	ldr	r3, [r3, #0]
24013d36:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
24013d3a:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
24013d3c:	687b      	ldr	r3, [r7, #4]
24013d3e:	681b      	ldr	r3, [r3, #0]
24013d40:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
24013d44:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
24013d46:	687b      	ldr	r3, [r7, #4]
24013d48:	681b      	ldr	r3, [r3, #0]
24013d4a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
24013d4e:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
24013d50:	687b      	ldr	r3, [r7, #4]
24013d52:	681b      	ldr	r3, [r3, #0]
24013d54:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
24013d58:	60fb      	str	r3, [r7, #12]
24013d5a:	e013      	b.n	24013d84 <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
24013d5c:	687b      	ldr	r3, [r7, #4]
24013d5e:	681b      	ldr	r3, [r3, #0]
24013d60:	f503 7380 	add.w	r3, r3, #256	@ 0x100
24013d64:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
24013d66:	687b      	ldr	r3, [r7, #4]
24013d68:	681b      	ldr	r3, [r3, #0]
24013d6a:	f503 7384 	add.w	r3, r3, #264	@ 0x108
24013d6e:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
24013d70:	687b      	ldr	r3, [r7, #4]
24013d72:	681b      	ldr	r3, [r3, #0]
24013d74:	f503 7388 	add.w	r3, r3, #272	@ 0x110
24013d78:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
24013d7a:	687b      	ldr	r3, [r7, #4]
24013d7c:	681b      	ldr	r3, [r3, #0]
24013d7e:	f503 7390 	add.w	r3, r3, #288	@ 0x120
24013d82:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
24013d84:	683b      	ldr	r3, [r7, #0]
24013d86:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
24013d88:	683b      	ldr	r3, [r7, #0]
24013d8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
24013d8c:	431a      	orrs	r2, r3
24013d8e:	69bb      	ldr	r3, [r7, #24]
24013d90:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
24013d92:	683b      	ldr	r3, [r7, #0]
24013d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
24013d96:	2b00      	cmp	r3, #0
24013d98:	d012      	beq.n	24013dc0 <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
24013d9a:	683b      	ldr	r3, [r7, #0]
24013d9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
24013d9e:	68fb      	ldr	r3, [r7, #12]
24013da0:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
24013da2:	69bb      	ldr	r3, [r7, #24]
24013da4:	681b      	ldr	r3, [r3, #0]
24013da6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
24013daa:	683b      	ldr	r3, [r7, #0]
24013dac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
24013dae:	683b      	ldr	r3, [r7, #0]
24013db0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
24013db2:	4319      	orrs	r1, r3
24013db4:	683b      	ldr	r3, [r7, #0]
24013db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
24013db8:	430b      	orrs	r3, r1
24013dba:	431a      	orrs	r2, r3
24013dbc:	69bb      	ldr	r3, [r7, #24]
24013dbe:	601a      	str	r2, [r3, #0]
               (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
24013dc0:	697b      	ldr	r3, [r7, #20]
24013dc2:	681b      	ldr	r3, [r3, #0]
24013dc4:	f023 021f 	bic.w	r2, r3, #31
24013dc8:	683b      	ldr	r3, [r7, #0]
24013dca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
24013dcc:	431a      	orrs	r2, r3
24013dce:	697b      	ldr	r3, [r7, #20]
24013dd0:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
24013dd2:	683b      	ldr	r3, [r7, #0]
24013dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
24013dd6:	2b00      	cmp	r3, #0
24013dd8:	d009      	beq.n	24013dee <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
24013dda:	683b      	ldr	r3, [r7, #0]
24013ddc:	681b      	ldr	r3, [r3, #0]
24013dde:	2b00      	cmp	r3, #0
24013de0:	d105      	bne.n	24013dee <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
24013de2:	683b      	ldr	r3, [r7, #0]
24013de4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
24013de6:	687b      	ldr	r3, [r7, #4]
24013de8:	681b      	ldr	r3, [r3, #0]
24013dea:	3a01      	subs	r2, #1
24013dec:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
24013dee:	683b      	ldr	r3, [r7, #0]
24013df0:	68db      	ldr	r3, [r3, #12]
24013df2:	2b00      	cmp	r3, #0
24013df4:	f000 8095 	beq.w	24013f22 <OSPI_ConfigCmd+0x266>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
24013df8:	683b      	ldr	r3, [r7, #0]
24013dfa:	69db      	ldr	r3, [r3, #28]
24013dfc:	2b00      	cmp	r3, #0
24013dfe:	d053      	beq.n	24013ea8 <OSPI_ConfigCmd+0x1ec>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
24013e00:	683b      	ldr	r3, [r7, #0]
24013e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
24013e04:	2b00      	cmp	r3, #0
24013e06:	d01e      	beq.n	24013e46 <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
24013e08:	69bb      	ldr	r3, [r7, #24]
24013e0a:	681a      	ldr	r2, [r3, #0]
24013e0c:	4b64      	ldr	r3, [pc, #400]	@ (24013fa0 <OSPI_ConfigCmd+0x2e4>)
24013e0e:	4013      	ands	r3, r2
24013e10:	683a      	ldr	r2, [r7, #0]
24013e12:	68d1      	ldr	r1, [r2, #12]
24013e14:	683a      	ldr	r2, [r7, #0]
24013e16:	6952      	ldr	r2, [r2, #20]
24013e18:	4311      	orrs	r1, r2
24013e1a:	683a      	ldr	r2, [r7, #0]
24013e1c:	6912      	ldr	r2, [r2, #16]
24013e1e:	4311      	orrs	r1, r2
24013e20:	683a      	ldr	r2, [r7, #0]
24013e22:	69d2      	ldr	r2, [r2, #28]
24013e24:	4311      	orrs	r1, r2
24013e26:	683a      	ldr	r2, [r7, #0]
24013e28:	6a52      	ldr	r2, [r2, #36]	@ 0x24
24013e2a:	4311      	orrs	r1, r2
24013e2c:	683a      	ldr	r2, [r7, #0]
24013e2e:	6a12      	ldr	r2, [r2, #32]
24013e30:	4311      	orrs	r1, r2
24013e32:	683a      	ldr	r2, [r7, #0]
24013e34:	6b92      	ldr	r2, [r2, #56]	@ 0x38
24013e36:	4311      	orrs	r1, r2
24013e38:	683a      	ldr	r2, [r7, #0]
24013e3a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
24013e3c:	430a      	orrs	r2, r1
24013e3e:	431a      	orrs	r2, r3
24013e40:	69bb      	ldr	r3, [r7, #24]
24013e42:	601a      	str	r2, [r3, #0]
24013e44:	e026      	b.n	24013e94 <OSPI_ConfigCmd+0x1d8>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
24013e46:	69bb      	ldr	r3, [r7, #24]
24013e48:	681a      	ldr	r2, [r3, #0]
24013e4a:	4b56      	ldr	r3, [pc, #344]	@ (24013fa4 <OSPI_ConfigCmd+0x2e8>)
24013e4c:	4013      	ands	r3, r2
24013e4e:	683a      	ldr	r2, [r7, #0]
24013e50:	68d1      	ldr	r1, [r2, #12]
24013e52:	683a      	ldr	r2, [r7, #0]
24013e54:	6952      	ldr	r2, [r2, #20]
24013e56:	4311      	orrs	r1, r2
24013e58:	683a      	ldr	r2, [r7, #0]
24013e5a:	6912      	ldr	r2, [r2, #16]
24013e5c:	4311      	orrs	r1, r2
24013e5e:	683a      	ldr	r2, [r7, #0]
24013e60:	69d2      	ldr	r2, [r2, #28]
24013e62:	4311      	orrs	r1, r2
24013e64:	683a      	ldr	r2, [r7, #0]
24013e66:	6a52      	ldr	r2, [r2, #36]	@ 0x24
24013e68:	4311      	orrs	r1, r2
24013e6a:	683a      	ldr	r2, [r7, #0]
24013e6c:	6a12      	ldr	r2, [r2, #32]
24013e6e:	430a      	orrs	r2, r1
24013e70:	431a      	orrs	r2, r3
24013e72:	69bb      	ldr	r3, [r7, #24]
24013e74:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                    cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
24013e76:	687b      	ldr	r3, [r7, #4]
24013e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
24013e7a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
24013e7e:	d109      	bne.n	24013e94 <OSPI_ConfigCmd+0x1d8>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
24013e80:	683b      	ldr	r3, [r7, #0]
24013e82:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
24013e84:	2b08      	cmp	r3, #8
24013e86:	d105      	bne.n	24013e94 <OSPI_ConfigCmd+0x1d8>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
24013e88:	69bb      	ldr	r3, [r7, #24]
24013e8a:	681b      	ldr	r3, [r3, #0]
24013e8c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
24013e90:	69bb      	ldr	r3, [r7, #24]
24013e92:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
24013e94:	683b      	ldr	r3, [r7, #0]
24013e96:	689a      	ldr	r2, [r3, #8]
24013e98:	693b      	ldr	r3, [r7, #16]
24013e9a:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
24013e9c:	687b      	ldr	r3, [r7, #4]
24013e9e:	681b      	ldr	r3, [r3, #0]
24013ea0:	683a      	ldr	r2, [r7, #0]
24013ea2:	6992      	ldr	r2, [r2, #24]
24013ea4:	649a      	str	r2, [r3, #72]	@ 0x48
24013ea6:	e074      	b.n	24013f92 <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
24013ea8:	683b      	ldr	r3, [r7, #0]
24013eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
24013eac:	2b00      	cmp	r3, #0
24013eae:	d015      	beq.n	24013edc <OSPI_ConfigCmd+0x220>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
24013eb0:	69bb      	ldr	r3, [r7, #24]
24013eb2:	681a      	ldr	r2, [r3, #0]
24013eb4:	4b3c      	ldr	r3, [pc, #240]	@ (24013fa8 <OSPI_ConfigCmd+0x2ec>)
24013eb6:	4013      	ands	r3, r2
24013eb8:	683a      	ldr	r2, [r7, #0]
24013eba:	68d1      	ldr	r1, [r2, #12]
24013ebc:	683a      	ldr	r2, [r7, #0]
24013ebe:	6952      	ldr	r2, [r2, #20]
24013ec0:	4311      	orrs	r1, r2
24013ec2:	683a      	ldr	r2, [r7, #0]
24013ec4:	6912      	ldr	r2, [r2, #16]
24013ec6:	4311      	orrs	r1, r2
24013ec8:	683a      	ldr	r2, [r7, #0]
24013eca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
24013ecc:	4311      	orrs	r1, r2
24013ece:	683a      	ldr	r2, [r7, #0]
24013ed0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
24013ed2:	430a      	orrs	r2, r1
24013ed4:	431a      	orrs	r2, r3
24013ed6:	69bb      	ldr	r3, [r7, #24]
24013ed8:	601a      	str	r2, [r3, #0]
24013eda:	e01d      	b.n	24013f18 <OSPI_ConfigCmd+0x25c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
24013edc:	69bb      	ldr	r3, [r7, #24]
24013ede:	681b      	ldr	r3, [r3, #0]
24013ee0:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
24013ee4:	683b      	ldr	r3, [r7, #0]
24013ee6:	68d9      	ldr	r1, [r3, #12]
24013ee8:	683b      	ldr	r3, [r7, #0]
24013eea:	695b      	ldr	r3, [r3, #20]
24013eec:	4319      	orrs	r1, r3
24013eee:	683b      	ldr	r3, [r7, #0]
24013ef0:	691b      	ldr	r3, [r3, #16]
24013ef2:	430b      	orrs	r3, r1
24013ef4:	431a      	orrs	r2, r3
24013ef6:	69bb      	ldr	r3, [r7, #24]
24013ef8:	601a      	str	r2, [r3, #0]
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
24013efa:	687b      	ldr	r3, [r7, #4]
24013efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
24013efe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
24013f02:	d109      	bne.n	24013f18 <OSPI_ConfigCmd+0x25c>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
24013f04:	683b      	ldr	r3, [r7, #0]
24013f06:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
24013f08:	2b08      	cmp	r3, #8
24013f0a:	d105      	bne.n	24013f18 <OSPI_ConfigCmd+0x25c>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
24013f0c:	69bb      	ldr	r3, [r7, #24]
24013f0e:	681b      	ldr	r3, [r3, #0]
24013f10:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
24013f14:	69bb      	ldr	r3, [r7, #24]
24013f16:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
24013f18:	683b      	ldr	r3, [r7, #0]
24013f1a:	689a      	ldr	r2, [r3, #8]
24013f1c:	693b      	ldr	r3, [r7, #16]
24013f1e:	601a      	str	r2, [r3, #0]
24013f20:	e037      	b.n	24013f92 <OSPI_ConfigCmd+0x2d6>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
24013f22:	683b      	ldr	r3, [r7, #0]
24013f24:	69db      	ldr	r3, [r3, #28]
24013f26:	2b00      	cmp	r3, #0
24013f28:	d02e      	beq.n	24013f88 <OSPI_ConfigCmd+0x2cc>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
24013f2a:	683b      	ldr	r3, [r7, #0]
24013f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
24013f2e:	2b00      	cmp	r3, #0
24013f30:	d015      	beq.n	24013f5e <OSPI_ConfigCmd+0x2a2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
24013f32:	69bb      	ldr	r3, [r7, #24]
24013f34:	681a      	ldr	r2, [r3, #0]
24013f36:	4b1d      	ldr	r3, [pc, #116]	@ (24013fac <OSPI_ConfigCmd+0x2f0>)
24013f38:	4013      	ands	r3, r2
24013f3a:	683a      	ldr	r2, [r7, #0]
24013f3c:	69d1      	ldr	r1, [r2, #28]
24013f3e:	683a      	ldr	r2, [r7, #0]
24013f40:	6a52      	ldr	r2, [r2, #36]	@ 0x24
24013f42:	4311      	orrs	r1, r2
24013f44:	683a      	ldr	r2, [r7, #0]
24013f46:	6a12      	ldr	r2, [r2, #32]
24013f48:	4311      	orrs	r1, r2
24013f4a:	683a      	ldr	r2, [r7, #0]
24013f4c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
24013f4e:	4311      	orrs	r1, r2
24013f50:	683a      	ldr	r2, [r7, #0]
24013f52:	6c12      	ldr	r2, [r2, #64]	@ 0x40
24013f54:	430a      	orrs	r2, r1
24013f56:	431a      	orrs	r2, r3
24013f58:	69bb      	ldr	r3, [r7, #24]
24013f5a:	601a      	str	r2, [r3, #0]
24013f5c:	e00e      	b.n	24013f7c <OSPI_ConfigCmd+0x2c0>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
24013f5e:	69bb      	ldr	r3, [r7, #24]
24013f60:	681b      	ldr	r3, [r3, #0]
24013f62:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
24013f66:	683b      	ldr	r3, [r7, #0]
24013f68:	69d9      	ldr	r1, [r3, #28]
24013f6a:	683b      	ldr	r3, [r7, #0]
24013f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
24013f6e:	4319      	orrs	r1, r3
24013f70:	683b      	ldr	r3, [r7, #0]
24013f72:	6a1b      	ldr	r3, [r3, #32]
24013f74:	430b      	orrs	r3, r1
24013f76:	431a      	orrs	r2, r3
24013f78:	69bb      	ldr	r3, [r7, #24]
24013f7a:	601a      	str	r2, [r3, #0]
                   (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
24013f7c:	687b      	ldr	r3, [r7, #4]
24013f7e:	681b      	ldr	r3, [r3, #0]
24013f80:	683a      	ldr	r2, [r7, #0]
24013f82:	6992      	ldr	r2, [r2, #24]
24013f84:	649a      	str	r2, [r3, #72]	@ 0x48
24013f86:	e004      	b.n	24013f92 <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
24013f88:	2301      	movs	r3, #1
24013f8a:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
24013f8c:	687b      	ldr	r3, [r7, #4]
24013f8e:	2208      	movs	r2, #8
24013f90:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
24013f92:	7ffb      	ldrb	r3, [r7, #31]
}
24013f94:	4618      	mov	r0, r3
24013f96:	3724      	adds	r7, #36	@ 0x24
24013f98:	46bd      	mov	sp, r7
24013f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
24013f9e:	4770      	bx	lr
24013fa0:	f0ffc0c0 	.word	0xf0ffc0c0
24013fa4:	ffffc0c0 	.word	0xffffc0c0
24013fa8:	f0ffffc0 	.word	0xf0ffffc0
24013fac:	f0ffc0ff 	.word	0xf0ffc0ff

24013fb0 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
24013fb0:	b480      	push	{r7}
24013fb2:	b087      	sub	sp, #28
24013fb4:	af00      	add	r7, sp, #0
24013fb6:	4603      	mov	r3, r0
24013fb8:	6039      	str	r1, [r7, #0]
24013fba:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
24013fbc:	2300      	movs	r3, #0
24013fbe:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
24013fc0:	2300      	movs	r3, #0
24013fc2:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
24013fc4:	79fb      	ldrb	r3, [r7, #7]
24013fc6:	2b00      	cmp	r3, #0
24013fc8:	d005      	beq.n	24013fd6 <OSPIM_GetConfig+0x26>
24013fca:	79fb      	ldrb	r3, [r7, #7]
24013fcc:	2b02      	cmp	r3, #2
24013fce:	d802      	bhi.n	24013fd6 <OSPIM_GetConfig+0x26>
24013fd0:	683b      	ldr	r3, [r7, #0]
24013fd2:	2b00      	cmp	r3, #0
24013fd4:	d102      	bne.n	24013fdc <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
24013fd6:	2301      	movs	r3, #1
24013fd8:	75fb      	strb	r3, [r7, #23]
24013fda:	e098      	b.n	2401410e <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
24013fdc:	683b      	ldr	r3, [r7, #0]
24013fde:	2200      	movs	r2, #0
24013fe0:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
24013fe2:	683b      	ldr	r3, [r7, #0]
24013fe4:	2200      	movs	r2, #0
24013fe6:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
24013fe8:	683b      	ldr	r3, [r7, #0]
24013fea:	2200      	movs	r2, #0
24013fec:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
24013fee:	683b      	ldr	r3, [r7, #0]
24013ff0:	2200      	movs	r2, #0
24013ff2:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
24013ff4:	683b      	ldr	r3, [r7, #0]
24013ff6:	2200      	movs	r2, #0
24013ff8:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
24013ffa:	79fb      	ldrb	r3, [r7, #7]
24013ffc:	2b02      	cmp	r3, #2
24013ffe:	d10b      	bne.n	24014018 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
24014000:	4b46      	ldr	r3, [pc, #280]	@ (2401411c <OSPIM_GetConfig+0x16c>)
24014002:	681b      	ldr	r3, [r3, #0]
24014004:	f003 0301 	and.w	r3, r3, #1
24014008:	2b00      	cmp	r3, #0
2401400a:	d102      	bne.n	24014012 <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
2401400c:	4b44      	ldr	r3, [pc, #272]	@ (24014120 <OSPIM_GetConfig+0x170>)
2401400e:	613b      	str	r3, [r7, #16]
24014010:	e002      	b.n	24014018 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
24014012:	f44f 7300 	mov.w	r3, #512	@ 0x200
24014016:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
24014018:	2300      	movs	r3, #0
2401401a:	60fb      	str	r3, [r7, #12]
2401401c:	e074      	b.n	24014108 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
2401401e:	4a3f      	ldr	r2, [pc, #252]	@ (2401411c <OSPIM_GetConfig+0x16c>)
24014020:	68fb      	ldr	r3, [r7, #12]
24014022:	009b      	lsls	r3, r3, #2
24014024:	4413      	add	r3, r2
24014026:	685b      	ldr	r3, [r3, #4]
24014028:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
2401402a:	68bb      	ldr	r3, [r7, #8]
2401402c:	f003 0301 	and.w	r3, r3, #1
24014030:	2b00      	cmp	r3, #0
24014032:	d00a      	beq.n	2401404a <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
24014034:	68ba      	ldr	r2, [r7, #8]
24014036:	693b      	ldr	r3, [r7, #16]
24014038:	4053      	eors	r3, r2
2401403a:	f003 0302 	and.w	r3, r3, #2
2401403e:	2b00      	cmp	r3, #0
24014040:	d103      	bne.n	2401404a <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
24014042:	68fb      	ldr	r3, [r7, #12]
24014044:	1c5a      	adds	r2, r3, #1
24014046:	683b      	ldr	r3, [r7, #0]
24014048:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
2401404a:	68bb      	ldr	r3, [r7, #8]
2401404c:	f003 0310 	and.w	r3, r3, #16
24014050:	2b00      	cmp	r3, #0
24014052:	d00a      	beq.n	2401406a <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
24014054:	68ba      	ldr	r2, [r7, #8]
24014056:	693b      	ldr	r3, [r7, #16]
24014058:	4053      	eors	r3, r2
2401405a:	f003 0320 	and.w	r3, r3, #32
2401405e:	2b00      	cmp	r3, #0
24014060:	d103      	bne.n	2401406a <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
24014062:	68fb      	ldr	r3, [r7, #12]
24014064:	1c5a      	adds	r2, r3, #1
24014066:	683b      	ldr	r3, [r7, #0]
24014068:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
2401406a:	68bb      	ldr	r3, [r7, #8]
2401406c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
24014070:	2b00      	cmp	r3, #0
24014072:	d00a      	beq.n	2401408a <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
24014074:	68ba      	ldr	r2, [r7, #8]
24014076:	693b      	ldr	r3, [r7, #16]
24014078:	4053      	eors	r3, r2
2401407a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
2401407e:	2b00      	cmp	r3, #0
24014080:	d103      	bne.n	2401408a <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
24014082:	68fb      	ldr	r3, [r7, #12]
24014084:	1c5a      	adds	r2, r3, #1
24014086:	683b      	ldr	r3, [r7, #0]
24014088:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
2401408a:	68bb      	ldr	r3, [r7, #8]
2401408c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
24014090:	2b00      	cmp	r3, #0
24014092:	d018      	beq.n	240140c6 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
24014094:	68ba      	ldr	r2, [r7, #8]
24014096:	693b      	ldr	r3, [r7, #16]
24014098:	4053      	eors	r3, r2
2401409a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
2401409e:	2b00      	cmp	r3, #0
240140a0:	d111      	bne.n	240140c6 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
240140a2:	68bb      	ldr	r3, [r7, #8]
240140a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
240140a8:	2b00      	cmp	r3, #0
240140aa:	d106      	bne.n	240140ba <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
240140ac:	68fb      	ldr	r3, [r7, #12]
240140ae:	3301      	adds	r3, #1
240140b0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
240140b4:	683b      	ldr	r3, [r7, #0]
240140b6:	60da      	str	r2, [r3, #12]
240140b8:	e005      	b.n	240140c6 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
240140ba:	68fb      	ldr	r3, [r7, #12]
240140bc:	3301      	adds	r3, #1
240140be:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
240140c2:	683b      	ldr	r3, [r7, #0]
240140c4:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
240140c6:	68bb      	ldr	r3, [r7, #8]
240140c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
240140cc:	2b00      	cmp	r3, #0
240140ce:	d018      	beq.n	24014102 <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
240140d0:	68ba      	ldr	r2, [r7, #8]
240140d2:	693b      	ldr	r3, [r7, #16]
240140d4:	4053      	eors	r3, r2
240140d6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
240140da:	2b00      	cmp	r3, #0
240140dc:	d111      	bne.n	24014102 <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
240140de:	68bb      	ldr	r3, [r7, #8]
240140e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
240140e4:	2b00      	cmp	r3, #0
240140e6:	d106      	bne.n	240140f6 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
240140e8:	68fb      	ldr	r3, [r7, #12]
240140ea:	3301      	adds	r3, #1
240140ec:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
240140f0:	683b      	ldr	r3, [r7, #0]
240140f2:	611a      	str	r2, [r3, #16]
240140f4:	e005      	b.n	24014102 <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
240140f6:	68fb      	ldr	r3, [r7, #12]
240140f8:	3301      	adds	r3, #1
240140fa:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
240140fe:	683b      	ldr	r3, [r7, #0]
24014100:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
24014102:	68fb      	ldr	r3, [r7, #12]
24014104:	3301      	adds	r3, #1
24014106:	60fb      	str	r3, [r7, #12]
24014108:	68fb      	ldr	r3, [r7, #12]
2401410a:	2b01      	cmp	r3, #1
2401410c:	d987      	bls.n	2401401e <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
2401410e:	7dfb      	ldrb	r3, [r7, #23]
}
24014110:	4618      	mov	r0, r3
24014112:	371c      	adds	r7, #28
24014114:	46bd      	mov	sp, r7
24014116:	f85d 7b04 	ldr.w	r7, [sp], #4
2401411a:	4770      	bx	lr
2401411c:	5200b400 	.word	0x5200b400
24014120:	04040222 	.word	0x04040222

24014124 <HAL_PWR_DeInit>:
  *         The prototype is kept just to maintain compatibility with other
  *         products.
  * @retval None.
  */
void HAL_PWR_DeInit (void)
{
24014124:	b480      	push	{r7}
24014126:	af00      	add	r7, sp, #0
}
24014128:	bf00      	nop
2401412a:	46bd      	mov	sp, r7
2401412c:	f85d 7b04 	ldr.w	r7, [sp], #4
24014130:	4770      	bx	lr
	...

24014134 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
24014134:	b480      	push	{r7}
24014136:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
24014138:	4b05      	ldr	r3, [pc, #20]	@ (24014150 <HAL_PWR_EnableBkUpAccess+0x1c>)
2401413a:	681b      	ldr	r3, [r3, #0]
2401413c:	4a04      	ldr	r2, [pc, #16]	@ (24014150 <HAL_PWR_EnableBkUpAccess+0x1c>)
2401413e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
24014142:	6013      	str	r3, [r2, #0]
}
24014144:	bf00      	nop
24014146:	46bd      	mov	sp, r7
24014148:	f85d 7b04 	ldr.w	r7, [sp], #4
2401414c:	4770      	bx	lr
2401414e:	bf00      	nop
24014150:	58024800 	.word	0x58024800

24014154 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_DisableBkUpAccess (void)
{
24014154:	b480      	push	{r7}
24014156:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT (PWR->CR1, PWR_CR1_DBP);
24014158:	4b05      	ldr	r3, [pc, #20]	@ (24014170 <HAL_PWR_DisableBkUpAccess+0x1c>)
2401415a:	681b      	ldr	r3, [r3, #0]
2401415c:	4a04      	ldr	r2, [pc, #16]	@ (24014170 <HAL_PWR_DisableBkUpAccess+0x1c>)
2401415e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
24014162:	6013      	str	r3, [r2, #0]
}
24014164:	bf00      	nop
24014166:	46bd      	mov	sp, r7
24014168:	f85d 7b04 	ldr.w	r7, [sp], #4
2401416c:	4770      	bx	lr
2401416e:	bf00      	nop
24014170:	58024800 	.word	0x58024800

24014174 <HAL_PWR_ConfigPVD>:
  *         driver. All combination are allowed: wake up only Cortex-M7, wake up
  *         only Cortex-M4 or wake up Cortex-M7 and Cortex-M4.
  * @retval None.
  */
void HAL_PWR_ConfigPVD (PWR_PVDTypeDef *sConfigPVD)
{
24014174:	b480      	push	{r7}
24014176:	b083      	sub	sp, #12
24014178:	af00      	add	r7, sp, #0
2401417a:	6078      	str	r0, [r7, #4]
  /* Check the PVD configuration parameter */
  if (sConfigPVD == NULL)
2401417c:	687b      	ldr	r3, [r7, #4]
2401417e:	2b00      	cmp	r3, #0
24014180:	d069      	beq.n	24014256 <HAL_PWR_ConfigPVD+0xe2>
  /* Check the parameters */
  assert_param (IS_PWR_PVD_LEVEL (sConfigPVD->PVDLevel));
  assert_param (IS_PWR_PVD_MODE (sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG (PWR->CR1, PWR_CR1_PLS, sConfigPVD->PVDLevel);
24014182:	4b38      	ldr	r3, [pc, #224]	@ (24014264 <HAL_PWR_ConfigPVD+0xf0>)
24014184:	681b      	ldr	r3, [r3, #0]
24014186:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
2401418a:	687b      	ldr	r3, [r7, #4]
2401418c:	681b      	ldr	r3, [r3, #0]
2401418e:	4935      	ldr	r1, [pc, #212]	@ (24014264 <HAL_PWR_ConfigPVD+0xf0>)
24014190:	4313      	orrs	r3, r2
24014192:	600b      	str	r3, [r1, #0]

  /* Clear previous config */
#if !defined (DUAL_CORE)
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT ();
24014194:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
24014198:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
2401419c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
240141a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
240141a4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __HAL_PWR_PVD_EXTI_DISABLE_IT ();
240141a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
240141ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
240141b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
240141b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
240141b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* !defined (DUAL_CORE) */

  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE ();
240141bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
240141c0:	681b      	ldr	r3, [r3, #0]
240141c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
240141c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
240141ca:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE ();
240141cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
240141d0:	685b      	ldr	r3, [r3, #4]
240141d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
240141d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
240141da:	6053      	str	r3, [r2, #4]

#if !defined (DUAL_CORE)
  /* Interrupt mode configuration */
  if ((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
240141dc:	687b      	ldr	r3, [r7, #4]
240141de:	685b      	ldr	r3, [r3, #4]
240141e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
240141e4:	2b00      	cmp	r3, #0
240141e6:	d009      	beq.n	240141fc <HAL_PWR_ConfigPVD+0x88>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT ();
240141e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
240141ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
240141f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
240141f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
240141f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  }

  /* Event mode configuration */
  if ((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
240141fc:	687b      	ldr	r3, [r7, #4]
240141fe:	685b      	ldr	r3, [r3, #4]
24014200:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
24014204:	2b00      	cmp	r3, #0
24014206:	d009      	beq.n	2401421c <HAL_PWR_ConfigPVD+0xa8>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT ();
24014208:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
2401420c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
24014210:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
24014214:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
24014218:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  }
#endif /* !defined (DUAL_CORE) */

  /* Rising edge configuration */
  if ((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
2401421c:	687b      	ldr	r3, [r7, #4]
2401421e:	685b      	ldr	r3, [r3, #4]
24014220:	f003 0301 	and.w	r3, r3, #1
24014224:	2b00      	cmp	r3, #0
24014226:	d007      	beq.n	24014238 <HAL_PWR_ConfigPVD+0xc4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE ();
24014228:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
2401422c:	681b      	ldr	r3, [r3, #0]
2401422e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
24014232:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
24014236:	6013      	str	r3, [r2, #0]
  }

  /* Falling edge configuration */
  if ((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
24014238:	687b      	ldr	r3, [r7, #4]
2401423a:	685b      	ldr	r3, [r3, #4]
2401423c:	f003 0302 	and.w	r3, r3, #2
24014240:	2b00      	cmp	r3, #0
24014242:	d009      	beq.n	24014258 <HAL_PWR_ConfigPVD+0xe4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE ();
24014244:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
24014248:	685b      	ldr	r3, [r3, #4]
2401424a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
2401424e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
24014252:	6053      	str	r3, [r2, #4]
24014254:	e000      	b.n	24014258 <HAL_PWR_ConfigPVD+0xe4>
    return;
24014256:	bf00      	nop
  }
}
24014258:	370c      	adds	r7, #12
2401425a:	46bd      	mov	sp, r7
2401425c:	f85d 7b04 	ldr.w	r7, [sp], #4
24014260:	4770      	bx	lr
24014262:	bf00      	nop
24014264:	58024800 	.word	0x58024800

24014268 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Programmable Voltage Detector (PVD).
  * @retval None.
  */
void HAL_PWR_EnablePVD (void)
{
24014268:	b480      	push	{r7}
2401426a:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT (PWR->CR1, PWR_CR1_PVDEN);
2401426c:	4b05      	ldr	r3, [pc, #20]	@ (24014284 <HAL_PWR_EnablePVD+0x1c>)
2401426e:	681b      	ldr	r3, [r3, #0]
24014270:	4a04      	ldr	r2, [pc, #16]	@ (24014284 <HAL_PWR_EnablePVD+0x1c>)
24014272:	f043 0310 	orr.w	r3, r3, #16
24014276:	6013      	str	r3, [r2, #0]
}
24014278:	bf00      	nop
2401427a:	46bd      	mov	sp, r7
2401427c:	f85d 7b04 	ldr.w	r7, [sp], #4
24014280:	4770      	bx	lr
24014282:	bf00      	nop
24014284:	58024800 	.word	0x58024800

24014288 <HAL_PWR_DisablePVD>:
/**
  * @brief Disable the Programmable Voltage Detector (PVD).
  * @retval None.
  */
void HAL_PWR_DisablePVD (void)
{
24014288:	b480      	push	{r7}
2401428a:	af00      	add	r7, sp, #0
  /* Disable the power voltage detector */
  CLEAR_BIT (PWR->CR1, PWR_CR1_PVDEN);
2401428c:	4b05      	ldr	r3, [pc, #20]	@ (240142a4 <HAL_PWR_DisablePVD+0x1c>)
2401428e:	681b      	ldr	r3, [r3, #0]
24014290:	4a04      	ldr	r2, [pc, #16]	@ (240142a4 <HAL_PWR_DisablePVD+0x1c>)
24014292:	f023 0310 	bic.w	r3, r3, #16
24014296:	6013      	str	r3, [r2, #0]
}
24014298:	bf00      	nop
2401429a:	46bd      	mov	sp, r7
2401429c:	f85d 7b04 	ldr.w	r7, [sp], #4
240142a0:	4770      	bx	lr
240142a2:	bf00      	nop
240142a4:	58024800 	.word	0x58024800

240142a8 <HAL_PWR_EnableWakeUpPin>:
  *         and PWR_WAKEUP_PIN5_LOW are available only for devices that includes
  *         GPIOI port.
  * @retval None.
  */
void HAL_PWR_EnableWakeUpPin (uint32_t WakeUpPinPolarity)
{
240142a8:	b480      	push	{r7}
240142aa:	b083      	sub	sp, #12
240142ac:	af00      	add	r7, sp, #0
240142ae:	6078      	str	r0, [r7, #4]

  /*
     Enable and Specify the Wake-Up pin polarity and the pull configuration
     for the event detection (rising or falling edge).
  */
  MODIFY_REG (PWR->WKUPEPR, PWR_EWUP_MASK, WakeUpPinPolarity);
240142b0:	4b06      	ldr	r3, [pc, #24]	@ (240142cc <HAL_PWR_EnableWakeUpPin+0x24>)
240142b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
240142b4:	4b06      	ldr	r3, [pc, #24]	@ (240142d0 <HAL_PWR_EnableWakeUpPin+0x28>)
240142b6:	4013      	ands	r3, r2
240142b8:	4904      	ldr	r1, [pc, #16]	@ (240142cc <HAL_PWR_EnableWakeUpPin+0x24>)
240142ba:	687a      	ldr	r2, [r7, #4]
240142bc:	4313      	orrs	r3, r2
240142be:	628b      	str	r3, [r1, #40]	@ 0x28
}
240142c0:	bf00      	nop
240142c2:	370c      	adds	r7, #12
240142c4:	46bd      	mov	sp, r7
240142c6:	f85d 7b04 	ldr.w	r7, [sp], #4
240142ca:	4770      	bx	lr
240142cc:	58024800 	.word	0x58024800
240142d0:	f000c0c0 	.word	0xf000c0c0

240142d4 <HAL_PWR_DisableWakeUpPin>:
  *         and PWR_WAKEUP_PIN5_LOW are available only for devices that includes
  *         GPIOI port.
  * @retval None.
  */
void HAL_PWR_DisableWakeUpPin (uint32_t WakeUpPinx)
{
240142d4:	b480      	push	{r7}
240142d6:	b083      	sub	sp, #12
240142d8:	af00      	add	r7, sp, #0
240142da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_WAKEUP_PIN (WakeUpPinx));

  /* Disable the wake up pin selected */
  CLEAR_BIT (PWR->WKUPEPR, (PWR_WKUPEPR_WKUPEN & WakeUpPinx));
240142dc:	4b07      	ldr	r3, [pc, #28]	@ (240142fc <HAL_PWR_DisableWakeUpPin+0x28>)
240142de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
240142e0:	687b      	ldr	r3, [r7, #4]
240142e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
240142e6:	43db      	mvns	r3, r3
240142e8:	4904      	ldr	r1, [pc, #16]	@ (240142fc <HAL_PWR_DisableWakeUpPin+0x28>)
240142ea:	4013      	ands	r3, r2
240142ec:	628b      	str	r3, [r1, #40]	@ 0x28
}
240142ee:	bf00      	nop
240142f0:	370c      	adds	r7, #12
240142f2:	46bd      	mov	sp, r7
240142f4:	f85d 7b04 	ldr.w	r7, [sp], #4
240142f8:	4770      	bx	lr
240142fa:	bf00      	nop
240142fc:	58024800 	.word	0x58024800

24014300 <HAL_PWR_EnterSLEEPMode>:
  * @note   Ensure to clear pending events before calling this API through
  *         HAL_PWREx_ClearPendingEvent() when the SLEEP entry is WFE.
  * @retval None.
  */
void HAL_PWR_EnterSLEEPMode (uint32_t Regulator, uint8_t SLEEPEntry)
{
24014300:	b480      	push	{r7}
24014302:	b083      	sub	sp, #12
24014304:	af00      	add	r7, sp, #0
24014306:	6078      	str	r0, [r7, #4]
24014308:	460b      	mov	r3, r1
2401430a:	70fb      	strb	r3, [r7, #3]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(Regulator);

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
2401430c:	4b08      	ldr	r3, [pc, #32]	@ (24014330 <HAL_PWR_EnterSLEEPMode+0x30>)
2401430e:	691b      	ldr	r3, [r3, #16]
24014310:	4a07      	ldr	r2, [pc, #28]	@ (24014330 <HAL_PWR_EnterSLEEPMode+0x30>)
24014312:	f023 0304 	bic.w	r3, r3, #4
24014316:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry */
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
24014318:	78fb      	ldrb	r3, [r7, #3]
2401431a:	2b01      	cmp	r3, #1
2401431c:	d101      	bne.n	24014322 <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI ();
2401431e:	bf30      	wfi
  else
  {
    /* Request Wait For Event */
    __WFE ();
  }
}
24014320:	e000      	b.n	24014324 <HAL_PWR_EnterSLEEPMode+0x24>
    __WFE ();
24014322:	bf20      	wfe
}
24014324:	bf00      	nop
24014326:	370c      	adds	r7, #12
24014328:	46bd      	mov	sp, r7
2401432a:	f85d 7b04 	ldr.w	r7, [sp], #4
2401432e:	4770      	bx	lr
24014330:	e000ed00 	.word	0xe000ed00

24014334 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
24014334:	b480      	push	{r7}
24014336:	b083      	sub	sp, #12
24014338:	af00      	add	r7, sp, #0
2401433a:	6078      	str	r0, [r7, #4]
2401433c:	460b      	mov	r3, r1
2401433e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
24014340:	4b18      	ldr	r3, [pc, #96]	@ (240143a4 <HAL_PWR_EnterSTOPMode+0x70>)
24014342:	681b      	ldr	r3, [r3, #0]
24014344:	f023 0201 	bic.w	r2, r3, #1
24014348:	4916      	ldr	r1, [pc, #88]	@ (240143a4 <HAL_PWR_EnterSTOPMode+0x70>)
2401434a:	687b      	ldr	r3, [r7, #4]
2401434c:	4313      	orrs	r3, r2
2401434e:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
24014350:	4b14      	ldr	r3, [pc, #80]	@ (240143a4 <HAL_PWR_EnterSTOPMode+0x70>)
24014352:	691b      	ldr	r3, [r3, #16]
24014354:	4a13      	ldr	r2, [pc, #76]	@ (240143a4 <HAL_PWR_EnterSTOPMode+0x70>)
24014356:	f023 0305 	bic.w	r3, r3, #5
2401435a:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
2401435c:	4b11      	ldr	r3, [pc, #68]	@ (240143a4 <HAL_PWR_EnterSTOPMode+0x70>)
2401435e:	691b      	ldr	r3, [r3, #16]
24014360:	4a10      	ldr	r2, [pc, #64]	@ (240143a4 <HAL_PWR_EnterSTOPMode+0x70>)
24014362:	f023 0302 	bic.w	r3, r3, #2
24014366:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
24014368:	4b0f      	ldr	r3, [pc, #60]	@ (240143a8 <HAL_PWR_EnterSTOPMode+0x74>)
2401436a:	691b      	ldr	r3, [r3, #16]
2401436c:	4a0e      	ldr	r2, [pc, #56]	@ (240143a8 <HAL_PWR_EnterSTOPMode+0x74>)
2401436e:	f043 0304 	orr.w	r3, r3, #4
24014372:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
24014374:	f3bf 8f4f 	dsb	sy
}
24014378:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
2401437a:	f3bf 8f6f 	isb	sy
}
2401437e:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
24014380:	78fb      	ldrb	r3, [r7, #3]
24014382:	2b01      	cmp	r3, #1
24014384:	d101      	bne.n	2401438a <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
24014386:	bf30      	wfi
24014388:	e000      	b.n	2401438c <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
2401438a:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
2401438c:	4b06      	ldr	r3, [pc, #24]	@ (240143a8 <HAL_PWR_EnterSTOPMode+0x74>)
2401438e:	691b      	ldr	r3, [r3, #16]
24014390:	4a05      	ldr	r2, [pc, #20]	@ (240143a8 <HAL_PWR_EnterSTOPMode+0x74>)
24014392:	f023 0304 	bic.w	r3, r3, #4
24014396:	6113      	str	r3, [r2, #16]
}
24014398:	bf00      	nop
2401439a:	370c      	adds	r7, #12
2401439c:	46bd      	mov	sp, r7
2401439e:	f85d 7b04 	ldr.w	r7, [sp], #4
240143a2:	4770      	bx	lr
240143a4:	58024800 	.word	0x58024800
240143a8:	e000ed00 	.word	0xe000ed00

240143ac <HAL_PWR_EnterSTANDBYMode>:
  * @note   It is recommended to disable all regulators before entring STANDBY
  *         mode for power consumption saving purpose.
  * @retval None.
  */
void HAL_PWR_EnterSTANDBYMode (void)
{
240143ac:	b480      	push	{r7}
240143ae:	af00      	add	r7, sp, #0
    SET_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
    SET_BIT (PWR->CPU2CR, (PWR_CPU2CR_PDDS_D2 | PWR_CPU2CR_PDDS_D3));
  }
#else /* Single core devices */
  /* Enter DSTANDBY mode when Cortex-M7 enters DEEP-SLEEP */
  SET_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
240143b0:	4b0e      	ldr	r3, [pc, #56]	@ (240143ec <HAL_PWR_EnterSTANDBYMode+0x40>)
240143b2:	691b      	ldr	r3, [r3, #16]
240143b4:	4a0d      	ldr	r2, [pc, #52]	@ (240143ec <HAL_PWR_EnterSTANDBYMode+0x40>)
240143b6:	f043 0305 	orr.w	r3, r3, #5
240143ba:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Enter DSTANDBY mode when Cortex-M7 enters DEEP-SLEEP */
  SET_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
240143bc:	4b0b      	ldr	r3, [pc, #44]	@ (240143ec <HAL_PWR_EnterSTANDBYMode+0x40>)
240143be:	691b      	ldr	r3, [r3, #16]
240143c0:	4a0a      	ldr	r2, [pc, #40]	@ (240143ec <HAL_PWR_EnterSTANDBYMode+0x40>)
240143c2:	f043 0302 	orr.w	r3, r3, #2
240143c6:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
240143c8:	4b09      	ldr	r3, [pc, #36]	@ (240143f0 <HAL_PWR_EnterSTANDBYMode+0x44>)
240143ca:	691b      	ldr	r3, [r3, #16]
240143cc:	4a08      	ldr	r2, [pc, #32]	@ (240143f0 <HAL_PWR_EnterSTANDBYMode+0x44>)
240143ce:	f043 0304 	orr.w	r3, r3, #4
240143d2:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
240143d4:	f3bf 8f4f 	dsb	sy
}
240143d8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
240143da:	f3bf 8f6f 	isb	sy
}
240143de:	bf00      	nop
#if defined (__CC_ARM)
  __force_stores();
#endif /* defined (__CC_ARM) */

  /* Request Wait For Interrupt */
  __WFI ();
240143e0:	bf30      	wfi
}
240143e2:	bf00      	nop
240143e4:	46bd      	mov	sp, r7
240143e6:	f85d 7b04 	ldr.w	r7, [sp], #4
240143ea:	4770      	bx	lr
240143ec:	58024800 	.word	0x58024800
240143f0:	e000ed00 	.word	0xe000ed00

240143f4 <HAL_PWR_EnableSleepOnExit>:
  *         Setting this bit is useful when the processor is expected to run
  *         only on interruptions handling.
  * @retval None.
  */
void HAL_PWR_EnableSleepOnExit (void)
{
240143f4:	b480      	push	{r7}
240143f6:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex-Mx System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPONEXIT_Msk);
240143f8:	4b05      	ldr	r3, [pc, #20]	@ (24014410 <HAL_PWR_EnableSleepOnExit+0x1c>)
240143fa:	691b      	ldr	r3, [r3, #16]
240143fc:	4a04      	ldr	r2, [pc, #16]	@ (24014410 <HAL_PWR_EnableSleepOnExit+0x1c>)
240143fe:	f043 0302 	orr.w	r3, r3, #2
24014402:	6113      	str	r3, [r2, #16]
}
24014404:	bf00      	nop
24014406:	46bd      	mov	sp, r7
24014408:	f85d 7b04 	ldr.w	r7, [sp], #4
2401440c:	4770      	bx	lr
2401440e:	bf00      	nop
24014410:	e000ed00 	.word	0xe000ed00

24014414 <HAL_PWR_DisableSleepOnExit>:
  * @note   Clears SLEEPONEXIT bit of SCR register. When this bit is set, the
  *         processor re-enters SLEEP mode when an interruption handling is over.
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit (void)
{
24014414:	b480      	push	{r7}
24014416:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex-Mx System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPONEXIT_Msk);
24014418:	4b05      	ldr	r3, [pc, #20]	@ (24014430 <HAL_PWR_DisableSleepOnExit+0x1c>)
2401441a:	691b      	ldr	r3, [r3, #16]
2401441c:	4a04      	ldr	r2, [pc, #16]	@ (24014430 <HAL_PWR_DisableSleepOnExit+0x1c>)
2401441e:	f023 0302 	bic.w	r3, r3, #2
24014422:	6113      	str	r3, [r2, #16]
}
24014424:	bf00      	nop
24014426:	46bd      	mov	sp, r7
24014428:	f85d 7b04 	ldr.w	r7, [sp], #4
2401442c:	4770      	bx	lr
2401442e:	bf00      	nop
24014430:	e000ed00 	.word	0xe000ed00

24014434 <HAL_PWR_EnableSEVOnPend>:
  *         pending event / interrupt even if it's disabled or has insufficient
  *         priority to cause exception entry wakes up the Cortex-Mx.
  * @retval None.
  */
void HAL_PWR_EnableSEVOnPend (void)
{
24014434:	b480      	push	{r7}
24014436:	af00      	add	r7, sp, #0
  /* Set SEVONPEND bit of Cortex-Mx System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SEVONPEND_Msk);
24014438:	4b05      	ldr	r3, [pc, #20]	@ (24014450 <HAL_PWR_EnableSEVOnPend+0x1c>)
2401443a:	691b      	ldr	r3, [r3, #16]
2401443c:	4a04      	ldr	r2, [pc, #16]	@ (24014450 <HAL_PWR_EnableSEVOnPend+0x1c>)
2401443e:	f043 0310 	orr.w	r3, r3, #16
24014442:	6113      	str	r3, [r2, #16]
}
24014444:	bf00      	nop
24014446:	46bd      	mov	sp, r7
24014448:	f85d 7b04 	ldr.w	r7, [sp], #4
2401444c:	4770      	bx	lr
2401444e:	bf00      	nop
24014450:	e000ed00 	.word	0xe000ed00

24014454 <HAL_PWR_DisableSEVOnPend>:
  * @note   Resets SEVONPEND bit of SCR register. When this bit is reset, only
  *         enabled pending causes exception entry wakes up the Cortex-Mx.
  * @retval None.
  */
void HAL_PWR_DisableSEVOnPend (void)
{
24014454:	b480      	push	{r7}
24014456:	af00      	add	r7, sp, #0
  /* Clear SEVONPEND bit of Cortex System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SEVONPEND_Msk);
24014458:	4b05      	ldr	r3, [pc, #20]	@ (24014470 <HAL_PWR_DisableSEVOnPend+0x1c>)
2401445a:	691b      	ldr	r3, [r3, #16]
2401445c:	4a04      	ldr	r2, [pc, #16]	@ (24014470 <HAL_PWR_DisableSEVOnPend+0x1c>)
2401445e:	f023 0310 	bic.w	r3, r3, #16
24014462:	6113      	str	r3, [r2, #16]
}
24014464:	bf00      	nop
24014466:	46bd      	mov	sp, r7
24014468:	f85d 7b04 	ldr.w	r7, [sp], #4
2401446c:	4770      	bx	lr
2401446e:	bf00      	nop
24014470:	e000ed00 	.word	0xe000ed00

24014474 <HAL_PWR_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_AVD_IRQHandler().
  * @retval None.
  */
void HAL_PWR_PVD_IRQHandler (void)
{
24014474:	b580      	push	{r7, lr}
24014476:	af00      	add	r7, sp, #0
      HAL_PWR_PVDCallback ();
    }
  }
#else /* Single core devices */
  /* PVD EXTI line interrupt detected */
  if (__HAL_PWR_PVD_EXTI_GET_FLAG () != 0U)
24014478:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
2401447c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
24014480:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
24014484:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
24014488:	d10b      	bne.n	240144a2 <HAL_PWR_PVD_IRQHandler+0x2e>
  {
    /* Clear PWR EXTI pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG ();
2401448a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
2401448e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
24014492:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
24014496:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
2401449a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback ();
2401449e:	f000 f802 	bl	240144a6 <HAL_PWR_PVDCallback>
  }
#endif /* defined (DUAL_CORE) */
}
240144a2:	bf00      	nop
240144a4:	bd80      	pop	{r7, pc}

240144a6 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback.
  * @retval None.
  */
__weak void HAL_PWR_PVDCallback (void)
{
240144a6:	b480      	push	{r7}
240144a8:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
  */
}
240144aa:	bf00      	nop
240144ac:	46bd      	mov	sp, r7
240144ae:	f85d 7b04 	ldr.w	r7, [sp], #4
240144b2:	4770      	bx	lr

240144b4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
240144b4:	b580      	push	{r7, lr}
240144b6:	b084      	sub	sp, #16
240144b8:	af00      	add	r7, sp, #0
240144ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
240144bc:	4b19      	ldr	r3, [pc, #100]	@ (24014524 <HAL_PWREx_ConfigSupply+0x70>)
240144be:	68db      	ldr	r3, [r3, #12]
240144c0:	f003 0304 	and.w	r3, r3, #4
240144c4:	2b04      	cmp	r3, #4
240144c6:	d00a      	beq.n	240144de <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
240144c8:	4b16      	ldr	r3, [pc, #88]	@ (24014524 <HAL_PWREx_ConfigSupply+0x70>)
240144ca:	68db      	ldr	r3, [r3, #12]
240144cc:	f003 0307 	and.w	r3, r3, #7
240144d0:	687a      	ldr	r2, [r7, #4]
240144d2:	429a      	cmp	r2, r3
240144d4:	d001      	beq.n	240144da <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
240144d6:	2301      	movs	r3, #1
240144d8:	e01f      	b.n	2401451a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
240144da:	2300      	movs	r3, #0
240144dc:	e01d      	b.n	2401451a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
240144de:	4b11      	ldr	r3, [pc, #68]	@ (24014524 <HAL_PWREx_ConfigSupply+0x70>)
240144e0:	68db      	ldr	r3, [r3, #12]
240144e2:	f023 0207 	bic.w	r2, r3, #7
240144e6:	490f      	ldr	r1, [pc, #60]	@ (24014524 <HAL_PWREx_ConfigSupply+0x70>)
240144e8:	687b      	ldr	r3, [r7, #4]
240144ea:	4313      	orrs	r3, r2
240144ec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
240144ee:	f7ee fbff 	bl	24002cf0 <HAL_GetTick>
240144f2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
240144f4:	e009      	b.n	2401450a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
240144f6:	f7ee fbfb 	bl	24002cf0 <HAL_GetTick>
240144fa:	4602      	mov	r2, r0
240144fc:	68fb      	ldr	r3, [r7, #12]
240144fe:	1ad3      	subs	r3, r2, r3
24014500:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
24014504:	d901      	bls.n	2401450a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
24014506:	2301      	movs	r3, #1
24014508:	e007      	b.n	2401451a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
2401450a:	4b06      	ldr	r3, [pc, #24]	@ (24014524 <HAL_PWREx_ConfigSupply+0x70>)
2401450c:	685b      	ldr	r3, [r3, #4]
2401450e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
24014512:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
24014516:	d1ee      	bne.n	240144f6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
24014518:	2300      	movs	r3, #0
}
2401451a:	4618      	mov	r0, r3
2401451c:	3710      	adds	r7, #16
2401451e:	46bd      	mov	sp, r7
24014520:	bd80      	pop	{r7, pc}
24014522:	bf00      	nop
24014524:	58024800 	.word	0x58024800

24014528 <HAL_PWREx_GetSupplyConfig>:
/**
  * @brief Get the power supply configuration.
  * @retval The supply configuration.
  */
uint32_t HAL_PWREx_GetSupplyConfig (void)
{
24014528:	b480      	push	{r7}
2401452a:	af00      	add	r7, sp, #0
  return (PWR->CR3 & PWR_SUPPLY_CONFIG_MASK);
2401452c:	4b04      	ldr	r3, [pc, #16]	@ (24014540 <HAL_PWREx_GetSupplyConfig+0x18>)
2401452e:	68db      	ldr	r3, [r3, #12]
24014530:	f003 0307 	and.w	r3, r3, #7
}
24014534:	4618      	mov	r0, r3
24014536:	46bd      	mov	sp, r7
24014538:	f85d 7b04 	ldr.w	r7, [sp], #4
2401453c:	4770      	bx	lr
2401453e:	bf00      	nop
24014540:	58024800 	.word	0x58024800

24014544 <HAL_PWREx_ControlVoltageScaling>:
  *         Voltage Scale 0 then first switch to Voltage Scale 1 before entering
  *         low power mode.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling (uint32_t VoltageScaling)
{
24014544:	b580      	push	{r7, lr}
24014546:	b084      	sub	sp, #16
24014548:	af00      	add	r7, sp, #0
2401454a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR_VOLTAGE (VoltageScaling));

  /* Get the voltage scaling  */
  if ((PWR->CSR1 & PWR_CSR1_ACTVOS) == VoltageScaling)
2401454c:	4b15      	ldr	r3, [pc, #84]	@ (240145a4 <HAL_PWREx_ControlVoltageScaling+0x60>)
2401454e:	685b      	ldr	r3, [r3, #4]
24014550:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
24014554:	687a      	ldr	r2, [r7, #4]
24014556:	429a      	cmp	r2, r3
24014558:	d101      	bne.n	2401455e <HAL_PWREx_ControlVoltageScaling+0x1a>
  {
    /* Old and new voltage scaling configuration match : nothing to do */
    return HAL_OK;
2401455a:	2300      	movs	r3, #0
2401455c:	e01d      	b.n	2401459a <HAL_PWREx_ControlVoltageScaling+0x56>
    /* Set the voltage range */
    MODIFY_REG (PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
  }
#else  /* STM32H72xxx and STM32H73xxx lines */
  /* Set the voltage range */
  MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
2401455e:	4b11      	ldr	r3, [pc, #68]	@ (240145a4 <HAL_PWREx_ControlVoltageScaling+0x60>)
24014560:	699b      	ldr	r3, [r3, #24]
24014562:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
24014566:	490f      	ldr	r1, [pc, #60]	@ (240145a4 <HAL_PWREx_ControlVoltageScaling+0x60>)
24014568:	687b      	ldr	r3, [r7, #4]
2401456a:	4313      	orrs	r3, r2
2401456c:	618b      	str	r3, [r1, #24]
#endif /* defined (SYSCFG_PWRCR_ODEN) */
#endif /* defined (PWR_SRDCR_VOS) */

  /* Get tick */
  tickstart = HAL_GetTick ();
2401456e:	f7ee fbbf 	bl	24002cf0 <HAL_GetTick>
24014572:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
24014574:	e009      	b.n	2401458a <HAL_PWREx_ControlVoltageScaling+0x46>
  {
    if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
24014576:	f7ee fbbb 	bl	24002cf0 <HAL_GetTick>
2401457a:	4602      	mov	r2, r0
2401457c:	68fb      	ldr	r3, [r7, #12]
2401457e:	1ad3      	subs	r3, r2, r3
24014580:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
24014584:	d901      	bls.n	2401458a <HAL_PWREx_ControlVoltageScaling+0x46>
    {
      return HAL_ERROR;
24014586:	2301      	movs	r3, #1
24014588:	e007      	b.n	2401459a <HAL_PWREx_ControlVoltageScaling+0x56>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
2401458a:	4b06      	ldr	r3, [pc, #24]	@ (240145a4 <HAL_PWREx_ControlVoltageScaling+0x60>)
2401458c:	685b      	ldr	r3, [r3, #4]
2401458e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
24014592:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
24014596:	d1ee      	bne.n	24014576 <HAL_PWREx_ControlVoltageScaling+0x32>
    }
  }

  return HAL_OK;
24014598:	2300      	movs	r3, #0
}
2401459a:	4618      	mov	r0, r3
2401459c:	3710      	adds	r7, #16
2401459e:	46bd      	mov	sp, r7
240145a0:	bd80      	pop	{r7, pc}
240145a2:	bf00      	nop
240145a4:	58024800 	.word	0x58024800

240145a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Get the main internal regulator output voltage. Reflecting the last
  *        VOS value applied to the PMU.
  * @retval The current applied VOS selection.
  */
uint32_t HAL_PWREx_GetVoltageRange (void)
{
240145a8:	b480      	push	{r7}
240145aa:	af00      	add	r7, sp, #0
  /* Get the active voltage scaling */
  return (PWR->CSR1 & PWR_CSR1_ACTVOS);
240145ac:	4b04      	ldr	r3, [pc, #16]	@ (240145c0 <HAL_PWREx_GetVoltageRange+0x18>)
240145ae:	685b      	ldr	r3, [r3, #4]
240145b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
240145b4:	4618      	mov	r0, r3
240145b6:	46bd      	mov	sp, r7
240145b8:	f85d 7b04 	ldr.w	r7, [sp], #4
240145bc:	4770      	bx	lr
240145be:	bf00      	nop
240145c0:	58024800 	.word	0x58024800

240145c4 <HAL_PWREx_ControlStopModeVoltageScaling>:
  * @note   The selected SVOS4 and SVOS5 levels add an additional startup delay
  *         when exiting from system Stop mode.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlStopModeVoltageScaling (uint32_t VoltageScaling)
{
240145c4:	b480      	push	{r7}
240145c6:	b083      	sub	sp, #12
240145c8:	af00      	add	r7, sp, #0
240145ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_STOP_MODE_REGULATOR_VOLTAGE (VoltageScaling));

  /* Return the stop mode voltage range */
  MODIFY_REG (PWR->CR1, PWR_CR1_SVOS, VoltageScaling);
240145cc:	4b07      	ldr	r3, [pc, #28]	@ (240145ec <HAL_PWREx_ControlStopModeVoltageScaling+0x28>)
240145ce:	681b      	ldr	r3, [r3, #0]
240145d0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
240145d4:	4905      	ldr	r1, [pc, #20]	@ (240145ec <HAL_PWREx_ControlStopModeVoltageScaling+0x28>)
240145d6:	687b      	ldr	r3, [r7, #4]
240145d8:	4313      	orrs	r3, r2
240145da:	600b      	str	r3, [r1, #0]

  return HAL_OK;
240145dc:	2300      	movs	r3, #0
}
240145de:	4618      	mov	r0, r3
240145e0:	370c      	adds	r7, #12
240145e2:	46bd      	mov	sp, r7
240145e4:	f85d 7b04 	ldr.w	r7, [sp], #4
240145e8:	4770      	bx	lr
240145ea:	bf00      	nop
240145ec:	58024800 	.word	0x58024800

240145f0 <HAL_PWREx_GetStopModeVoltageRange>:
/**
  * @brief Get the main internal regulator output voltage in STOP mode.
  * @retval The actual applied VOS selection.
  */
uint32_t HAL_PWREx_GetStopModeVoltageRange (void)
{
240145f0:	b480      	push	{r7}
240145f2:	af00      	add	r7, sp, #0
  /* Return the stop voltage scaling */
  return (PWR->CR1 & PWR_CR1_SVOS);
240145f4:	4b04      	ldr	r3, [pc, #16]	@ (24014608 <HAL_PWREx_GetStopModeVoltageRange+0x18>)
240145f6:	681b      	ldr	r3, [r3, #0]
240145f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
240145fc:	4618      	mov	r0, r3
240145fe:	46bd      	mov	sp, r7
24014600:	f85d 7b04 	ldr.w	r7, [sp], #4
24014604:	4770      	bx	lr
24014606:	bf00      	nop
24014608:	58024800 	.word	0x58024800

2401460c <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
2401460c:	b480      	push	{r7}
2401460e:	b085      	sub	sp, #20
24014610:	af00      	add	r7, sp, #0
24014612:	60f8      	str	r0, [r7, #12]
24014614:	460b      	mov	r3, r1
24014616:	607a      	str	r2, [r7, #4]
24014618:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
2401461a:	4b20      	ldr	r3, [pc, #128]	@ (2401469c <HAL_PWREx_EnterSTOPMode+0x90>)
2401461c:	681b      	ldr	r3, [r3, #0]
2401461e:	f023 0201 	bic.w	r2, r3, #1
24014622:	491e      	ldr	r1, [pc, #120]	@ (2401469c <HAL_PWREx_EnterSTOPMode+0x90>)
24014624:	68fb      	ldr	r3, [r7, #12]
24014626:	4313      	orrs	r3, r2
24014628:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
2401462a:	687b      	ldr	r3, [r7, #4]
2401462c:	2b00      	cmp	r3, #0
2401462e:	d11e      	bne.n	2401466e <HAL_PWREx_EnterSTOPMode+0x62>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
24014630:	4b1a      	ldr	r3, [pc, #104]	@ (2401469c <HAL_PWREx_EnterSTOPMode+0x90>)
24014632:	691b      	ldr	r3, [r3, #16]
24014634:	4a19      	ldr	r2, [pc, #100]	@ (2401469c <HAL_PWREx_EnterSTOPMode+0x90>)
24014636:	f023 0301 	bic.w	r3, r3, #1
2401463a:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
2401463c:	4b18      	ldr	r3, [pc, #96]	@ (240146a0 <HAL_PWREx_EnterSTOPMode+0x94>)
2401463e:	691b      	ldr	r3, [r3, #16]
24014640:	4a17      	ldr	r2, [pc, #92]	@ (240146a0 <HAL_PWREx_EnterSTOPMode+0x94>)
24014642:	f043 0304 	orr.w	r3, r3, #4
24014646:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
24014648:	f3bf 8f4f 	dsb	sy
}
2401464c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
2401464e:	f3bf 8f6f 	isb	sy
}
24014652:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
24014654:	7afb      	ldrb	r3, [r7, #11]
24014656:	2b01      	cmp	r3, #1
24014658:	d101      	bne.n	2401465e <HAL_PWREx_EnterSTOPMode+0x52>
    {
      /* Request Wait For Interrupt */
      __WFI ();
2401465a:	bf30      	wfi
2401465c:	e000      	b.n	24014660 <HAL_PWREx_EnterSTOPMode+0x54>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
2401465e:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
24014660:	4b0f      	ldr	r3, [pc, #60]	@ (240146a0 <HAL_PWREx_EnterSTOPMode+0x94>)
24014662:	691b      	ldr	r3, [r3, #16]
24014664:	4a0e      	ldr	r2, [pc, #56]	@ (240146a0 <HAL_PWREx_EnterSTOPMode+0x94>)
24014666:	f023 0304 	bic.w	r3, r3, #4
2401466a:	6113      	str	r3, [r2, #16]
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
2401466c:	e00f      	b.n	2401468e <HAL_PWREx_EnterSTOPMode+0x82>
  else if (Domain == PWR_D2_DOMAIN)
2401466e:	687b      	ldr	r3, [r7, #4]
24014670:	2b01      	cmp	r3, #1
24014672:	d106      	bne.n	24014682 <HAL_PWREx_EnterSTOPMode+0x76>
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
24014674:	4b09      	ldr	r3, [pc, #36]	@ (2401469c <HAL_PWREx_EnterSTOPMode+0x90>)
24014676:	691b      	ldr	r3, [r3, #16]
24014678:	4a08      	ldr	r2, [pc, #32]	@ (2401469c <HAL_PWREx_EnterSTOPMode+0x90>)
2401467a:	f023 0302 	bic.w	r3, r3, #2
2401467e:	6113      	str	r3, [r2, #16]
}
24014680:	e005      	b.n	2401468e <HAL_PWREx_EnterSTOPMode+0x82>
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
24014682:	4b06      	ldr	r3, [pc, #24]	@ (2401469c <HAL_PWREx_EnterSTOPMode+0x90>)
24014684:	691b      	ldr	r3, [r3, #16]
24014686:	4a05      	ldr	r2, [pc, #20]	@ (2401469c <HAL_PWREx_EnterSTOPMode+0x90>)
24014688:	f023 0304 	bic.w	r3, r3, #4
2401468c:	6113      	str	r3, [r2, #16]
}
2401468e:	bf00      	nop
24014690:	3714      	adds	r7, #20
24014692:	46bd      	mov	sp, r7
24014694:	f85d 7b04 	ldr.w	r7, [sp], #4
24014698:	4770      	bx	lr
2401469a:	bf00      	nop
2401469c:	58024800 	.word	0x58024800
240146a0:	e000ed00 	.word	0xe000ed00

240146a4 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
240146a4:	b480      	push	{r7}
240146a6:	af00      	add	r7, sp, #0
  {
    __SEV ();
    __WFE ();
  }
#else
  __WFE ();
240146a8:	bf20      	wfe
#endif /* defined (DUAL_CORE) */
}
240146aa:	bf00      	nop
240146ac:	46bd      	mov	sp, r7
240146ae:	f85d 7b04 	ldr.w	r7, [sp], #4
240146b2:	4770      	bx	lr

240146b4 <HAL_PWREx_EnterSTANDBYMode>:
  *            @arg PWR_D2_DOMAIN: Enter D2 Domain to DSTANDBY mode.
  *            @arg PWR_D3_DOMAIN: Enter D3/SRD Domain to DSTANDBY mode.
  * @retval None
  */
void HAL_PWREx_EnterSTANDBYMode (uint32_t Domain)
{
240146b4:	b480      	push	{r7}
240146b6:	b083      	sub	sp, #12
240146b8:	af00      	add	r7, sp, #0
240146ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
240146bc:	687b      	ldr	r3, [r7, #4]
240146be:	2b00      	cmp	r3, #0
240146c0:	d10d      	bne.n	240146de <HAL_PWREx_EnterSTANDBYMode+0x2a>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Allow DSTANDBY mode when D1/CD domain enters Deepsleep */
    SET_BIT (PWR-> CPUCR, PWR_CPUCR_PDDS_D1);
240146c2:	4b12      	ldr	r3, [pc, #72]	@ (2401470c <HAL_PWREx_EnterSTANDBYMode+0x58>)
240146c4:	691b      	ldr	r3, [r3, #16]
240146c6:	4a11      	ldr	r2, [pc, #68]	@ (2401470c <HAL_PWREx_EnterSTANDBYMode+0x58>)
240146c8:	f043 0301 	orr.w	r3, r3, #1
240146cc:	6113      	str	r3, [r2, #16]
    /* Allow DSTANDBY mode when D1/CD domain enters Deepsleep */
    SET_BIT (PWR-> CPU2CR, PWR_CPU2CR_PDDS_D1);
#endif /*DUAL_CORE*/

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
240146ce:	4b10      	ldr	r3, [pc, #64]	@ (24014710 <HAL_PWREx_EnterSTANDBYMode+0x5c>)
240146d0:	691b      	ldr	r3, [r3, #16]
240146d2:	4a0f      	ldr	r2, [pc, #60]	@ (24014710 <HAL_PWREx_EnterSTANDBYMode+0x5c>)
240146d4:	f043 0304 	orr.w	r3, r3, #4
240146d8:	6113      	str	r3, [r2, #16]
#if defined (__CC_ARM)
    __force_stores ();
#endif /* defined (__CC_ARM) */

    /* Request Wait For Interrupt */
    __WFI ();
240146da:	bf30      	wfi
#if defined (DUAL_CORE)
    /* Allow DSTANDBY mode when D3/SRD domain enters Deepsleep */
    SET_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
#endif /* defined (DUAL_CORE) */
  }
}
240146dc:	e00f      	b.n	240146fe <HAL_PWREx_EnterSTANDBYMode+0x4a>
  else if (Domain == PWR_D2_DOMAIN)
240146de:	687b      	ldr	r3, [r7, #4]
240146e0:	2b01      	cmp	r3, #1
240146e2:	d106      	bne.n	240146f2 <HAL_PWREx_EnterSTANDBYMode+0x3e>
    SET_BIT (PWR-> CPUCR, PWR_CPUCR_PDDS_D2);
240146e4:	4b09      	ldr	r3, [pc, #36]	@ (2401470c <HAL_PWREx_EnterSTANDBYMode+0x58>)
240146e6:	691b      	ldr	r3, [r3, #16]
240146e8:	4a08      	ldr	r2, [pc, #32]	@ (2401470c <HAL_PWREx_EnterSTANDBYMode+0x58>)
240146ea:	f043 0302 	orr.w	r3, r3, #2
240146ee:	6113      	str	r3, [r2, #16]
}
240146f0:	e005      	b.n	240146fe <HAL_PWREx_EnterSTANDBYMode+0x4a>
    SET_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
240146f2:	4b06      	ldr	r3, [pc, #24]	@ (2401470c <HAL_PWREx_EnterSTANDBYMode+0x58>)
240146f4:	691b      	ldr	r3, [r3, #16]
240146f6:	4a05      	ldr	r2, [pc, #20]	@ (2401470c <HAL_PWREx_EnterSTANDBYMode+0x58>)
240146f8:	f043 0304 	orr.w	r3, r3, #4
240146fc:	6113      	str	r3, [r2, #16]
}
240146fe:	bf00      	nop
24014700:	370c      	adds	r7, #12
24014702:	46bd      	mov	sp, r7
24014704:	f85d 7b04 	ldr.w	r7, [sp], #4
24014708:	4770      	bx	lr
2401470a:	bf00      	nop
2401470c:	58024800 	.word	0x58024800
24014710:	e000ed00 	.word	0xe000ed00

24014714 <HAL_PWREx_ConfigD3Domain>:
  *                                     regardless of the CPU sub-system low
  *                                     power mode.
  * @retval None
  */
void HAL_PWREx_ConfigD3Domain (uint32_t D3State)
{
24014714:	b480      	push	{r7}
24014716:	b083      	sub	sp, #12
24014718:	af00      	add	r7, sp, #0
2401471a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param (IS_D3_STATE (D3State));

  /* Keep D3/SRD in run mode */
  MODIFY_REG (PWR->CPUCR, PWR_CPUCR_RUN_D3, D3State);
2401471c:	4b06      	ldr	r3, [pc, #24]	@ (24014738 <HAL_PWREx_ConfigD3Domain+0x24>)
2401471e:	691b      	ldr	r3, [r3, #16]
24014720:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
24014724:	4904      	ldr	r1, [pc, #16]	@ (24014738 <HAL_PWREx_ConfigD3Domain+0x24>)
24014726:	687b      	ldr	r3, [r7, #4]
24014728:	4313      	orrs	r3, r2
2401472a:	610b      	str	r3, [r1, #16]
}
2401472c:	bf00      	nop
2401472e:	370c      	adds	r7, #12
24014730:	46bd      	mov	sp, r7
24014732:	f85d 7b04 	ldr.w	r7, [sp], #4
24014736:	4770      	bx	lr
24014738:	58024800 	.word	0x58024800

2401473c <HAL_PWREx_EnableFlashPowerDown>:
  *         obtain the best trade-off between low-power consumption and restart
  *         time when exiting from DStop mode.
  * @retval None.
  */
void HAL_PWREx_EnableFlashPowerDown (void)
{
2401473c:	b480      	push	{r7}
2401473e:	af00      	add	r7, sp, #0
  /* Enable the Flash Power Down */
  SET_BIT (PWR->CR1, PWR_CR1_FLPS);
24014740:	4b05      	ldr	r3, [pc, #20]	@ (24014758 <HAL_PWREx_EnableFlashPowerDown+0x1c>)
24014742:	681b      	ldr	r3, [r3, #0]
24014744:	4a04      	ldr	r2, [pc, #16]	@ (24014758 <HAL_PWREx_EnableFlashPowerDown+0x1c>)
24014746:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
2401474a:	6013      	str	r3, [r2, #0]
}
2401474c:	bf00      	nop
2401474e:	46bd      	mov	sp, r7
24014750:	f85d 7b04 	ldr.w	r7, [sp], #4
24014754:	4770      	bx	lr
24014756:	bf00      	nop
24014758:	58024800 	.word	0x58024800

2401475c <HAL_PWREx_DisableFlashPowerDown>:
  *         to obtain the best trade-off between low-power consumption and
  *         restart time when exiting from DStop mode.
  * @retval None.
  */
void HAL_PWREx_DisableFlashPowerDown (void)
{
2401475c:	b480      	push	{r7}
2401475e:	af00      	add	r7, sp, #0
  /* Disable the Flash Power Down */
  CLEAR_BIT (PWR->CR1, PWR_CR1_FLPS);
24014760:	4b05      	ldr	r3, [pc, #20]	@ (24014778 <HAL_PWREx_DisableFlashPowerDown+0x1c>)
24014762:	681b      	ldr	r3, [r3, #0]
24014764:	4a04      	ldr	r2, [pc, #16]	@ (24014778 <HAL_PWREx_DisableFlashPowerDown+0x1c>)
24014766:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
2401476a:	6013      	str	r3, [r2, #0]
}
2401476c:	bf00      	nop
2401476e:	46bd      	mov	sp, r7
24014770:	f85d 7b04 	ldr.w	r7, [sp], #4
24014774:	4770      	bx	lr
24014776:	bf00      	nop
24014778:	58024800 	.word	0x58024800

2401477c <HAL_PWREx_EnableWakeUpPin>:
  *         Cortex-M7, wake up only Cortex-M4 and wake up Cortex-M7 and
  *         Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_EnableWakeUpPin (PWREx_WakeupPinTypeDef *sPinParams)
{
2401477c:	b480      	push	{r7}
2401477e:	b093      	sub	sp, #76	@ 0x4c
24014780:	af00      	add	r7, sp, #0
24014782:	6078      	str	r0, [r7, #4]
  uint32_t pinConfig;
  uint32_t regMask;
  const uint32_t pullMask = PWR_WKUPEPR_WKUPPUPD1;
24014784:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
24014788:	647b      	str	r3, [r7, #68]	@ 0x44
  /* Check the parameters */
  assert_param (IS_PWR_WAKEUP_PIN (sPinParams->WakeUpPin));
  assert_param (IS_PWR_WAKEUP_PIN_POLARITY (sPinParams->PinPolarity));
  assert_param (IS_PWR_WAKEUP_PIN_PULL (sPinParams->PinPull));

  pinConfig = sPinParams->WakeUpPin | \
2401478a:	687b      	ldr	r3, [r7, #4]
2401478c:	681a      	ldr	r2, [r3, #0]
              (sPinParams->PinPolarity << ((POSITION_VAL(sPinParams->WakeUpPin) + PWR_WKUPEPR_WKUPP1_Pos) & 0x1FU)) | \
2401478e:	687b      	ldr	r3, [r7, #4]
24014790:	6859      	ldr	r1, [r3, #4]
24014792:	687b      	ldr	r3, [r7, #4]
24014794:	681b      	ldr	r3, [r3, #0]
24014796:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
24014798:	693b      	ldr	r3, [r7, #16]
2401479a:	fa93 f3a3 	rbit	r3, r3
2401479e:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
240147a0:	68fb      	ldr	r3, [r7, #12]
240147a2:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
240147a4:	697b      	ldr	r3, [r7, #20]
240147a6:	2b00      	cmp	r3, #0
240147a8:	d101      	bne.n	240147ae <HAL_PWREx_EnableWakeUpPin+0x32>
  {
    return 32U;
240147aa:	2320      	movs	r3, #32
240147ac:	e003      	b.n	240147b6 <HAL_PWREx_EnableWakeUpPin+0x3a>
  }
  return __builtin_clz(value);
240147ae:	697b      	ldr	r3, [r7, #20]
240147b0:	fab3 f383 	clz	r3, r3
240147b4:	b2db      	uxtb	r3, r3
240147b6:	3308      	adds	r3, #8
240147b8:	f003 031f 	and.w	r3, r3, #31
240147bc:	fa01 f303 	lsl.w	r3, r1, r3
  pinConfig = sPinParams->WakeUpPin | \
240147c0:	431a      	orrs	r2, r3
              (sPinParams->PinPull << (((POSITION_VAL(sPinParams->WakeUpPin) * PWR_WAKEUP_PINS_PULL_SHIFT_OFFSET) + PWR_WKUPEPR_WKUPPUPD1_Pos) & 0x1FU));
240147c2:	687b      	ldr	r3, [r7, #4]
240147c4:	6899      	ldr	r1, [r3, #8]
240147c6:	687b      	ldr	r3, [r7, #4]
240147c8:	681b      	ldr	r3, [r3, #0]
240147ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
240147cc:	69fb      	ldr	r3, [r7, #28]
240147ce:	fa93 f3a3 	rbit	r3, r3
240147d2:	61bb      	str	r3, [r7, #24]
  return result;
240147d4:	69bb      	ldr	r3, [r7, #24]
240147d6:	623b      	str	r3, [r7, #32]
  if (value == 0U)
240147d8:	6a3b      	ldr	r3, [r7, #32]
240147da:	2b00      	cmp	r3, #0
240147dc:	d101      	bne.n	240147e2 <HAL_PWREx_EnableWakeUpPin+0x66>
    return 32U;
240147de:	2320      	movs	r3, #32
240147e0:	e003      	b.n	240147ea <HAL_PWREx_EnableWakeUpPin+0x6e>
  return __builtin_clz(value);
240147e2:	6a3b      	ldr	r3, [r7, #32]
240147e4:	fab3 f383 	clz	r3, r3
240147e8:	b2db      	uxtb	r3, r3
240147ea:	3308      	adds	r3, #8
240147ec:	005b      	lsls	r3, r3, #1
240147ee:	f003 031e 	and.w	r3, r3, #30
240147f2:	fa01 f303 	lsl.w	r3, r1, r3
  pinConfig = sPinParams->WakeUpPin | \
240147f6:	4313      	orrs	r3, r2
240147f8:	643b      	str	r3, [r7, #64]	@ 0x40

  regMask   = sPinParams->WakeUpPin | \
240147fa:	687b      	ldr	r3, [r7, #4]
240147fc:	681a      	ldr	r2, [r3, #0]
              (PWR_WKUPEPR_WKUPP1 << (POSITION_VAL(sPinParams->WakeUpPin) & 0x1FU)) | \
240147fe:	687b      	ldr	r3, [r7, #4]
24014800:	681b      	ldr	r3, [r3, #0]
24014802:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
24014804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
24014806:	fa93 f3a3 	rbit	r3, r3
2401480a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
2401480c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2401480e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
24014810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
24014812:	2b00      	cmp	r3, #0
24014814:	d101      	bne.n	2401481a <HAL_PWREx_EnableWakeUpPin+0x9e>
    return 32U;
24014816:	2320      	movs	r3, #32
24014818:	e003      	b.n	24014822 <HAL_PWREx_EnableWakeUpPin+0xa6>
  return __builtin_clz(value);
2401481a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
2401481c:	fab3 f383 	clz	r3, r3
24014820:	b2db      	uxtb	r3, r3
24014822:	f003 031f 	and.w	r3, r3, #31
24014826:	f44f 7180 	mov.w	r1, #256	@ 0x100
2401482a:	fa01 f303 	lsl.w	r3, r1, r3
  regMask   = sPinParams->WakeUpPin | \
2401482e:	431a      	orrs	r2, r3
              (pullMask << ((POSITION_VAL(sPinParams->WakeUpPin) * PWR_WAKEUP_PINS_PULL_SHIFT_OFFSET) & 0x1FU));
24014830:	687b      	ldr	r3, [r7, #4]
24014832:	681b      	ldr	r3, [r3, #0]
24014834:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
24014836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
24014838:	fa93 f3a3 	rbit	r3, r3
2401483c:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
2401483e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
24014840:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
24014842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24014844:	2b00      	cmp	r3, #0
24014846:	d101      	bne.n	2401484c <HAL_PWREx_EnableWakeUpPin+0xd0>
    return 32U;
24014848:	2320      	movs	r3, #32
2401484a:	e003      	b.n	24014854 <HAL_PWREx_EnableWakeUpPin+0xd8>
  return __builtin_clz(value);
2401484c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
2401484e:	fab3 f383 	clz	r3, r3
24014852:	b2db      	uxtb	r3, r3
24014854:	005b      	lsls	r3, r3, #1
24014856:	f003 031e 	and.w	r3, r3, #30
2401485a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
2401485c:	fa01 f303 	lsl.w	r3, r1, r3
  regMask   = sPinParams->WakeUpPin | \
24014860:	4313      	orrs	r3, r2
24014862:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Enable and Specify the Wake-Up pin polarity and the pull configuration
     for the event detection (rising or falling edge) */
  MODIFY_REG (PWR->WKUPEPR, regMask, pinConfig);
24014864:	4b0e      	ldr	r3, [pc, #56]	@ (240148a0 <HAL_PWREx_EnableWakeUpPin+0x124>)
24014866:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
24014868:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
2401486a:	43db      	mvns	r3, r3
2401486c:	401a      	ands	r2, r3
2401486e:	490c      	ldr	r1, [pc, #48]	@ (240148a0 <HAL_PWREx_EnableWakeUpPin+0x124>)
24014870:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
24014872:	4313      	orrs	r3, r2
24014874:	628b      	str	r3, [r1, #40]	@ 0x28
#ifndef DUAL_CORE
  /* Configure the Wakeup Pin EXTI Line */
  MODIFY_REG (EXTI->IMR2, PWR_EXTI_WAKEUP_PINS_MASK, (sPinParams->WakeUpPin << EXTI_IMR2_IM55_Pos));
24014876:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
2401487a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
2401487e:	f023 52ac 	bic.w	r2, r3, #360710144	@ 0x15800000
24014882:	687b      	ldr	r3, [r7, #4]
24014884:	681b      	ldr	r3, [r3, #0]
24014886:	05db      	lsls	r3, r3, #23
24014888:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
2401488c:	4313      	orrs	r3, r2
2401488e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
#endif /* !DUAL_CORE */
}
24014892:	bf00      	nop
24014894:	374c      	adds	r7, #76	@ 0x4c
24014896:	46bd      	mov	sp, r7
24014898:	f85d 7b04 	ldr.w	r7, [sp], #4
2401489c:	4770      	bx	lr
2401489e:	bf00      	nop
240148a0:	58024800 	.word	0x58024800

240148a4 <HAL_PWREx_DisableWakeUpPin>:
  * @note   The PWR_WAKEUP_PIN3 and PWR_WAKEUP_PIN5 are available only for
  *         devices that support GPIOI port.
  * @retval None
  */
void HAL_PWREx_DisableWakeUpPin (uint32_t WakeUpPin)
{
240148a4:	b480      	push	{r7}
240148a6:	b083      	sub	sp, #12
240148a8:	af00      	add	r7, sp, #0
240148aa:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param (IS_PWR_WAKEUP_PIN (WakeUpPin));

  /* Disable the WakeUpPin */
  CLEAR_BIT (PWR->WKUPEPR, WakeUpPin);
240148ac:	4b06      	ldr	r3, [pc, #24]	@ (240148c8 <HAL_PWREx_DisableWakeUpPin+0x24>)
240148ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
240148b0:	687b      	ldr	r3, [r7, #4]
240148b2:	43db      	mvns	r3, r3
240148b4:	4904      	ldr	r1, [pc, #16]	@ (240148c8 <HAL_PWREx_DisableWakeUpPin+0x24>)
240148b6:	4013      	ands	r3, r2
240148b8:	628b      	str	r3, [r1, #40]	@ 0x28
}
240148ba:	bf00      	nop
240148bc:	370c      	adds	r7, #12
240148be:	46bd      	mov	sp, r7
240148c0:	f85d 7b04 	ldr.w	r7, [sp], #4
240148c4:	4770      	bx	lr
240148c6:	bf00      	nop
240148c8:	58024800 	.word	0x58024800

240148cc <HAL_PWREx_GetWakeupFlag>:
  * @note   The PWR_WAKEUP_FLAG3 and PWR_WAKEUP_FLAG5 are available only for
  *         devices that support GPIOI port.
  * @retval The Wake-Up pin flag.
  */
uint32_t HAL_PWREx_GetWakeupFlag (uint32_t WakeUpFlag)
{
240148cc:	b480      	push	{r7}
240148ce:	b083      	sub	sp, #12
240148d0:	af00      	add	r7, sp, #0
240148d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_WAKEUP_FLAG (WakeUpFlag));

  /* Return the wake up pin flag */
  return (PWR->WKUPFR & WakeUpFlag);
240148d4:	4b04      	ldr	r3, [pc, #16]	@ (240148e8 <HAL_PWREx_GetWakeupFlag+0x1c>)
240148d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
240148d8:	687b      	ldr	r3, [r7, #4]
240148da:	4013      	ands	r3, r2
}
240148dc:	4618      	mov	r0, r3
240148de:	370c      	adds	r7, #12
240148e0:	46bd      	mov	sp, r7
240148e2:	f85d 7b04 	ldr.w	r7, [sp], #4
240148e6:	4770      	bx	lr
240148e8:	58024800 	.word	0x58024800

240148ec <HAL_PWREx_ClearWakeupFlag>:
  * @note   The PWR_WAKEUP_FLAG3 and PWR_WAKEUP_FLAG5 are available only for
  *         devices that support GPIOI port.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ClearWakeupFlag (uint32_t WakeUpFlag)
{
240148ec:	b480      	push	{r7}
240148ee:	b083      	sub	sp, #12
240148f0:	af00      	add	r7, sp, #0
240148f2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param (IS_PWR_WAKEUP_FLAG (WakeUpFlag));

  /* Clear the wake up event received from wake up pin x */
  SET_BIT (PWR->WKUPCR, WakeUpFlag);
240148f4:	4b0a      	ldr	r3, [pc, #40]	@ (24014920 <HAL_PWREx_ClearWakeupFlag+0x34>)
240148f6:	6a1a      	ldr	r2, [r3, #32]
240148f8:	4909      	ldr	r1, [pc, #36]	@ (24014920 <HAL_PWREx_ClearWakeupFlag+0x34>)
240148fa:	687b      	ldr	r3, [r7, #4]
240148fc:	4313      	orrs	r3, r2
240148fe:	620b      	str	r3, [r1, #32]

  /* Check if the wake up event is well cleared */
  if ((PWR->WKUPFR & WakeUpFlag) != 0U)
24014900:	4b07      	ldr	r3, [pc, #28]	@ (24014920 <HAL_PWREx_ClearWakeupFlag+0x34>)
24014902:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
24014904:	687b      	ldr	r3, [r7, #4]
24014906:	4013      	ands	r3, r2
24014908:	2b00      	cmp	r3, #0
2401490a:	d001      	beq.n	24014910 <HAL_PWREx_ClearWakeupFlag+0x24>
  {
    return HAL_ERROR;
2401490c:	2301      	movs	r3, #1
2401490e:	e000      	b.n	24014912 <HAL_PWREx_ClearWakeupFlag+0x26>
  }

  return HAL_OK;
24014910:	2300      	movs	r3, #0
}
24014912:	4618      	mov	r0, r3
24014914:	370c      	adds	r7, #12
24014916:	46bd      	mov	sp, r7
24014918:	f85d 7b04 	ldr.w	r7, [sp], #4
2401491c:	4770      	bx	lr
2401491e:	bf00      	nop
24014920:	58024800 	.word	0x58024800

24014924 <HAL_PWREx_WAKEUP_PIN_IRQHandler>:
  * @brief This function handles the PWR WAKEUP PIN interrupt request.
  * @note   This API should be called under the WAKEUP_PIN_IRQHandler().
  * @retval None.
  */
void HAL_PWREx_WAKEUP_PIN_IRQHandler (void)
{
24014924:	b580      	push	{r7, lr}
24014926:	af00      	add	r7, sp, #0
  /* Wakeup pin EXTI line interrupt detected */
  if (READ_BIT(PWR->WKUPFR, PWR_WKUPFR_WKUPF1) != 0U)
24014928:	4b1b      	ldr	r3, [pc, #108]	@ (24014998 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x74>)
2401492a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2401492c:	f003 0301 	and.w	r3, r3, #1
24014930:	2b00      	cmp	r3, #0
24014932:	d008      	beq.n	24014946 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x22>
  {
    /* Clear PWR WKUPF1 flag */
    __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP1);
24014934:	4b18      	ldr	r3, [pc, #96]	@ (24014998 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x74>)
24014936:	6a1b      	ldr	r3, [r3, #32]
24014938:	4a17      	ldr	r2, [pc, #92]	@ (24014998 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x74>)
2401493a:	f043 0301 	orr.w	r3, r3, #1
2401493e:	6213      	str	r3, [r2, #32]

    /* PWR WKUP1 interrupt user callback */
    HAL_PWREx_WKUP1_Callback ();
24014940:	f000 f82c 	bl	2401499c <HAL_PWREx_WKUP1_Callback>
    __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP6);

    /* PWR WKUP6 interrupt user callback */
    HAL_PWREx_WKUP6_Callback ();
  }
}
24014944:	e025      	b.n	24014992 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x6e>
  else if (READ_BIT (PWR->WKUPFR, PWR_WKUPFR_WKUPF2) != 0U)
24014946:	4b14      	ldr	r3, [pc, #80]	@ (24014998 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x74>)
24014948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2401494a:	f003 0302 	and.w	r3, r3, #2
2401494e:	2b00      	cmp	r3, #0
24014950:	d008      	beq.n	24014964 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x40>
    __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP2);
24014952:	4b11      	ldr	r3, [pc, #68]	@ (24014998 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x74>)
24014954:	6a1b      	ldr	r3, [r3, #32]
24014956:	4a10      	ldr	r2, [pc, #64]	@ (24014998 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x74>)
24014958:	f043 0302 	orr.w	r3, r3, #2
2401495c:	6213      	str	r3, [r2, #32]
    HAL_PWREx_WKUP2_Callback ();
2401495e:	f000 f824 	bl	240149aa <HAL_PWREx_WKUP2_Callback>
}
24014962:	e016      	b.n	24014992 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x6e>
  else if (READ_BIT (PWR->WKUPFR, PWR_WKUPFR_WKUPF4) != 0U)
24014964:	4b0c      	ldr	r3, [pc, #48]	@ (24014998 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x74>)
24014966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
24014968:	f003 0308 	and.w	r3, r3, #8
2401496c:	2b00      	cmp	r3, #0
2401496e:	d008      	beq.n	24014982 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x5e>
    __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP4);
24014970:	4b09      	ldr	r3, [pc, #36]	@ (24014998 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x74>)
24014972:	6a1b      	ldr	r3, [r3, #32]
24014974:	4a08      	ldr	r2, [pc, #32]	@ (24014998 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x74>)
24014976:	f043 0308 	orr.w	r3, r3, #8
2401497a:	6213      	str	r3, [r2, #32]
    HAL_PWREx_WKUP4_Callback ();
2401497c:	f000 f81c 	bl	240149b8 <HAL_PWREx_WKUP4_Callback>
}
24014980:	e007      	b.n	24014992 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x6e>
    __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP6);
24014982:	4b05      	ldr	r3, [pc, #20]	@ (24014998 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x74>)
24014984:	6a1b      	ldr	r3, [r3, #32]
24014986:	4a04      	ldr	r2, [pc, #16]	@ (24014998 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x74>)
24014988:	f043 0320 	orr.w	r3, r3, #32
2401498c:	6213      	str	r3, [r2, #32]
    HAL_PWREx_WKUP6_Callback ();
2401498e:	f000 f81a 	bl	240149c6 <HAL_PWREx_WKUP6_Callback>
}
24014992:	bf00      	nop
24014994:	bd80      	pop	{r7, pc}
24014996:	bf00      	nop
24014998:	58024800 	.word	0x58024800

2401499c <HAL_PWREx_WKUP1_Callback>:
/**
  * @brief PWR WKUP1 interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_WKUP1_Callback (void)
{
2401499c:	b480      	push	{r7}
2401499e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWREx_WKUP1Callback can be implemented in the user file
  */
}
240149a0:	bf00      	nop
240149a2:	46bd      	mov	sp, r7
240149a4:	f85d 7b04 	ldr.w	r7, [sp], #4
240149a8:	4770      	bx	lr

240149aa <HAL_PWREx_WKUP2_Callback>:
/**
  * @brief PWR WKUP2 interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_WKUP2_Callback (void)
{
240149aa:	b480      	push	{r7}
240149ac:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWREx_WKUP2Callback can be implemented in the user file
  */
}
240149ae:	bf00      	nop
240149b0:	46bd      	mov	sp, r7
240149b2:	f85d 7b04 	ldr.w	r7, [sp], #4
240149b6:	4770      	bx	lr

240149b8 <HAL_PWREx_WKUP4_Callback>:
/**
  * @brief PWR WKUP4 interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_WKUP4_Callback (void)
{
240149b8:	b480      	push	{r7}
240149ba:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWREx_WKUP4Callback can be implemented in the user file
  */
}
240149bc:	bf00      	nop
240149be:	46bd      	mov	sp, r7
240149c0:	f85d 7b04 	ldr.w	r7, [sp], #4
240149c4:	4770      	bx	lr

240149c6 <HAL_PWREx_WKUP6_Callback>:
/**
  * @brief PWR WKUP6 interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_WKUP6_Callback (void)
{
240149c6:	b480      	push	{r7}
240149c8:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWREx_WKUP6Callback can be implemented in the user file
  */
}
240149ca:	bf00      	nop
240149cc:	46bd      	mov	sp, r7
240149ce:	f85d 7b04 	ldr.w	r7, [sp], #4
240149d2:	4770      	bx	lr

240149d4 <HAL_PWREx_EnableBkUpReg>:
/**
  * @brief Enable the Backup Regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg (void)
{
240149d4:	b580      	push	{r7, lr}
240149d6:	b082      	sub	sp, #8
240149d8:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Enable the Backup regulator */
  SET_BIT (PWR->CR2, PWR_CR2_BREN);
240149da:	4b10      	ldr	r3, [pc, #64]	@ (24014a1c <HAL_PWREx_EnableBkUpReg+0x48>)
240149dc:	689b      	ldr	r3, [r3, #8]
240149de:	4a0f      	ldr	r2, [pc, #60]	@ (24014a1c <HAL_PWREx_EnableBkUpReg+0x48>)
240149e0:	f043 0301 	orr.w	r3, r3, #1
240149e4:	6093      	str	r3, [r2, #8]

  /* Get tick */
  tickstart = HAL_GetTick ();
240149e6:	f7ee f983 	bl	24002cf0 <HAL_GetTick>
240149ea:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_BRR) == 0U)
240149ec:	e009      	b.n	24014a02 <HAL_PWREx_EnableBkUpReg+0x2e>
  {
    if ((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY)
240149ee:	f7ee f97f 	bl	24002cf0 <HAL_GetTick>
240149f2:	4602      	mov	r2, r0
240149f4:	687b      	ldr	r3, [r7, #4]
240149f6:	1ad3      	subs	r3, r2, r3
240149f8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
240149fc:	d901      	bls.n	24014a02 <HAL_PWREx_EnableBkUpReg+0x2e>
    {
      return HAL_ERROR;
240149fe:	2301      	movs	r3, #1
24014a00:	e007      	b.n	24014a12 <HAL_PWREx_EnableBkUpReg+0x3e>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_BRR) == 0U)
24014a02:	4b06      	ldr	r3, [pc, #24]	@ (24014a1c <HAL_PWREx_EnableBkUpReg+0x48>)
24014a04:	689b      	ldr	r3, [r3, #8]
24014a06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
24014a0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
24014a0e:	d1ee      	bne.n	240149ee <HAL_PWREx_EnableBkUpReg+0x1a>
    }
  }

  return HAL_OK;
24014a10:	2300      	movs	r3, #0
}
24014a12:	4618      	mov	r0, r3
24014a14:	3708      	adds	r7, #8
24014a16:	46bd      	mov	sp, r7
24014a18:	bd80      	pop	{r7, pc}
24014a1a:	bf00      	nop
24014a1c:	58024800 	.word	0x58024800

24014a20 <HAL_PWREx_DisableBkUpReg>:
/**
  * @brief Disable the Backup Regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_DisableBkUpReg (void)
{
24014a20:	b580      	push	{r7, lr}
24014a22:	b082      	sub	sp, #8
24014a24:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Disable the Backup regulator */
  CLEAR_BIT (PWR->CR2, PWR_CR2_BREN);
24014a26:	4b10      	ldr	r3, [pc, #64]	@ (24014a68 <HAL_PWREx_DisableBkUpReg+0x48>)
24014a28:	689b      	ldr	r3, [r3, #8]
24014a2a:	4a0f      	ldr	r2, [pc, #60]	@ (24014a68 <HAL_PWREx_DisableBkUpReg+0x48>)
24014a2c:	f023 0301 	bic.w	r3, r3, #1
24014a30:	6093      	str	r3, [r2, #8]

  /* Get tick */
  tickstart = HAL_GetTick ();
24014a32:	f7ee f95d 	bl	24002cf0 <HAL_GetTick>
24014a36:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is reset */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_BRR) != 0U)
24014a38:	e009      	b.n	24014a4e <HAL_PWREx_DisableBkUpReg+0x2e>
  {
    if ((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY)
24014a3a:	f7ee f959 	bl	24002cf0 <HAL_GetTick>
24014a3e:	4602      	mov	r2, r0
24014a40:	687b      	ldr	r3, [r7, #4]
24014a42:	1ad3      	subs	r3, r2, r3
24014a44:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
24014a48:	d901      	bls.n	24014a4e <HAL_PWREx_DisableBkUpReg+0x2e>
    {
      return HAL_ERROR;
24014a4a:	2301      	movs	r3, #1
24014a4c:	e007      	b.n	24014a5e <HAL_PWREx_DisableBkUpReg+0x3e>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_BRR) != 0U)
24014a4e:	4b06      	ldr	r3, [pc, #24]	@ (24014a68 <HAL_PWREx_DisableBkUpReg+0x48>)
24014a50:	689b      	ldr	r3, [r3, #8]
24014a52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
24014a56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
24014a5a:	d0ee      	beq.n	24014a3a <HAL_PWREx_DisableBkUpReg+0x1a>
    }
  }

  return HAL_OK;
24014a5c:	2300      	movs	r3, #0
}
24014a5e:	4618      	mov	r0, r3
24014a60:	3708      	adds	r7, #8
24014a62:	46bd      	mov	sp, r7
24014a64:	bd80      	pop	{r7, pc}
24014a66:	bf00      	nop
24014a68:	58024800 	.word	0x58024800

24014a6c <HAL_PWREx_EnableUSBReg>:
/**
  * @brief Enable the USB Regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBReg (void)
{
24014a6c:	b580      	push	{r7, lr}
24014a6e:	b082      	sub	sp, #8
24014a70:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Enable the USB regulator */
  SET_BIT (PWR->CR3, PWR_CR3_USBREGEN);
24014a72:	4b10      	ldr	r3, [pc, #64]	@ (24014ab4 <HAL_PWREx_EnableUSBReg+0x48>)
24014a74:	68db      	ldr	r3, [r3, #12]
24014a76:	4a0f      	ldr	r2, [pc, #60]	@ (24014ab4 <HAL_PWREx_EnableUSBReg+0x48>)
24014a78:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
24014a7c:	60d3      	str	r3, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
24014a7e:	f7ee f937 	bl	24002cf0 <HAL_GetTick>
24014a82:	6078      	str	r0, [r7, #4]

  /* Wait till the USB regulator ready flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_USB33RDY) == 0U)
24014a84:	e009      	b.n	24014a9a <HAL_PWREx_EnableUSBReg+0x2e>
  {
    if ((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY)
24014a86:	f7ee f933 	bl	24002cf0 <HAL_GetTick>
24014a8a:	4602      	mov	r2, r0
24014a8c:	687b      	ldr	r3, [r7, #4]
24014a8e:	1ad3      	subs	r3, r2, r3
24014a90:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
24014a94:	d901      	bls.n	24014a9a <HAL_PWREx_EnableUSBReg+0x2e>
    {
      return HAL_ERROR;
24014a96:	2301      	movs	r3, #1
24014a98:	e007      	b.n	24014aaa <HAL_PWREx_EnableUSBReg+0x3e>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_USB33RDY) == 0U)
24014a9a:	4b06      	ldr	r3, [pc, #24]	@ (24014ab4 <HAL_PWREx_EnableUSBReg+0x48>)
24014a9c:	68db      	ldr	r3, [r3, #12]
24014a9e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
24014aa2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
24014aa6:	d1ee      	bne.n	24014a86 <HAL_PWREx_EnableUSBReg+0x1a>
    }
  }

  return HAL_OK;
24014aa8:	2300      	movs	r3, #0
}
24014aaa:	4618      	mov	r0, r3
24014aac:	3708      	adds	r7, #8
24014aae:	46bd      	mov	sp, r7
24014ab0:	bd80      	pop	{r7, pc}
24014ab2:	bf00      	nop
24014ab4:	58024800 	.word	0x58024800

24014ab8 <HAL_PWREx_DisableUSBReg>:
/**
  * @brief Disable the USB Regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_DisableUSBReg (void)
{
24014ab8:	b580      	push	{r7, lr}
24014aba:	b082      	sub	sp, #8
24014abc:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Disable the USB regulator */
  CLEAR_BIT (PWR->CR3, PWR_CR3_USBREGEN);
24014abe:	4b10      	ldr	r3, [pc, #64]	@ (24014b00 <HAL_PWREx_DisableUSBReg+0x48>)
24014ac0:	68db      	ldr	r3, [r3, #12]
24014ac2:	4a0f      	ldr	r2, [pc, #60]	@ (24014b00 <HAL_PWREx_DisableUSBReg+0x48>)
24014ac4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
24014ac8:	60d3      	str	r3, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
24014aca:	f7ee f911 	bl	24002cf0 <HAL_GetTick>
24014ace:	6078      	str	r0, [r7, #4]

  /* Wait till the USB regulator ready flag is reset */
  while(__HAL_PWR_GET_FLAG (PWR_FLAG_USB33RDY) != 0U)
24014ad0:	e009      	b.n	24014ae6 <HAL_PWREx_DisableUSBReg+0x2e>
  {
    if ((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY)
24014ad2:	f7ee f90d 	bl	24002cf0 <HAL_GetTick>
24014ad6:	4602      	mov	r2, r0
24014ad8:	687b      	ldr	r3, [r7, #4]
24014ada:	1ad3      	subs	r3, r2, r3
24014adc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
24014ae0:	d901      	bls.n	24014ae6 <HAL_PWREx_DisableUSBReg+0x2e>
    {
      return HAL_ERROR;
24014ae2:	2301      	movs	r3, #1
24014ae4:	e007      	b.n	24014af6 <HAL_PWREx_DisableUSBReg+0x3e>
  while(__HAL_PWR_GET_FLAG (PWR_FLAG_USB33RDY) != 0U)
24014ae6:	4b06      	ldr	r3, [pc, #24]	@ (24014b00 <HAL_PWREx_DisableUSBReg+0x48>)
24014ae8:	68db      	ldr	r3, [r3, #12]
24014aea:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
24014aee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
24014af2:	d0ee      	beq.n	24014ad2 <HAL_PWREx_DisableUSBReg+0x1a>
    }
  }

  return HAL_OK;
24014af4:	2300      	movs	r3, #0
}
24014af6:	4618      	mov	r0, r3
24014af8:	3708      	adds	r7, #8
24014afa:	46bd      	mov	sp, r7
24014afc:	bd80      	pop	{r7, pc}
24014afe:	bf00      	nop
24014b00:	58024800 	.word	0x58024800

24014b04 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
24014b04:	b480      	push	{r7}
24014b06:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
24014b08:	4b05      	ldr	r3, [pc, #20]	@ (24014b20 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
24014b0a:	68db      	ldr	r3, [r3, #12]
24014b0c:	4a04      	ldr	r2, [pc, #16]	@ (24014b20 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
24014b0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
24014b12:	60d3      	str	r3, [r2, #12]
}
24014b14:	bf00      	nop
24014b16:	46bd      	mov	sp, r7
24014b18:	f85d 7b04 	ldr.w	r7, [sp], #4
24014b1c:	4770      	bx	lr
24014b1e:	bf00      	nop
24014b20:	58024800 	.word	0x58024800

24014b24 <HAL_PWREx_DisableUSBVoltageDetector>:
/**
  * @brief Disable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_DisableUSBVoltageDetector (void)
{
24014b24:	b480      	push	{r7}
24014b26:	af00      	add	r7, sp, #0
  /* Disable the USB voltage detector */
  CLEAR_BIT (PWR->CR3, PWR_CR3_USB33DEN);
24014b28:	4b05      	ldr	r3, [pc, #20]	@ (24014b40 <HAL_PWREx_DisableUSBVoltageDetector+0x1c>)
24014b2a:	68db      	ldr	r3, [r3, #12]
24014b2c:	4a04      	ldr	r2, [pc, #16]	@ (24014b40 <HAL_PWREx_DisableUSBVoltageDetector+0x1c>)
24014b2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
24014b32:	60d3      	str	r3, [r2, #12]
}
24014b34:	bf00      	nop
24014b36:	46bd      	mov	sp, r7
24014b38:	f85d 7b04 	ldr.w	r7, [sp], #4
24014b3c:	4770      	bx	lr
24014b3e:	bf00      	nop
24014b40:	58024800 	.word	0x58024800

24014b44 <HAL_PWREx_EnableBatteryCharging>:
  *            @arg PWR_BATTERY_CHARGING_RESISTOR_5 : 5 KOhm resistor.
  *            @arg PWR_BATTERY_CHARGING_RESISTOR_1_5 : 1.5 KOhm resistor.
  * @retval None.
  */
void HAL_PWREx_EnableBatteryCharging (uint32_t ResistorValue)
{
24014b44:	b480      	push	{r7}
24014b46:	b083      	sub	sp, #12
24014b48:	af00      	add	r7, sp, #0
24014b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param (IS_PWR_BATTERY_RESISTOR_SELECT (ResistorValue));

  /* Specify the charging resistor */
  MODIFY_REG (PWR->CR3, PWR_CR3_VBRS, ResistorValue);
24014b4c:	4b09      	ldr	r3, [pc, #36]	@ (24014b74 <HAL_PWREx_EnableBatteryCharging+0x30>)
24014b4e:	68db      	ldr	r3, [r3, #12]
24014b50:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
24014b54:	4907      	ldr	r1, [pc, #28]	@ (24014b74 <HAL_PWREx_EnableBatteryCharging+0x30>)
24014b56:	687b      	ldr	r3, [r7, #4]
24014b58:	4313      	orrs	r3, r2
24014b5a:	60cb      	str	r3, [r1, #12]

  /* Enable the Battery charging */
  SET_BIT (PWR->CR3, PWR_CR3_VBE);
24014b5c:	4b05      	ldr	r3, [pc, #20]	@ (24014b74 <HAL_PWREx_EnableBatteryCharging+0x30>)
24014b5e:	68db      	ldr	r3, [r3, #12]
24014b60:	4a04      	ldr	r2, [pc, #16]	@ (24014b74 <HAL_PWREx_EnableBatteryCharging+0x30>)
24014b62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
24014b66:	60d3      	str	r3, [r2, #12]
}
24014b68:	bf00      	nop
24014b6a:	370c      	adds	r7, #12
24014b6c:	46bd      	mov	sp, r7
24014b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
24014b72:	4770      	bx	lr
24014b74:	58024800 	.word	0x58024800

24014b78 <HAL_PWREx_DisableBatteryCharging>:
/**
  * @brief Disable the Battery charging.
  * @retval None.
  */
void HAL_PWREx_DisableBatteryCharging (void)
{
24014b78:	b480      	push	{r7}
24014b7a:	af00      	add	r7, sp, #0
  /* Disable the Battery charging */
  CLEAR_BIT (PWR->CR3, PWR_CR3_VBE);
24014b7c:	4b05      	ldr	r3, [pc, #20]	@ (24014b94 <HAL_PWREx_DisableBatteryCharging+0x1c>)
24014b7e:	68db      	ldr	r3, [r3, #12]
24014b80:	4a04      	ldr	r2, [pc, #16]	@ (24014b94 <HAL_PWREx_DisableBatteryCharging+0x1c>)
24014b82:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
24014b86:	60d3      	str	r3, [r2, #12]
}
24014b88:	bf00      	nop
24014b8a:	46bd      	mov	sp, r7
24014b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
24014b90:	4770      	bx	lr
24014b92:	bf00      	nop
24014b94:	58024800 	.word	0x58024800

24014b98 <HAL_PWREx_EnableMonitoring>:
/**
  * @brief Enable the VBAT and temperature monitoring.
  * @retval HAL status.
  */
void HAL_PWREx_EnableMonitoring (void)
{
24014b98:	b480      	push	{r7}
24014b9a:	af00      	add	r7, sp, #0
  /* Enable the VBAT and Temperature monitoring */
  SET_BIT (PWR->CR2, PWR_CR2_MONEN);
24014b9c:	4b05      	ldr	r3, [pc, #20]	@ (24014bb4 <HAL_PWREx_EnableMonitoring+0x1c>)
24014b9e:	689b      	ldr	r3, [r3, #8]
24014ba0:	4a04      	ldr	r2, [pc, #16]	@ (24014bb4 <HAL_PWREx_EnableMonitoring+0x1c>)
24014ba2:	f043 0310 	orr.w	r3, r3, #16
24014ba6:	6093      	str	r3, [r2, #8]
}
24014ba8:	bf00      	nop
24014baa:	46bd      	mov	sp, r7
24014bac:	f85d 7b04 	ldr.w	r7, [sp], #4
24014bb0:	4770      	bx	lr
24014bb2:	bf00      	nop
24014bb4:	58024800 	.word	0x58024800

24014bb8 <HAL_PWREx_DisableMonitoring>:
/**
  * @brief Disable the VBAT and temperature monitoring.
  * @retval HAL status.
  */
void HAL_PWREx_DisableMonitoring (void)
{
24014bb8:	b480      	push	{r7}
24014bba:	af00      	add	r7, sp, #0
  /* Disable the VBAT and Temperature monitoring */
  CLEAR_BIT (PWR->CR2, PWR_CR2_MONEN);
24014bbc:	4b05      	ldr	r3, [pc, #20]	@ (24014bd4 <HAL_PWREx_DisableMonitoring+0x1c>)
24014bbe:	689b      	ldr	r3, [r3, #8]
24014bc0:	4a04      	ldr	r2, [pc, #16]	@ (24014bd4 <HAL_PWREx_DisableMonitoring+0x1c>)
24014bc2:	f023 0310 	bic.w	r3, r3, #16
24014bc6:	6093      	str	r3, [r2, #8]
}
24014bc8:	bf00      	nop
24014bca:	46bd      	mov	sp, r7
24014bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
24014bd0:	4770      	bx	lr
24014bd2:	bf00      	nop
24014bd4:	58024800 	.word	0x58024800

24014bd8 <HAL_PWREx_GetTemperatureLevel>:
  * @brief Indicate whether the junction temperature is between, above or below
  *        the thresholds.
  * @retval Temperature level.
  */
uint32_t HAL_PWREx_GetTemperatureLevel (void)
{
24014bd8:	b480      	push	{r7}
24014bda:	b083      	sub	sp, #12
24014bdc:	af00      	add	r7, sp, #0
  uint32_t tempLevel, regValue;

  /* Read the temperature flags */
  regValue = READ_BIT (PWR->CR2, (PWR_CR2_TEMPH | PWR_CR2_TEMPL));
24014bde:	4b0f      	ldr	r3, [pc, #60]	@ (24014c1c <HAL_PWREx_GetTemperatureLevel+0x44>)
24014be0:	689b      	ldr	r3, [r3, #8]
24014be2:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
24014be6:	603b      	str	r3, [r7, #0]

  /* Check if the temperature is below the threshold */
  if (regValue == PWR_CR2_TEMPL)
24014be8:	683b      	ldr	r3, [r7, #0]
24014bea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
24014bee:	d103      	bne.n	24014bf8 <HAL_PWREx_GetTemperatureLevel+0x20>
  {
    tempLevel = PWR_TEMP_BELOW_LOW_THRESHOLD;
24014bf0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
24014bf4:	607b      	str	r3, [r7, #4]
24014bf6:	e009      	b.n	24014c0c <HAL_PWREx_GetTemperatureLevel+0x34>
  }
  /* Check if the temperature is above the threshold */
  else if (regValue == PWR_CR2_TEMPH)
24014bf8:	683b      	ldr	r3, [r7, #0]
24014bfa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
24014bfe:	d103      	bne.n	24014c08 <HAL_PWREx_GetTemperatureLevel+0x30>
  {
    tempLevel = PWR_TEMP_ABOVE_HIGH_THRESHOLD;
24014c00:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
24014c04:	607b      	str	r3, [r7, #4]
24014c06:	e001      	b.n	24014c0c <HAL_PWREx_GetTemperatureLevel+0x34>
  }
  /* The temperature is between the thresholds */
  else
  {
    tempLevel = PWR_TEMP_BETWEEN_HIGH_LOW_THRESHOLD;
24014c08:	2300      	movs	r3, #0
24014c0a:	607b      	str	r3, [r7, #4]
  }

  return tempLevel;
24014c0c:	687b      	ldr	r3, [r7, #4]
}
24014c0e:	4618      	mov	r0, r3
24014c10:	370c      	adds	r7, #12
24014c12:	46bd      	mov	sp, r7
24014c14:	f85d 7b04 	ldr.w	r7, [sp], #4
24014c18:	4770      	bx	lr
24014c1a:	bf00      	nop
24014c1c:	58024800 	.word	0x58024800

24014c20 <HAL_PWREx_GetVBATLevel>:
  * @brief Indicate whether the Battery voltage level is between, above or below
  *        the thresholds.
  * @retval VBAT level.
  */
uint32_t HAL_PWREx_GetVBATLevel (void)
{
24014c20:	b480      	push	{r7}
24014c22:	b083      	sub	sp, #12
24014c24:	af00      	add	r7, sp, #0
  uint32_t VBATLevel, regValue;

  /* Read the VBAT flags */
  regValue = READ_BIT (PWR->CR2, (PWR_CR2_VBATH | PWR_CR2_VBATL));
24014c26:	4b0f      	ldr	r3, [pc, #60]	@ (24014c64 <HAL_PWREx_GetVBATLevel+0x44>)
24014c28:	689b      	ldr	r3, [r3, #8]
24014c2a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
24014c2e:	603b      	str	r3, [r7, #0]

  /* Check if the VBAT is below the threshold */
  if (regValue == PWR_CR2_VBATL)
24014c30:	683b      	ldr	r3, [r7, #0]
24014c32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
24014c36:	d103      	bne.n	24014c40 <HAL_PWREx_GetVBATLevel+0x20>
  {
    VBATLevel = PWR_VBAT_BELOW_LOW_THRESHOLD;
24014c38:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
24014c3c:	607b      	str	r3, [r7, #4]
24014c3e:	e009      	b.n	24014c54 <HAL_PWREx_GetVBATLevel+0x34>
  }
  /* Check if the VBAT is above the threshold */
  else if (regValue == PWR_CR2_VBATH)
24014c40:	683b      	ldr	r3, [r7, #0]
24014c42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
24014c46:	d103      	bne.n	24014c50 <HAL_PWREx_GetVBATLevel+0x30>
  {
    VBATLevel = PWR_VBAT_ABOVE_HIGH_THRESHOLD;
24014c48:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
24014c4c:	607b      	str	r3, [r7, #4]
24014c4e:	e001      	b.n	24014c54 <HAL_PWREx_GetVBATLevel+0x34>
  }
  /* The VBAT is between the thresholds */
  else
  {
    VBATLevel = PWR_VBAT_BETWEEN_HIGH_LOW_THRESHOLD;
24014c50:	2300      	movs	r3, #0
24014c52:	607b      	str	r3, [r7, #4]
  }

  return VBATLevel;
24014c54:	687b      	ldr	r3, [r7, #4]
}
24014c56:	4618      	mov	r0, r3
24014c58:	370c      	adds	r7, #12
24014c5a:	46bd      	mov	sp, r7
24014c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
24014c60:	4770      	bx	lr
24014c62:	bf00      	nop
24014c64:	58024800 	.word	0x58024800

24014c68 <HAL_PWREx_ConfigAVD>:
  *         driver. All combination are allowed: wake up only Cortex-M7, wake up
  *         only Cortex-M4 and wake up Cortex-M7 and Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ConfigAVD (PWREx_AVDTypeDef *sConfigAVD)
{
24014c68:	b480      	push	{r7}
24014c6a:	b083      	sub	sp, #12
24014c6c:	af00      	add	r7, sp, #0
24014c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_AVD_LEVEL (sConfigAVD->AVDLevel));
  assert_param (IS_PWR_AVD_MODE (sConfigAVD->Mode));

  /* Set the ALS[18:17] bits according to AVDLevel value */
  MODIFY_REG (PWR->CR1, PWR_CR1_ALS, sConfigAVD->AVDLevel);
24014c70:	4b37      	ldr	r3, [pc, #220]	@ (24014d50 <HAL_PWREx_ConfigAVD+0xe8>)
24014c72:	681b      	ldr	r3, [r3, #0]
24014c74:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
24014c78:	687b      	ldr	r3, [r7, #4]
24014c7a:	681b      	ldr	r3, [r3, #0]
24014c7c:	4934      	ldr	r1, [pc, #208]	@ (24014d50 <HAL_PWREx_ConfigAVD+0xe8>)
24014c7e:	4313      	orrs	r3, r2
24014c80:	600b      	str	r3, [r1, #0]

  /* Clear any previous config */
#if !defined (DUAL_CORE)
  __HAL_PWR_AVD_EXTI_DISABLE_EVENT ();
24014c82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
24014c86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
24014c8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
24014c8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
24014c92:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __HAL_PWR_AVD_EXTI_DISABLE_IT ();
24014c96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
24014c9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
24014c9e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
24014ca2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
24014ca6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* !defined (DUAL_CORE) */

  __HAL_PWR_AVD_EXTI_DISABLE_RISING_EDGE ();
24014caa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
24014cae:	681b      	ldr	r3, [r3, #0]
24014cb0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
24014cb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
24014cb8:	6013      	str	r3, [r2, #0]
  __HAL_PWR_AVD_EXTI_DISABLE_FALLING_EDGE ();
24014cba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
24014cbe:	685b      	ldr	r3, [r3, #4]
24014cc0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
24014cc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
24014cc8:	6053      	str	r3, [r2, #4]

#if !defined (DUAL_CORE)
  /* Configure the interrupt mode */
  if ((sConfigAVD->Mode & AVD_MODE_IT) == AVD_MODE_IT)
24014cca:	687b      	ldr	r3, [r7, #4]
24014ccc:	685b      	ldr	r3, [r3, #4]
24014cce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
24014cd2:	2b00      	cmp	r3, #0
24014cd4:	d009      	beq.n	24014cea <HAL_PWREx_ConfigAVD+0x82>
  {
    __HAL_PWR_AVD_EXTI_ENABLE_IT ();
24014cd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
24014cda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
24014cde:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
24014ce2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
24014ce6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  }

  /* Configure the event mode */
  if ((sConfigAVD->Mode & AVD_MODE_EVT) == AVD_MODE_EVT)
24014cea:	687b      	ldr	r3, [r7, #4]
24014cec:	685b      	ldr	r3, [r3, #4]
24014cee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
24014cf2:	2b00      	cmp	r3, #0
24014cf4:	d009      	beq.n	24014d0a <HAL_PWREx_ConfigAVD+0xa2>
  {
    __HAL_PWR_AVD_EXTI_ENABLE_EVENT ();
24014cf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
24014cfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
24014cfe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
24014d02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
24014d06:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  }
#endif /* !defined (DUAL_CORE) */

  /* Rising edge configuration */
  if ((sConfigAVD->Mode & AVD_RISING_EDGE) == AVD_RISING_EDGE)
24014d0a:	687b      	ldr	r3, [r7, #4]
24014d0c:	685b      	ldr	r3, [r3, #4]
24014d0e:	f003 0301 	and.w	r3, r3, #1
24014d12:	2b00      	cmp	r3, #0
24014d14:	d007      	beq.n	24014d26 <HAL_PWREx_ConfigAVD+0xbe>
  {
    __HAL_PWR_AVD_EXTI_ENABLE_RISING_EDGE ();
24014d16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
24014d1a:	681b      	ldr	r3, [r3, #0]
24014d1c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
24014d20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
24014d24:	6013      	str	r3, [r2, #0]
  }

  /* Falling edge configuration */
  if ((sConfigAVD->Mode & AVD_FALLING_EDGE) == AVD_FALLING_EDGE)
24014d26:	687b      	ldr	r3, [r7, #4]
24014d28:	685b      	ldr	r3, [r3, #4]
24014d2a:	f003 0302 	and.w	r3, r3, #2
24014d2e:	2b00      	cmp	r3, #0
24014d30:	d007      	beq.n	24014d42 <HAL_PWREx_ConfigAVD+0xda>
  {
    __HAL_PWR_AVD_EXTI_ENABLE_FALLING_EDGE ();
24014d32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
24014d36:	685b      	ldr	r3, [r3, #4]
24014d38:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
24014d3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
24014d40:	6053      	str	r3, [r2, #4]
  }
}
24014d42:	bf00      	nop
24014d44:	370c      	adds	r7, #12
24014d46:	46bd      	mov	sp, r7
24014d48:	f85d 7b04 	ldr.w	r7, [sp], #4
24014d4c:	4770      	bx	lr
24014d4e:	bf00      	nop
24014d50:	58024800 	.word	0x58024800

24014d54 <HAL_PWREx_EnableAVD>:
/**
  * @brief Enable the Analog Voltage Detector (AVD).
  * @retval None.
  */
void HAL_PWREx_EnableAVD (void)
{
24014d54:	b480      	push	{r7}
24014d56:	af00      	add	r7, sp, #0
  /* Enable the Analog Voltage Detector */
  SET_BIT (PWR->CR1, PWR_CR1_AVDEN);
24014d58:	4b05      	ldr	r3, [pc, #20]	@ (24014d70 <HAL_PWREx_EnableAVD+0x1c>)
24014d5a:	681b      	ldr	r3, [r3, #0]
24014d5c:	4a04      	ldr	r2, [pc, #16]	@ (24014d70 <HAL_PWREx_EnableAVD+0x1c>)
24014d5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
24014d62:	6013      	str	r3, [r2, #0]
}
24014d64:	bf00      	nop
24014d66:	46bd      	mov	sp, r7
24014d68:	f85d 7b04 	ldr.w	r7, [sp], #4
24014d6c:	4770      	bx	lr
24014d6e:	bf00      	nop
24014d70:	58024800 	.word	0x58024800

24014d74 <HAL_PWREx_DisableAVD>:
/**
  * @brief Disable the Analog Voltage Detector(AVD).
  * @retval None.
  */
void HAL_PWREx_DisableAVD (void)
{
24014d74:	b480      	push	{r7}
24014d76:	af00      	add	r7, sp, #0
  /* Disable the Analog Voltage Detector */
  CLEAR_BIT (PWR->CR1, PWR_CR1_AVDEN);
24014d78:	4b05      	ldr	r3, [pc, #20]	@ (24014d90 <HAL_PWREx_DisableAVD+0x1c>)
24014d7a:	681b      	ldr	r3, [r3, #0]
24014d7c:	4a04      	ldr	r2, [pc, #16]	@ (24014d90 <HAL_PWREx_DisableAVD+0x1c>)
24014d7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
24014d82:	6013      	str	r3, [r2, #0]
}
24014d84:	bf00      	nop
24014d86:	46bd      	mov	sp, r7
24014d88:	f85d 7b04 	ldr.w	r7, [sp], #4
24014d8c:	4770      	bx	lr
24014d8e:	bf00      	nop
24014d90:	58024800 	.word	0x58024800

24014d94 <HAL_PWREx_PVD_AVD_IRQHandler>:
  * @brief  This function handles the PWR PVD/AVD interrupt request.
  * @note   This API should be called under the PVD_AVD_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_AVD_IRQHandler (void)
{
24014d94:	b580      	push	{r7, lr}
24014d96:	af00      	add	r7, sp, #0
  /* Check if the Programmable Voltage Detector is enabled (PVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_PVDEN) != 0U)
24014d98:	4b22      	ldr	r3, [pc, #136]	@ (24014e24 <HAL_PWREx_PVD_AVD_IRQHandler+0x90>)
24014d9a:	681b      	ldr	r3, [r3, #0]
24014d9c:	f003 0310 	and.w	r3, r3, #16
24014da0:	2b00      	cmp	r3, #0
24014da2:	d01b      	beq.n	24014ddc <HAL_PWREx_PVD_AVD_IRQHandler+0x48>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR D1/CD EXTI flag */
      if (__HAL_PWR_PVD_EXTI_GET_FLAG () != 0U)
24014da4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
24014da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
24014dac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
24014db0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
24014db4:	d112      	bne.n	24014ddc <HAL_PWREx_PVD_AVD_IRQHandler+0x48>
      {
        /* PWR PVD interrupt user callback */
        HAL_PWR_PVDCallback ();
24014db6:	f7ff fb76 	bl	240144a6 <HAL_PWR_PVDCallback>

        if(__HAL_PWR_GET_FLAG (PWR_FLAG_AVDO) == 0U)
24014dba:	4b1a      	ldr	r3, [pc, #104]	@ (24014e24 <HAL_PWREx_PVD_AVD_IRQHandler+0x90>)
24014dbc:	685b      	ldr	r3, [r3, #4]
24014dbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
24014dc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
24014dc6:	d009      	beq.n	24014ddc <HAL_PWREx_PVD_AVD_IRQHandler+0x48>
        {
          /* Clear PWR EXTI D1/CD pending bit */
          __HAL_PWR_PVD_EXTI_CLEAR_FLAG ();
24014dc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
24014dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
24014dd0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
24014dd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
24014dd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    }
#endif /* defined (DUAL_CORE) */
  }

  /* Check if the Analog Voltage Detector is enabled (AVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_AVDEN) != 0U)
24014ddc:	4b11      	ldr	r3, [pc, #68]	@ (24014e24 <HAL_PWREx_PVD_AVD_IRQHandler+0x90>)
24014dde:	681b      	ldr	r3, [r3, #0]
24014de0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
24014de4:	2b00      	cmp	r3, #0
24014de6:	d01a      	beq.n	24014e1e <HAL_PWREx_PVD_AVD_IRQHandler+0x8a>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR EXTI D1/CD flag */
      if (__HAL_PWR_AVD_EXTI_GET_FLAG () != 0U)
24014de8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
24014dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
24014df0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
24014df4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
24014df8:	d111      	bne.n	24014e1e <HAL_PWREx_PVD_AVD_IRQHandler+0x8a>
      {
        /* PWR AVD interrupt user callback */
        HAL_PWREx_AVDCallback ();
24014dfa:	f000 f815 	bl	24014e28 <HAL_PWREx_AVDCallback>

        if(__HAL_PWR_GET_FLAG (PWR_FLAG_PVDO) == 0U)
24014dfe:	4b09      	ldr	r3, [pc, #36]	@ (24014e24 <HAL_PWREx_PVD_AVD_IRQHandler+0x90>)
24014e00:	685b      	ldr	r3, [r3, #4]
24014e02:	f003 0310 	and.w	r3, r3, #16
24014e06:	2b10      	cmp	r3, #16
24014e08:	d009      	beq.n	24014e1e <HAL_PWREx_PVD_AVD_IRQHandler+0x8a>
        {
          /* Clear PWR EXTI D1/CD pending bit */
          __HAL_PWR_AVD_EXTI_CLEAR_FLAG ();
24014e0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
24014e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
24014e12:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
24014e16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
24014e1a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
        }
      }
    }
#endif /* defined (DUAL_CORE) */
  }
}
24014e1e:	bf00      	nop
24014e20:	bd80      	pop	{r7, pc}
24014e22:	bf00      	nop
24014e24:	58024800 	.word	0x58024800

24014e28 <HAL_PWREx_AVDCallback>:
/**
  * @brief PWR AVD interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_AVDCallback (void)
{
24014e28:	b480      	push	{r7}
24014e2a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_AVDCallback can be implemented in the user file
  */
}
24014e2c:	bf00      	nop
24014e2e:	46bd      	mov	sp, r7
24014e30:	f85d 7b04 	ldr.w	r7, [sp], #4
24014e34:	4770      	bx	lr
	...

24014e38 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
24014e38:	b580      	push	{r7, lr}
24014e3a:	b082      	sub	sp, #8
24014e3c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Increasing the CPU frequency */
  if (FLASH_LATENCY_DEFAULT  > __HAL_FLASH_GET_LATENCY())
24014e3e:	4b89      	ldr	r3, [pc, #548]	@ (24015064 <HAL_RCC_DeInit+0x22c>)
24014e40:	681b      	ldr	r3, [r3, #0]
24014e42:	f003 030f 	and.w	r3, r3, #15
24014e46:	2b06      	cmp	r3, #6
24014e48:	d80f      	bhi.n	24014e6a <HAL_RCC_DeInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
24014e4a:	4b86      	ldr	r3, [pc, #536]	@ (24015064 <HAL_RCC_DeInit+0x22c>)
24014e4c:	681b      	ldr	r3, [r3, #0]
24014e4e:	f023 030f 	bic.w	r3, r3, #15
24014e52:	4a84      	ldr	r2, [pc, #528]	@ (24015064 <HAL_RCC_DeInit+0x22c>)
24014e54:	f043 0307 	orr.w	r3, r3, #7
24014e58:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
24014e5a:	4b82      	ldr	r3, [pc, #520]	@ (24015064 <HAL_RCC_DeInit+0x22c>)
24014e5c:	681b      	ldr	r3, [r3, #0]
24014e5e:	f003 030f 	and.w	r3, r3, #15
24014e62:	2b07      	cmp	r3, #7
24014e64:	d001      	beq.n	24014e6a <HAL_RCC_DeInit+0x32>
    {
      return HAL_ERROR;
24014e66:	2301      	movs	r3, #1
24014e68:	e0f7      	b.n	2401505a <HAL_RCC_DeInit+0x222>

  }


  /* Get Start Tick */
  tickstart = HAL_GetTick();
24014e6a:	f7ed ff41 	bl	24002cf0 <HAL_GetTick>
24014e6e:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
24014e70:	4b7d      	ldr	r3, [pc, #500]	@ (24015068 <HAL_RCC_DeInit+0x230>)
24014e72:	681b      	ldr	r3, [r3, #0]
24014e74:	4a7c      	ldr	r2, [pc, #496]	@ (24015068 <HAL_RCC_DeInit+0x230>)
24014e76:	f043 0301 	orr.w	r3, r3, #1
24014e7a:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
24014e7c:	e008      	b.n	24014e90 <HAL_RCC_DeInit+0x58>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
24014e7e:	f7ed ff37 	bl	24002cf0 <HAL_GetTick>
24014e82:	4602      	mov	r2, r0
24014e84:	687b      	ldr	r3, [r7, #4]
24014e86:	1ad3      	subs	r3, r2, r3
24014e88:	2b02      	cmp	r3, #2
24014e8a:	d901      	bls.n	24014e90 <HAL_RCC_DeInit+0x58>
    {
      return HAL_TIMEOUT;
24014e8c:	2303      	movs	r3, #3
24014e8e:	e0e4      	b.n	2401505a <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
24014e90:	4b75      	ldr	r3, [pc, #468]	@ (24015068 <HAL_RCC_DeInit+0x230>)
24014e92:	681b      	ldr	r3, [r3, #0]
24014e94:	f003 0304 	and.w	r3, r3, #4
24014e98:	2b00      	cmp	r3, #0
24014e9a:	d0f0      	beq.n	24014e7e <HAL_RCC_DeInit+0x46>
    }
  }

  /* Set HSITRIM[6:0] bits to the reset value */
  SET_BIT(RCC->HSICFGR, RCC_HSICFGR_HSITRIM_6);
24014e9c:	4b72      	ldr	r3, [pc, #456]	@ (24015068 <HAL_RCC_DeInit+0x230>)
24014e9e:	685b      	ldr	r3, [r3, #4]
24014ea0:	4a71      	ldr	r2, [pc, #452]	@ (24015068 <HAL_RCC_DeInit+0x230>)
24014ea2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
24014ea6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
24014ea8:	4b6f      	ldr	r3, [pc, #444]	@ (24015068 <HAL_RCC_DeInit+0x230>)
24014eaa:	2200      	movs	r2, #0
24014eac:	611a      	str	r2, [r3, #16]

  /* Update the SystemCoreClock and SystemD2Clock global variables */
  SystemCoreClock = HSI_VALUE;
24014eae:	4b6f      	ldr	r3, [pc, #444]	@ (2401506c <HAL_RCC_DeInit+0x234>)
24014eb0:	4a6f      	ldr	r2, [pc, #444]	@ (24015070 <HAL_RCC_DeInit+0x238>)
24014eb2:	601a      	str	r2, [r3, #0]
  SystemD2Clock = HSI_VALUE;
24014eb4:	4b6f      	ldr	r3, [pc, #444]	@ (24015074 <HAL_RCC_DeInit+0x23c>)
24014eb6:	4a6e      	ldr	r2, [pc, #440]	@ (24015070 <HAL_RCC_DeInit+0x238>)
24014eb8:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
24014eba:	4b6f      	ldr	r3, [pc, #444]	@ (24015078 <HAL_RCC_DeInit+0x240>)
24014ebc:	681b      	ldr	r3, [r3, #0]
24014ebe:	4618      	mov	r0, r3
24014ec0:	f7ed fecc 	bl	24002c5c <HAL_InitTick>
24014ec4:	4603      	mov	r3, r0
24014ec6:	2b00      	cmp	r3, #0
24014ec8:	d001      	beq.n	24014ece <HAL_RCC_DeInit+0x96>
  {
    return HAL_ERROR;
24014eca:	2301      	movs	r3, #1
24014ecc:	e0c5      	b.n	2401505a <HAL_RCC_DeInit+0x222>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
24014ece:	f7ed ff0f 	bl	24002cf0 <HAL_GetTick>
24014ed2:	6078      	str	r0, [r7, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
24014ed4:	e00a      	b.n	24014eec <HAL_RCC_DeInit+0xb4>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
24014ed6:	f7ed ff0b 	bl	24002cf0 <HAL_GetTick>
24014eda:	4602      	mov	r2, r0
24014edc:	687b      	ldr	r3, [r7, #4]
24014ede:	1ad3      	subs	r3, r2, r3
24014ee0:	f241 3288 	movw	r2, #5000	@ 0x1388
24014ee4:	4293      	cmp	r3, r2
24014ee6:	d901      	bls.n	24014eec <HAL_RCC_DeInit+0xb4>
    {
      return HAL_TIMEOUT;
24014ee8:	2303      	movs	r3, #3
24014eea:	e0b6      	b.n	2401505a <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
24014eec:	4b5e      	ldr	r3, [pc, #376]	@ (24015068 <HAL_RCC_DeInit+0x230>)
24014eee:	691b      	ldr	r3, [r3, #16]
24014ef0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
24014ef4:	2b00      	cmp	r3, #0
24014ef6:	d1ee      	bne.n	24014ed6 <HAL_RCC_DeInit+0x9e>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
24014ef8:	f7ed fefa 	bl	24002cf0 <HAL_GetTick>
24014efc:	6078      	str	r0, [r7, #4]

  /* Reset CSION, CSIKERON, HSEON, HSI48ON, HSECSSON, HSIDIV bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSIKERON | RCC_CR_HSIDIV | RCC_CR_HSIDIVF | RCC_CR_CSION | RCC_CR_CSIKERON  \
24014efe:	4b5a      	ldr	r3, [pc, #360]	@ (24015068 <HAL_RCC_DeInit+0x230>)
24014f00:	681a      	ldr	r2, [r3, #0]
24014f02:	4959      	ldr	r1, [pc, #356]	@ (24015068 <HAL_RCC_DeInit+0x230>)
24014f04:	4b5d      	ldr	r3, [pc, #372]	@ (2401507c <HAL_RCC_DeInit+0x244>)
24014f06:	4013      	ands	r3, r2
24014f08:	600b      	str	r3, [r1, #0]
            | RCC_CR_HSI48ON | RCC_CR_CSSHSEON);

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
24014f0a:	e008      	b.n	24014f1e <HAL_RCC_DeInit+0xe6>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
24014f0c:	f7ed fef0 	bl	24002cf0 <HAL_GetTick>
24014f10:	4602      	mov	r2, r0
24014f12:	687b      	ldr	r3, [r7, #4]
24014f14:	1ad3      	subs	r3, r2, r3
24014f16:	2b64      	cmp	r3, #100	@ 0x64
24014f18:	d901      	bls.n	24014f1e <HAL_RCC_DeInit+0xe6>
    {
      return HAL_TIMEOUT;
24014f1a:	2303      	movs	r3, #3
24014f1c:	e09d      	b.n	2401505a <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
24014f1e:	4b52      	ldr	r3, [pc, #328]	@ (24015068 <HAL_RCC_DeInit+0x230>)
24014f20:	681b      	ldr	r3, [r3, #0]
24014f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
24014f26:	2b00      	cmp	r3, #0
24014f28:	d1f0      	bne.n	24014f0c <HAL_RCC_DeInit+0xd4>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
24014f2a:	f7ed fee1 	bl	24002cf0 <HAL_GetTick>
24014f2e:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON);
24014f30:	4b4d      	ldr	r3, [pc, #308]	@ (24015068 <HAL_RCC_DeInit+0x230>)
24014f32:	681b      	ldr	r3, [r3, #0]
24014f34:	4a4c      	ldr	r2, [pc, #304]	@ (24015068 <HAL_RCC_DeInit+0x230>)
24014f36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
24014f3a:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
24014f3c:	e008      	b.n	24014f50 <HAL_RCC_DeInit+0x118>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
24014f3e:	f7ed fed7 	bl	24002cf0 <HAL_GetTick>
24014f42:	4602      	mov	r2, r0
24014f44:	687b      	ldr	r3, [r7, #4]
24014f46:	1ad3      	subs	r3, r2, r3
24014f48:	2b02      	cmp	r3, #2
24014f4a:	d901      	bls.n	24014f50 <HAL_RCC_DeInit+0x118>
    {
      return HAL_TIMEOUT;
24014f4c:	2303      	movs	r3, #3
24014f4e:	e084      	b.n	2401505a <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
24014f50:	4b45      	ldr	r3, [pc, #276]	@ (24015068 <HAL_RCC_DeInit+0x230>)
24014f52:	681b      	ldr	r3, [r3, #0]
24014f54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
24014f58:	2b00      	cmp	r3, #0
24014f5a:	d1f0      	bne.n	24014f3e <HAL_RCC_DeInit+0x106>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
24014f5c:	f7ed fec8 	bl	24002cf0 <HAL_GetTick>
24014f60:	6078      	str	r0, [r7, #4]

  /* Reset PLL2ON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL2ON);
24014f62:	4b41      	ldr	r3, [pc, #260]	@ (24015068 <HAL_RCC_DeInit+0x230>)
24014f64:	681b      	ldr	r3, [r3, #0]
24014f66:	4a40      	ldr	r2, [pc, #256]	@ (24015068 <HAL_RCC_DeInit+0x230>)
24014f68:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
24014f6c:	6013      	str	r3, [r2, #0]

  /* Wait till PLL2 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
24014f6e:	e008      	b.n	24014f82 <HAL_RCC_DeInit+0x14a>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
24014f70:	f7ed febe 	bl	24002cf0 <HAL_GetTick>
24014f74:	4602      	mov	r2, r0
24014f76:	687b      	ldr	r3, [r7, #4]
24014f78:	1ad3      	subs	r3, r2, r3
24014f7a:	2b02      	cmp	r3, #2
24014f7c:	d901      	bls.n	24014f82 <HAL_RCC_DeInit+0x14a>
    {
      return HAL_TIMEOUT;
24014f7e:	2303      	movs	r3, #3
24014f80:	e06b      	b.n	2401505a <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
24014f82:	4b39      	ldr	r3, [pc, #228]	@ (24015068 <HAL_RCC_DeInit+0x230>)
24014f84:	681b      	ldr	r3, [r3, #0]
24014f86:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
24014f8a:	2b00      	cmp	r3, #0
24014f8c:	d1f0      	bne.n	24014f70 <HAL_RCC_DeInit+0x138>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
24014f8e:	f7ed feaf 	bl	24002cf0 <HAL_GetTick>
24014f92:	6078      	str	r0, [r7, #4]

  /* Reset PLL3 bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL3ON);
24014f94:	4b34      	ldr	r3, [pc, #208]	@ (24015068 <HAL_RCC_DeInit+0x230>)
24014f96:	681b      	ldr	r3, [r3, #0]
24014f98:	4a33      	ldr	r2, [pc, #204]	@ (24015068 <HAL_RCC_DeInit+0x230>)
24014f9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
24014f9e:	6013      	str	r3, [r2, #0]

  /* Wait till PLL3 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
24014fa0:	e008      	b.n	24014fb4 <HAL_RCC_DeInit+0x17c>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
24014fa2:	f7ed fea5 	bl	24002cf0 <HAL_GetTick>
24014fa6:	4602      	mov	r2, r0
24014fa8:	687b      	ldr	r3, [r7, #4]
24014faa:	1ad3      	subs	r3, r2, r3
24014fac:	2b02      	cmp	r3, #2
24014fae:	d901      	bls.n	24014fb4 <HAL_RCC_DeInit+0x17c>
    {
      return HAL_TIMEOUT;
24014fb0:	2303      	movs	r3, #3
24014fb2:	e052      	b.n	2401505a <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
24014fb4:	4b2c      	ldr	r3, [pc, #176]	@ (24015068 <HAL_RCC_DeInit+0x230>)
24014fb6:	681b      	ldr	r3, [r3, #0]
24014fb8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
24014fbc:	2b00      	cmp	r3, #0
24014fbe:	d1f0      	bne.n	24014fa2 <HAL_RCC_DeInit+0x16a>
    }
  }

#if defined(RCC_D1CFGR_HPRE)
  /* Reset D1CFGR register */
  CLEAR_REG(RCC->D1CFGR);
24014fc0:	4b29      	ldr	r3, [pc, #164]	@ (24015068 <HAL_RCC_DeInit+0x230>)
24014fc2:	2200      	movs	r2, #0
24014fc4:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  CLEAR_REG(RCC->D2CFGR);
24014fc6:	4b28      	ldr	r3, [pc, #160]	@ (24015068 <HAL_RCC_DeInit+0x230>)
24014fc8:	2200      	movs	r2, #0
24014fca:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  CLEAR_REG(RCC->D3CFGR);
24014fcc:	4b26      	ldr	r3, [pc, #152]	@ (24015068 <HAL_RCC_DeInit+0x230>)
24014fce:	2200      	movs	r2, #0
24014fd0:	621a      	str	r2, [r3, #32]
  /* Reset SRDCFGR register */
  CLEAR_REG(RCC->SRDCFGR);
#endif

  /* Reset PLLCKSELR register to default value */
  RCC->PLLCKSELR = RCC_PLLCKSELR_DIVM1_5 | RCC_PLLCKSELR_DIVM2_5 | RCC_PLLCKSELR_DIVM3_5;
24014fd2:	4b25      	ldr	r3, [pc, #148]	@ (24015068 <HAL_RCC_DeInit+0x230>)
24014fd4:	4a2a      	ldr	r2, [pc, #168]	@ (24015080 <HAL_RCC_DeInit+0x248>)
24014fd6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register to default value */
  WRITE_REG(RCC->PLLCFGR, 0x01FF0000U);
24014fd8:	4b23      	ldr	r3, [pc, #140]	@ (24015068 <HAL_RCC_DeInit+0x230>)
24014fda:	4a2a      	ldr	r2, [pc, #168]	@ (24015084 <HAL_RCC_DeInit+0x24c>)
24014fdc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Reset PLL1DIVR register to default value */
  WRITE_REG(RCC->PLL1DIVR, 0x01010280U);
24014fde:	4b22      	ldr	r3, [pc, #136]	@ (24015068 <HAL_RCC_DeInit+0x230>)
24014fe0:	4a29      	ldr	r2, [pc, #164]	@ (24015088 <HAL_RCC_DeInit+0x250>)
24014fe2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Reset PLL1FRACR register */
  CLEAR_REG(RCC->PLL1FRACR);
24014fe4:	4b20      	ldr	r3, [pc, #128]	@ (24015068 <HAL_RCC_DeInit+0x230>)
24014fe6:	2200      	movs	r2, #0
24014fe8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register to default value */
  WRITE_REG(RCC->PLL2DIVR, 0x01010280U);
24014fea:	4b1f      	ldr	r3, [pc, #124]	@ (24015068 <HAL_RCC_DeInit+0x230>)
24014fec:	4a26      	ldr	r2, [pc, #152]	@ (24015088 <HAL_RCC_DeInit+0x250>)
24014fee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */
  CLEAR_REG(RCC->PLL2FRACR);
24014ff0:	4b1d      	ldr	r3, [pc, #116]	@ (24015068 <HAL_RCC_DeInit+0x230>)
24014ff2:	2200      	movs	r2, #0
24014ff4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Reset PLL3DIVR register to default value */
  WRITE_REG(RCC->PLL3DIVR, 0x01010280U);
24014ff6:	4b1c      	ldr	r3, [pc, #112]	@ (24015068 <HAL_RCC_DeInit+0x230>)
24014ff8:	4a23      	ldr	r2, [pc, #140]	@ (24015088 <HAL_RCC_DeInit+0x250>)
24014ffa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  CLEAR_REG(RCC->PLL3FRACR);
24014ffc:	4b1a      	ldr	r3, [pc, #104]	@ (24015068 <HAL_RCC_DeInit+0x230>)
24014ffe:	2200      	movs	r2, #0
24015000:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset HSEEXT  */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEEXT);
#endif /* RCC_CR_HSEEXT */

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
24015002:	4b19      	ldr	r3, [pc, #100]	@ (24015068 <HAL_RCC_DeInit+0x230>)
24015004:	681b      	ldr	r3, [r3, #0]
24015006:	4a18      	ldr	r2, [pc, #96]	@ (24015068 <HAL_RCC_DeInit+0x230>)
24015008:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
2401500c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
2401500e:	4b16      	ldr	r3, [pc, #88]	@ (24015068 <HAL_RCC_DeInit+0x230>)
24015010:	2200      	movs	r2, #0
24015012:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Clear all interrupts flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
24015014:	4b14      	ldr	r3, [pc, #80]	@ (24015068 <HAL_RCC_DeInit+0x230>)
24015016:	f04f 32ff 	mov.w	r2, #4294967295
2401501a:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Reset all RSR flags */
  SET_BIT(RCC->RSR, RCC_RSR_RMVF);
2401501c:	4b12      	ldr	r3, [pc, #72]	@ (24015068 <HAL_RCC_DeInit+0x230>)
2401501e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
24015022:	4a11      	ldr	r2, [pc, #68]	@ (24015068 <HAL_RCC_DeInit+0x230>)
24015024:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
24015028:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLASH_LATENCY_DEFAULT  < __HAL_FLASH_GET_LATENCY())
2401502c:	4b0d      	ldr	r3, [pc, #52]	@ (24015064 <HAL_RCC_DeInit+0x22c>)
2401502e:	681b      	ldr	r3, [r3, #0]
24015030:	f003 0308 	and.w	r3, r3, #8
24015034:	2b00      	cmp	r3, #0
24015036:	d00f      	beq.n	24015058 <HAL_RCC_DeInit+0x220>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
24015038:	4b0a      	ldr	r3, [pc, #40]	@ (24015064 <HAL_RCC_DeInit+0x22c>)
2401503a:	681b      	ldr	r3, [r3, #0]
2401503c:	f023 030f 	bic.w	r3, r3, #15
24015040:	4a08      	ldr	r2, [pc, #32]	@ (24015064 <HAL_RCC_DeInit+0x22c>)
24015042:	f043 0307 	orr.w	r3, r3, #7
24015046:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
24015048:	4b06      	ldr	r3, [pc, #24]	@ (24015064 <HAL_RCC_DeInit+0x22c>)
2401504a:	681b      	ldr	r3, [r3, #0]
2401504c:	f003 030f 	and.w	r3, r3, #15
24015050:	2b07      	cmp	r3, #7
24015052:	d001      	beq.n	24015058 <HAL_RCC_DeInit+0x220>
    {
      return HAL_ERROR;
24015054:	2301      	movs	r3, #1
24015056:	e000      	b.n	2401505a <HAL_RCC_DeInit+0x222>
    }

  }

  return HAL_OK;
24015058:	2300      	movs	r3, #0
}
2401505a:	4618      	mov	r0, r3
2401505c:	3708      	adds	r7, #8
2401505e:	46bd      	mov	sp, r7
24015060:	bd80      	pop	{r7, pc}
24015062:	bf00      	nop
24015064:	52002000 	.word	0x52002000
24015068:	58024400 	.word	0x58024400
2401506c:	240004b8 	.word	0x240004b8
24015070:	03d09000 	.word	0x03d09000
24015074:	240004bc 	.word	0x240004bc
24015078:	240004ac 	.word	0x240004ac
2401507c:	fff6ed45 	.word	0xfff6ed45
24015080:	02020200 	.word	0x02020200
24015084:	01ff0000 	.word	0x01ff0000
24015088:	01010280 	.word	0x01010280

2401508c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
2401508c:	b580      	push	{r7, lr}
2401508e:	b08c      	sub	sp, #48	@ 0x30
24015090:	af00      	add	r7, sp, #0
24015092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
24015094:	687b      	ldr	r3, [r7, #4]
24015096:	2b00      	cmp	r3, #0
24015098:	d101      	bne.n	2401509e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
2401509a:	2301      	movs	r3, #1
2401509c:	e3c8      	b.n	24015830 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
2401509e:	687b      	ldr	r3, [r7, #4]
240150a0:	681b      	ldr	r3, [r3, #0]
240150a2:	f003 0301 	and.w	r3, r3, #1
240150a6:	2b00      	cmp	r3, #0
240150a8:	f000 8087 	beq.w	240151ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
240150ac:	4b88      	ldr	r3, [pc, #544]	@ (240152d0 <HAL_RCC_OscConfig+0x244>)
240150ae:	691b      	ldr	r3, [r3, #16]
240150b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
240150b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
240150b6:	4b86      	ldr	r3, [pc, #536]	@ (240152d0 <HAL_RCC_OscConfig+0x244>)
240150b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
240150ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
240150bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
240150be:	2b10      	cmp	r3, #16
240150c0:	d007      	beq.n	240150d2 <HAL_RCC_OscConfig+0x46>
240150c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
240150c4:	2b18      	cmp	r3, #24
240150c6:	d110      	bne.n	240150ea <HAL_RCC_OscConfig+0x5e>
240150c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
240150ca:	f003 0303 	and.w	r3, r3, #3
240150ce:	2b02      	cmp	r3, #2
240150d0:	d10b      	bne.n	240150ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
240150d2:	4b7f      	ldr	r3, [pc, #508]	@ (240152d0 <HAL_RCC_OscConfig+0x244>)
240150d4:	681b      	ldr	r3, [r3, #0]
240150d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
240150da:	2b00      	cmp	r3, #0
240150dc:	d06c      	beq.n	240151b8 <HAL_RCC_OscConfig+0x12c>
240150de:	687b      	ldr	r3, [r7, #4]
240150e0:	685b      	ldr	r3, [r3, #4]
240150e2:	2b00      	cmp	r3, #0
240150e4:	d168      	bne.n	240151b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
240150e6:	2301      	movs	r3, #1
240150e8:	e3a2      	b.n	24015830 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
240150ea:	687b      	ldr	r3, [r7, #4]
240150ec:	685b      	ldr	r3, [r3, #4]
240150ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
240150f2:	d106      	bne.n	24015102 <HAL_RCC_OscConfig+0x76>
240150f4:	4b76      	ldr	r3, [pc, #472]	@ (240152d0 <HAL_RCC_OscConfig+0x244>)
240150f6:	681b      	ldr	r3, [r3, #0]
240150f8:	4a75      	ldr	r2, [pc, #468]	@ (240152d0 <HAL_RCC_OscConfig+0x244>)
240150fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
240150fe:	6013      	str	r3, [r2, #0]
24015100:	e02e      	b.n	24015160 <HAL_RCC_OscConfig+0xd4>
24015102:	687b      	ldr	r3, [r7, #4]
24015104:	685b      	ldr	r3, [r3, #4]
24015106:	2b00      	cmp	r3, #0
24015108:	d10c      	bne.n	24015124 <HAL_RCC_OscConfig+0x98>
2401510a:	4b71      	ldr	r3, [pc, #452]	@ (240152d0 <HAL_RCC_OscConfig+0x244>)
2401510c:	681b      	ldr	r3, [r3, #0]
2401510e:	4a70      	ldr	r2, [pc, #448]	@ (240152d0 <HAL_RCC_OscConfig+0x244>)
24015110:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
24015114:	6013      	str	r3, [r2, #0]
24015116:	4b6e      	ldr	r3, [pc, #440]	@ (240152d0 <HAL_RCC_OscConfig+0x244>)
24015118:	681b      	ldr	r3, [r3, #0]
2401511a:	4a6d      	ldr	r2, [pc, #436]	@ (240152d0 <HAL_RCC_OscConfig+0x244>)
2401511c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
24015120:	6013      	str	r3, [r2, #0]
24015122:	e01d      	b.n	24015160 <HAL_RCC_OscConfig+0xd4>
24015124:	687b      	ldr	r3, [r7, #4]
24015126:	685b      	ldr	r3, [r3, #4]
24015128:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
2401512c:	d10c      	bne.n	24015148 <HAL_RCC_OscConfig+0xbc>
2401512e:	4b68      	ldr	r3, [pc, #416]	@ (240152d0 <HAL_RCC_OscConfig+0x244>)
24015130:	681b      	ldr	r3, [r3, #0]
24015132:	4a67      	ldr	r2, [pc, #412]	@ (240152d0 <HAL_RCC_OscConfig+0x244>)
24015134:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
24015138:	6013      	str	r3, [r2, #0]
2401513a:	4b65      	ldr	r3, [pc, #404]	@ (240152d0 <HAL_RCC_OscConfig+0x244>)
2401513c:	681b      	ldr	r3, [r3, #0]
2401513e:	4a64      	ldr	r2, [pc, #400]	@ (240152d0 <HAL_RCC_OscConfig+0x244>)
24015140:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
24015144:	6013      	str	r3, [r2, #0]
24015146:	e00b      	b.n	24015160 <HAL_RCC_OscConfig+0xd4>
24015148:	4b61      	ldr	r3, [pc, #388]	@ (240152d0 <HAL_RCC_OscConfig+0x244>)
2401514a:	681b      	ldr	r3, [r3, #0]
2401514c:	4a60      	ldr	r2, [pc, #384]	@ (240152d0 <HAL_RCC_OscConfig+0x244>)
2401514e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
24015152:	6013      	str	r3, [r2, #0]
24015154:	4b5e      	ldr	r3, [pc, #376]	@ (240152d0 <HAL_RCC_OscConfig+0x244>)
24015156:	681b      	ldr	r3, [r3, #0]
24015158:	4a5d      	ldr	r2, [pc, #372]	@ (240152d0 <HAL_RCC_OscConfig+0x244>)
2401515a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
2401515e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
24015160:	687b      	ldr	r3, [r7, #4]
24015162:	685b      	ldr	r3, [r3, #4]
24015164:	2b00      	cmp	r3, #0
24015166:	d013      	beq.n	24015190 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24015168:	f7ed fdc2 	bl	24002cf0 <HAL_GetTick>
2401516c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
2401516e:	e008      	b.n	24015182 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
24015170:	f7ed fdbe 	bl	24002cf0 <HAL_GetTick>
24015174:	4602      	mov	r2, r0
24015176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
24015178:	1ad3      	subs	r3, r2, r3
2401517a:	2b64      	cmp	r3, #100	@ 0x64
2401517c:	d901      	bls.n	24015182 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
2401517e:	2303      	movs	r3, #3
24015180:	e356      	b.n	24015830 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24015182:	4b53      	ldr	r3, [pc, #332]	@ (240152d0 <HAL_RCC_OscConfig+0x244>)
24015184:	681b      	ldr	r3, [r3, #0]
24015186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
2401518a:	2b00      	cmp	r3, #0
2401518c:	d0f0      	beq.n	24015170 <HAL_RCC_OscConfig+0xe4>
2401518e:	e014      	b.n	240151ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24015190:	f7ed fdae 	bl	24002cf0 <HAL_GetTick>
24015194:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
24015196:	e008      	b.n	240151aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
24015198:	f7ed fdaa 	bl	24002cf0 <HAL_GetTick>
2401519c:	4602      	mov	r2, r0
2401519e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
240151a0:	1ad3      	subs	r3, r2, r3
240151a2:	2b64      	cmp	r3, #100	@ 0x64
240151a4:	d901      	bls.n	240151aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
240151a6:	2303      	movs	r3, #3
240151a8:	e342      	b.n	24015830 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
240151aa:	4b49      	ldr	r3, [pc, #292]	@ (240152d0 <HAL_RCC_OscConfig+0x244>)
240151ac:	681b      	ldr	r3, [r3, #0]
240151ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
240151b2:	2b00      	cmp	r3, #0
240151b4:	d1f0      	bne.n	24015198 <HAL_RCC_OscConfig+0x10c>
240151b6:	e000      	b.n	240151ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
240151b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
240151ba:	687b      	ldr	r3, [r7, #4]
240151bc:	681b      	ldr	r3, [r3, #0]
240151be:	f003 0302 	and.w	r3, r3, #2
240151c2:	2b00      	cmp	r3, #0
240151c4:	f000 808c 	beq.w	240152e0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
240151c8:	4b41      	ldr	r3, [pc, #260]	@ (240152d0 <HAL_RCC_OscConfig+0x244>)
240151ca:	691b      	ldr	r3, [r3, #16]
240151cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
240151d0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
240151d2:	4b3f      	ldr	r3, [pc, #252]	@ (240152d0 <HAL_RCC_OscConfig+0x244>)
240151d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
240151d6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
240151d8:	6a3b      	ldr	r3, [r7, #32]
240151da:	2b00      	cmp	r3, #0
240151dc:	d007      	beq.n	240151ee <HAL_RCC_OscConfig+0x162>
240151de:	6a3b      	ldr	r3, [r7, #32]
240151e0:	2b18      	cmp	r3, #24
240151e2:	d137      	bne.n	24015254 <HAL_RCC_OscConfig+0x1c8>
240151e4:	69fb      	ldr	r3, [r7, #28]
240151e6:	f003 0303 	and.w	r3, r3, #3
240151ea:	2b00      	cmp	r3, #0
240151ec:	d132      	bne.n	24015254 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
240151ee:	4b38      	ldr	r3, [pc, #224]	@ (240152d0 <HAL_RCC_OscConfig+0x244>)
240151f0:	681b      	ldr	r3, [r3, #0]
240151f2:	f003 0304 	and.w	r3, r3, #4
240151f6:	2b00      	cmp	r3, #0
240151f8:	d005      	beq.n	24015206 <HAL_RCC_OscConfig+0x17a>
240151fa:	687b      	ldr	r3, [r7, #4]
240151fc:	68db      	ldr	r3, [r3, #12]
240151fe:	2b00      	cmp	r3, #0
24015200:	d101      	bne.n	24015206 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
24015202:	2301      	movs	r3, #1
24015204:	e314      	b.n	24015830 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
24015206:	4b32      	ldr	r3, [pc, #200]	@ (240152d0 <HAL_RCC_OscConfig+0x244>)
24015208:	681b      	ldr	r3, [r3, #0]
2401520a:	f023 0219 	bic.w	r2, r3, #25
2401520e:	687b      	ldr	r3, [r7, #4]
24015210:	68db      	ldr	r3, [r3, #12]
24015212:	492f      	ldr	r1, [pc, #188]	@ (240152d0 <HAL_RCC_OscConfig+0x244>)
24015214:	4313      	orrs	r3, r2
24015216:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24015218:	f7ed fd6a 	bl	24002cf0 <HAL_GetTick>
2401521c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
2401521e:	e008      	b.n	24015232 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
24015220:	f7ed fd66 	bl	24002cf0 <HAL_GetTick>
24015224:	4602      	mov	r2, r0
24015226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
24015228:	1ad3      	subs	r3, r2, r3
2401522a:	2b02      	cmp	r3, #2
2401522c:	d901      	bls.n	24015232 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
2401522e:	2303      	movs	r3, #3
24015230:	e2fe      	b.n	24015830 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24015232:	4b27      	ldr	r3, [pc, #156]	@ (240152d0 <HAL_RCC_OscConfig+0x244>)
24015234:	681b      	ldr	r3, [r3, #0]
24015236:	f003 0304 	and.w	r3, r3, #4
2401523a:	2b00      	cmp	r3, #0
2401523c:	d0f0      	beq.n	24015220 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
2401523e:	4b24      	ldr	r3, [pc, #144]	@ (240152d0 <HAL_RCC_OscConfig+0x244>)
24015240:	685b      	ldr	r3, [r3, #4]
24015242:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
24015246:	687b      	ldr	r3, [r7, #4]
24015248:	691b      	ldr	r3, [r3, #16]
2401524a:	061b      	lsls	r3, r3, #24
2401524c:	4920      	ldr	r1, [pc, #128]	@ (240152d0 <HAL_RCC_OscConfig+0x244>)
2401524e:	4313      	orrs	r3, r2
24015250:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
24015252:	e045      	b.n	240152e0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
24015254:	687b      	ldr	r3, [r7, #4]
24015256:	68db      	ldr	r3, [r3, #12]
24015258:	2b00      	cmp	r3, #0
2401525a:	d026      	beq.n	240152aa <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
2401525c:	4b1c      	ldr	r3, [pc, #112]	@ (240152d0 <HAL_RCC_OscConfig+0x244>)
2401525e:	681b      	ldr	r3, [r3, #0]
24015260:	f023 0219 	bic.w	r2, r3, #25
24015264:	687b      	ldr	r3, [r7, #4]
24015266:	68db      	ldr	r3, [r3, #12]
24015268:	4919      	ldr	r1, [pc, #100]	@ (240152d0 <HAL_RCC_OscConfig+0x244>)
2401526a:	4313      	orrs	r3, r2
2401526c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2401526e:	f7ed fd3f 	bl	24002cf0 <HAL_GetTick>
24015272:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24015274:	e008      	b.n	24015288 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
24015276:	f7ed fd3b 	bl	24002cf0 <HAL_GetTick>
2401527a:	4602      	mov	r2, r0
2401527c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2401527e:	1ad3      	subs	r3, r2, r3
24015280:	2b02      	cmp	r3, #2
24015282:	d901      	bls.n	24015288 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
24015284:	2303      	movs	r3, #3
24015286:	e2d3      	b.n	24015830 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24015288:	4b11      	ldr	r3, [pc, #68]	@ (240152d0 <HAL_RCC_OscConfig+0x244>)
2401528a:	681b      	ldr	r3, [r3, #0]
2401528c:	f003 0304 	and.w	r3, r3, #4
24015290:	2b00      	cmp	r3, #0
24015292:	d0f0      	beq.n	24015276 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
24015294:	4b0e      	ldr	r3, [pc, #56]	@ (240152d0 <HAL_RCC_OscConfig+0x244>)
24015296:	685b      	ldr	r3, [r3, #4]
24015298:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
2401529c:	687b      	ldr	r3, [r7, #4]
2401529e:	691b      	ldr	r3, [r3, #16]
240152a0:	061b      	lsls	r3, r3, #24
240152a2:	490b      	ldr	r1, [pc, #44]	@ (240152d0 <HAL_RCC_OscConfig+0x244>)
240152a4:	4313      	orrs	r3, r2
240152a6:	604b      	str	r3, [r1, #4]
240152a8:	e01a      	b.n	240152e0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
240152aa:	4b09      	ldr	r3, [pc, #36]	@ (240152d0 <HAL_RCC_OscConfig+0x244>)
240152ac:	681b      	ldr	r3, [r3, #0]
240152ae:	4a08      	ldr	r2, [pc, #32]	@ (240152d0 <HAL_RCC_OscConfig+0x244>)
240152b0:	f023 0301 	bic.w	r3, r3, #1
240152b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
240152b6:	f7ed fd1b 	bl	24002cf0 <HAL_GetTick>
240152ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
240152bc:	e00a      	b.n	240152d4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
240152be:	f7ed fd17 	bl	24002cf0 <HAL_GetTick>
240152c2:	4602      	mov	r2, r0
240152c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
240152c6:	1ad3      	subs	r3, r2, r3
240152c8:	2b02      	cmp	r3, #2
240152ca:	d903      	bls.n	240152d4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
240152cc:	2303      	movs	r3, #3
240152ce:	e2af      	b.n	24015830 <HAL_RCC_OscConfig+0x7a4>
240152d0:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
240152d4:	4b96      	ldr	r3, [pc, #600]	@ (24015530 <HAL_RCC_OscConfig+0x4a4>)
240152d6:	681b      	ldr	r3, [r3, #0]
240152d8:	f003 0304 	and.w	r3, r3, #4
240152dc:	2b00      	cmp	r3, #0
240152de:	d1ee      	bne.n	240152be <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
240152e0:	687b      	ldr	r3, [r7, #4]
240152e2:	681b      	ldr	r3, [r3, #0]
240152e4:	f003 0310 	and.w	r3, r3, #16
240152e8:	2b00      	cmp	r3, #0
240152ea:	d06a      	beq.n	240153c2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
240152ec:	4b90      	ldr	r3, [pc, #576]	@ (24015530 <HAL_RCC_OscConfig+0x4a4>)
240152ee:	691b      	ldr	r3, [r3, #16]
240152f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
240152f4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
240152f6:	4b8e      	ldr	r3, [pc, #568]	@ (24015530 <HAL_RCC_OscConfig+0x4a4>)
240152f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
240152fa:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
240152fc:	69bb      	ldr	r3, [r7, #24]
240152fe:	2b08      	cmp	r3, #8
24015300:	d007      	beq.n	24015312 <HAL_RCC_OscConfig+0x286>
24015302:	69bb      	ldr	r3, [r7, #24]
24015304:	2b18      	cmp	r3, #24
24015306:	d11b      	bne.n	24015340 <HAL_RCC_OscConfig+0x2b4>
24015308:	697b      	ldr	r3, [r7, #20]
2401530a:	f003 0303 	and.w	r3, r3, #3
2401530e:	2b01      	cmp	r3, #1
24015310:	d116      	bne.n	24015340 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
24015312:	4b87      	ldr	r3, [pc, #540]	@ (24015530 <HAL_RCC_OscConfig+0x4a4>)
24015314:	681b      	ldr	r3, [r3, #0]
24015316:	f403 7380 	and.w	r3, r3, #256	@ 0x100
2401531a:	2b00      	cmp	r3, #0
2401531c:	d005      	beq.n	2401532a <HAL_RCC_OscConfig+0x29e>
2401531e:	687b      	ldr	r3, [r7, #4]
24015320:	69db      	ldr	r3, [r3, #28]
24015322:	2b80      	cmp	r3, #128	@ 0x80
24015324:	d001      	beq.n	2401532a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
24015326:	2301      	movs	r3, #1
24015328:	e282      	b.n	24015830 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
2401532a:	4b81      	ldr	r3, [pc, #516]	@ (24015530 <HAL_RCC_OscConfig+0x4a4>)
2401532c:	68db      	ldr	r3, [r3, #12]
2401532e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
24015332:	687b      	ldr	r3, [r7, #4]
24015334:	6a1b      	ldr	r3, [r3, #32]
24015336:	061b      	lsls	r3, r3, #24
24015338:	497d      	ldr	r1, [pc, #500]	@ (24015530 <HAL_RCC_OscConfig+0x4a4>)
2401533a:	4313      	orrs	r3, r2
2401533c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
2401533e:	e040      	b.n	240153c2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
24015340:	687b      	ldr	r3, [r7, #4]
24015342:	69db      	ldr	r3, [r3, #28]
24015344:	2b00      	cmp	r3, #0
24015346:	d023      	beq.n	24015390 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
24015348:	4b79      	ldr	r3, [pc, #484]	@ (24015530 <HAL_RCC_OscConfig+0x4a4>)
2401534a:	681b      	ldr	r3, [r3, #0]
2401534c:	4a78      	ldr	r2, [pc, #480]	@ (24015530 <HAL_RCC_OscConfig+0x4a4>)
2401534e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
24015352:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24015354:	f7ed fccc 	bl	24002cf0 <HAL_GetTick>
24015358:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
2401535a:	e008      	b.n	2401536e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
2401535c:	f7ed fcc8 	bl	24002cf0 <HAL_GetTick>
24015360:	4602      	mov	r2, r0
24015362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
24015364:	1ad3      	subs	r3, r2, r3
24015366:	2b02      	cmp	r3, #2
24015368:	d901      	bls.n	2401536e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
2401536a:	2303      	movs	r3, #3
2401536c:	e260      	b.n	24015830 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
2401536e:	4b70      	ldr	r3, [pc, #448]	@ (24015530 <HAL_RCC_OscConfig+0x4a4>)
24015370:	681b      	ldr	r3, [r3, #0]
24015372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
24015376:	2b00      	cmp	r3, #0
24015378:	d0f0      	beq.n	2401535c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
2401537a:	4b6d      	ldr	r3, [pc, #436]	@ (24015530 <HAL_RCC_OscConfig+0x4a4>)
2401537c:	68db      	ldr	r3, [r3, #12]
2401537e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
24015382:	687b      	ldr	r3, [r7, #4]
24015384:	6a1b      	ldr	r3, [r3, #32]
24015386:	061b      	lsls	r3, r3, #24
24015388:	4969      	ldr	r1, [pc, #420]	@ (24015530 <HAL_RCC_OscConfig+0x4a4>)
2401538a:	4313      	orrs	r3, r2
2401538c:	60cb      	str	r3, [r1, #12]
2401538e:	e018      	b.n	240153c2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
24015390:	4b67      	ldr	r3, [pc, #412]	@ (24015530 <HAL_RCC_OscConfig+0x4a4>)
24015392:	681b      	ldr	r3, [r3, #0]
24015394:	4a66      	ldr	r2, [pc, #408]	@ (24015530 <HAL_RCC_OscConfig+0x4a4>)
24015396:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
2401539a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2401539c:	f7ed fca8 	bl	24002cf0 <HAL_GetTick>
240153a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
240153a2:	e008      	b.n	240153b6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
240153a4:	f7ed fca4 	bl	24002cf0 <HAL_GetTick>
240153a8:	4602      	mov	r2, r0
240153aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
240153ac:	1ad3      	subs	r3, r2, r3
240153ae:	2b02      	cmp	r3, #2
240153b0:	d901      	bls.n	240153b6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
240153b2:	2303      	movs	r3, #3
240153b4:	e23c      	b.n	24015830 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
240153b6:	4b5e      	ldr	r3, [pc, #376]	@ (24015530 <HAL_RCC_OscConfig+0x4a4>)
240153b8:	681b      	ldr	r3, [r3, #0]
240153ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
240153be:	2b00      	cmp	r3, #0
240153c0:	d1f0      	bne.n	240153a4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
240153c2:	687b      	ldr	r3, [r7, #4]
240153c4:	681b      	ldr	r3, [r3, #0]
240153c6:	f003 0308 	and.w	r3, r3, #8
240153ca:	2b00      	cmp	r3, #0
240153cc:	d036      	beq.n	2401543c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
240153ce:	687b      	ldr	r3, [r7, #4]
240153d0:	695b      	ldr	r3, [r3, #20]
240153d2:	2b00      	cmp	r3, #0
240153d4:	d019      	beq.n	2401540a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
240153d6:	4b56      	ldr	r3, [pc, #344]	@ (24015530 <HAL_RCC_OscConfig+0x4a4>)
240153d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
240153da:	4a55      	ldr	r2, [pc, #340]	@ (24015530 <HAL_RCC_OscConfig+0x4a4>)
240153dc:	f043 0301 	orr.w	r3, r3, #1
240153e0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
240153e2:	f7ed fc85 	bl	24002cf0 <HAL_GetTick>
240153e6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
240153e8:	e008      	b.n	240153fc <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
240153ea:	f7ed fc81 	bl	24002cf0 <HAL_GetTick>
240153ee:	4602      	mov	r2, r0
240153f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
240153f2:	1ad3      	subs	r3, r2, r3
240153f4:	2b02      	cmp	r3, #2
240153f6:	d901      	bls.n	240153fc <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
240153f8:	2303      	movs	r3, #3
240153fa:	e219      	b.n	24015830 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
240153fc:	4b4c      	ldr	r3, [pc, #304]	@ (24015530 <HAL_RCC_OscConfig+0x4a4>)
240153fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
24015400:	f003 0302 	and.w	r3, r3, #2
24015404:	2b00      	cmp	r3, #0
24015406:	d0f0      	beq.n	240153ea <HAL_RCC_OscConfig+0x35e>
24015408:	e018      	b.n	2401543c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
2401540a:	4b49      	ldr	r3, [pc, #292]	@ (24015530 <HAL_RCC_OscConfig+0x4a4>)
2401540c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
2401540e:	4a48      	ldr	r2, [pc, #288]	@ (24015530 <HAL_RCC_OscConfig+0x4a4>)
24015410:	f023 0301 	bic.w	r3, r3, #1
24015414:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
24015416:	f7ed fc6b 	bl	24002cf0 <HAL_GetTick>
2401541a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
2401541c:	e008      	b.n	24015430 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
2401541e:	f7ed fc67 	bl	24002cf0 <HAL_GetTick>
24015422:	4602      	mov	r2, r0
24015424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
24015426:	1ad3      	subs	r3, r2, r3
24015428:	2b02      	cmp	r3, #2
2401542a:	d901      	bls.n	24015430 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
2401542c:	2303      	movs	r3, #3
2401542e:	e1ff      	b.n	24015830 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
24015430:	4b3f      	ldr	r3, [pc, #252]	@ (24015530 <HAL_RCC_OscConfig+0x4a4>)
24015432:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
24015434:	f003 0302 	and.w	r3, r3, #2
24015438:	2b00      	cmp	r3, #0
2401543a:	d1f0      	bne.n	2401541e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
2401543c:	687b      	ldr	r3, [r7, #4]
2401543e:	681b      	ldr	r3, [r3, #0]
24015440:	f003 0320 	and.w	r3, r3, #32
24015444:	2b00      	cmp	r3, #0
24015446:	d036      	beq.n	240154b6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
24015448:	687b      	ldr	r3, [r7, #4]
2401544a:	699b      	ldr	r3, [r3, #24]
2401544c:	2b00      	cmp	r3, #0
2401544e:	d019      	beq.n	24015484 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
24015450:	4b37      	ldr	r3, [pc, #220]	@ (24015530 <HAL_RCC_OscConfig+0x4a4>)
24015452:	681b      	ldr	r3, [r3, #0]
24015454:	4a36      	ldr	r2, [pc, #216]	@ (24015530 <HAL_RCC_OscConfig+0x4a4>)
24015456:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
2401545a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
2401545c:	f7ed fc48 	bl	24002cf0 <HAL_GetTick>
24015460:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
24015462:	e008      	b.n	24015476 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
24015464:	f7ed fc44 	bl	24002cf0 <HAL_GetTick>
24015468:	4602      	mov	r2, r0
2401546a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2401546c:	1ad3      	subs	r3, r2, r3
2401546e:	2b02      	cmp	r3, #2
24015470:	d901      	bls.n	24015476 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
24015472:	2303      	movs	r3, #3
24015474:	e1dc      	b.n	24015830 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
24015476:	4b2e      	ldr	r3, [pc, #184]	@ (24015530 <HAL_RCC_OscConfig+0x4a4>)
24015478:	681b      	ldr	r3, [r3, #0]
2401547a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
2401547e:	2b00      	cmp	r3, #0
24015480:	d0f0      	beq.n	24015464 <HAL_RCC_OscConfig+0x3d8>
24015482:	e018      	b.n	240154b6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
24015484:	4b2a      	ldr	r3, [pc, #168]	@ (24015530 <HAL_RCC_OscConfig+0x4a4>)
24015486:	681b      	ldr	r3, [r3, #0]
24015488:	4a29      	ldr	r2, [pc, #164]	@ (24015530 <HAL_RCC_OscConfig+0x4a4>)
2401548a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
2401548e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
24015490:	f7ed fc2e 	bl	24002cf0 <HAL_GetTick>
24015494:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
24015496:	e008      	b.n	240154aa <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
24015498:	f7ed fc2a 	bl	24002cf0 <HAL_GetTick>
2401549c:	4602      	mov	r2, r0
2401549e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
240154a0:	1ad3      	subs	r3, r2, r3
240154a2:	2b02      	cmp	r3, #2
240154a4:	d901      	bls.n	240154aa <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
240154a6:	2303      	movs	r3, #3
240154a8:	e1c2      	b.n	24015830 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
240154aa:	4b21      	ldr	r3, [pc, #132]	@ (24015530 <HAL_RCC_OscConfig+0x4a4>)
240154ac:	681b      	ldr	r3, [r3, #0]
240154ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
240154b2:	2b00      	cmp	r3, #0
240154b4:	d1f0      	bne.n	24015498 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
240154b6:	687b      	ldr	r3, [r7, #4]
240154b8:	681b      	ldr	r3, [r3, #0]
240154ba:	f003 0304 	and.w	r3, r3, #4
240154be:	2b00      	cmp	r3, #0
240154c0:	f000 8086 	beq.w	240155d0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
240154c4:	4b1b      	ldr	r3, [pc, #108]	@ (24015534 <HAL_RCC_OscConfig+0x4a8>)
240154c6:	681b      	ldr	r3, [r3, #0]
240154c8:	4a1a      	ldr	r2, [pc, #104]	@ (24015534 <HAL_RCC_OscConfig+0x4a8>)
240154ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
240154ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
240154d0:	f7ed fc0e 	bl	24002cf0 <HAL_GetTick>
240154d4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
240154d6:	e008      	b.n	240154ea <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
240154d8:	f7ed fc0a 	bl	24002cf0 <HAL_GetTick>
240154dc:	4602      	mov	r2, r0
240154de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
240154e0:	1ad3      	subs	r3, r2, r3
240154e2:	2b64      	cmp	r3, #100	@ 0x64
240154e4:	d901      	bls.n	240154ea <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
240154e6:	2303      	movs	r3, #3
240154e8:	e1a2      	b.n	24015830 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
240154ea:	4b12      	ldr	r3, [pc, #72]	@ (24015534 <HAL_RCC_OscConfig+0x4a8>)
240154ec:	681b      	ldr	r3, [r3, #0]
240154ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
240154f2:	2b00      	cmp	r3, #0
240154f4:	d0f0      	beq.n	240154d8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
240154f6:	687b      	ldr	r3, [r7, #4]
240154f8:	689b      	ldr	r3, [r3, #8]
240154fa:	2b01      	cmp	r3, #1
240154fc:	d106      	bne.n	2401550c <HAL_RCC_OscConfig+0x480>
240154fe:	4b0c      	ldr	r3, [pc, #48]	@ (24015530 <HAL_RCC_OscConfig+0x4a4>)
24015500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
24015502:	4a0b      	ldr	r2, [pc, #44]	@ (24015530 <HAL_RCC_OscConfig+0x4a4>)
24015504:	f043 0301 	orr.w	r3, r3, #1
24015508:	6713      	str	r3, [r2, #112]	@ 0x70
2401550a:	e032      	b.n	24015572 <HAL_RCC_OscConfig+0x4e6>
2401550c:	687b      	ldr	r3, [r7, #4]
2401550e:	689b      	ldr	r3, [r3, #8]
24015510:	2b00      	cmp	r3, #0
24015512:	d111      	bne.n	24015538 <HAL_RCC_OscConfig+0x4ac>
24015514:	4b06      	ldr	r3, [pc, #24]	@ (24015530 <HAL_RCC_OscConfig+0x4a4>)
24015516:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
24015518:	4a05      	ldr	r2, [pc, #20]	@ (24015530 <HAL_RCC_OscConfig+0x4a4>)
2401551a:	f023 0301 	bic.w	r3, r3, #1
2401551e:	6713      	str	r3, [r2, #112]	@ 0x70
24015520:	4b03      	ldr	r3, [pc, #12]	@ (24015530 <HAL_RCC_OscConfig+0x4a4>)
24015522:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
24015524:	4a02      	ldr	r2, [pc, #8]	@ (24015530 <HAL_RCC_OscConfig+0x4a4>)
24015526:	f023 0304 	bic.w	r3, r3, #4
2401552a:	6713      	str	r3, [r2, #112]	@ 0x70
2401552c:	e021      	b.n	24015572 <HAL_RCC_OscConfig+0x4e6>
2401552e:	bf00      	nop
24015530:	58024400 	.word	0x58024400
24015534:	58024800 	.word	0x58024800
24015538:	687b      	ldr	r3, [r7, #4]
2401553a:	689b      	ldr	r3, [r3, #8]
2401553c:	2b05      	cmp	r3, #5
2401553e:	d10c      	bne.n	2401555a <HAL_RCC_OscConfig+0x4ce>
24015540:	4b83      	ldr	r3, [pc, #524]	@ (24015750 <HAL_RCC_OscConfig+0x6c4>)
24015542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
24015544:	4a82      	ldr	r2, [pc, #520]	@ (24015750 <HAL_RCC_OscConfig+0x6c4>)
24015546:	f043 0304 	orr.w	r3, r3, #4
2401554a:	6713      	str	r3, [r2, #112]	@ 0x70
2401554c:	4b80      	ldr	r3, [pc, #512]	@ (24015750 <HAL_RCC_OscConfig+0x6c4>)
2401554e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
24015550:	4a7f      	ldr	r2, [pc, #508]	@ (24015750 <HAL_RCC_OscConfig+0x6c4>)
24015552:	f043 0301 	orr.w	r3, r3, #1
24015556:	6713      	str	r3, [r2, #112]	@ 0x70
24015558:	e00b      	b.n	24015572 <HAL_RCC_OscConfig+0x4e6>
2401555a:	4b7d      	ldr	r3, [pc, #500]	@ (24015750 <HAL_RCC_OscConfig+0x6c4>)
2401555c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2401555e:	4a7c      	ldr	r2, [pc, #496]	@ (24015750 <HAL_RCC_OscConfig+0x6c4>)
24015560:	f023 0301 	bic.w	r3, r3, #1
24015564:	6713      	str	r3, [r2, #112]	@ 0x70
24015566:	4b7a      	ldr	r3, [pc, #488]	@ (24015750 <HAL_RCC_OscConfig+0x6c4>)
24015568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2401556a:	4a79      	ldr	r2, [pc, #484]	@ (24015750 <HAL_RCC_OscConfig+0x6c4>)
2401556c:	f023 0304 	bic.w	r3, r3, #4
24015570:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
24015572:	687b      	ldr	r3, [r7, #4]
24015574:	689b      	ldr	r3, [r3, #8]
24015576:	2b00      	cmp	r3, #0
24015578:	d015      	beq.n	240155a6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
2401557a:	f7ed fbb9 	bl	24002cf0 <HAL_GetTick>
2401557e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24015580:	e00a      	b.n	24015598 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24015582:	f7ed fbb5 	bl	24002cf0 <HAL_GetTick>
24015586:	4602      	mov	r2, r0
24015588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2401558a:	1ad3      	subs	r3, r2, r3
2401558c:	f241 3288 	movw	r2, #5000	@ 0x1388
24015590:	4293      	cmp	r3, r2
24015592:	d901      	bls.n	24015598 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
24015594:	2303      	movs	r3, #3
24015596:	e14b      	b.n	24015830 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24015598:	4b6d      	ldr	r3, [pc, #436]	@ (24015750 <HAL_RCC_OscConfig+0x6c4>)
2401559a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2401559c:	f003 0302 	and.w	r3, r3, #2
240155a0:	2b00      	cmp	r3, #0
240155a2:	d0ee      	beq.n	24015582 <HAL_RCC_OscConfig+0x4f6>
240155a4:	e014      	b.n	240155d0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
240155a6:	f7ed fba3 	bl	24002cf0 <HAL_GetTick>
240155aa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
240155ac:	e00a      	b.n	240155c4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
240155ae:	f7ed fb9f 	bl	24002cf0 <HAL_GetTick>
240155b2:	4602      	mov	r2, r0
240155b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
240155b6:	1ad3      	subs	r3, r2, r3
240155b8:	f241 3288 	movw	r2, #5000	@ 0x1388
240155bc:	4293      	cmp	r3, r2
240155be:	d901      	bls.n	240155c4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
240155c0:	2303      	movs	r3, #3
240155c2:	e135      	b.n	24015830 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
240155c4:	4b62      	ldr	r3, [pc, #392]	@ (24015750 <HAL_RCC_OscConfig+0x6c4>)
240155c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
240155c8:	f003 0302 	and.w	r3, r3, #2
240155cc:	2b00      	cmp	r3, #0
240155ce:	d1ee      	bne.n	240155ae <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
240155d0:	687b      	ldr	r3, [r7, #4]
240155d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
240155d4:	2b00      	cmp	r3, #0
240155d6:	f000 812a 	beq.w	2401582e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
240155da:	4b5d      	ldr	r3, [pc, #372]	@ (24015750 <HAL_RCC_OscConfig+0x6c4>)
240155dc:	691b      	ldr	r3, [r3, #16]
240155de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
240155e2:	2b18      	cmp	r3, #24
240155e4:	f000 80ba 	beq.w	2401575c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
240155e8:	687b      	ldr	r3, [r7, #4]
240155ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
240155ec:	2b02      	cmp	r3, #2
240155ee:	f040 8095 	bne.w	2401571c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
240155f2:	4b57      	ldr	r3, [pc, #348]	@ (24015750 <HAL_RCC_OscConfig+0x6c4>)
240155f4:	681b      	ldr	r3, [r3, #0]
240155f6:	4a56      	ldr	r2, [pc, #344]	@ (24015750 <HAL_RCC_OscConfig+0x6c4>)
240155f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
240155fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
240155fe:	f7ed fb77 	bl	24002cf0 <HAL_GetTick>
24015602:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24015604:	e008      	b.n	24015618 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
24015606:	f7ed fb73 	bl	24002cf0 <HAL_GetTick>
2401560a:	4602      	mov	r2, r0
2401560c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2401560e:	1ad3      	subs	r3, r2, r3
24015610:	2b02      	cmp	r3, #2
24015612:	d901      	bls.n	24015618 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
24015614:	2303      	movs	r3, #3
24015616:	e10b      	b.n	24015830 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24015618:	4b4d      	ldr	r3, [pc, #308]	@ (24015750 <HAL_RCC_OscConfig+0x6c4>)
2401561a:	681b      	ldr	r3, [r3, #0]
2401561c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
24015620:	2b00      	cmp	r3, #0
24015622:	d1f0      	bne.n	24015606 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
24015624:	4b4a      	ldr	r3, [pc, #296]	@ (24015750 <HAL_RCC_OscConfig+0x6c4>)
24015626:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
24015628:	4b4a      	ldr	r3, [pc, #296]	@ (24015754 <HAL_RCC_OscConfig+0x6c8>)
2401562a:	4013      	ands	r3, r2
2401562c:	687a      	ldr	r2, [r7, #4]
2401562e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
24015630:	687a      	ldr	r2, [r7, #4]
24015632:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
24015634:	0112      	lsls	r2, r2, #4
24015636:	430a      	orrs	r2, r1
24015638:	4945      	ldr	r1, [pc, #276]	@ (24015750 <HAL_RCC_OscConfig+0x6c4>)
2401563a:	4313      	orrs	r3, r2
2401563c:	628b      	str	r3, [r1, #40]	@ 0x28
2401563e:	687b      	ldr	r3, [r7, #4]
24015640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
24015642:	3b01      	subs	r3, #1
24015644:	f3c3 0208 	ubfx	r2, r3, #0, #9
24015648:	687b      	ldr	r3, [r7, #4]
2401564a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
2401564c:	3b01      	subs	r3, #1
2401564e:	025b      	lsls	r3, r3, #9
24015650:	b29b      	uxth	r3, r3
24015652:	431a      	orrs	r2, r3
24015654:	687b      	ldr	r3, [r7, #4]
24015656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
24015658:	3b01      	subs	r3, #1
2401565a:	041b      	lsls	r3, r3, #16
2401565c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
24015660:	431a      	orrs	r2, r3
24015662:	687b      	ldr	r3, [r7, #4]
24015664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
24015666:	3b01      	subs	r3, #1
24015668:	061b      	lsls	r3, r3, #24
2401566a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
2401566e:	4938      	ldr	r1, [pc, #224]	@ (24015750 <HAL_RCC_OscConfig+0x6c4>)
24015670:	4313      	orrs	r3, r2
24015672:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
24015674:	4b36      	ldr	r3, [pc, #216]	@ (24015750 <HAL_RCC_OscConfig+0x6c4>)
24015676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
24015678:	4a35      	ldr	r2, [pc, #212]	@ (24015750 <HAL_RCC_OscConfig+0x6c4>)
2401567a:	f023 0301 	bic.w	r3, r3, #1
2401567e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
24015680:	4b33      	ldr	r3, [pc, #204]	@ (24015750 <HAL_RCC_OscConfig+0x6c4>)
24015682:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
24015684:	4b34      	ldr	r3, [pc, #208]	@ (24015758 <HAL_RCC_OscConfig+0x6cc>)
24015686:	4013      	ands	r3, r2
24015688:	687a      	ldr	r2, [r7, #4]
2401568a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
2401568c:	00d2      	lsls	r2, r2, #3
2401568e:	4930      	ldr	r1, [pc, #192]	@ (24015750 <HAL_RCC_OscConfig+0x6c4>)
24015690:	4313      	orrs	r3, r2
24015692:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
24015694:	4b2e      	ldr	r3, [pc, #184]	@ (24015750 <HAL_RCC_OscConfig+0x6c4>)
24015696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
24015698:	f023 020c 	bic.w	r2, r3, #12
2401569c:	687b      	ldr	r3, [r7, #4]
2401569e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
240156a0:	492b      	ldr	r1, [pc, #172]	@ (24015750 <HAL_RCC_OscConfig+0x6c4>)
240156a2:	4313      	orrs	r3, r2
240156a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
240156a6:	4b2a      	ldr	r3, [pc, #168]	@ (24015750 <HAL_RCC_OscConfig+0x6c4>)
240156a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
240156aa:	f023 0202 	bic.w	r2, r3, #2
240156ae:	687b      	ldr	r3, [r7, #4]
240156b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
240156b2:	4927      	ldr	r1, [pc, #156]	@ (24015750 <HAL_RCC_OscConfig+0x6c4>)
240156b4:	4313      	orrs	r3, r2
240156b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
240156b8:	4b25      	ldr	r3, [pc, #148]	@ (24015750 <HAL_RCC_OscConfig+0x6c4>)
240156ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
240156bc:	4a24      	ldr	r2, [pc, #144]	@ (24015750 <HAL_RCC_OscConfig+0x6c4>)
240156be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
240156c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240156c4:	4b22      	ldr	r3, [pc, #136]	@ (24015750 <HAL_RCC_OscConfig+0x6c4>)
240156c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
240156c8:	4a21      	ldr	r2, [pc, #132]	@ (24015750 <HAL_RCC_OscConfig+0x6c4>)
240156ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
240156ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
240156d0:	4b1f      	ldr	r3, [pc, #124]	@ (24015750 <HAL_RCC_OscConfig+0x6c4>)
240156d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
240156d4:	4a1e      	ldr	r2, [pc, #120]	@ (24015750 <HAL_RCC_OscConfig+0x6c4>)
240156d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
240156da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
240156dc:	4b1c      	ldr	r3, [pc, #112]	@ (24015750 <HAL_RCC_OscConfig+0x6c4>)
240156de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
240156e0:	4a1b      	ldr	r2, [pc, #108]	@ (24015750 <HAL_RCC_OscConfig+0x6c4>)
240156e2:	f043 0301 	orr.w	r3, r3, #1
240156e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
240156e8:	4b19      	ldr	r3, [pc, #100]	@ (24015750 <HAL_RCC_OscConfig+0x6c4>)
240156ea:	681b      	ldr	r3, [r3, #0]
240156ec:	4a18      	ldr	r2, [pc, #96]	@ (24015750 <HAL_RCC_OscConfig+0x6c4>)
240156ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
240156f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
240156f4:	f7ed fafc 	bl	24002cf0 <HAL_GetTick>
240156f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
240156fa:	e008      	b.n	2401570e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
240156fc:	f7ed faf8 	bl	24002cf0 <HAL_GetTick>
24015700:	4602      	mov	r2, r0
24015702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
24015704:	1ad3      	subs	r3, r2, r3
24015706:	2b02      	cmp	r3, #2
24015708:	d901      	bls.n	2401570e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
2401570a:	2303      	movs	r3, #3
2401570c:	e090      	b.n	24015830 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
2401570e:	4b10      	ldr	r3, [pc, #64]	@ (24015750 <HAL_RCC_OscConfig+0x6c4>)
24015710:	681b      	ldr	r3, [r3, #0]
24015712:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
24015716:	2b00      	cmp	r3, #0
24015718:	d0f0      	beq.n	240156fc <HAL_RCC_OscConfig+0x670>
2401571a:	e088      	b.n	2401582e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
2401571c:	4b0c      	ldr	r3, [pc, #48]	@ (24015750 <HAL_RCC_OscConfig+0x6c4>)
2401571e:	681b      	ldr	r3, [r3, #0]
24015720:	4a0b      	ldr	r2, [pc, #44]	@ (24015750 <HAL_RCC_OscConfig+0x6c4>)
24015722:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
24015726:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24015728:	f7ed fae2 	bl	24002cf0 <HAL_GetTick>
2401572c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
2401572e:	e008      	b.n	24015742 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
24015730:	f7ed fade 	bl	24002cf0 <HAL_GetTick>
24015734:	4602      	mov	r2, r0
24015736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
24015738:	1ad3      	subs	r3, r2, r3
2401573a:	2b02      	cmp	r3, #2
2401573c:	d901      	bls.n	24015742 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
2401573e:	2303      	movs	r3, #3
24015740:	e076      	b.n	24015830 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24015742:	4b03      	ldr	r3, [pc, #12]	@ (24015750 <HAL_RCC_OscConfig+0x6c4>)
24015744:	681b      	ldr	r3, [r3, #0]
24015746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
2401574a:	2b00      	cmp	r3, #0
2401574c:	d1f0      	bne.n	24015730 <HAL_RCC_OscConfig+0x6a4>
2401574e:	e06e      	b.n	2401582e <HAL_RCC_OscConfig+0x7a2>
24015750:	58024400 	.word	0x58024400
24015754:	fffffc0c 	.word	0xfffffc0c
24015758:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
2401575c:	4b36      	ldr	r3, [pc, #216]	@ (24015838 <HAL_RCC_OscConfig+0x7ac>)
2401575e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
24015760:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
24015762:	4b35      	ldr	r3, [pc, #212]	@ (24015838 <HAL_RCC_OscConfig+0x7ac>)
24015764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
24015766:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
24015768:	687b      	ldr	r3, [r7, #4]
2401576a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2401576c:	2b01      	cmp	r3, #1
2401576e:	d031      	beq.n	240157d4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
24015770:	693b      	ldr	r3, [r7, #16]
24015772:	f003 0203 	and.w	r2, r3, #3
24015776:	687b      	ldr	r3, [r7, #4]
24015778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
2401577a:	429a      	cmp	r2, r3
2401577c:	d12a      	bne.n	240157d4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
2401577e:	693b      	ldr	r3, [r7, #16]
24015780:	091b      	lsrs	r3, r3, #4
24015782:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
24015786:	687b      	ldr	r3, [r7, #4]
24015788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
2401578a:	429a      	cmp	r2, r3
2401578c:	d122      	bne.n	240157d4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
2401578e:	68fb      	ldr	r3, [r7, #12]
24015790:	f3c3 0208 	ubfx	r2, r3, #0, #9
24015794:	687b      	ldr	r3, [r7, #4]
24015796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
24015798:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
2401579a:	429a      	cmp	r2, r3
2401579c:	d11a      	bne.n	240157d4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
2401579e:	68fb      	ldr	r3, [r7, #12]
240157a0:	0a5b      	lsrs	r3, r3, #9
240157a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
240157a6:	687b      	ldr	r3, [r7, #4]
240157a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
240157aa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
240157ac:	429a      	cmp	r2, r3
240157ae:	d111      	bne.n	240157d4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
240157b0:	68fb      	ldr	r3, [r7, #12]
240157b2:	0c1b      	lsrs	r3, r3, #16
240157b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
240157b8:	687b      	ldr	r3, [r7, #4]
240157ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
240157bc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
240157be:	429a      	cmp	r2, r3
240157c0:	d108      	bne.n	240157d4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
240157c2:	68fb      	ldr	r3, [r7, #12]
240157c4:	0e1b      	lsrs	r3, r3, #24
240157c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
240157ca:	687b      	ldr	r3, [r7, #4]
240157cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
240157ce:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
240157d0:	429a      	cmp	r2, r3
240157d2:	d001      	beq.n	240157d8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
240157d4:	2301      	movs	r3, #1
240157d6:	e02b      	b.n	24015830 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
240157d8:	4b17      	ldr	r3, [pc, #92]	@ (24015838 <HAL_RCC_OscConfig+0x7ac>)
240157da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
240157dc:	08db      	lsrs	r3, r3, #3
240157de:	f3c3 030c 	ubfx	r3, r3, #0, #13
240157e2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
240157e4:	687b      	ldr	r3, [r7, #4]
240157e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
240157e8:	693a      	ldr	r2, [r7, #16]
240157ea:	429a      	cmp	r2, r3
240157ec:	d01f      	beq.n	2401582e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
240157ee:	4b12      	ldr	r3, [pc, #72]	@ (24015838 <HAL_RCC_OscConfig+0x7ac>)
240157f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
240157f2:	4a11      	ldr	r2, [pc, #68]	@ (24015838 <HAL_RCC_OscConfig+0x7ac>)
240157f4:	f023 0301 	bic.w	r3, r3, #1
240157f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
240157fa:	f7ed fa79 	bl	24002cf0 <HAL_GetTick>
240157fe:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
24015800:	bf00      	nop
24015802:	f7ed fa75 	bl	24002cf0 <HAL_GetTick>
24015806:	4602      	mov	r2, r0
24015808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2401580a:	4293      	cmp	r3, r2
2401580c:	d0f9      	beq.n	24015802 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
2401580e:	4b0a      	ldr	r3, [pc, #40]	@ (24015838 <HAL_RCC_OscConfig+0x7ac>)
24015810:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
24015812:	4b0a      	ldr	r3, [pc, #40]	@ (2401583c <HAL_RCC_OscConfig+0x7b0>)
24015814:	4013      	ands	r3, r2
24015816:	687a      	ldr	r2, [r7, #4]
24015818:	6c92      	ldr	r2, [r2, #72]	@ 0x48
2401581a:	00d2      	lsls	r2, r2, #3
2401581c:	4906      	ldr	r1, [pc, #24]	@ (24015838 <HAL_RCC_OscConfig+0x7ac>)
2401581e:	4313      	orrs	r3, r2
24015820:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
24015822:	4b05      	ldr	r3, [pc, #20]	@ (24015838 <HAL_RCC_OscConfig+0x7ac>)
24015824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
24015826:	4a04      	ldr	r2, [pc, #16]	@ (24015838 <HAL_RCC_OscConfig+0x7ac>)
24015828:	f043 0301 	orr.w	r3, r3, #1
2401582c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
2401582e:	2300      	movs	r3, #0
}
24015830:	4618      	mov	r0, r3
24015832:	3730      	adds	r7, #48	@ 0x30
24015834:	46bd      	mov	sp, r7
24015836:	bd80      	pop	{r7, pc}
24015838:	58024400 	.word	0x58024400
2401583c:	ffff0007 	.word	0xffff0007

24015840 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
24015840:	b580      	push	{r7, lr}
24015842:	b086      	sub	sp, #24
24015844:	af00      	add	r7, sp, #0
24015846:	6078      	str	r0, [r7, #4]
24015848:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
2401584a:	687b      	ldr	r3, [r7, #4]
2401584c:	2b00      	cmp	r3, #0
2401584e:	d101      	bne.n	24015854 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
24015850:	2301      	movs	r3, #1
24015852:	e19c      	b.n	24015b8e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
24015854:	4b8a      	ldr	r3, [pc, #552]	@ (24015a80 <HAL_RCC_ClockConfig+0x240>)
24015856:	681b      	ldr	r3, [r3, #0]
24015858:	f003 030f 	and.w	r3, r3, #15
2401585c:	683a      	ldr	r2, [r7, #0]
2401585e:	429a      	cmp	r2, r3
24015860:	d910      	bls.n	24015884 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
24015862:	4b87      	ldr	r3, [pc, #540]	@ (24015a80 <HAL_RCC_ClockConfig+0x240>)
24015864:	681b      	ldr	r3, [r3, #0]
24015866:	f023 020f 	bic.w	r2, r3, #15
2401586a:	4985      	ldr	r1, [pc, #532]	@ (24015a80 <HAL_RCC_ClockConfig+0x240>)
2401586c:	683b      	ldr	r3, [r7, #0]
2401586e:	4313      	orrs	r3, r2
24015870:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
24015872:	4b83      	ldr	r3, [pc, #524]	@ (24015a80 <HAL_RCC_ClockConfig+0x240>)
24015874:	681b      	ldr	r3, [r3, #0]
24015876:	f003 030f 	and.w	r3, r3, #15
2401587a:	683a      	ldr	r2, [r7, #0]
2401587c:	429a      	cmp	r2, r3
2401587e:	d001      	beq.n	24015884 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
24015880:	2301      	movs	r3, #1
24015882:	e184      	b.n	24015b8e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
24015884:	687b      	ldr	r3, [r7, #4]
24015886:	681b      	ldr	r3, [r3, #0]
24015888:	f003 0304 	and.w	r3, r3, #4
2401588c:	2b00      	cmp	r3, #0
2401588e:	d010      	beq.n	240158b2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
24015890:	687b      	ldr	r3, [r7, #4]
24015892:	691a      	ldr	r2, [r3, #16]
24015894:	4b7b      	ldr	r3, [pc, #492]	@ (24015a84 <HAL_RCC_ClockConfig+0x244>)
24015896:	699b      	ldr	r3, [r3, #24]
24015898:	f003 0370 	and.w	r3, r3, #112	@ 0x70
2401589c:	429a      	cmp	r2, r3
2401589e:	d908      	bls.n	240158b2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
240158a0:	4b78      	ldr	r3, [pc, #480]	@ (24015a84 <HAL_RCC_ClockConfig+0x244>)
240158a2:	699b      	ldr	r3, [r3, #24]
240158a4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
240158a8:	687b      	ldr	r3, [r7, #4]
240158aa:	691b      	ldr	r3, [r3, #16]
240158ac:	4975      	ldr	r1, [pc, #468]	@ (24015a84 <HAL_RCC_ClockConfig+0x244>)
240158ae:	4313      	orrs	r3, r2
240158b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
240158b2:	687b      	ldr	r3, [r7, #4]
240158b4:	681b      	ldr	r3, [r3, #0]
240158b6:	f003 0308 	and.w	r3, r3, #8
240158ba:	2b00      	cmp	r3, #0
240158bc:	d010      	beq.n	240158e0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
240158be:	687b      	ldr	r3, [r7, #4]
240158c0:	695a      	ldr	r2, [r3, #20]
240158c2:	4b70      	ldr	r3, [pc, #448]	@ (24015a84 <HAL_RCC_ClockConfig+0x244>)
240158c4:	69db      	ldr	r3, [r3, #28]
240158c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
240158ca:	429a      	cmp	r2, r3
240158cc:	d908      	bls.n	240158e0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
240158ce:	4b6d      	ldr	r3, [pc, #436]	@ (24015a84 <HAL_RCC_ClockConfig+0x244>)
240158d0:	69db      	ldr	r3, [r3, #28]
240158d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
240158d6:	687b      	ldr	r3, [r7, #4]
240158d8:	695b      	ldr	r3, [r3, #20]
240158da:	496a      	ldr	r1, [pc, #424]	@ (24015a84 <HAL_RCC_ClockConfig+0x244>)
240158dc:	4313      	orrs	r3, r2
240158de:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
240158e0:	687b      	ldr	r3, [r7, #4]
240158e2:	681b      	ldr	r3, [r3, #0]
240158e4:	f003 0310 	and.w	r3, r3, #16
240158e8:	2b00      	cmp	r3, #0
240158ea:	d010      	beq.n	2401590e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
240158ec:	687b      	ldr	r3, [r7, #4]
240158ee:	699a      	ldr	r2, [r3, #24]
240158f0:	4b64      	ldr	r3, [pc, #400]	@ (24015a84 <HAL_RCC_ClockConfig+0x244>)
240158f2:	69db      	ldr	r3, [r3, #28]
240158f4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
240158f8:	429a      	cmp	r2, r3
240158fa:	d908      	bls.n	2401590e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
240158fc:	4b61      	ldr	r3, [pc, #388]	@ (24015a84 <HAL_RCC_ClockConfig+0x244>)
240158fe:	69db      	ldr	r3, [r3, #28]
24015900:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
24015904:	687b      	ldr	r3, [r7, #4]
24015906:	699b      	ldr	r3, [r3, #24]
24015908:	495e      	ldr	r1, [pc, #376]	@ (24015a84 <HAL_RCC_ClockConfig+0x244>)
2401590a:	4313      	orrs	r3, r2
2401590c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
2401590e:	687b      	ldr	r3, [r7, #4]
24015910:	681b      	ldr	r3, [r3, #0]
24015912:	f003 0320 	and.w	r3, r3, #32
24015916:	2b00      	cmp	r3, #0
24015918:	d010      	beq.n	2401593c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
2401591a:	687b      	ldr	r3, [r7, #4]
2401591c:	69da      	ldr	r2, [r3, #28]
2401591e:	4b59      	ldr	r3, [pc, #356]	@ (24015a84 <HAL_RCC_ClockConfig+0x244>)
24015920:	6a1b      	ldr	r3, [r3, #32]
24015922:	f003 0370 	and.w	r3, r3, #112	@ 0x70
24015926:	429a      	cmp	r2, r3
24015928:	d908      	bls.n	2401593c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
2401592a:	4b56      	ldr	r3, [pc, #344]	@ (24015a84 <HAL_RCC_ClockConfig+0x244>)
2401592c:	6a1b      	ldr	r3, [r3, #32]
2401592e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
24015932:	687b      	ldr	r3, [r7, #4]
24015934:	69db      	ldr	r3, [r3, #28]
24015936:	4953      	ldr	r1, [pc, #332]	@ (24015a84 <HAL_RCC_ClockConfig+0x244>)
24015938:	4313      	orrs	r3, r2
2401593a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
2401593c:	687b      	ldr	r3, [r7, #4]
2401593e:	681b      	ldr	r3, [r3, #0]
24015940:	f003 0302 	and.w	r3, r3, #2
24015944:	2b00      	cmp	r3, #0
24015946:	d010      	beq.n	2401596a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
24015948:	687b      	ldr	r3, [r7, #4]
2401594a:	68da      	ldr	r2, [r3, #12]
2401594c:	4b4d      	ldr	r3, [pc, #308]	@ (24015a84 <HAL_RCC_ClockConfig+0x244>)
2401594e:	699b      	ldr	r3, [r3, #24]
24015950:	f003 030f 	and.w	r3, r3, #15
24015954:	429a      	cmp	r2, r3
24015956:	d908      	bls.n	2401596a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
24015958:	4b4a      	ldr	r3, [pc, #296]	@ (24015a84 <HAL_RCC_ClockConfig+0x244>)
2401595a:	699b      	ldr	r3, [r3, #24]
2401595c:	f023 020f 	bic.w	r2, r3, #15
24015960:	687b      	ldr	r3, [r7, #4]
24015962:	68db      	ldr	r3, [r3, #12]
24015964:	4947      	ldr	r1, [pc, #284]	@ (24015a84 <HAL_RCC_ClockConfig+0x244>)
24015966:	4313      	orrs	r3, r2
24015968:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
2401596a:	687b      	ldr	r3, [r7, #4]
2401596c:	681b      	ldr	r3, [r3, #0]
2401596e:	f003 0301 	and.w	r3, r3, #1
24015972:	2b00      	cmp	r3, #0
24015974:	d055      	beq.n	24015a22 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
24015976:	4b43      	ldr	r3, [pc, #268]	@ (24015a84 <HAL_RCC_ClockConfig+0x244>)
24015978:	699b      	ldr	r3, [r3, #24]
2401597a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
2401597e:	687b      	ldr	r3, [r7, #4]
24015980:	689b      	ldr	r3, [r3, #8]
24015982:	4940      	ldr	r1, [pc, #256]	@ (24015a84 <HAL_RCC_ClockConfig+0x244>)
24015984:	4313      	orrs	r3, r2
24015986:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
24015988:	687b      	ldr	r3, [r7, #4]
2401598a:	685b      	ldr	r3, [r3, #4]
2401598c:	2b02      	cmp	r3, #2
2401598e:	d107      	bne.n	240159a0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24015990:	4b3c      	ldr	r3, [pc, #240]	@ (24015a84 <HAL_RCC_ClockConfig+0x244>)
24015992:	681b      	ldr	r3, [r3, #0]
24015994:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
24015998:	2b00      	cmp	r3, #0
2401599a:	d121      	bne.n	240159e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
2401599c:	2301      	movs	r3, #1
2401599e:	e0f6      	b.n	24015b8e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
240159a0:	687b      	ldr	r3, [r7, #4]
240159a2:	685b      	ldr	r3, [r3, #4]
240159a4:	2b03      	cmp	r3, #3
240159a6:	d107      	bne.n	240159b8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
240159a8:	4b36      	ldr	r3, [pc, #216]	@ (24015a84 <HAL_RCC_ClockConfig+0x244>)
240159aa:	681b      	ldr	r3, [r3, #0]
240159ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
240159b0:	2b00      	cmp	r3, #0
240159b2:	d115      	bne.n	240159e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
240159b4:	2301      	movs	r3, #1
240159b6:	e0ea      	b.n	24015b8e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
240159b8:	687b      	ldr	r3, [r7, #4]
240159ba:	685b      	ldr	r3, [r3, #4]
240159bc:	2b01      	cmp	r3, #1
240159be:	d107      	bne.n	240159d0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
240159c0:	4b30      	ldr	r3, [pc, #192]	@ (24015a84 <HAL_RCC_ClockConfig+0x244>)
240159c2:	681b      	ldr	r3, [r3, #0]
240159c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
240159c8:	2b00      	cmp	r3, #0
240159ca:	d109      	bne.n	240159e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
240159cc:	2301      	movs	r3, #1
240159ce:	e0de      	b.n	24015b8e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
240159d0:	4b2c      	ldr	r3, [pc, #176]	@ (24015a84 <HAL_RCC_ClockConfig+0x244>)
240159d2:	681b      	ldr	r3, [r3, #0]
240159d4:	f003 0304 	and.w	r3, r3, #4
240159d8:	2b00      	cmp	r3, #0
240159da:	d101      	bne.n	240159e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
240159dc:	2301      	movs	r3, #1
240159de:	e0d6      	b.n	24015b8e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
240159e0:	4b28      	ldr	r3, [pc, #160]	@ (24015a84 <HAL_RCC_ClockConfig+0x244>)
240159e2:	691b      	ldr	r3, [r3, #16]
240159e4:	f023 0207 	bic.w	r2, r3, #7
240159e8:	687b      	ldr	r3, [r7, #4]
240159ea:	685b      	ldr	r3, [r3, #4]
240159ec:	4925      	ldr	r1, [pc, #148]	@ (24015a84 <HAL_RCC_ClockConfig+0x244>)
240159ee:	4313      	orrs	r3, r2
240159f0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
240159f2:	f7ed f97d 	bl	24002cf0 <HAL_GetTick>
240159f6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
240159f8:	e00a      	b.n	24015a10 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
240159fa:	f7ed f979 	bl	24002cf0 <HAL_GetTick>
240159fe:	4602      	mov	r2, r0
24015a00:	697b      	ldr	r3, [r7, #20]
24015a02:	1ad3      	subs	r3, r2, r3
24015a04:	f241 3288 	movw	r2, #5000	@ 0x1388
24015a08:	4293      	cmp	r3, r2
24015a0a:	d901      	bls.n	24015a10 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
24015a0c:	2303      	movs	r3, #3
24015a0e:	e0be      	b.n	24015b8e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
24015a10:	4b1c      	ldr	r3, [pc, #112]	@ (24015a84 <HAL_RCC_ClockConfig+0x244>)
24015a12:	691b      	ldr	r3, [r3, #16]
24015a14:	f003 0238 	and.w	r2, r3, #56	@ 0x38
24015a18:	687b      	ldr	r3, [r7, #4]
24015a1a:	685b      	ldr	r3, [r3, #4]
24015a1c:	00db      	lsls	r3, r3, #3
24015a1e:	429a      	cmp	r2, r3
24015a20:	d1eb      	bne.n	240159fa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
24015a22:	687b      	ldr	r3, [r7, #4]
24015a24:	681b      	ldr	r3, [r3, #0]
24015a26:	f003 0302 	and.w	r3, r3, #2
24015a2a:	2b00      	cmp	r3, #0
24015a2c:	d010      	beq.n	24015a50 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
24015a2e:	687b      	ldr	r3, [r7, #4]
24015a30:	68da      	ldr	r2, [r3, #12]
24015a32:	4b14      	ldr	r3, [pc, #80]	@ (24015a84 <HAL_RCC_ClockConfig+0x244>)
24015a34:	699b      	ldr	r3, [r3, #24]
24015a36:	f003 030f 	and.w	r3, r3, #15
24015a3a:	429a      	cmp	r2, r3
24015a3c:	d208      	bcs.n	24015a50 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
24015a3e:	4b11      	ldr	r3, [pc, #68]	@ (24015a84 <HAL_RCC_ClockConfig+0x244>)
24015a40:	699b      	ldr	r3, [r3, #24]
24015a42:	f023 020f 	bic.w	r2, r3, #15
24015a46:	687b      	ldr	r3, [r7, #4]
24015a48:	68db      	ldr	r3, [r3, #12]
24015a4a:	490e      	ldr	r1, [pc, #56]	@ (24015a84 <HAL_RCC_ClockConfig+0x244>)
24015a4c:	4313      	orrs	r3, r2
24015a4e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
24015a50:	4b0b      	ldr	r3, [pc, #44]	@ (24015a80 <HAL_RCC_ClockConfig+0x240>)
24015a52:	681b      	ldr	r3, [r3, #0]
24015a54:	f003 030f 	and.w	r3, r3, #15
24015a58:	683a      	ldr	r2, [r7, #0]
24015a5a:	429a      	cmp	r2, r3
24015a5c:	d214      	bcs.n	24015a88 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
24015a5e:	4b08      	ldr	r3, [pc, #32]	@ (24015a80 <HAL_RCC_ClockConfig+0x240>)
24015a60:	681b      	ldr	r3, [r3, #0]
24015a62:	f023 020f 	bic.w	r2, r3, #15
24015a66:	4906      	ldr	r1, [pc, #24]	@ (24015a80 <HAL_RCC_ClockConfig+0x240>)
24015a68:	683b      	ldr	r3, [r7, #0]
24015a6a:	4313      	orrs	r3, r2
24015a6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
24015a6e:	4b04      	ldr	r3, [pc, #16]	@ (24015a80 <HAL_RCC_ClockConfig+0x240>)
24015a70:	681b      	ldr	r3, [r3, #0]
24015a72:	f003 030f 	and.w	r3, r3, #15
24015a76:	683a      	ldr	r2, [r7, #0]
24015a78:	429a      	cmp	r2, r3
24015a7a:	d005      	beq.n	24015a88 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
24015a7c:	2301      	movs	r3, #1
24015a7e:	e086      	b.n	24015b8e <HAL_RCC_ClockConfig+0x34e>
24015a80:	52002000 	.word	0x52002000
24015a84:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
24015a88:	687b      	ldr	r3, [r7, #4]
24015a8a:	681b      	ldr	r3, [r3, #0]
24015a8c:	f003 0304 	and.w	r3, r3, #4
24015a90:	2b00      	cmp	r3, #0
24015a92:	d010      	beq.n	24015ab6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
24015a94:	687b      	ldr	r3, [r7, #4]
24015a96:	691a      	ldr	r2, [r3, #16]
24015a98:	4b3f      	ldr	r3, [pc, #252]	@ (24015b98 <HAL_RCC_ClockConfig+0x358>)
24015a9a:	699b      	ldr	r3, [r3, #24]
24015a9c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
24015aa0:	429a      	cmp	r2, r3
24015aa2:	d208      	bcs.n	24015ab6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
24015aa4:	4b3c      	ldr	r3, [pc, #240]	@ (24015b98 <HAL_RCC_ClockConfig+0x358>)
24015aa6:	699b      	ldr	r3, [r3, #24]
24015aa8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
24015aac:	687b      	ldr	r3, [r7, #4]
24015aae:	691b      	ldr	r3, [r3, #16]
24015ab0:	4939      	ldr	r1, [pc, #228]	@ (24015b98 <HAL_RCC_ClockConfig+0x358>)
24015ab2:	4313      	orrs	r3, r2
24015ab4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
24015ab6:	687b      	ldr	r3, [r7, #4]
24015ab8:	681b      	ldr	r3, [r3, #0]
24015aba:	f003 0308 	and.w	r3, r3, #8
24015abe:	2b00      	cmp	r3, #0
24015ac0:	d010      	beq.n	24015ae4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
24015ac2:	687b      	ldr	r3, [r7, #4]
24015ac4:	695a      	ldr	r2, [r3, #20]
24015ac6:	4b34      	ldr	r3, [pc, #208]	@ (24015b98 <HAL_RCC_ClockConfig+0x358>)
24015ac8:	69db      	ldr	r3, [r3, #28]
24015aca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
24015ace:	429a      	cmp	r2, r3
24015ad0:	d208      	bcs.n	24015ae4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
24015ad2:	4b31      	ldr	r3, [pc, #196]	@ (24015b98 <HAL_RCC_ClockConfig+0x358>)
24015ad4:	69db      	ldr	r3, [r3, #28]
24015ad6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
24015ada:	687b      	ldr	r3, [r7, #4]
24015adc:	695b      	ldr	r3, [r3, #20]
24015ade:	492e      	ldr	r1, [pc, #184]	@ (24015b98 <HAL_RCC_ClockConfig+0x358>)
24015ae0:	4313      	orrs	r3, r2
24015ae2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
24015ae4:	687b      	ldr	r3, [r7, #4]
24015ae6:	681b      	ldr	r3, [r3, #0]
24015ae8:	f003 0310 	and.w	r3, r3, #16
24015aec:	2b00      	cmp	r3, #0
24015aee:	d010      	beq.n	24015b12 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
24015af0:	687b      	ldr	r3, [r7, #4]
24015af2:	699a      	ldr	r2, [r3, #24]
24015af4:	4b28      	ldr	r3, [pc, #160]	@ (24015b98 <HAL_RCC_ClockConfig+0x358>)
24015af6:	69db      	ldr	r3, [r3, #28]
24015af8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
24015afc:	429a      	cmp	r2, r3
24015afe:	d208      	bcs.n	24015b12 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
24015b00:	4b25      	ldr	r3, [pc, #148]	@ (24015b98 <HAL_RCC_ClockConfig+0x358>)
24015b02:	69db      	ldr	r3, [r3, #28]
24015b04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
24015b08:	687b      	ldr	r3, [r7, #4]
24015b0a:	699b      	ldr	r3, [r3, #24]
24015b0c:	4922      	ldr	r1, [pc, #136]	@ (24015b98 <HAL_RCC_ClockConfig+0x358>)
24015b0e:	4313      	orrs	r3, r2
24015b10:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
24015b12:	687b      	ldr	r3, [r7, #4]
24015b14:	681b      	ldr	r3, [r3, #0]
24015b16:	f003 0320 	and.w	r3, r3, #32
24015b1a:	2b00      	cmp	r3, #0
24015b1c:	d010      	beq.n	24015b40 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
24015b1e:	687b      	ldr	r3, [r7, #4]
24015b20:	69da      	ldr	r2, [r3, #28]
24015b22:	4b1d      	ldr	r3, [pc, #116]	@ (24015b98 <HAL_RCC_ClockConfig+0x358>)
24015b24:	6a1b      	ldr	r3, [r3, #32]
24015b26:	f003 0370 	and.w	r3, r3, #112	@ 0x70
24015b2a:	429a      	cmp	r2, r3
24015b2c:	d208      	bcs.n	24015b40 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
24015b2e:	4b1a      	ldr	r3, [pc, #104]	@ (24015b98 <HAL_RCC_ClockConfig+0x358>)
24015b30:	6a1b      	ldr	r3, [r3, #32]
24015b32:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
24015b36:	687b      	ldr	r3, [r7, #4]
24015b38:	69db      	ldr	r3, [r3, #28]
24015b3a:	4917      	ldr	r1, [pc, #92]	@ (24015b98 <HAL_RCC_ClockConfig+0x358>)
24015b3c:	4313      	orrs	r3, r2
24015b3e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24015b40:	f000 f8be 	bl	24015cc0 <HAL_RCC_GetSysClockFreq>
24015b44:	4602      	mov	r2, r0
24015b46:	4b14      	ldr	r3, [pc, #80]	@ (24015b98 <HAL_RCC_ClockConfig+0x358>)
24015b48:	699b      	ldr	r3, [r3, #24]
24015b4a:	0a1b      	lsrs	r3, r3, #8
24015b4c:	f003 030f 	and.w	r3, r3, #15
24015b50:	4912      	ldr	r1, [pc, #72]	@ (24015b9c <HAL_RCC_ClockConfig+0x35c>)
24015b52:	5ccb      	ldrb	r3, [r1, r3]
24015b54:	f003 031f 	and.w	r3, r3, #31
24015b58:	fa22 f303 	lsr.w	r3, r2, r3
24015b5c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24015b5e:	4b0e      	ldr	r3, [pc, #56]	@ (24015b98 <HAL_RCC_ClockConfig+0x358>)
24015b60:	699b      	ldr	r3, [r3, #24]
24015b62:	f003 030f 	and.w	r3, r3, #15
24015b66:	4a0d      	ldr	r2, [pc, #52]	@ (24015b9c <HAL_RCC_ClockConfig+0x35c>)
24015b68:	5cd3      	ldrb	r3, [r2, r3]
24015b6a:	f003 031f 	and.w	r3, r3, #31
24015b6e:	693a      	ldr	r2, [r7, #16]
24015b70:	fa22 f303 	lsr.w	r3, r2, r3
24015b74:	4a0a      	ldr	r2, [pc, #40]	@ (24015ba0 <HAL_RCC_ClockConfig+0x360>)
24015b76:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
24015b78:	4a0a      	ldr	r2, [pc, #40]	@ (24015ba4 <HAL_RCC_ClockConfig+0x364>)
24015b7a:	693b      	ldr	r3, [r7, #16]
24015b7c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
24015b7e:	4b0a      	ldr	r3, [pc, #40]	@ (24015ba8 <HAL_RCC_ClockConfig+0x368>)
24015b80:	681b      	ldr	r3, [r3, #0]
24015b82:	4618      	mov	r0, r3
24015b84:	f7ed f86a 	bl	24002c5c <HAL_InitTick>
24015b88:	4603      	mov	r3, r0
24015b8a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
24015b8c:	7bfb      	ldrb	r3, [r7, #15]
}
24015b8e:	4618      	mov	r0, r3
24015b90:	3718      	adds	r7, #24
24015b92:	46bd      	mov	sp, r7
24015b94:	bd80      	pop	{r7, pc}
24015b96:	bf00      	nop
24015b98:	58024400 	.word	0x58024400
24015b9c:	2401b64c 	.word	0x2401b64c
24015ba0:	240004bc 	.word	0x240004bc
24015ba4:	240004b8 	.word	0x240004b8
24015ba8:	240004ac 	.word	0x240004ac

24015bac <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
24015bac:	b580      	push	{r7, lr}
24015bae:	b08c      	sub	sp, #48	@ 0x30
24015bb0:	af00      	add	r7, sp, #0
24015bb2:	60f8      	str	r0, [r7, #12]
24015bb4:	60b9      	str	r1, [r7, #8]
24015bb6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
24015bb8:	68fb      	ldr	r3, [r7, #12]
24015bba:	2b00      	cmp	r3, #0
24015bbc:	d12a      	bne.n	24015c14 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
24015bbe:	4b2d      	ldr	r3, [pc, #180]	@ (24015c74 <HAL_RCC_MCOConfig+0xc8>)
24015bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
24015bc4:	4a2b      	ldr	r2, [pc, #172]	@ (24015c74 <HAL_RCC_MCOConfig+0xc8>)
24015bc6:	f043 0301 	orr.w	r3, r3, #1
24015bca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
24015bce:	4b29      	ldr	r3, [pc, #164]	@ (24015c74 <HAL_RCC_MCOConfig+0xc8>)
24015bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
24015bd4:	f003 0301 	and.w	r3, r3, #1
24015bd8:	61bb      	str	r3, [r7, #24]
24015bda:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
24015bdc:	f44f 7380 	mov.w	r3, #256	@ 0x100
24015be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24015be2:	2302      	movs	r3, #2
24015be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24015be6:	2303      	movs	r3, #3
24015be8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24015bea:	2300      	movs	r3, #0
24015bec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
24015bee:	2300      	movs	r3, #0
24015bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
24015bf2:	f107 031c 	add.w	r3, r7, #28
24015bf6:	4619      	mov	r1, r3
24015bf8:	481f      	ldr	r0, [pc, #124]	@ (24015c78 <HAL_RCC_MCOConfig+0xcc>)
24015bfa:	f7f4 fb9d 	bl	2400a338 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
24015bfe:	4b1d      	ldr	r3, [pc, #116]	@ (24015c74 <HAL_RCC_MCOConfig+0xc8>)
24015c00:	691b      	ldr	r3, [r3, #16]
24015c02:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
24015c06:	68b9      	ldr	r1, [r7, #8]
24015c08:	687b      	ldr	r3, [r7, #4]
24015c0a:	430b      	orrs	r3, r1
24015c0c:	4919      	ldr	r1, [pc, #100]	@ (24015c74 <HAL_RCC_MCOConfig+0xc8>)
24015c0e:	4313      	orrs	r3, r2
24015c10:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
24015c12:	e02a      	b.n	24015c6a <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
24015c14:	4b17      	ldr	r3, [pc, #92]	@ (24015c74 <HAL_RCC_MCOConfig+0xc8>)
24015c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
24015c1a:	4a16      	ldr	r2, [pc, #88]	@ (24015c74 <HAL_RCC_MCOConfig+0xc8>)
24015c1c:	f043 0304 	orr.w	r3, r3, #4
24015c20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
24015c24:	4b13      	ldr	r3, [pc, #76]	@ (24015c74 <HAL_RCC_MCOConfig+0xc8>)
24015c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
24015c2a:	f003 0304 	and.w	r3, r3, #4
24015c2e:	617b      	str	r3, [r7, #20]
24015c30:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
24015c32:	f44f 7300 	mov.w	r3, #512	@ 0x200
24015c36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24015c38:	2302      	movs	r3, #2
24015c3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24015c3c:	2303      	movs	r3, #3
24015c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24015c40:	2300      	movs	r3, #0
24015c42:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
24015c44:	2300      	movs	r3, #0
24015c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
24015c48:	f107 031c 	add.w	r3, r7, #28
24015c4c:	4619      	mov	r1, r3
24015c4e:	480b      	ldr	r0, [pc, #44]	@ (24015c7c <HAL_RCC_MCOConfig+0xd0>)
24015c50:	f7f4 fb72 	bl	2400a338 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
24015c54:	4b07      	ldr	r3, [pc, #28]	@ (24015c74 <HAL_RCC_MCOConfig+0xc8>)
24015c56:	691b      	ldr	r3, [r3, #16]
24015c58:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
24015c5c:	687b      	ldr	r3, [r7, #4]
24015c5e:	01d9      	lsls	r1, r3, #7
24015c60:	68bb      	ldr	r3, [r7, #8]
24015c62:	430b      	orrs	r3, r1
24015c64:	4903      	ldr	r1, [pc, #12]	@ (24015c74 <HAL_RCC_MCOConfig+0xc8>)
24015c66:	4313      	orrs	r3, r2
24015c68:	610b      	str	r3, [r1, #16]
}
24015c6a:	bf00      	nop
24015c6c:	3730      	adds	r7, #48	@ 0x30
24015c6e:	46bd      	mov	sp, r7
24015c70:	bd80      	pop	{r7, pc}
24015c72:	bf00      	nop
24015c74:	58024400 	.word	0x58024400
24015c78:	58020000 	.word	0x58020000
24015c7c:	58020800 	.word	0x58020800

24015c80 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
24015c80:	b480      	push	{r7}
24015c82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
24015c84:	4b05      	ldr	r3, [pc, #20]	@ (24015c9c <HAL_RCC_EnableCSS+0x1c>)
24015c86:	681b      	ldr	r3, [r3, #0]
24015c88:	4a04      	ldr	r2, [pc, #16]	@ (24015c9c <HAL_RCC_EnableCSS+0x1c>)
24015c8a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
24015c8e:	6013      	str	r3, [r2, #0]
}
24015c90:	bf00      	nop
24015c92:	46bd      	mov	sp, r7
24015c94:	f85d 7b04 	ldr.w	r7, [sp], #4
24015c98:	4770      	bx	lr
24015c9a:	bf00      	nop
24015c9c:	58024400 	.word	0x58024400

24015ca0 <HAL_RCC_DisableCSS>:
/**
  * @brief  Disables the Clock Security System.
  * @retval None
  */
void HAL_RCC_DisableCSS(void)
{
24015ca0:	b480      	push	{r7}
24015ca2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_CSSHSEON);
24015ca4:	4b05      	ldr	r3, [pc, #20]	@ (24015cbc <HAL_RCC_DisableCSS+0x1c>)
24015ca6:	681b      	ldr	r3, [r3, #0]
24015ca8:	4a04      	ldr	r2, [pc, #16]	@ (24015cbc <HAL_RCC_DisableCSS+0x1c>)
24015caa:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
24015cae:	6013      	str	r3, [r2, #0]
}
24015cb0:	bf00      	nop
24015cb2:	46bd      	mov	sp, r7
24015cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
24015cb8:	4770      	bx	lr
24015cba:	bf00      	nop
24015cbc:	58024400 	.word	0x58024400

24015cc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
24015cc0:	b480      	push	{r7}
24015cc2:	b089      	sub	sp, #36	@ 0x24
24015cc4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
24015cc6:	4bb3      	ldr	r3, [pc, #716]	@ (24015f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
24015cc8:	691b      	ldr	r3, [r3, #16]
24015cca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
24015cce:	2b18      	cmp	r3, #24
24015cd0:	f200 8155 	bhi.w	24015f7e <HAL_RCC_GetSysClockFreq+0x2be>
24015cd4:	a201      	add	r2, pc, #4	@ (adr r2, 24015cdc <HAL_RCC_GetSysClockFreq+0x1c>)
24015cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24015cda:	bf00      	nop
24015cdc:	24015d41 	.word	0x24015d41
24015ce0:	24015f7f 	.word	0x24015f7f
24015ce4:	24015f7f 	.word	0x24015f7f
24015ce8:	24015f7f 	.word	0x24015f7f
24015cec:	24015f7f 	.word	0x24015f7f
24015cf0:	24015f7f 	.word	0x24015f7f
24015cf4:	24015f7f 	.word	0x24015f7f
24015cf8:	24015f7f 	.word	0x24015f7f
24015cfc:	24015d67 	.word	0x24015d67
24015d00:	24015f7f 	.word	0x24015f7f
24015d04:	24015f7f 	.word	0x24015f7f
24015d08:	24015f7f 	.word	0x24015f7f
24015d0c:	24015f7f 	.word	0x24015f7f
24015d10:	24015f7f 	.word	0x24015f7f
24015d14:	24015f7f 	.word	0x24015f7f
24015d18:	24015f7f 	.word	0x24015f7f
24015d1c:	24015d6d 	.word	0x24015d6d
24015d20:	24015f7f 	.word	0x24015f7f
24015d24:	24015f7f 	.word	0x24015f7f
24015d28:	24015f7f 	.word	0x24015f7f
24015d2c:	24015f7f 	.word	0x24015f7f
24015d30:	24015f7f 	.word	0x24015f7f
24015d34:	24015f7f 	.word	0x24015f7f
24015d38:	24015f7f 	.word	0x24015f7f
24015d3c:	24015d73 	.word	0x24015d73
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24015d40:	4b94      	ldr	r3, [pc, #592]	@ (24015f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
24015d42:	681b      	ldr	r3, [r3, #0]
24015d44:	f003 0320 	and.w	r3, r3, #32
24015d48:	2b00      	cmp	r3, #0
24015d4a:	d009      	beq.n	24015d60 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24015d4c:	4b91      	ldr	r3, [pc, #580]	@ (24015f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
24015d4e:	681b      	ldr	r3, [r3, #0]
24015d50:	08db      	lsrs	r3, r3, #3
24015d52:	f003 0303 	and.w	r3, r3, #3
24015d56:	4a90      	ldr	r2, [pc, #576]	@ (24015f98 <HAL_RCC_GetSysClockFreq+0x2d8>)
24015d58:	fa22 f303 	lsr.w	r3, r2, r3
24015d5c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
24015d5e:	e111      	b.n	24015f84 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
24015d60:	4b8d      	ldr	r3, [pc, #564]	@ (24015f98 <HAL_RCC_GetSysClockFreq+0x2d8>)
24015d62:	61bb      	str	r3, [r7, #24]
      break;
24015d64:	e10e      	b.n	24015f84 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
24015d66:	4b8d      	ldr	r3, [pc, #564]	@ (24015f9c <HAL_RCC_GetSysClockFreq+0x2dc>)
24015d68:	61bb      	str	r3, [r7, #24]
      break;
24015d6a:	e10b      	b.n	24015f84 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
24015d6c:	4b8c      	ldr	r3, [pc, #560]	@ (24015fa0 <HAL_RCC_GetSysClockFreq+0x2e0>)
24015d6e:	61bb      	str	r3, [r7, #24]
      break;
24015d70:	e108      	b.n	24015f84 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24015d72:	4b88      	ldr	r3, [pc, #544]	@ (24015f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
24015d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
24015d76:	f003 0303 	and.w	r3, r3, #3
24015d7a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
24015d7c:	4b85      	ldr	r3, [pc, #532]	@ (24015f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
24015d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
24015d80:	091b      	lsrs	r3, r3, #4
24015d82:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
24015d86:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
24015d88:	4b82      	ldr	r3, [pc, #520]	@ (24015f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
24015d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
24015d8c:	f003 0301 	and.w	r3, r3, #1
24015d90:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24015d92:	4b80      	ldr	r3, [pc, #512]	@ (24015f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
24015d94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
24015d96:	08db      	lsrs	r3, r3, #3
24015d98:	f3c3 030c 	ubfx	r3, r3, #0, #13
24015d9c:	68fa      	ldr	r2, [r7, #12]
24015d9e:	fb02 f303 	mul.w	r3, r2, r3
24015da2:	ee07 3a90 	vmov	s15, r3
24015da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
24015daa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
24015dae:	693b      	ldr	r3, [r7, #16]
24015db0:	2b00      	cmp	r3, #0
24015db2:	f000 80e1 	beq.w	24015f78 <HAL_RCC_GetSysClockFreq+0x2b8>
24015db6:	697b      	ldr	r3, [r7, #20]
24015db8:	2b02      	cmp	r3, #2
24015dba:	f000 8083 	beq.w	24015ec4 <HAL_RCC_GetSysClockFreq+0x204>
24015dbe:	697b      	ldr	r3, [r7, #20]
24015dc0:	2b02      	cmp	r3, #2
24015dc2:	f200 80a1 	bhi.w	24015f08 <HAL_RCC_GetSysClockFreq+0x248>
24015dc6:	697b      	ldr	r3, [r7, #20]
24015dc8:	2b00      	cmp	r3, #0
24015dca:	d003      	beq.n	24015dd4 <HAL_RCC_GetSysClockFreq+0x114>
24015dcc:	697b      	ldr	r3, [r7, #20]
24015dce:	2b01      	cmp	r3, #1
24015dd0:	d056      	beq.n	24015e80 <HAL_RCC_GetSysClockFreq+0x1c0>
24015dd2:	e099      	b.n	24015f08 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24015dd4:	4b6f      	ldr	r3, [pc, #444]	@ (24015f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
24015dd6:	681b      	ldr	r3, [r3, #0]
24015dd8:	f003 0320 	and.w	r3, r3, #32
24015ddc:	2b00      	cmp	r3, #0
24015dde:	d02d      	beq.n	24015e3c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24015de0:	4b6c      	ldr	r3, [pc, #432]	@ (24015f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
24015de2:	681b      	ldr	r3, [r3, #0]
24015de4:	08db      	lsrs	r3, r3, #3
24015de6:	f003 0303 	and.w	r3, r3, #3
24015dea:	4a6b      	ldr	r2, [pc, #428]	@ (24015f98 <HAL_RCC_GetSysClockFreq+0x2d8>)
24015dec:	fa22 f303 	lsr.w	r3, r2, r3
24015df0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24015df2:	687b      	ldr	r3, [r7, #4]
24015df4:	ee07 3a90 	vmov	s15, r3
24015df8:	eef8 6a67 	vcvt.f32.u32	s13, s15
24015dfc:	693b      	ldr	r3, [r7, #16]
24015dfe:	ee07 3a90 	vmov	s15, r3
24015e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
24015e06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24015e0a:	4b62      	ldr	r3, [pc, #392]	@ (24015f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
24015e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
24015e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
24015e12:	ee07 3a90 	vmov	s15, r3
24015e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
24015e1a:	ed97 6a02 	vldr	s12, [r7, #8]
24015e1e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 24015fa4 <HAL_RCC_GetSysClockFreq+0x2e4>
24015e22:	eec6 7a25 	vdiv.f32	s15, s12, s11
24015e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
24015e2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
24015e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
24015e32:	ee67 7a27 	vmul.f32	s15, s14, s15
24015e36:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
24015e3a:	e087      	b.n	24015f4c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24015e3c:	693b      	ldr	r3, [r7, #16]
24015e3e:	ee07 3a90 	vmov	s15, r3
24015e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
24015e46:	eddf 6a58 	vldr	s13, [pc, #352]	@ 24015fa8 <HAL_RCC_GetSysClockFreq+0x2e8>
24015e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24015e4e:	4b51      	ldr	r3, [pc, #324]	@ (24015f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
24015e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
24015e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
24015e56:	ee07 3a90 	vmov	s15, r3
24015e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
24015e5e:	ed97 6a02 	vldr	s12, [r7, #8]
24015e62:	eddf 5a50 	vldr	s11, [pc, #320]	@ 24015fa4 <HAL_RCC_GetSysClockFreq+0x2e4>
24015e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
24015e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
24015e6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
24015e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
24015e76:	ee67 7a27 	vmul.f32	s15, s14, s15
24015e7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
24015e7e:	e065      	b.n	24015f4c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24015e80:	693b      	ldr	r3, [r7, #16]
24015e82:	ee07 3a90 	vmov	s15, r3
24015e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
24015e8a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 24015fac <HAL_RCC_GetSysClockFreq+0x2ec>
24015e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24015e92:	4b40      	ldr	r3, [pc, #256]	@ (24015f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
24015e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
24015e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
24015e9a:	ee07 3a90 	vmov	s15, r3
24015e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
24015ea2:	ed97 6a02 	vldr	s12, [r7, #8]
24015ea6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 24015fa4 <HAL_RCC_GetSysClockFreq+0x2e4>
24015eaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
24015eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
24015eb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
24015eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
24015eba:	ee67 7a27 	vmul.f32	s15, s14, s15
24015ebe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
24015ec2:	e043      	b.n	24015f4c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24015ec4:	693b      	ldr	r3, [r7, #16]
24015ec6:	ee07 3a90 	vmov	s15, r3
24015eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
24015ece:	eddf 6a38 	vldr	s13, [pc, #224]	@ 24015fb0 <HAL_RCC_GetSysClockFreq+0x2f0>
24015ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24015ed6:	4b2f      	ldr	r3, [pc, #188]	@ (24015f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
24015ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
24015eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
24015ede:	ee07 3a90 	vmov	s15, r3
24015ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
24015ee6:	ed97 6a02 	vldr	s12, [r7, #8]
24015eea:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 24015fa4 <HAL_RCC_GetSysClockFreq+0x2e4>
24015eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
24015ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
24015ef6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
24015efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
24015efe:	ee67 7a27 	vmul.f32	s15, s14, s15
24015f02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
24015f06:	e021      	b.n	24015f4c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24015f08:	693b      	ldr	r3, [r7, #16]
24015f0a:	ee07 3a90 	vmov	s15, r3
24015f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
24015f12:	eddf 6a26 	vldr	s13, [pc, #152]	@ 24015fac <HAL_RCC_GetSysClockFreq+0x2ec>
24015f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24015f1a:	4b1e      	ldr	r3, [pc, #120]	@ (24015f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
24015f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
24015f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
24015f22:	ee07 3a90 	vmov	s15, r3
24015f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
24015f2a:	ed97 6a02 	vldr	s12, [r7, #8]
24015f2e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 24015fa4 <HAL_RCC_GetSysClockFreq+0x2e4>
24015f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
24015f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
24015f3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
24015f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
24015f42:	ee67 7a27 	vmul.f32	s15, s14, s15
24015f46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
24015f4a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
24015f4c:	4b11      	ldr	r3, [pc, #68]	@ (24015f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
24015f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
24015f50:	0a5b      	lsrs	r3, r3, #9
24015f52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
24015f56:	3301      	adds	r3, #1
24015f58:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
24015f5a:	683b      	ldr	r3, [r7, #0]
24015f5c:	ee07 3a90 	vmov	s15, r3
24015f60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
24015f64:	edd7 6a07 	vldr	s13, [r7, #28]
24015f68:	eec6 7a87 	vdiv.f32	s15, s13, s14
24015f6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24015f70:	ee17 3a90 	vmov	r3, s15
24015f74:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
24015f76:	e005      	b.n	24015f84 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
24015f78:	2300      	movs	r3, #0
24015f7a:	61bb      	str	r3, [r7, #24]
      break;
24015f7c:	e002      	b.n	24015f84 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
24015f7e:	4b07      	ldr	r3, [pc, #28]	@ (24015f9c <HAL_RCC_GetSysClockFreq+0x2dc>)
24015f80:	61bb      	str	r3, [r7, #24]
      break;
24015f82:	bf00      	nop
  }

  return sysclockfreq;
24015f84:	69bb      	ldr	r3, [r7, #24]
}
24015f86:	4618      	mov	r0, r3
24015f88:	3724      	adds	r7, #36	@ 0x24
24015f8a:	46bd      	mov	sp, r7
24015f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
24015f90:	4770      	bx	lr
24015f92:	bf00      	nop
24015f94:	58024400 	.word	0x58024400
24015f98:	03d09000 	.word	0x03d09000
24015f9c:	003d0900 	.word	0x003d0900
24015fa0:	017d7840 	.word	0x017d7840
24015fa4:	46000000 	.word	0x46000000
24015fa8:	4c742400 	.word	0x4c742400
24015fac:	4a742400 	.word	0x4a742400
24015fb0:	4bbebc20 	.word	0x4bbebc20

24015fb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
24015fb4:	b580      	push	{r7, lr}
24015fb6:	b082      	sub	sp, #8
24015fb8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
24015fba:	f7ff fe81 	bl	24015cc0 <HAL_RCC_GetSysClockFreq>
24015fbe:	4602      	mov	r2, r0
24015fc0:	4b10      	ldr	r3, [pc, #64]	@ (24016004 <HAL_RCC_GetHCLKFreq+0x50>)
24015fc2:	699b      	ldr	r3, [r3, #24]
24015fc4:	0a1b      	lsrs	r3, r3, #8
24015fc6:	f003 030f 	and.w	r3, r3, #15
24015fca:	490f      	ldr	r1, [pc, #60]	@ (24016008 <HAL_RCC_GetHCLKFreq+0x54>)
24015fcc:	5ccb      	ldrb	r3, [r1, r3]
24015fce:	f003 031f 	and.w	r3, r3, #31
24015fd2:	fa22 f303 	lsr.w	r3, r2, r3
24015fd6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24015fd8:	4b0a      	ldr	r3, [pc, #40]	@ (24016004 <HAL_RCC_GetHCLKFreq+0x50>)
24015fda:	699b      	ldr	r3, [r3, #24]
24015fdc:	f003 030f 	and.w	r3, r3, #15
24015fe0:	4a09      	ldr	r2, [pc, #36]	@ (24016008 <HAL_RCC_GetHCLKFreq+0x54>)
24015fe2:	5cd3      	ldrb	r3, [r2, r3]
24015fe4:	f003 031f 	and.w	r3, r3, #31
24015fe8:	687a      	ldr	r2, [r7, #4]
24015fea:	fa22 f303 	lsr.w	r3, r2, r3
24015fee:	4a07      	ldr	r2, [pc, #28]	@ (2401600c <HAL_RCC_GetHCLKFreq+0x58>)
24015ff0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
24015ff2:	4a07      	ldr	r2, [pc, #28]	@ (24016010 <HAL_RCC_GetHCLKFreq+0x5c>)
24015ff4:	687b      	ldr	r3, [r7, #4]
24015ff6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
24015ff8:	4b04      	ldr	r3, [pc, #16]	@ (2401600c <HAL_RCC_GetHCLKFreq+0x58>)
24015ffa:	681b      	ldr	r3, [r3, #0]
}
24015ffc:	4618      	mov	r0, r3
24015ffe:	3708      	adds	r7, #8
24016000:	46bd      	mov	sp, r7
24016002:	bd80      	pop	{r7, pc}
24016004:	58024400 	.word	0x58024400
24016008:	2401b64c 	.word	0x2401b64c
2401600c:	240004bc 	.word	0x240004bc
24016010:	240004b8 	.word	0x240004b8

24016014 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
24016014:	b580      	push	{r7, lr}
24016016:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
24016018:	f7ff ffcc 	bl	24015fb4 <HAL_RCC_GetHCLKFreq>
2401601c:	4602      	mov	r2, r0
2401601e:	4b06      	ldr	r3, [pc, #24]	@ (24016038 <HAL_RCC_GetPCLK1Freq+0x24>)
24016020:	69db      	ldr	r3, [r3, #28]
24016022:	091b      	lsrs	r3, r3, #4
24016024:	f003 0307 	and.w	r3, r3, #7
24016028:	4904      	ldr	r1, [pc, #16]	@ (2401603c <HAL_RCC_GetPCLK1Freq+0x28>)
2401602a:	5ccb      	ldrb	r3, [r1, r3]
2401602c:	f003 031f 	and.w	r3, r3, #31
24016030:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
24016034:	4618      	mov	r0, r3
24016036:	bd80      	pop	{r7, pc}
24016038:	58024400 	.word	0x58024400
2401603c:	2401b64c 	.word	0x2401b64c

24016040 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
24016040:	b580      	push	{r7, lr}
24016042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
24016044:	f7ff ffb6 	bl	24015fb4 <HAL_RCC_GetHCLKFreq>
24016048:	4602      	mov	r2, r0
2401604a:	4b06      	ldr	r3, [pc, #24]	@ (24016064 <HAL_RCC_GetPCLK2Freq+0x24>)
2401604c:	69db      	ldr	r3, [r3, #28]
2401604e:	0a1b      	lsrs	r3, r3, #8
24016050:	f003 0307 	and.w	r3, r3, #7
24016054:	4904      	ldr	r1, [pc, #16]	@ (24016068 <HAL_RCC_GetPCLK2Freq+0x28>)
24016056:	5ccb      	ldrb	r3, [r1, r3]
24016058:	f003 031f 	and.w	r3, r3, #31
2401605c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
24016060:	4618      	mov	r0, r3
24016062:	bd80      	pop	{r7, pc}
24016064:	58024400 	.word	0x58024400
24016068:	2401b64c 	.word	0x2401b64c

2401606c <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct: pointer to an RCC_OscInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
2401606c:	b480      	push	{r7}
2401606e:	b083      	sub	sp, #12
24016070:	af00      	add	r7, sp, #0
24016072:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_CSI | \
24016074:	687b      	ldr	r3, [r7, #4]
24016076:	223f      	movs	r2, #63	@ 0x3f
24016078:	601a      	str	r2, [r3, #0]
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
  }
#else
  if ((RCC->CR & RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
2401607a:	4b64      	ldr	r3, [pc, #400]	@ (2401620c <HAL_RCC_GetOscConfig+0x1a0>)
2401607c:	681b      	ldr	r3, [r3, #0]
2401607e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
24016082:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
24016086:	d104      	bne.n	24016092 <HAL_RCC_GetOscConfig+0x26>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
24016088:	687b      	ldr	r3, [r7, #4]
2401608a:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
2401608e:	605a      	str	r2, [r3, #4]
24016090:	e00e      	b.n	240160b0 <HAL_RCC_GetOscConfig+0x44>
  }
  else if ((RCC->CR & RCC_CR_HSEON) == RCC_CR_HSEON)
24016092:	4b5e      	ldr	r3, [pc, #376]	@ (2401620c <HAL_RCC_GetOscConfig+0x1a0>)
24016094:	681b      	ldr	r3, [r3, #0]
24016096:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
2401609a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
2401609e:	d104      	bne.n	240160aa <HAL_RCC_GetOscConfig+0x3e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
240160a0:	687b      	ldr	r3, [r7, #4]
240160a2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
240160a6:	605a      	str	r2, [r3, #4]
240160a8:	e002      	b.n	240160b0 <HAL_RCC_GetOscConfig+0x44>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
240160aa:	687b      	ldr	r3, [r7, #4]
240160ac:	2200      	movs	r2, #0
240160ae:	605a      	str	r2, [r3, #4]
  }
#endif /* RCC_CR_HSEEXT */

  /* Get the CSI configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_CSION) == RCC_CR_CSION)
240160b0:	4b56      	ldr	r3, [pc, #344]	@ (2401620c <HAL_RCC_GetOscConfig+0x1a0>)
240160b2:	681b      	ldr	r3, [r3, #0]
240160b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
240160b8:	2b80      	cmp	r3, #128	@ 0x80
240160ba:	d103      	bne.n	240160c4 <HAL_RCC_GetOscConfig+0x58>
  {
    RCC_OscInitStruct->CSIState = RCC_CSI_ON;
240160bc:	687b      	ldr	r3, [r7, #4]
240160be:	2280      	movs	r2, #128	@ 0x80
240160c0:	61da      	str	r2, [r3, #28]
240160c2:	e002      	b.n	240160ca <HAL_RCC_GetOscConfig+0x5e>
  }
  else
  {
    RCC_OscInitStruct->CSIState = RCC_CSI_OFF;
240160c4:	687b      	ldr	r3, [r7, #4]
240160c6:	2200      	movs	r2, #0
240160c8:	61da      	str	r2, [r3, #28]
  else
  {
    RCC_OscInitStruct->CSICalibrationValue = (uint32_t)(READ_BIT(RCC->CSICFGR, RCC_CSICFGR_CSITRIM) >> RCC_CSICFGR_CSITRIM_Pos);
  }
#else
  RCC_OscInitStruct->CSICalibrationValue = (uint32_t)(READ_BIT(RCC->CSICFGR, RCC_CSICFGR_CSITRIM) >> RCC_CSICFGR_CSITRIM_Pos);
240160ca:	4b50      	ldr	r3, [pc, #320]	@ (2401620c <HAL_RCC_GetOscConfig+0x1a0>)
240160cc:	68db      	ldr	r3, [r3, #12]
240160ce:	0e1b      	lsrs	r3, r3, #24
240160d0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
240160d4:	687b      	ldr	r3, [r7, #4]
240160d6:	621a      	str	r2, [r3, #32]
#endif /*RCC_VER_X*/

  /* Get the HSI configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_HSION) == RCC_CR_HSION)
240160d8:	4b4c      	ldr	r3, [pc, #304]	@ (2401620c <HAL_RCC_GetOscConfig+0x1a0>)
240160da:	681b      	ldr	r3, [r3, #0]
240160dc:	f003 0301 	and.w	r3, r3, #1
240160e0:	2b01      	cmp	r3, #1
240160e2:	d103      	bne.n	240160ec <HAL_RCC_GetOscConfig+0x80>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
240160e4:	687b      	ldr	r3, [r7, #4]
240160e6:	2201      	movs	r2, #1
240160e8:	60da      	str	r2, [r3, #12]
240160ea:	e002      	b.n	240160f2 <HAL_RCC_GetOscConfig+0x86>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
240160ec:	687b      	ldr	r3, [r7, #4]
240160ee:	2200      	movs	r2, #0
240160f0:	60da      	str	r2, [r3, #12]
  else
  {
    RCC_OscInitStruct->HSICalibrationValue = (uint32_t)(READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSITRIM) >> RCC_HSICFGR_HSITRIM_Pos);
  }
#else
  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)(READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSITRIM) >> RCC_HSICFGR_HSITRIM_Pos);
240160f2:	4b46      	ldr	r3, [pc, #280]	@ (2401620c <HAL_RCC_GetOscConfig+0x1a0>)
240160f4:	685b      	ldr	r3, [r3, #4]
240160f6:	0e1b      	lsrs	r3, r3, #24
240160f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
240160fc:	687b      	ldr	r3, [r7, #4]
240160fe:	611a      	str	r2, [r3, #16]
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
  }
#else
  if ((RCC->BDCR & RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
24016100:	4b42      	ldr	r3, [pc, #264]	@ (2401620c <HAL_RCC_GetOscConfig+0x1a0>)
24016102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
24016104:	f003 0304 	and.w	r3, r3, #4
24016108:	2b04      	cmp	r3, #4
2401610a:	d103      	bne.n	24016114 <HAL_RCC_GetOscConfig+0xa8>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
2401610c:	687b      	ldr	r3, [r7, #4]
2401610e:	2205      	movs	r2, #5
24016110:	609a      	str	r2, [r3, #8]
24016112:	e00c      	b.n	2401612e <HAL_RCC_GetOscConfig+0xc2>
  }
  else if ((RCC->BDCR & RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
24016114:	4b3d      	ldr	r3, [pc, #244]	@ (2401620c <HAL_RCC_GetOscConfig+0x1a0>)
24016116:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
24016118:	f003 0301 	and.w	r3, r3, #1
2401611c:	2b01      	cmp	r3, #1
2401611e:	d103      	bne.n	24016128 <HAL_RCC_GetOscConfig+0xbc>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
24016120:	687b      	ldr	r3, [r7, #4]
24016122:	2201      	movs	r2, #1
24016124:	609a      	str	r2, [r3, #8]
24016126:	e002      	b.n	2401612e <HAL_RCC_GetOscConfig+0xc2>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
24016128:	687b      	ldr	r3, [r7, #4]
2401612a:	2200      	movs	r2, #0
2401612c:	609a      	str	r2, [r3, #8]
  }
#endif /* RCC_BDCR_LSEEXT */

  /* Get the LSI configuration -----------------------------------------------*/
  if ((RCC->CSR & RCC_CSR_LSION) == RCC_CSR_LSION)
2401612e:	4b37      	ldr	r3, [pc, #220]	@ (2401620c <HAL_RCC_GetOscConfig+0x1a0>)
24016130:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
24016132:	f003 0301 	and.w	r3, r3, #1
24016136:	2b01      	cmp	r3, #1
24016138:	d103      	bne.n	24016142 <HAL_RCC_GetOscConfig+0xd6>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
2401613a:	687b      	ldr	r3, [r7, #4]
2401613c:	2201      	movs	r2, #1
2401613e:	615a      	str	r2, [r3, #20]
24016140:	e002      	b.n	24016148 <HAL_RCC_GetOscConfig+0xdc>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
24016142:	687b      	ldr	r3, [r7, #4]
24016144:	2200      	movs	r2, #0
24016146:	615a      	str	r2, [r3, #20]
  }

  /* Get the HSI48 configuration ---------------------------------------------*/
  if ((RCC->CR & RCC_CR_HSI48ON) == RCC_CR_HSI48ON)
24016148:	4b30      	ldr	r3, [pc, #192]	@ (2401620c <HAL_RCC_GetOscConfig+0x1a0>)
2401614a:	681b      	ldr	r3, [r3, #0]
2401614c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
24016150:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
24016154:	d103      	bne.n	2401615e <HAL_RCC_GetOscConfig+0xf2>
  {
    RCC_OscInitStruct->HSI48State = RCC_HSI48_ON;
24016156:	687b      	ldr	r3, [r7, #4]
24016158:	2201      	movs	r2, #1
2401615a:	619a      	str	r2, [r3, #24]
2401615c:	e002      	b.n	24016164 <HAL_RCC_GetOscConfig+0xf8>
  }
  else
  {
    RCC_OscInitStruct->HSI48State = RCC_HSI48_OFF;
2401615e:	687b      	ldr	r3, [r7, #4]
24016160:	2200      	movs	r2, #0
24016162:	619a      	str	r2, [r3, #24]
  }

  /* Get the PLL configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_PLLON) == RCC_CR_PLLON)
24016164:	4b29      	ldr	r3, [pc, #164]	@ (2401620c <HAL_RCC_GetOscConfig+0x1a0>)
24016166:	681b      	ldr	r3, [r3, #0]
24016168:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
2401616c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
24016170:	d103      	bne.n	2401617a <HAL_RCC_GetOscConfig+0x10e>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
24016172:	687b      	ldr	r3, [r7, #4]
24016174:	2202      	movs	r2, #2
24016176:	625a      	str	r2, [r3, #36]	@ 0x24
24016178:	e002      	b.n	24016180 <HAL_RCC_GetOscConfig+0x114>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
2401617a:	687b      	ldr	r3, [r7, #4]
2401617c:	2201      	movs	r2, #1
2401617e:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24016180:	4b22      	ldr	r3, [pc, #136]	@ (2401620c <HAL_RCC_GetOscConfig+0x1a0>)
24016182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
24016184:	f003 0203 	and.w	r2, r3, #3
24016188:	687b      	ldr	r3, [r7, #4]
2401618a:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct->PLL.PLLM = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos);
2401618c:	4b1f      	ldr	r3, [pc, #124]	@ (2401620c <HAL_RCC_GetOscConfig+0x1a0>)
2401618e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
24016190:	091b      	lsrs	r3, r3, #4
24016192:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
24016196:	687b      	ldr	r3, [r7, #4]
24016198:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) >> RCC_PLL1DIVR_N1_Pos) + 1U;
2401619a:	4b1c      	ldr	r3, [pc, #112]	@ (2401620c <HAL_RCC_GetOscConfig+0x1a0>)
2401619c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2401619e:	f3c3 0308 	ubfx	r3, r3, #0, #9
240161a2:	1c5a      	adds	r2, r3, #1
240161a4:	687b      	ldr	r3, [r7, #4]
240161a6:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct->PLL.PLLR = (uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) + 1U;
240161a8:	4b18      	ldr	r3, [pc, #96]	@ (2401620c <HAL_RCC_GetOscConfig+0x1a0>)
240161aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
240161ac:	0e1b      	lsrs	r3, r3, #24
240161ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
240161b2:	1c5a      	adds	r2, r3, #1
240161b4:	687b      	ldr	r3, [r7, #4]
240161b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  RCC_OscInitStruct->PLL.PLLP = (uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) + 1U;
240161b8:	4b14      	ldr	r3, [pc, #80]	@ (2401620c <HAL_RCC_GetOscConfig+0x1a0>)
240161ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
240161bc:	0a5b      	lsrs	r3, r3, #9
240161be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
240161c2:	1c5a      	adds	r2, r3, #1
240161c4:	687b      	ldr	r3, [r7, #4]
240161c6:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) + 1U;
240161c8:	4b10      	ldr	r3, [pc, #64]	@ (2401620c <HAL_RCC_GetOscConfig+0x1a0>)
240161ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
240161cc:	0c1b      	lsrs	r3, r3, #16
240161ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
240161d2:	1c5a      	adds	r2, r3, #1
240161d4:	687b      	ldr	r3, [r7, #4]
240161d6:	639a      	str	r2, [r3, #56]	@ 0x38
  RCC_OscInitStruct->PLL.PLLRGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL1RGE));
240161d8:	4b0c      	ldr	r3, [pc, #48]	@ (2401620c <HAL_RCC_GetOscConfig+0x1a0>)
240161da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
240161dc:	f003 020c 	and.w	r2, r3, #12
240161e0:	687b      	ldr	r3, [r7, #4]
240161e2:	641a      	str	r2, [r3, #64]	@ 0x40
  RCC_OscInitStruct->PLL.PLLVCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL1VCOSEL) >> RCC_PLLCFGR_PLL1VCOSEL_Pos);
240161e4:	4b09      	ldr	r3, [pc, #36]	@ (2401620c <HAL_RCC_GetOscConfig+0x1a0>)
240161e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
240161e8:	085b      	lsrs	r3, r3, #1
240161ea:	f003 0201 	and.w	r2, r3, #1
240161ee:	687b      	ldr	r3, [r7, #4]
240161f0:	645a      	str	r2, [r3, #68]	@ 0x44
  RCC_OscInitStruct->PLL.PLLFRACN = (uint32_t)(((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos));
240161f2:	4b06      	ldr	r3, [pc, #24]	@ (2401620c <HAL_RCC_GetOscConfig+0x1a0>)
240161f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
240161f6:	08db      	lsrs	r3, r3, #3
240161f8:	f3c3 020c 	ubfx	r2, r3, #0, #13
240161fc:	687b      	ldr	r3, [r7, #4]
240161fe:	649a      	str	r2, [r3, #72]	@ 0x48
}
24016200:	bf00      	nop
24016202:	370c      	adds	r7, #12
24016204:	46bd      	mov	sp, r7
24016206:	f85d 7b04 	ldr.w	r7, [sp], #4
2401620a:	4770      	bx	lr
2401620c:	58024400 	.word	0x58024400

24016210 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
24016210:	b480      	push	{r7}
24016212:	b083      	sub	sp, #12
24016214:	af00      	add	r7, sp, #0
24016216:	6078      	str	r0, [r7, #4]
24016218:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
2401621a:	687b      	ldr	r3, [r7, #4]
2401621c:	223f      	movs	r2, #63	@ 0x3f
2401621e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
24016220:	4b1a      	ldr	r3, [pc, #104]	@ (2401628c <HAL_RCC_GetClockConfig+0x7c>)
24016222:	691b      	ldr	r3, [r3, #16]
24016224:	f003 0207 	and.w	r2, r3, #7
24016228:	687b      	ldr	r3, [r7, #4]
2401622a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
2401622c:	4b17      	ldr	r3, [pc, #92]	@ (2401628c <HAL_RCC_GetClockConfig+0x7c>)
2401622e:	699b      	ldr	r3, [r3, #24]
24016230:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
24016234:	687b      	ldr	r3, [r7, #4]
24016236:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
24016238:	4b14      	ldr	r3, [pc, #80]	@ (2401628c <HAL_RCC_GetClockConfig+0x7c>)
2401623a:	699b      	ldr	r3, [r3, #24]
2401623c:	f003 020f 	and.w	r2, r3, #15
24016240:	687b      	ldr	r3, [r7, #4]
24016242:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
24016244:	4b11      	ldr	r3, [pc, #68]	@ (2401628c <HAL_RCC_GetClockConfig+0x7c>)
24016246:	699b      	ldr	r3, [r3, #24]
24016248:	f003 0270 	and.w	r2, r3, #112	@ 0x70
2401624c:	687b      	ldr	r3, [r7, #4]
2401624e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
24016250:	4b0e      	ldr	r3, [pc, #56]	@ (2401628c <HAL_RCC_GetClockConfig+0x7c>)
24016252:	69db      	ldr	r3, [r3, #28]
24016254:	f003 0270 	and.w	r2, r3, #112	@ 0x70
24016258:	687b      	ldr	r3, [r7, #4]
2401625a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
2401625c:	4b0b      	ldr	r3, [pc, #44]	@ (2401628c <HAL_RCC_GetClockConfig+0x7c>)
2401625e:	69db      	ldr	r3, [r3, #28]
24016260:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
24016264:	687b      	ldr	r3, [r7, #4]
24016266:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
24016268:	4b08      	ldr	r3, [pc, #32]	@ (2401628c <HAL_RCC_GetClockConfig+0x7c>)
2401626a:	6a1b      	ldr	r3, [r3, #32]
2401626c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
24016270:	687b      	ldr	r3, [r7, #4]
24016272:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
24016274:	4b06      	ldr	r3, [pc, #24]	@ (24016290 <HAL_RCC_GetClockConfig+0x80>)
24016276:	681b      	ldr	r3, [r3, #0]
24016278:	f003 020f 	and.w	r2, r3, #15
2401627c:	683b      	ldr	r3, [r7, #0]
2401627e:	601a      	str	r2, [r3, #0]
}
24016280:	bf00      	nop
24016282:	370c      	adds	r7, #12
24016284:	46bd      	mov	sp, r7
24016286:	f85d 7b04 	ldr.w	r7, [sp], #4
2401628a:	4770      	bx	lr
2401628c:	58024400 	.word	0x58024400
24016290:	52002000 	.word	0x52002000

24016294 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
24016294:	b580      	push	{r7, lr}
24016296:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
24016298:	4b07      	ldr	r3, [pc, #28]	@ (240162b8 <HAL_RCC_NMI_IRQHandler+0x24>)
2401629a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
2401629c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
240162a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
240162a4:	d105      	bne.n	240162b2 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
240162a6:	f000 f809 	bl	240162bc <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
240162aa:	4b03      	ldr	r3, [pc, #12]	@ (240162b8 <HAL_RCC_NMI_IRQHandler+0x24>)
240162ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
240162b0:	669a      	str	r2, [r3, #104]	@ 0x68
  }
}
240162b2:	bf00      	nop
240162b4:	bd80      	pop	{r7, pc}
240162b6:	bf00      	nop
240162b8:	58024400 	.word	0x58024400

240162bc <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
240162bc:	b480      	push	{r7}
240162be:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
240162c0:	bf00      	nop
240162c2:	46bd      	mov	sp, r7
240162c4:	f85d 7b04 	ldr.w	r7, [sp], #4
240162c8:	4770      	bx	lr
	...

240162cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
240162cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
240162d0:	b0c6      	sub	sp, #280	@ 0x118
240162d2:	af00      	add	r7, sp, #0
240162d4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
240162d8:	2300      	movs	r3, #0
240162da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
240162de:	2300      	movs	r3, #0
240162e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
240162e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
240162e8:	e9d3 2300 	ldrd	r2, r3, [r3]
240162ec:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
240162f0:	2500      	movs	r5, #0
240162f2:	ea54 0305 	orrs.w	r3, r4, r5
240162f6:	d049      	beq.n	2401638c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
240162f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
240162fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
240162fe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
24016302:	d02f      	beq.n	24016364 <HAL_RCCEx_PeriphCLKConfig+0x98>
24016304:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
24016308:	d828      	bhi.n	2401635c <HAL_RCCEx_PeriphCLKConfig+0x90>
2401630a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
2401630e:	d01a      	beq.n	24016346 <HAL_RCCEx_PeriphCLKConfig+0x7a>
24016310:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
24016314:	d822      	bhi.n	2401635c <HAL_RCCEx_PeriphCLKConfig+0x90>
24016316:	2b00      	cmp	r3, #0
24016318:	d003      	beq.n	24016322 <HAL_RCCEx_PeriphCLKConfig+0x56>
2401631a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
2401631e:	d007      	beq.n	24016330 <HAL_RCCEx_PeriphCLKConfig+0x64>
24016320:	e01c      	b.n	2401635c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24016322:	4bab      	ldr	r3, [pc, #684]	@ (240165d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
24016324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
24016326:	4aaa      	ldr	r2, [pc, #680]	@ (240165d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
24016328:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
2401632c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
2401632e:	e01a      	b.n	24016366 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
24016330:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24016334:	3308      	adds	r3, #8
24016336:	2102      	movs	r1, #2
24016338:	4618      	mov	r0, r3
2401633a:	f002 fe0b 	bl	24018f54 <RCCEx_PLL2_Config>
2401633e:	4603      	mov	r3, r0
24016340:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
24016344:	e00f      	b.n	24016366 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24016346:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
2401634a:	3328      	adds	r3, #40	@ 0x28
2401634c:	2102      	movs	r1, #2
2401634e:	4618      	mov	r0, r3
24016350:	f002 feb2 	bl	240190b8 <RCCEx_PLL3_Config>
24016354:	4603      	mov	r3, r0
24016356:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
2401635a:	e004      	b.n	24016366 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2401635c:	2301      	movs	r3, #1
2401635e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
24016362:	e000      	b.n	24016366 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
24016364:	bf00      	nop
    }

    if (ret == HAL_OK)
24016366:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
2401636a:	2b00      	cmp	r3, #0
2401636c:	d10a      	bne.n	24016384 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
2401636e:	4b98      	ldr	r3, [pc, #608]	@ (240165d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
24016370:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
24016372:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
24016376:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
2401637a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
2401637c:	4a94      	ldr	r2, [pc, #592]	@ (240165d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
2401637e:	430b      	orrs	r3, r1
24016380:	6513      	str	r3, [r2, #80]	@ 0x50
24016382:	e003      	b.n	2401638c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
24016384:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
24016388:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
2401638c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24016390:	e9d3 2300 	ldrd	r2, r3, [r3]
24016394:	f402 7880 	and.w	r8, r2, #256	@ 0x100
24016398:	f04f 0900 	mov.w	r9, #0
2401639c:	ea58 0309 	orrs.w	r3, r8, r9
240163a0:	d047      	beq.n	24016432 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
240163a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
240163a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
240163a8:	2b04      	cmp	r3, #4
240163aa:	d82a      	bhi.n	24016402 <HAL_RCCEx_PeriphCLKConfig+0x136>
240163ac:	a201      	add	r2, pc, #4	@ (adr r2, 240163b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
240163ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
240163b2:	bf00      	nop
240163b4:	240163c9 	.word	0x240163c9
240163b8:	240163d7 	.word	0x240163d7
240163bc:	240163ed 	.word	0x240163ed
240163c0:	2401640b 	.word	0x2401640b
240163c4:	2401640b 	.word	0x2401640b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240163c8:	4b81      	ldr	r3, [pc, #516]	@ (240165d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
240163ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
240163cc:	4a80      	ldr	r2, [pc, #512]	@ (240165d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
240163ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
240163d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
240163d4:	e01a      	b.n	2401640c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
240163d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
240163da:	3308      	adds	r3, #8
240163dc:	2100      	movs	r1, #0
240163de:	4618      	mov	r0, r3
240163e0:	f002 fdb8 	bl	24018f54 <RCCEx_PLL2_Config>
240163e4:	4603      	mov	r3, r0
240163e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
240163ea:	e00f      	b.n	2401640c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
240163ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
240163f0:	3328      	adds	r3, #40	@ 0x28
240163f2:	2100      	movs	r1, #0
240163f4:	4618      	mov	r0, r3
240163f6:	f002 fe5f 	bl	240190b8 <RCCEx_PLL3_Config>
240163fa:	4603      	mov	r3, r0
240163fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
24016400:	e004      	b.n	2401640c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
24016402:	2301      	movs	r3, #1
24016404:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
24016408:	e000      	b.n	2401640c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
2401640a:	bf00      	nop
    }

    if (ret == HAL_OK)
2401640c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
24016410:	2b00      	cmp	r3, #0
24016412:	d10a      	bne.n	2401642a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
24016414:	4b6e      	ldr	r3, [pc, #440]	@ (240165d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
24016416:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
24016418:	f023 0107 	bic.w	r1, r3, #7
2401641c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24016420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
24016422:	4a6b      	ldr	r2, [pc, #428]	@ (240165d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
24016424:	430b      	orrs	r3, r1
24016426:	6513      	str	r3, [r2, #80]	@ 0x50
24016428:	e003      	b.n	24016432 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
2401642a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
2401642e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
24016432:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24016436:	e9d3 2300 	ldrd	r2, r3, [r3]
2401643a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
2401643e:	f04f 0b00 	mov.w	fp, #0
24016442:	ea5a 030b 	orrs.w	r3, sl, fp
24016446:	d05b      	beq.n	24016500 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
24016448:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
2401644c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
24016450:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
24016454:	d03b      	beq.n	240164ce <HAL_RCCEx_PeriphCLKConfig+0x202>
24016456:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
2401645a:	d834      	bhi.n	240164c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
2401645c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
24016460:	d037      	beq.n	240164d2 <HAL_RCCEx_PeriphCLKConfig+0x206>
24016462:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
24016466:	d82e      	bhi.n	240164c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
24016468:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
2401646c:	d033      	beq.n	240164d6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
2401646e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
24016472:	d828      	bhi.n	240164c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
24016474:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
24016478:	d01a      	beq.n	240164b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
2401647a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
2401647e:	d822      	bhi.n	240164c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
24016480:	2b00      	cmp	r3, #0
24016482:	d003      	beq.n	2401648c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
24016484:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
24016488:	d007      	beq.n	2401649a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
2401648a:	e01c      	b.n	240164c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2401648c:	4b50      	ldr	r3, [pc, #320]	@ (240165d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
2401648e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
24016490:	4a4f      	ldr	r2, [pc, #316]	@ (240165d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
24016492:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
24016496:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
24016498:	e01e      	b.n	240164d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2401649a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
2401649e:	3308      	adds	r3, #8
240164a0:	2100      	movs	r1, #0
240164a2:	4618      	mov	r0, r3
240164a4:	f002 fd56 	bl	24018f54 <RCCEx_PLL2_Config>
240164a8:	4603      	mov	r3, r0
240164aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
240164ae:	e013      	b.n	240164d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
240164b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
240164b4:	3328      	adds	r3, #40	@ 0x28
240164b6:	2100      	movs	r1, #0
240164b8:	4618      	mov	r0, r3
240164ba:	f002 fdfd 	bl	240190b8 <RCCEx_PLL3_Config>
240164be:	4603      	mov	r3, r0
240164c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
240164c4:	e008      	b.n	240164d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
240164c6:	2301      	movs	r3, #1
240164c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
240164cc:	e004      	b.n	240164d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
240164ce:	bf00      	nop
240164d0:	e002      	b.n	240164d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
240164d2:	bf00      	nop
240164d4:	e000      	b.n	240164d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
240164d6:	bf00      	nop
    }

    if (ret == HAL_OK)
240164d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
240164dc:	2b00      	cmp	r3, #0
240164de:	d10b      	bne.n	240164f8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
240164e0:	4b3b      	ldr	r3, [pc, #236]	@ (240165d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
240164e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
240164e4:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
240164e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
240164ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
240164f0:	4a37      	ldr	r2, [pc, #220]	@ (240165d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
240164f2:	430b      	orrs	r3, r1
240164f4:	6593      	str	r3, [r2, #88]	@ 0x58
240164f6:	e003      	b.n	24016500 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
240164f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
240164fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
24016500:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24016504:	e9d3 2300 	ldrd	r2, r3, [r3]
24016508:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
2401650c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
24016510:	2300      	movs	r3, #0
24016512:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
24016516:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
2401651a:	460b      	mov	r3, r1
2401651c:	4313      	orrs	r3, r2
2401651e:	d05d      	beq.n	240165dc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
24016520:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24016524:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
24016528:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
2401652c:	d03b      	beq.n	240165a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
2401652e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
24016532:	d834      	bhi.n	2401659e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
24016534:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
24016538:	d037      	beq.n	240165aa <HAL_RCCEx_PeriphCLKConfig+0x2de>
2401653a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
2401653e:	d82e      	bhi.n	2401659e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
24016540:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
24016544:	d033      	beq.n	240165ae <HAL_RCCEx_PeriphCLKConfig+0x2e2>
24016546:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
2401654a:	d828      	bhi.n	2401659e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
2401654c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
24016550:	d01a      	beq.n	24016588 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
24016552:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
24016556:	d822      	bhi.n	2401659e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
24016558:	2b00      	cmp	r3, #0
2401655a:	d003      	beq.n	24016564 <HAL_RCCEx_PeriphCLKConfig+0x298>
2401655c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
24016560:	d007      	beq.n	24016572 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
24016562:	e01c      	b.n	2401659e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24016564:	4b1a      	ldr	r3, [pc, #104]	@ (240165d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
24016566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
24016568:	4a19      	ldr	r2, [pc, #100]	@ (240165d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
2401656a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
2401656e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
24016570:	e01e      	b.n	240165b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24016572:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24016576:	3308      	adds	r3, #8
24016578:	2100      	movs	r1, #0
2401657a:	4618      	mov	r0, r3
2401657c:	f002 fcea 	bl	24018f54 <RCCEx_PLL2_Config>
24016580:	4603      	mov	r3, r0
24016582:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
24016586:	e013      	b.n	240165b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24016588:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
2401658c:	3328      	adds	r3, #40	@ 0x28
2401658e:	2100      	movs	r1, #0
24016590:	4618      	mov	r0, r3
24016592:	f002 fd91 	bl	240190b8 <RCCEx_PLL3_Config>
24016596:	4603      	mov	r3, r0
24016598:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
2401659c:	e008      	b.n	240165b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
2401659e:	2301      	movs	r3, #1
240165a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
240165a4:	e004      	b.n	240165b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
240165a6:	bf00      	nop
240165a8:	e002      	b.n	240165b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
240165aa:	bf00      	nop
240165ac:	e000      	b.n	240165b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
240165ae:	bf00      	nop
    }

    if (ret == HAL_OK)
240165b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
240165b4:	2b00      	cmp	r3, #0
240165b6:	d10d      	bne.n	240165d4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
240165b8:	4b05      	ldr	r3, [pc, #20]	@ (240165d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
240165ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
240165bc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
240165c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
240165c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
240165c8:	4a01      	ldr	r2, [pc, #4]	@ (240165d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
240165ca:	430b      	orrs	r3, r1
240165cc:	6593      	str	r3, [r2, #88]	@ 0x58
240165ce:	e005      	b.n	240165dc <HAL_RCCEx_PeriphCLKConfig+0x310>
240165d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
240165d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
240165d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
240165dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
240165e0:	e9d3 2300 	ldrd	r2, r3, [r3]
240165e4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
240165e8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
240165ec:	2300      	movs	r3, #0
240165ee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
240165f2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
240165f6:	460b      	mov	r3, r1
240165f8:	4313      	orrs	r3, r2
240165fa:	d03a      	beq.n	24016672 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
240165fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24016600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
24016602:	2b30      	cmp	r3, #48	@ 0x30
24016604:	d01f      	beq.n	24016646 <HAL_RCCEx_PeriphCLKConfig+0x37a>
24016606:	2b30      	cmp	r3, #48	@ 0x30
24016608:	d819      	bhi.n	2401663e <HAL_RCCEx_PeriphCLKConfig+0x372>
2401660a:	2b20      	cmp	r3, #32
2401660c:	d00c      	beq.n	24016628 <HAL_RCCEx_PeriphCLKConfig+0x35c>
2401660e:	2b20      	cmp	r3, #32
24016610:	d815      	bhi.n	2401663e <HAL_RCCEx_PeriphCLKConfig+0x372>
24016612:	2b00      	cmp	r3, #0
24016614:	d019      	beq.n	2401664a <HAL_RCCEx_PeriphCLKConfig+0x37e>
24016616:	2b10      	cmp	r3, #16
24016618:	d111      	bne.n	2401663e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2401661a:	4baa      	ldr	r3, [pc, #680]	@ (240168c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
2401661c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2401661e:	4aa9      	ldr	r2, [pc, #676]	@ (240168c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
24016620:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
24016624:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
24016626:	e011      	b.n	2401664c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
24016628:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
2401662c:	3308      	adds	r3, #8
2401662e:	2102      	movs	r1, #2
24016630:	4618      	mov	r0, r3
24016632:	f002 fc8f 	bl	24018f54 <RCCEx_PLL2_Config>
24016636:	4603      	mov	r3, r0
24016638:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
2401663c:	e006      	b.n	2401664c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
2401663e:	2301      	movs	r3, #1
24016640:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
24016644:	e002      	b.n	2401664c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
24016646:	bf00      	nop
24016648:	e000      	b.n	2401664c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
2401664a:	bf00      	nop
    }

    if (ret == HAL_OK)
2401664c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
24016650:	2b00      	cmp	r3, #0
24016652:	d10a      	bne.n	2401666a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
24016654:	4b9b      	ldr	r3, [pc, #620]	@ (240168c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
24016656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
24016658:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
2401665c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24016660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
24016662:	4a98      	ldr	r2, [pc, #608]	@ (240168c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
24016664:	430b      	orrs	r3, r1
24016666:	64d3      	str	r3, [r2, #76]	@ 0x4c
24016668:	e003      	b.n	24016672 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
2401666a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
2401666e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
24016672:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24016676:	e9d3 2300 	ldrd	r2, r3, [r3]
2401667a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
2401667e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
24016682:	2300      	movs	r3, #0
24016684:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
24016688:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
2401668c:	460b      	mov	r3, r1
2401668e:	4313      	orrs	r3, r2
24016690:	d051      	beq.n	24016736 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
24016692:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24016696:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
24016698:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
2401669c:	d035      	beq.n	2401670a <HAL_RCCEx_PeriphCLKConfig+0x43e>
2401669e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
240166a2:	d82e      	bhi.n	24016702 <HAL_RCCEx_PeriphCLKConfig+0x436>
240166a4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
240166a8:	d031      	beq.n	2401670e <HAL_RCCEx_PeriphCLKConfig+0x442>
240166aa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
240166ae:	d828      	bhi.n	24016702 <HAL_RCCEx_PeriphCLKConfig+0x436>
240166b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
240166b4:	d01a      	beq.n	240166ec <HAL_RCCEx_PeriphCLKConfig+0x420>
240166b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
240166ba:	d822      	bhi.n	24016702 <HAL_RCCEx_PeriphCLKConfig+0x436>
240166bc:	2b00      	cmp	r3, #0
240166be:	d003      	beq.n	240166c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
240166c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
240166c4:	d007      	beq.n	240166d6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
240166c6:	e01c      	b.n	24016702 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240166c8:	4b7e      	ldr	r3, [pc, #504]	@ (240168c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
240166ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
240166cc:	4a7d      	ldr	r2, [pc, #500]	@ (240168c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
240166ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
240166d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
240166d4:	e01c      	b.n	24016710 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
240166d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
240166da:	3308      	adds	r3, #8
240166dc:	2100      	movs	r1, #0
240166de:	4618      	mov	r0, r3
240166e0:	f002 fc38 	bl	24018f54 <RCCEx_PLL2_Config>
240166e4:	4603      	mov	r3, r0
240166e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
240166ea:	e011      	b.n	24016710 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
240166ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
240166f0:	3328      	adds	r3, #40	@ 0x28
240166f2:	2100      	movs	r1, #0
240166f4:	4618      	mov	r0, r3
240166f6:	f002 fcdf 	bl	240190b8 <RCCEx_PLL3_Config>
240166fa:	4603      	mov	r3, r0
240166fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
24016700:	e006      	b.n	24016710 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
24016702:	2301      	movs	r3, #1
24016704:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
24016708:	e002      	b.n	24016710 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
2401670a:	bf00      	nop
2401670c:	e000      	b.n	24016710 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
2401670e:	bf00      	nop
    }

    if (ret == HAL_OK)
24016710:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
24016714:	2b00      	cmp	r3, #0
24016716:	d10a      	bne.n	2401672e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
24016718:	4b6a      	ldr	r3, [pc, #424]	@ (240168c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
2401671a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2401671c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
24016720:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24016724:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
24016726:	4a67      	ldr	r2, [pc, #412]	@ (240168c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
24016728:	430b      	orrs	r3, r1
2401672a:	6513      	str	r3, [r2, #80]	@ 0x50
2401672c:	e003      	b.n	24016736 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
2401672e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
24016732:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
24016736:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
2401673a:	e9d3 2300 	ldrd	r2, r3, [r3]
2401673e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
24016742:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
24016746:	2300      	movs	r3, #0
24016748:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
2401674c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
24016750:	460b      	mov	r3, r1
24016752:	4313      	orrs	r3, r2
24016754:	d053      	beq.n	240167fe <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
24016756:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
2401675a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
2401675c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
24016760:	d033      	beq.n	240167ca <HAL_RCCEx_PeriphCLKConfig+0x4fe>
24016762:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
24016766:	d82c      	bhi.n	240167c2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
24016768:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
2401676c:	d02f      	beq.n	240167ce <HAL_RCCEx_PeriphCLKConfig+0x502>
2401676e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
24016772:	d826      	bhi.n	240167c2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
24016774:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
24016778:	d02b      	beq.n	240167d2 <HAL_RCCEx_PeriphCLKConfig+0x506>
2401677a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
2401677e:	d820      	bhi.n	240167c2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
24016780:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
24016784:	d012      	beq.n	240167ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
24016786:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
2401678a:	d81a      	bhi.n	240167c2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
2401678c:	2b00      	cmp	r3, #0
2401678e:	d022      	beq.n	240167d6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
24016790:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
24016794:	d115      	bne.n	240167c2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24016796:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
2401679a:	3308      	adds	r3, #8
2401679c:	2101      	movs	r1, #1
2401679e:	4618      	mov	r0, r3
240167a0:	f002 fbd8 	bl	24018f54 <RCCEx_PLL2_Config>
240167a4:	4603      	mov	r3, r0
240167a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
240167aa:	e015      	b.n	240167d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
240167ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
240167b0:	3328      	adds	r3, #40	@ 0x28
240167b2:	2101      	movs	r1, #1
240167b4:	4618      	mov	r0, r3
240167b6:	f002 fc7f 	bl	240190b8 <RCCEx_PLL3_Config>
240167ba:	4603      	mov	r3, r0
240167bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
240167c0:	e00a      	b.n	240167d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
240167c2:	2301      	movs	r3, #1
240167c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
240167c8:	e006      	b.n	240167d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
240167ca:	bf00      	nop
240167cc:	e004      	b.n	240167d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
240167ce:	bf00      	nop
240167d0:	e002      	b.n	240167d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
240167d2:	bf00      	nop
240167d4:	e000      	b.n	240167d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
240167d6:	bf00      	nop
    }

    if (ret == HAL_OK)
240167d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
240167dc:	2b00      	cmp	r3, #0
240167de:	d10a      	bne.n	240167f6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
240167e0:	4b38      	ldr	r3, [pc, #224]	@ (240168c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
240167e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
240167e4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
240167e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
240167ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
240167ee:	4a35      	ldr	r2, [pc, #212]	@ (240168c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
240167f0:	430b      	orrs	r3, r1
240167f2:	6513      	str	r3, [r2, #80]	@ 0x50
240167f4:	e003      	b.n	240167fe <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
240167f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
240167fa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
240167fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24016802:	e9d3 2300 	ldrd	r2, r3, [r3]
24016806:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
2401680a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
2401680e:	2300      	movs	r3, #0
24016810:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
24016814:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
24016818:	460b      	mov	r3, r1
2401681a:	4313      	orrs	r3, r2
2401681c:	d058      	beq.n	240168d0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
2401681e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24016822:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
24016826:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
2401682a:	d033      	beq.n	24016894 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
2401682c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
24016830:	d82c      	bhi.n	2401688c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
24016832:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
24016836:	d02f      	beq.n	24016898 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
24016838:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
2401683c:	d826      	bhi.n	2401688c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
2401683e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
24016842:	d02b      	beq.n	2401689c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
24016844:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
24016848:	d820      	bhi.n	2401688c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
2401684a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
2401684e:	d012      	beq.n	24016876 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
24016850:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
24016854:	d81a      	bhi.n	2401688c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
24016856:	2b00      	cmp	r3, #0
24016858:	d022      	beq.n	240168a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
2401685a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
2401685e:	d115      	bne.n	2401688c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24016860:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24016864:	3308      	adds	r3, #8
24016866:	2101      	movs	r1, #1
24016868:	4618      	mov	r0, r3
2401686a:	f002 fb73 	bl	24018f54 <RCCEx_PLL2_Config>
2401686e:	4603      	mov	r3, r0
24016870:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
24016874:	e015      	b.n	240168a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24016876:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
2401687a:	3328      	adds	r3, #40	@ 0x28
2401687c:	2101      	movs	r1, #1
2401687e:	4618      	mov	r0, r3
24016880:	f002 fc1a 	bl	240190b8 <RCCEx_PLL3_Config>
24016884:	4603      	mov	r3, r0
24016886:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
2401688a:	e00a      	b.n	240168a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
2401688c:	2301      	movs	r3, #1
2401688e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
24016892:	e006      	b.n	240168a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
24016894:	bf00      	nop
24016896:	e004      	b.n	240168a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
24016898:	bf00      	nop
2401689a:	e002      	b.n	240168a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
2401689c:	bf00      	nop
2401689e:	e000      	b.n	240168a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
240168a0:	bf00      	nop
    }

    if (ret == HAL_OK)
240168a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
240168a6:	2b00      	cmp	r3, #0
240168a8:	d10e      	bne.n	240168c8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
240168aa:	4b06      	ldr	r3, [pc, #24]	@ (240168c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
240168ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
240168ae:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
240168b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
240168b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
240168ba:	4a02      	ldr	r2, [pc, #8]	@ (240168c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
240168bc:	430b      	orrs	r3, r1
240168be:	6593      	str	r3, [r2, #88]	@ 0x58
240168c0:	e006      	b.n	240168d0 <HAL_RCCEx_PeriphCLKConfig+0x604>
240168c2:	bf00      	nop
240168c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
240168c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
240168cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
240168d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
240168d4:	e9d3 2300 	ldrd	r2, r3, [r3]
240168d8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
240168dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
240168e0:	2300      	movs	r3, #0
240168e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
240168e6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
240168ea:	460b      	mov	r3, r1
240168ec:	4313      	orrs	r3, r2
240168ee:	d037      	beq.n	24016960 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
240168f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
240168f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
240168f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
240168fa:	d00e      	beq.n	2401691a <HAL_RCCEx_PeriphCLKConfig+0x64e>
240168fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
24016900:	d816      	bhi.n	24016930 <HAL_RCCEx_PeriphCLKConfig+0x664>
24016902:	2b00      	cmp	r3, #0
24016904:	d018      	beq.n	24016938 <HAL_RCCEx_PeriphCLKConfig+0x66c>
24016906:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
2401690a:	d111      	bne.n	24016930 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2401690c:	4bc4      	ldr	r3, [pc, #784]	@ (24016c20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2401690e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
24016910:	4ac3      	ldr	r2, [pc, #780]	@ (24016c20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
24016912:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
24016916:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
24016918:	e00f      	b.n	2401693a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
2401691a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
2401691e:	3308      	adds	r3, #8
24016920:	2101      	movs	r1, #1
24016922:	4618      	mov	r0, r3
24016924:	f002 fb16 	bl	24018f54 <RCCEx_PLL2_Config>
24016928:	4603      	mov	r3, r0
2401692a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
2401692e:	e004      	b.n	2401693a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
24016930:	2301      	movs	r3, #1
24016932:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
24016936:	e000      	b.n	2401693a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
24016938:	bf00      	nop
    }

    if (ret == HAL_OK)
2401693a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
2401693e:	2b00      	cmp	r3, #0
24016940:	d10a      	bne.n	24016958 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
24016942:	4bb7      	ldr	r3, [pc, #732]	@ (24016c20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
24016944:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
24016946:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
2401694a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
2401694e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
24016950:	4ab3      	ldr	r2, [pc, #716]	@ (24016c20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
24016952:	430b      	orrs	r3, r1
24016954:	6513      	str	r3, [r2, #80]	@ 0x50
24016956:	e003      	b.n	24016960 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
24016958:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
2401695c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
24016960:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24016964:	e9d3 2300 	ldrd	r2, r3, [r3]
24016968:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
2401696c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
24016970:	2300      	movs	r3, #0
24016972:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
24016976:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
2401697a:	460b      	mov	r3, r1
2401697c:	4313      	orrs	r3, r2
2401697e:	d039      	beq.n	240169f4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
24016980:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24016984:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
24016986:	2b03      	cmp	r3, #3
24016988:	d81c      	bhi.n	240169c4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
2401698a:	a201      	add	r2, pc, #4	@ (adr r2, 24016990 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
2401698c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24016990:	240169cd 	.word	0x240169cd
24016994:	240169a1 	.word	0x240169a1
24016998:	240169af 	.word	0x240169af
2401699c:	240169cd 	.word	0x240169cd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240169a0:	4b9f      	ldr	r3, [pc, #636]	@ (24016c20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
240169a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
240169a4:	4a9e      	ldr	r2, [pc, #632]	@ (24016c20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
240169a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
240169aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
240169ac:	e00f      	b.n	240169ce <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
240169ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
240169b2:	3308      	adds	r3, #8
240169b4:	2102      	movs	r1, #2
240169b6:	4618      	mov	r0, r3
240169b8:	f002 facc 	bl	24018f54 <RCCEx_PLL2_Config>
240169bc:	4603      	mov	r3, r0
240169be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
240169c2:	e004      	b.n	240169ce <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
240169c4:	2301      	movs	r3, #1
240169c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
240169ca:	e000      	b.n	240169ce <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
240169cc:	bf00      	nop
    }

    if (ret == HAL_OK)
240169ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
240169d2:	2b00      	cmp	r3, #0
240169d4:	d10a      	bne.n	240169ec <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
240169d6:	4b92      	ldr	r3, [pc, #584]	@ (24016c20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
240169d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
240169da:	f023 0103 	bic.w	r1, r3, #3
240169de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
240169e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
240169e4:	4a8e      	ldr	r2, [pc, #568]	@ (24016c20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
240169e6:	430b      	orrs	r3, r1
240169e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
240169ea:	e003      	b.n	240169f4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
240169ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
240169f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
240169f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
240169f8:	e9d3 2300 	ldrd	r2, r3, [r3]
240169fc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
24016a00:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
24016a04:	2300      	movs	r3, #0
24016a06:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
24016a0a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
24016a0e:	460b      	mov	r3, r1
24016a10:	4313      	orrs	r3, r2
24016a12:	f000 8099 	beq.w	24016b48 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
24016a16:	4b83      	ldr	r3, [pc, #524]	@ (24016c24 <HAL_RCCEx_PeriphCLKConfig+0x958>)
24016a18:	681b      	ldr	r3, [r3, #0]
24016a1a:	4a82      	ldr	r2, [pc, #520]	@ (24016c24 <HAL_RCCEx_PeriphCLKConfig+0x958>)
24016a1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
24016a20:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
24016a22:	f7ec f965 	bl	24002cf0 <HAL_GetTick>
24016a26:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
24016a2a:	e00b      	b.n	24016a44 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
24016a2c:	f7ec f960 	bl	24002cf0 <HAL_GetTick>
24016a30:	4602      	mov	r2, r0
24016a32:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
24016a36:	1ad3      	subs	r3, r2, r3
24016a38:	2b64      	cmp	r3, #100	@ 0x64
24016a3a:	d903      	bls.n	24016a44 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
24016a3c:	2303      	movs	r3, #3
24016a3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
24016a42:	e005      	b.n	24016a50 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
24016a44:	4b77      	ldr	r3, [pc, #476]	@ (24016c24 <HAL_RCCEx_PeriphCLKConfig+0x958>)
24016a46:	681b      	ldr	r3, [r3, #0]
24016a48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
24016a4c:	2b00      	cmp	r3, #0
24016a4e:	d0ed      	beq.n	24016a2c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
24016a50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
24016a54:	2b00      	cmp	r3, #0
24016a56:	d173      	bne.n	24016b40 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
24016a58:	4b71      	ldr	r3, [pc, #452]	@ (24016c20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
24016a5a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
24016a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24016a60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
24016a64:	4053      	eors	r3, r2
24016a66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
24016a6a:	2b00      	cmp	r3, #0
24016a6c:	d015      	beq.n	24016a9a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
24016a6e:	4b6c      	ldr	r3, [pc, #432]	@ (24016c20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
24016a70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
24016a72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
24016a76:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
24016a7a:	4b69      	ldr	r3, [pc, #420]	@ (24016c20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
24016a7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
24016a7e:	4a68      	ldr	r2, [pc, #416]	@ (24016c20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
24016a80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
24016a84:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
24016a86:	4b66      	ldr	r3, [pc, #408]	@ (24016c20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
24016a88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
24016a8a:	4a65      	ldr	r2, [pc, #404]	@ (24016c20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
24016a8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
24016a90:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
24016a92:	4a63      	ldr	r2, [pc, #396]	@ (24016c20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
24016a94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
24016a98:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
24016a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24016a9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
24016aa2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
24016aa6:	d118      	bne.n	24016ada <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24016aa8:	f7ec f922 	bl	24002cf0 <HAL_GetTick>
24016aac:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24016ab0:	e00d      	b.n	24016ace <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24016ab2:	f7ec f91d 	bl	24002cf0 <HAL_GetTick>
24016ab6:	4602      	mov	r2, r0
24016ab8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
24016abc:	1ad2      	subs	r2, r2, r3
24016abe:	f241 3388 	movw	r3, #5000	@ 0x1388
24016ac2:	429a      	cmp	r2, r3
24016ac4:	d903      	bls.n	24016ace <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
24016ac6:	2303      	movs	r3, #3
24016ac8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
24016acc:	e005      	b.n	24016ada <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24016ace:	4b54      	ldr	r3, [pc, #336]	@ (24016c20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
24016ad0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
24016ad2:	f003 0302 	and.w	r3, r3, #2
24016ad6:	2b00      	cmp	r3, #0
24016ad8:	d0eb      	beq.n	24016ab2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
24016ada:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
24016ade:	2b00      	cmp	r3, #0
24016ae0:	d129      	bne.n	24016b36 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
24016ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24016ae6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
24016aea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
24016aee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
24016af2:	d10e      	bne.n	24016b12 <HAL_RCCEx_PeriphCLKConfig+0x846>
24016af4:	4b4a      	ldr	r3, [pc, #296]	@ (24016c20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
24016af6:	691b      	ldr	r3, [r3, #16]
24016af8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
24016afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24016b00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
24016b04:	091a      	lsrs	r2, r3, #4
24016b06:	4b48      	ldr	r3, [pc, #288]	@ (24016c28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
24016b08:	4013      	ands	r3, r2
24016b0a:	4a45      	ldr	r2, [pc, #276]	@ (24016c20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
24016b0c:	430b      	orrs	r3, r1
24016b0e:	6113      	str	r3, [r2, #16]
24016b10:	e005      	b.n	24016b1e <HAL_RCCEx_PeriphCLKConfig+0x852>
24016b12:	4b43      	ldr	r3, [pc, #268]	@ (24016c20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
24016b14:	691b      	ldr	r3, [r3, #16]
24016b16:	4a42      	ldr	r2, [pc, #264]	@ (24016c20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
24016b18:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
24016b1c:	6113      	str	r3, [r2, #16]
24016b1e:	4b40      	ldr	r3, [pc, #256]	@ (24016c20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
24016b20:	6f19      	ldr	r1, [r3, #112]	@ 0x70
24016b22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24016b26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
24016b2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
24016b2e:	4a3c      	ldr	r2, [pc, #240]	@ (24016c20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
24016b30:	430b      	orrs	r3, r1
24016b32:	6713      	str	r3, [r2, #112]	@ 0x70
24016b34:	e008      	b.n	24016b48 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
24016b36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
24016b3a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
24016b3e:	e003      	b.n	24016b48 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
24016b40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
24016b44:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
24016b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24016b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
24016b50:	f002 0301 	and.w	r3, r2, #1
24016b54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
24016b58:	2300      	movs	r3, #0
24016b5a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
24016b5e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
24016b62:	460b      	mov	r3, r1
24016b64:	4313      	orrs	r3, r2
24016b66:	f000 808f 	beq.w	24016c88 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
24016b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24016b6e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
24016b70:	2b28      	cmp	r3, #40	@ 0x28
24016b72:	d871      	bhi.n	24016c58 <HAL_RCCEx_PeriphCLKConfig+0x98c>
24016b74:	a201      	add	r2, pc, #4	@ (adr r2, 24016b7c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
24016b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24016b7a:	bf00      	nop
24016b7c:	24016c61 	.word	0x24016c61
24016b80:	24016c59 	.word	0x24016c59
24016b84:	24016c59 	.word	0x24016c59
24016b88:	24016c59 	.word	0x24016c59
24016b8c:	24016c59 	.word	0x24016c59
24016b90:	24016c59 	.word	0x24016c59
24016b94:	24016c59 	.word	0x24016c59
24016b98:	24016c59 	.word	0x24016c59
24016b9c:	24016c2d 	.word	0x24016c2d
24016ba0:	24016c59 	.word	0x24016c59
24016ba4:	24016c59 	.word	0x24016c59
24016ba8:	24016c59 	.word	0x24016c59
24016bac:	24016c59 	.word	0x24016c59
24016bb0:	24016c59 	.word	0x24016c59
24016bb4:	24016c59 	.word	0x24016c59
24016bb8:	24016c59 	.word	0x24016c59
24016bbc:	24016c43 	.word	0x24016c43
24016bc0:	24016c59 	.word	0x24016c59
24016bc4:	24016c59 	.word	0x24016c59
24016bc8:	24016c59 	.word	0x24016c59
24016bcc:	24016c59 	.word	0x24016c59
24016bd0:	24016c59 	.word	0x24016c59
24016bd4:	24016c59 	.word	0x24016c59
24016bd8:	24016c59 	.word	0x24016c59
24016bdc:	24016c61 	.word	0x24016c61
24016be0:	24016c59 	.word	0x24016c59
24016be4:	24016c59 	.word	0x24016c59
24016be8:	24016c59 	.word	0x24016c59
24016bec:	24016c59 	.word	0x24016c59
24016bf0:	24016c59 	.word	0x24016c59
24016bf4:	24016c59 	.word	0x24016c59
24016bf8:	24016c59 	.word	0x24016c59
24016bfc:	24016c61 	.word	0x24016c61
24016c00:	24016c59 	.word	0x24016c59
24016c04:	24016c59 	.word	0x24016c59
24016c08:	24016c59 	.word	0x24016c59
24016c0c:	24016c59 	.word	0x24016c59
24016c10:	24016c59 	.word	0x24016c59
24016c14:	24016c59 	.word	0x24016c59
24016c18:	24016c59 	.word	0x24016c59
24016c1c:	24016c61 	.word	0x24016c61
24016c20:	58024400 	.word	0x58024400
24016c24:	58024800 	.word	0x58024800
24016c28:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24016c2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24016c30:	3308      	adds	r3, #8
24016c32:	2101      	movs	r1, #1
24016c34:	4618      	mov	r0, r3
24016c36:	f002 f98d 	bl	24018f54 <RCCEx_PLL2_Config>
24016c3a:	4603      	mov	r3, r0
24016c3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
24016c40:	e00f      	b.n	24016c62 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24016c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24016c46:	3328      	adds	r3, #40	@ 0x28
24016c48:	2101      	movs	r1, #1
24016c4a:	4618      	mov	r0, r3
24016c4c:	f002 fa34 	bl	240190b8 <RCCEx_PLL3_Config>
24016c50:	4603      	mov	r3, r0
24016c52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
24016c56:	e004      	b.n	24016c62 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
24016c58:	2301      	movs	r3, #1
24016c5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
24016c5e:	e000      	b.n	24016c62 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
24016c60:	bf00      	nop
    }

    if (ret == HAL_OK)
24016c62:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
24016c66:	2b00      	cmp	r3, #0
24016c68:	d10a      	bne.n	24016c80 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
24016c6a:	4bbf      	ldr	r3, [pc, #764]	@ (24016f68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
24016c6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
24016c6e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
24016c72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24016c76:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
24016c78:	4abb      	ldr	r2, [pc, #748]	@ (24016f68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
24016c7a:	430b      	orrs	r3, r1
24016c7c:	6553      	str	r3, [r2, #84]	@ 0x54
24016c7e:	e003      	b.n	24016c88 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
24016c80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
24016c84:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
24016c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24016c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
24016c90:	f002 0302 	and.w	r3, r2, #2
24016c94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
24016c98:	2300      	movs	r3, #0
24016c9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
24016c9e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
24016ca2:	460b      	mov	r3, r1
24016ca4:	4313      	orrs	r3, r2
24016ca6:	d041      	beq.n	24016d2c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
24016ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24016cac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
24016cae:	2b05      	cmp	r3, #5
24016cb0:	d824      	bhi.n	24016cfc <HAL_RCCEx_PeriphCLKConfig+0xa30>
24016cb2:	a201      	add	r2, pc, #4	@ (adr r2, 24016cb8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
24016cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24016cb8:	24016d05 	.word	0x24016d05
24016cbc:	24016cd1 	.word	0x24016cd1
24016cc0:	24016ce7 	.word	0x24016ce7
24016cc4:	24016d05 	.word	0x24016d05
24016cc8:	24016d05 	.word	0x24016d05
24016ccc:	24016d05 	.word	0x24016d05
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24016cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24016cd4:	3308      	adds	r3, #8
24016cd6:	2101      	movs	r1, #1
24016cd8:	4618      	mov	r0, r3
24016cda:	f002 f93b 	bl	24018f54 <RCCEx_PLL2_Config>
24016cde:	4603      	mov	r3, r0
24016ce0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
24016ce4:	e00f      	b.n	24016d06 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24016ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24016cea:	3328      	adds	r3, #40	@ 0x28
24016cec:	2101      	movs	r1, #1
24016cee:	4618      	mov	r0, r3
24016cf0:	f002 f9e2 	bl	240190b8 <RCCEx_PLL3_Config>
24016cf4:	4603      	mov	r3, r0
24016cf6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
24016cfa:	e004      	b.n	24016d06 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
24016cfc:	2301      	movs	r3, #1
24016cfe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
24016d02:	e000      	b.n	24016d06 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
24016d04:	bf00      	nop
    }

    if (ret == HAL_OK)
24016d06:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
24016d0a:	2b00      	cmp	r3, #0
24016d0c:	d10a      	bne.n	24016d24 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
24016d0e:	4b96      	ldr	r3, [pc, #600]	@ (24016f68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
24016d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
24016d12:	f023 0107 	bic.w	r1, r3, #7
24016d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24016d1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
24016d1c:	4a92      	ldr	r2, [pc, #584]	@ (24016f68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
24016d1e:	430b      	orrs	r3, r1
24016d20:	6553      	str	r3, [r2, #84]	@ 0x54
24016d22:	e003      	b.n	24016d2c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
24016d24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
24016d28:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
24016d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24016d30:	e9d3 2300 	ldrd	r2, r3, [r3]
24016d34:	f002 0304 	and.w	r3, r2, #4
24016d38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
24016d3c:	2300      	movs	r3, #0
24016d3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
24016d42:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
24016d46:	460b      	mov	r3, r1
24016d48:	4313      	orrs	r3, r2
24016d4a:	d044      	beq.n	24016dd6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
24016d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24016d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
24016d54:	2b05      	cmp	r3, #5
24016d56:	d825      	bhi.n	24016da4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
24016d58:	a201      	add	r2, pc, #4	@ (adr r2, 24016d60 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
24016d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24016d5e:	bf00      	nop
24016d60:	24016dad 	.word	0x24016dad
24016d64:	24016d79 	.word	0x24016d79
24016d68:	24016d8f 	.word	0x24016d8f
24016d6c:	24016dad 	.word	0x24016dad
24016d70:	24016dad 	.word	0x24016dad
24016d74:	24016dad 	.word	0x24016dad
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24016d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24016d7c:	3308      	adds	r3, #8
24016d7e:	2101      	movs	r1, #1
24016d80:	4618      	mov	r0, r3
24016d82:	f002 f8e7 	bl	24018f54 <RCCEx_PLL2_Config>
24016d86:	4603      	mov	r3, r0
24016d88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
24016d8c:	e00f      	b.n	24016dae <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24016d8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24016d92:	3328      	adds	r3, #40	@ 0x28
24016d94:	2101      	movs	r1, #1
24016d96:	4618      	mov	r0, r3
24016d98:	f002 f98e 	bl	240190b8 <RCCEx_PLL3_Config>
24016d9c:	4603      	mov	r3, r0
24016d9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
24016da2:	e004      	b.n	24016dae <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
24016da4:	2301      	movs	r3, #1
24016da6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
24016daa:	e000      	b.n	24016dae <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
24016dac:	bf00      	nop
    }

    if (ret == HAL_OK)
24016dae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
24016db2:	2b00      	cmp	r3, #0
24016db4:	d10b      	bne.n	24016dce <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
24016db6:	4b6c      	ldr	r3, [pc, #432]	@ (24016f68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
24016db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
24016dba:	f023 0107 	bic.w	r1, r3, #7
24016dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24016dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
24016dc6:	4a68      	ldr	r2, [pc, #416]	@ (24016f68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
24016dc8:	430b      	orrs	r3, r1
24016dca:	6593      	str	r3, [r2, #88]	@ 0x58
24016dcc:	e003      	b.n	24016dd6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
24016dce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
24016dd2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
24016dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24016dda:	e9d3 2300 	ldrd	r2, r3, [r3]
24016dde:	f002 0320 	and.w	r3, r2, #32
24016de2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
24016de6:	2300      	movs	r3, #0
24016de8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
24016dec:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
24016df0:	460b      	mov	r3, r1
24016df2:	4313      	orrs	r3, r2
24016df4:	d055      	beq.n	24016ea2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
24016df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24016dfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
24016dfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
24016e02:	d033      	beq.n	24016e6c <HAL_RCCEx_PeriphCLKConfig+0xba0>
24016e04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
24016e08:	d82c      	bhi.n	24016e64 <HAL_RCCEx_PeriphCLKConfig+0xb98>
24016e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
24016e0e:	d02f      	beq.n	24016e70 <HAL_RCCEx_PeriphCLKConfig+0xba4>
24016e10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
24016e14:	d826      	bhi.n	24016e64 <HAL_RCCEx_PeriphCLKConfig+0xb98>
24016e16:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
24016e1a:	d02b      	beq.n	24016e74 <HAL_RCCEx_PeriphCLKConfig+0xba8>
24016e1c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
24016e20:	d820      	bhi.n	24016e64 <HAL_RCCEx_PeriphCLKConfig+0xb98>
24016e22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
24016e26:	d012      	beq.n	24016e4e <HAL_RCCEx_PeriphCLKConfig+0xb82>
24016e28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
24016e2c:	d81a      	bhi.n	24016e64 <HAL_RCCEx_PeriphCLKConfig+0xb98>
24016e2e:	2b00      	cmp	r3, #0
24016e30:	d022      	beq.n	24016e78 <HAL_RCCEx_PeriphCLKConfig+0xbac>
24016e32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
24016e36:	d115      	bne.n	24016e64 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24016e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24016e3c:	3308      	adds	r3, #8
24016e3e:	2100      	movs	r1, #0
24016e40:	4618      	mov	r0, r3
24016e42:	f002 f887 	bl	24018f54 <RCCEx_PLL2_Config>
24016e46:	4603      	mov	r3, r0
24016e48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
24016e4c:	e015      	b.n	24016e7a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24016e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24016e52:	3328      	adds	r3, #40	@ 0x28
24016e54:	2102      	movs	r1, #2
24016e56:	4618      	mov	r0, r3
24016e58:	f002 f92e 	bl	240190b8 <RCCEx_PLL3_Config>
24016e5c:	4603      	mov	r3, r0
24016e5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
24016e62:	e00a      	b.n	24016e7a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
24016e64:	2301      	movs	r3, #1
24016e66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
24016e6a:	e006      	b.n	24016e7a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
24016e6c:	bf00      	nop
24016e6e:	e004      	b.n	24016e7a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
24016e70:	bf00      	nop
24016e72:	e002      	b.n	24016e7a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
24016e74:	bf00      	nop
24016e76:	e000      	b.n	24016e7a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
24016e78:	bf00      	nop
    }

    if (ret == HAL_OK)
24016e7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
24016e7e:	2b00      	cmp	r3, #0
24016e80:	d10b      	bne.n	24016e9a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
24016e82:	4b39      	ldr	r3, [pc, #228]	@ (24016f68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
24016e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
24016e86:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
24016e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24016e8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
24016e92:	4a35      	ldr	r2, [pc, #212]	@ (24016f68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
24016e94:	430b      	orrs	r3, r1
24016e96:	6553      	str	r3, [r2, #84]	@ 0x54
24016e98:	e003      	b.n	24016ea2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
24016e9a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
24016e9e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
24016ea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24016ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
24016eaa:	f002 0340 	and.w	r3, r2, #64	@ 0x40
24016eae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
24016eb2:	2300      	movs	r3, #0
24016eb4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
24016eb8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
24016ebc:	460b      	mov	r3, r1
24016ebe:	4313      	orrs	r3, r2
24016ec0:	d058      	beq.n	24016f74 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
24016ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24016ec6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
24016eca:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
24016ece:	d033      	beq.n	24016f38 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
24016ed0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
24016ed4:	d82c      	bhi.n	24016f30 <HAL_RCCEx_PeriphCLKConfig+0xc64>
24016ed6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
24016eda:	d02f      	beq.n	24016f3c <HAL_RCCEx_PeriphCLKConfig+0xc70>
24016edc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
24016ee0:	d826      	bhi.n	24016f30 <HAL_RCCEx_PeriphCLKConfig+0xc64>
24016ee2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
24016ee6:	d02b      	beq.n	24016f40 <HAL_RCCEx_PeriphCLKConfig+0xc74>
24016ee8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
24016eec:	d820      	bhi.n	24016f30 <HAL_RCCEx_PeriphCLKConfig+0xc64>
24016eee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
24016ef2:	d012      	beq.n	24016f1a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
24016ef4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
24016ef8:	d81a      	bhi.n	24016f30 <HAL_RCCEx_PeriphCLKConfig+0xc64>
24016efa:	2b00      	cmp	r3, #0
24016efc:	d022      	beq.n	24016f44 <HAL_RCCEx_PeriphCLKConfig+0xc78>
24016efe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
24016f02:	d115      	bne.n	24016f30 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24016f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24016f08:	3308      	adds	r3, #8
24016f0a:	2100      	movs	r1, #0
24016f0c:	4618      	mov	r0, r3
24016f0e:	f002 f821 	bl	24018f54 <RCCEx_PLL2_Config>
24016f12:	4603      	mov	r3, r0
24016f14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
24016f18:	e015      	b.n	24016f46 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24016f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24016f1e:	3328      	adds	r3, #40	@ 0x28
24016f20:	2102      	movs	r1, #2
24016f22:	4618      	mov	r0, r3
24016f24:	f002 f8c8 	bl	240190b8 <RCCEx_PLL3_Config>
24016f28:	4603      	mov	r3, r0
24016f2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
24016f2e:	e00a      	b.n	24016f46 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
24016f30:	2301      	movs	r3, #1
24016f32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
24016f36:	e006      	b.n	24016f46 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
24016f38:	bf00      	nop
24016f3a:	e004      	b.n	24016f46 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
24016f3c:	bf00      	nop
24016f3e:	e002      	b.n	24016f46 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
24016f40:	bf00      	nop
24016f42:	e000      	b.n	24016f46 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
24016f44:	bf00      	nop
    }

    if (ret == HAL_OK)
24016f46:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
24016f4a:	2b00      	cmp	r3, #0
24016f4c:	d10e      	bne.n	24016f6c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
24016f4e:	4b06      	ldr	r3, [pc, #24]	@ (24016f68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
24016f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
24016f52:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
24016f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24016f5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
24016f5e:	4a02      	ldr	r2, [pc, #8]	@ (24016f68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
24016f60:	430b      	orrs	r3, r1
24016f62:	6593      	str	r3, [r2, #88]	@ 0x58
24016f64:	e006      	b.n	24016f74 <HAL_RCCEx_PeriphCLKConfig+0xca8>
24016f66:	bf00      	nop
24016f68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
24016f6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
24016f70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
24016f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24016f78:	e9d3 2300 	ldrd	r2, r3, [r3]
24016f7c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
24016f80:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
24016f84:	2300      	movs	r3, #0
24016f86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
24016f8a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
24016f8e:	460b      	mov	r3, r1
24016f90:	4313      	orrs	r3, r2
24016f92:	d055      	beq.n	24017040 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
24016f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24016f98:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
24016f9c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
24016fa0:	d033      	beq.n	2401700a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
24016fa2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
24016fa6:	d82c      	bhi.n	24017002 <HAL_RCCEx_PeriphCLKConfig+0xd36>
24016fa8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
24016fac:	d02f      	beq.n	2401700e <HAL_RCCEx_PeriphCLKConfig+0xd42>
24016fae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
24016fb2:	d826      	bhi.n	24017002 <HAL_RCCEx_PeriphCLKConfig+0xd36>
24016fb4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
24016fb8:	d02b      	beq.n	24017012 <HAL_RCCEx_PeriphCLKConfig+0xd46>
24016fba:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
24016fbe:	d820      	bhi.n	24017002 <HAL_RCCEx_PeriphCLKConfig+0xd36>
24016fc0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
24016fc4:	d012      	beq.n	24016fec <HAL_RCCEx_PeriphCLKConfig+0xd20>
24016fc6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
24016fca:	d81a      	bhi.n	24017002 <HAL_RCCEx_PeriphCLKConfig+0xd36>
24016fcc:	2b00      	cmp	r3, #0
24016fce:	d022      	beq.n	24017016 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
24016fd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
24016fd4:	d115      	bne.n	24017002 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24016fd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24016fda:	3308      	adds	r3, #8
24016fdc:	2100      	movs	r1, #0
24016fde:	4618      	mov	r0, r3
24016fe0:	f001 ffb8 	bl	24018f54 <RCCEx_PLL2_Config>
24016fe4:	4603      	mov	r3, r0
24016fe6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
24016fea:	e015      	b.n	24017018 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24016fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24016ff0:	3328      	adds	r3, #40	@ 0x28
24016ff2:	2102      	movs	r1, #2
24016ff4:	4618      	mov	r0, r3
24016ff6:	f002 f85f 	bl	240190b8 <RCCEx_PLL3_Config>
24016ffa:	4603      	mov	r3, r0
24016ffc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
24017000:	e00a      	b.n	24017018 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
24017002:	2301      	movs	r3, #1
24017004:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
24017008:	e006      	b.n	24017018 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
2401700a:	bf00      	nop
2401700c:	e004      	b.n	24017018 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
2401700e:	bf00      	nop
24017010:	e002      	b.n	24017018 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
24017012:	bf00      	nop
24017014:	e000      	b.n	24017018 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
24017016:	bf00      	nop
    }

    if (ret == HAL_OK)
24017018:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
2401701c:	2b00      	cmp	r3, #0
2401701e:	d10b      	bne.n	24017038 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
24017020:	4ba0      	ldr	r3, [pc, #640]	@ (240172a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
24017022:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
24017024:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
24017028:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
2401702c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
24017030:	4a9c      	ldr	r2, [pc, #624]	@ (240172a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
24017032:	430b      	orrs	r3, r1
24017034:	6593      	str	r3, [r2, #88]	@ 0x58
24017036:	e003      	b.n	24017040 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
24017038:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
2401703c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
24017040:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24017044:	e9d3 2300 	ldrd	r2, r3, [r3]
24017048:	f002 0308 	and.w	r3, r2, #8
2401704c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
24017050:	2300      	movs	r3, #0
24017052:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
24017056:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
2401705a:	460b      	mov	r3, r1
2401705c:	4313      	orrs	r3, r2
2401705e:	d01e      	beq.n	2401709e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
24017060:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24017064:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
24017068:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
2401706c:	d10c      	bne.n	24017088 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
2401706e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24017072:	3328      	adds	r3, #40	@ 0x28
24017074:	2102      	movs	r1, #2
24017076:	4618      	mov	r0, r3
24017078:	f002 f81e 	bl	240190b8 <RCCEx_PLL3_Config>
2401707c:	4603      	mov	r3, r0
2401707e:	2b00      	cmp	r3, #0
24017080:	d002      	beq.n	24017088 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
24017082:	2301      	movs	r3, #1
24017084:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
24017088:	4b86      	ldr	r3, [pc, #536]	@ (240172a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
2401708a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
2401708c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
24017090:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24017094:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
24017098:	4a82      	ldr	r2, [pc, #520]	@ (240172a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
2401709a:	430b      	orrs	r3, r1
2401709c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
2401709e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
240170a2:	e9d3 2300 	ldrd	r2, r3, [r3]
240170a6:	f002 0310 	and.w	r3, r2, #16
240170aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
240170ae:	2300      	movs	r3, #0
240170b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
240170b4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
240170b8:	460b      	mov	r3, r1
240170ba:	4313      	orrs	r3, r2
240170bc:	d01e      	beq.n	240170fc <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
240170be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
240170c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
240170c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
240170ca:	d10c      	bne.n	240170e6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
240170cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
240170d0:	3328      	adds	r3, #40	@ 0x28
240170d2:	2102      	movs	r1, #2
240170d4:	4618      	mov	r0, r3
240170d6:	f001 ffef 	bl	240190b8 <RCCEx_PLL3_Config>
240170da:	4603      	mov	r3, r0
240170dc:	2b00      	cmp	r3, #0
240170de:	d002      	beq.n	240170e6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
240170e0:	2301      	movs	r3, #1
240170e2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
240170e6:	4b6f      	ldr	r3, [pc, #444]	@ (240172a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
240170e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
240170ea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
240170ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
240170f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
240170f6:	4a6b      	ldr	r2, [pc, #428]	@ (240172a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
240170f8:	430b      	orrs	r3, r1
240170fa:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
240170fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24017100:	e9d3 2300 	ldrd	r2, r3, [r3]
24017104:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
24017108:	67bb      	str	r3, [r7, #120]	@ 0x78
2401710a:	2300      	movs	r3, #0
2401710c:	67fb      	str	r3, [r7, #124]	@ 0x7c
2401710e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
24017112:	460b      	mov	r3, r1
24017114:	4313      	orrs	r3, r2
24017116:	d03e      	beq.n	24017196 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
24017118:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
2401711c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
24017120:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
24017124:	d022      	beq.n	2401716c <HAL_RCCEx_PeriphCLKConfig+0xea0>
24017126:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
2401712a:	d81b      	bhi.n	24017164 <HAL_RCCEx_PeriphCLKConfig+0xe98>
2401712c:	2b00      	cmp	r3, #0
2401712e:	d003      	beq.n	24017138 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
24017130:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
24017134:	d00b      	beq.n	2401714e <HAL_RCCEx_PeriphCLKConfig+0xe82>
24017136:	e015      	b.n	24017164 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24017138:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
2401713c:	3308      	adds	r3, #8
2401713e:	2100      	movs	r1, #0
24017140:	4618      	mov	r0, r3
24017142:	f001 ff07 	bl	24018f54 <RCCEx_PLL2_Config>
24017146:	4603      	mov	r3, r0
24017148:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
2401714c:	e00f      	b.n	2401716e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2401714e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24017152:	3328      	adds	r3, #40	@ 0x28
24017154:	2102      	movs	r1, #2
24017156:	4618      	mov	r0, r3
24017158:	f001 ffae 	bl	240190b8 <RCCEx_PLL3_Config>
2401715c:	4603      	mov	r3, r0
2401715e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
24017162:	e004      	b.n	2401716e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
24017164:	2301      	movs	r3, #1
24017166:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
2401716a:	e000      	b.n	2401716e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
2401716c:	bf00      	nop
    }

    if (ret == HAL_OK)
2401716e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
24017172:	2b00      	cmp	r3, #0
24017174:	d10b      	bne.n	2401718e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
24017176:	4b4b      	ldr	r3, [pc, #300]	@ (240172a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
24017178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
2401717a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
2401717e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24017182:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
24017186:	4a47      	ldr	r2, [pc, #284]	@ (240172a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
24017188:	430b      	orrs	r3, r1
2401718a:	6593      	str	r3, [r2, #88]	@ 0x58
2401718c:	e003      	b.n	24017196 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
2401718e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
24017192:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
24017196:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
2401719a:	e9d3 2300 	ldrd	r2, r3, [r3]
2401719e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
240171a2:	673b      	str	r3, [r7, #112]	@ 0x70
240171a4:	2300      	movs	r3, #0
240171a6:	677b      	str	r3, [r7, #116]	@ 0x74
240171a8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
240171ac:	460b      	mov	r3, r1
240171ae:	4313      	orrs	r3, r2
240171b0:	d03b      	beq.n	2401722a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
240171b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
240171b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
240171ba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
240171be:	d01f      	beq.n	24017200 <HAL_RCCEx_PeriphCLKConfig+0xf34>
240171c0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
240171c4:	d818      	bhi.n	240171f8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
240171c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
240171ca:	d003      	beq.n	240171d4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
240171cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
240171d0:	d007      	beq.n	240171e2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
240171d2:	e011      	b.n	240171f8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240171d4:	4b33      	ldr	r3, [pc, #204]	@ (240172a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
240171d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
240171d8:	4a32      	ldr	r2, [pc, #200]	@ (240172a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
240171da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
240171de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
240171e0:	e00f      	b.n	24017202 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
240171e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
240171e6:	3328      	adds	r3, #40	@ 0x28
240171e8:	2101      	movs	r1, #1
240171ea:	4618      	mov	r0, r3
240171ec:	f001 ff64 	bl	240190b8 <RCCEx_PLL3_Config>
240171f0:	4603      	mov	r3, r0
240171f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
240171f6:	e004      	b.n	24017202 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
240171f8:	2301      	movs	r3, #1
240171fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
240171fe:	e000      	b.n	24017202 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
24017200:	bf00      	nop
    }

    if (ret == HAL_OK)
24017202:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
24017206:	2b00      	cmp	r3, #0
24017208:	d10b      	bne.n	24017222 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
2401720a:	4b26      	ldr	r3, [pc, #152]	@ (240172a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
2401720c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
2401720e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
24017212:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24017216:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
2401721a:	4a22      	ldr	r2, [pc, #136]	@ (240172a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
2401721c:	430b      	orrs	r3, r1
2401721e:	6553      	str	r3, [r2, #84]	@ 0x54
24017220:	e003      	b.n	2401722a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
24017222:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
24017226:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
2401722a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
2401722e:	e9d3 2300 	ldrd	r2, r3, [r3]
24017232:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
24017236:	66bb      	str	r3, [r7, #104]	@ 0x68
24017238:	2300      	movs	r3, #0
2401723a:	66fb      	str	r3, [r7, #108]	@ 0x6c
2401723c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
24017240:	460b      	mov	r3, r1
24017242:	4313      	orrs	r3, r2
24017244:	d034      	beq.n	240172b0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
24017246:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
2401724a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2401724c:	2b00      	cmp	r3, #0
2401724e:	d003      	beq.n	24017258 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
24017250:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
24017254:	d007      	beq.n	24017266 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
24017256:	e011      	b.n	2401727c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24017258:	4b12      	ldr	r3, [pc, #72]	@ (240172a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
2401725a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2401725c:	4a11      	ldr	r2, [pc, #68]	@ (240172a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
2401725e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
24017262:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
24017264:	e00e      	b.n	24017284 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
24017266:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
2401726a:	3308      	adds	r3, #8
2401726c:	2102      	movs	r1, #2
2401726e:	4618      	mov	r0, r3
24017270:	f001 fe70 	bl	24018f54 <RCCEx_PLL2_Config>
24017274:	4603      	mov	r3, r0
24017276:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
2401727a:	e003      	b.n	24017284 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
2401727c:	2301      	movs	r3, #1
2401727e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
24017282:	bf00      	nop
    }

    if (ret == HAL_OK)
24017284:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
24017288:	2b00      	cmp	r3, #0
2401728a:	d10d      	bne.n	240172a8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
2401728c:	4b05      	ldr	r3, [pc, #20]	@ (240172a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
2401728e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
24017290:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
24017294:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24017298:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2401729a:	4a02      	ldr	r2, [pc, #8]	@ (240172a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
2401729c:	430b      	orrs	r3, r1
2401729e:	64d3      	str	r3, [r2, #76]	@ 0x4c
240172a0:	e006      	b.n	240172b0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
240172a2:	bf00      	nop
240172a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
240172a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
240172ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
240172b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
240172b4:	e9d3 2300 	ldrd	r2, r3, [r3]
240172b8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
240172bc:	663b      	str	r3, [r7, #96]	@ 0x60
240172be:	2300      	movs	r3, #0
240172c0:	667b      	str	r3, [r7, #100]	@ 0x64
240172c2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
240172c6:	460b      	mov	r3, r1
240172c8:	4313      	orrs	r3, r2
240172ca:	d00c      	beq.n	240172e6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
240172cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
240172d0:	3328      	adds	r3, #40	@ 0x28
240172d2:	2102      	movs	r1, #2
240172d4:	4618      	mov	r0, r3
240172d6:	f001 feef 	bl	240190b8 <RCCEx_PLL3_Config>
240172da:	4603      	mov	r3, r0
240172dc:	2b00      	cmp	r3, #0
240172de:	d002      	beq.n	240172e6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
240172e0:	2301      	movs	r3, #1
240172e2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
240172e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
240172ea:	e9d3 2300 	ldrd	r2, r3, [r3]
240172ee:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
240172f2:	65bb      	str	r3, [r7, #88]	@ 0x58
240172f4:	2300      	movs	r3, #0
240172f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
240172f8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
240172fc:	460b      	mov	r3, r1
240172fe:	4313      	orrs	r3, r2
24017300:	d036      	beq.n	24017370 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
24017302:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24017306:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
24017308:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
2401730c:	d018      	beq.n	24017340 <HAL_RCCEx_PeriphCLKConfig+0x1074>
2401730e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
24017312:	d811      	bhi.n	24017338 <HAL_RCCEx_PeriphCLKConfig+0x106c>
24017314:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
24017318:	d014      	beq.n	24017344 <HAL_RCCEx_PeriphCLKConfig+0x1078>
2401731a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
2401731e:	d80b      	bhi.n	24017338 <HAL_RCCEx_PeriphCLKConfig+0x106c>
24017320:	2b00      	cmp	r3, #0
24017322:	d011      	beq.n	24017348 <HAL_RCCEx_PeriphCLKConfig+0x107c>
24017324:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
24017328:	d106      	bne.n	24017338 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2401732a:	4bb7      	ldr	r3, [pc, #732]	@ (24017608 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
2401732c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2401732e:	4ab6      	ldr	r2, [pc, #728]	@ (24017608 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
24017330:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
24017334:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
24017336:	e008      	b.n	2401734a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
24017338:	2301      	movs	r3, #1
2401733a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
2401733e:	e004      	b.n	2401734a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
24017340:	bf00      	nop
24017342:	e002      	b.n	2401734a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
24017344:	bf00      	nop
24017346:	e000      	b.n	2401734a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
24017348:	bf00      	nop
    }

    if (ret == HAL_OK)
2401734a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
2401734e:	2b00      	cmp	r3, #0
24017350:	d10a      	bne.n	24017368 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
24017352:	4bad      	ldr	r3, [pc, #692]	@ (24017608 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
24017354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
24017356:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
2401735a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
2401735e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
24017360:	4aa9      	ldr	r2, [pc, #676]	@ (24017608 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
24017362:	430b      	orrs	r3, r1
24017364:	6553      	str	r3, [r2, #84]	@ 0x54
24017366:	e003      	b.n	24017370 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
24017368:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
2401736c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
24017370:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24017374:	e9d3 2300 	ldrd	r2, r3, [r3]
24017378:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
2401737c:	653b      	str	r3, [r7, #80]	@ 0x50
2401737e:	2300      	movs	r3, #0
24017380:	657b      	str	r3, [r7, #84]	@ 0x54
24017382:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
24017386:	460b      	mov	r3, r1
24017388:	4313      	orrs	r3, r2
2401738a:	d009      	beq.n	240173a0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
2401738c:	4b9e      	ldr	r3, [pc, #632]	@ (24017608 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
2401738e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
24017390:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
24017394:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24017398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2401739a:	4a9b      	ldr	r2, [pc, #620]	@ (24017608 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
2401739c:	430b      	orrs	r3, r1
2401739e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
240173a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
240173a4:	e9d3 2300 	ldrd	r2, r3, [r3]
240173a8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
240173ac:	64bb      	str	r3, [r7, #72]	@ 0x48
240173ae:	2300      	movs	r3, #0
240173b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
240173b2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
240173b6:	460b      	mov	r3, r1
240173b8:	4313      	orrs	r3, r2
240173ba:	d009      	beq.n	240173d0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
240173bc:	4b92      	ldr	r3, [pc, #584]	@ (24017608 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
240173be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
240173c0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
240173c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
240173c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
240173ca:	4a8f      	ldr	r2, [pc, #572]	@ (24017608 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
240173cc:	430b      	orrs	r3, r1
240173ce:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
240173d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
240173d4:	e9d3 2300 	ldrd	r2, r3, [r3]
240173d8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
240173dc:	643b      	str	r3, [r7, #64]	@ 0x40
240173de:	2300      	movs	r3, #0
240173e0:	647b      	str	r3, [r7, #68]	@ 0x44
240173e2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
240173e6:	460b      	mov	r3, r1
240173e8:	4313      	orrs	r3, r2
240173ea:	d00e      	beq.n	2401740a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
240173ec:	4b86      	ldr	r3, [pc, #536]	@ (24017608 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
240173ee:	691b      	ldr	r3, [r3, #16]
240173f0:	4a85      	ldr	r2, [pc, #532]	@ (24017608 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
240173f2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
240173f6:	6113      	str	r3, [r2, #16]
240173f8:	4b83      	ldr	r3, [pc, #524]	@ (24017608 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
240173fa:	6919      	ldr	r1, [r3, #16]
240173fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24017400:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
24017404:	4a80      	ldr	r2, [pc, #512]	@ (24017608 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
24017406:	430b      	orrs	r3, r1
24017408:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
2401740a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
2401740e:	e9d3 2300 	ldrd	r2, r3, [r3]
24017412:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
24017416:	63bb      	str	r3, [r7, #56]	@ 0x38
24017418:	2300      	movs	r3, #0
2401741a:	63fb      	str	r3, [r7, #60]	@ 0x3c
2401741c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
24017420:	460b      	mov	r3, r1
24017422:	4313      	orrs	r3, r2
24017424:	d009      	beq.n	2401743a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
24017426:	4b78      	ldr	r3, [pc, #480]	@ (24017608 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
24017428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
2401742a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
2401742e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24017432:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
24017434:	4a74      	ldr	r2, [pc, #464]	@ (24017608 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
24017436:	430b      	orrs	r3, r1
24017438:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
2401743a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
2401743e:	e9d3 2300 	ldrd	r2, r3, [r3]
24017442:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
24017446:	633b      	str	r3, [r7, #48]	@ 0x30
24017448:	2300      	movs	r3, #0
2401744a:	637b      	str	r3, [r7, #52]	@ 0x34
2401744c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
24017450:	460b      	mov	r3, r1
24017452:	4313      	orrs	r3, r2
24017454:	d00a      	beq.n	2401746c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
24017456:	4b6c      	ldr	r3, [pc, #432]	@ (24017608 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
24017458:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
2401745a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
2401745e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24017462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
24017466:	4a68      	ldr	r2, [pc, #416]	@ (24017608 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
24017468:	430b      	orrs	r3, r1
2401746a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
2401746c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24017470:	e9d3 2300 	ldrd	r2, r3, [r3]
24017474:	2100      	movs	r1, #0
24017476:	62b9      	str	r1, [r7, #40]	@ 0x28
24017478:	f003 0301 	and.w	r3, r3, #1
2401747c:	62fb      	str	r3, [r7, #44]	@ 0x2c
2401747e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
24017482:	460b      	mov	r3, r1
24017484:	4313      	orrs	r3, r2
24017486:	d011      	beq.n	240174ac <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24017488:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
2401748c:	3308      	adds	r3, #8
2401748e:	2100      	movs	r1, #0
24017490:	4618      	mov	r0, r3
24017492:	f001 fd5f 	bl	24018f54 <RCCEx_PLL2_Config>
24017496:	4603      	mov	r3, r0
24017498:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
2401749c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
240174a0:	2b00      	cmp	r3, #0
240174a2:	d003      	beq.n	240174ac <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
240174a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
240174a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
240174ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
240174b0:	e9d3 2300 	ldrd	r2, r3, [r3]
240174b4:	2100      	movs	r1, #0
240174b6:	6239      	str	r1, [r7, #32]
240174b8:	f003 0302 	and.w	r3, r3, #2
240174bc:	627b      	str	r3, [r7, #36]	@ 0x24
240174be:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
240174c2:	460b      	mov	r3, r1
240174c4:	4313      	orrs	r3, r2
240174c6:	d011      	beq.n	240174ec <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
240174c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
240174cc:	3308      	adds	r3, #8
240174ce:	2101      	movs	r1, #1
240174d0:	4618      	mov	r0, r3
240174d2:	f001 fd3f 	bl	24018f54 <RCCEx_PLL2_Config>
240174d6:	4603      	mov	r3, r0
240174d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
240174dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
240174e0:	2b00      	cmp	r3, #0
240174e2:	d003      	beq.n	240174ec <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
240174e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
240174e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
240174ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
240174f0:	e9d3 2300 	ldrd	r2, r3, [r3]
240174f4:	2100      	movs	r1, #0
240174f6:	61b9      	str	r1, [r7, #24]
240174f8:	f003 0304 	and.w	r3, r3, #4
240174fc:	61fb      	str	r3, [r7, #28]
240174fe:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
24017502:	460b      	mov	r3, r1
24017504:	4313      	orrs	r3, r2
24017506:	d011      	beq.n	2401752c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
24017508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
2401750c:	3308      	adds	r3, #8
2401750e:	2102      	movs	r1, #2
24017510:	4618      	mov	r0, r3
24017512:	f001 fd1f 	bl	24018f54 <RCCEx_PLL2_Config>
24017516:	4603      	mov	r3, r0
24017518:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
2401751c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
24017520:	2b00      	cmp	r3, #0
24017522:	d003      	beq.n	2401752c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
24017524:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
24017528:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
2401752c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24017530:	e9d3 2300 	ldrd	r2, r3, [r3]
24017534:	2100      	movs	r1, #0
24017536:	6139      	str	r1, [r7, #16]
24017538:	f003 0308 	and.w	r3, r3, #8
2401753c:	617b      	str	r3, [r7, #20]
2401753e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
24017542:	460b      	mov	r3, r1
24017544:	4313      	orrs	r3, r2
24017546:	d011      	beq.n	2401756c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24017548:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
2401754c:	3328      	adds	r3, #40	@ 0x28
2401754e:	2100      	movs	r1, #0
24017550:	4618      	mov	r0, r3
24017552:	f001 fdb1 	bl	240190b8 <RCCEx_PLL3_Config>
24017556:	4603      	mov	r3, r0
24017558:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
2401755c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
24017560:	2b00      	cmp	r3, #0
24017562:	d003      	beq.n	2401756c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
24017564:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
24017568:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
2401756c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
24017570:	e9d3 2300 	ldrd	r2, r3, [r3]
24017574:	2100      	movs	r1, #0
24017576:	60b9      	str	r1, [r7, #8]
24017578:	f003 0310 	and.w	r3, r3, #16
2401757c:	60fb      	str	r3, [r7, #12]
2401757e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
24017582:	460b      	mov	r3, r1
24017584:	4313      	orrs	r3, r2
24017586:	d011      	beq.n	240175ac <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24017588:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
2401758c:	3328      	adds	r3, #40	@ 0x28
2401758e:	2101      	movs	r1, #1
24017590:	4618      	mov	r0, r3
24017592:	f001 fd91 	bl	240190b8 <RCCEx_PLL3_Config>
24017596:	4603      	mov	r3, r0
24017598:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
2401759c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
240175a0:	2b00      	cmp	r3, #0
240175a2:	d003      	beq.n	240175ac <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
240175a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
240175a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
240175ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
240175b0:	e9d3 2300 	ldrd	r2, r3, [r3]
240175b4:	2100      	movs	r1, #0
240175b6:	6039      	str	r1, [r7, #0]
240175b8:	f003 0320 	and.w	r3, r3, #32
240175bc:	607b      	str	r3, [r7, #4]
240175be:	e9d7 1200 	ldrd	r1, r2, [r7]
240175c2:	460b      	mov	r3, r1
240175c4:	4313      	orrs	r3, r2
240175c6:	d011      	beq.n	240175ec <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
240175c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
240175cc:	3328      	adds	r3, #40	@ 0x28
240175ce:	2102      	movs	r1, #2
240175d0:	4618      	mov	r0, r3
240175d2:	f001 fd71 	bl	240190b8 <RCCEx_PLL3_Config>
240175d6:	4603      	mov	r3, r0
240175d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
240175dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
240175e0:	2b00      	cmp	r3, #0
240175e2:	d003      	beq.n	240175ec <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
240175e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
240175e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
240175ec:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
240175f0:	2b00      	cmp	r3, #0
240175f2:	d101      	bne.n	240175f8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
240175f4:	2300      	movs	r3, #0
240175f6:	e000      	b.n	240175fa <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
240175f8:	2301      	movs	r3, #1
}
240175fa:	4618      	mov	r0, r3
240175fc:	f507 778c 	add.w	r7, r7, #280	@ 0x118
24017600:	46bd      	mov	sp, r7
24017602:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
24017606:	bf00      	nop
24017608:	58024400 	.word	0x58024400

2401760c <HAL_RCCEx_GetPeriphCLKConfig>:
  * @retval None
  *
  *   (*) : Available on some STM32H7 lines only.
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
2401760c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
24017610:	b084      	sub	sp, #16
24017612:	af00      	add	r7, sp, #0
24017614:	60f8      	str	r0, [r7, #12]
  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection =
24017616:	68fe      	ldr	r6, [r7, #12]
24017618:	48a8      	ldr	r0, [pc, #672]	@ (240178bc <HAL_RCCEx_GetPeriphCLKConfig+0x2b0>)
2401761a:	f04f 0100 	mov.w	r1, #0
2401761e:	e9c6 0100 	strd	r0, r1, [r6]
    RCC_PERIPHCLK_ADC     | RCC_PERIPHCLK_SWPMI1      | RCC_PERIPHCLK_DFSDM1  | RCC_PERIPHCLK_RTC      |
    RCC_PERIPHCLK_CEC     | RCC_PERIPHCLK_FMC         | RCC_PERIPHCLK_SPDIFRX | RCC_PERIPHCLK_TIM      |
    RCC_PERIPHCLK_CKPER;

#if defined(I2C5)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2C1235;
24017622:	68f9      	ldr	r1, [r7, #12]
24017624:	e9d1 0100 	ldrd	r0, r1, [r1]
24017628:	f040 0608 	orr.w	r6, r0, #8
2401762c:	4632      	mov	r2, r6
2401762e:	460b      	mov	r3, r1
24017630:	68f9      	ldr	r1, [r7, #12]
24017632:	e9c1 2300 	strd	r2, r3, [r1]
#endif /* RCC_CDCCIP1R_SAI2BSEL */
#if defined(SAI3)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI23;
#endif /* SAI3 */
#if defined(SAI4)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI4A;
24017636:	68f9      	ldr	r1, [r7, #12]
24017638:	e9d1 0100 	ldrd	r0, r1, [r1]
2401763c:	f440 6a80 	orr.w	sl, r0, #1024	@ 0x400
24017640:	468b      	mov	fp, r1
24017642:	68f9      	ldr	r1, [r7, #12]
24017644:	e9c1 ab00 	strd	sl, fp, [r1]
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI4B;
24017648:	68f9      	ldr	r1, [r7, #12]
2401764a:	e9d1 0100 	ldrd	r0, r1, [r1]
2401764e:	f440 6800 	orr.w	r8, r0, #2048	@ 0x800
24017652:	4689      	mov	r9, r1
24017654:	68f9      	ldr	r1, [r7, #12]
24017656:	e9c1 8900 	strd	r8, r9, [r1]
#endif /* DFSDM2 */
#if defined(QUADSPI)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_QSPI;
#endif /* QUADSPI */
#if defined(OCTOSPI1) || defined(OCTOSPI2)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_OSPI;
2401765a:	68f9      	ldr	r1, [r7, #12]
2401765c:	e9d1 0100 	ldrd	r0, r1, [r1]
24017660:	f040 7400 	orr.w	r4, r0, #33554432	@ 0x2000000
24017664:	460d      	mov	r5, r1
24017666:	68f9      	ldr	r1, [r7, #12]
24017668:	e9c1 4500 	strd	r4, r5, [r1]
#endif /* OCTOSPI1 || OCTOSPI2 */
#if defined(HRTIM1)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_HRTIM1;
#endif /* HRTIM1 */
#if defined(LTDC)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_LTDC;
2401766c:	68f9      	ldr	r1, [r7, #12]
2401766e:	e9d1 0100 	ldrd	r0, r1, [r1]
24017672:	f040 5300 	orr.w	r3, r0, #536870912	@ 0x20000000
24017676:	603b      	str	r3, [r7, #0]
24017678:	6079      	str	r1, [r7, #4]
2401767a:	68f9      	ldr	r1, [r7, #12]
2401767c:	e9d7 3400 	ldrd	r3, r4, [r7]
24017680:	e9c1 3400 	strd	r3, r4, [r1]
#if defined(DSI)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_DSI;
#endif /* DSI */

  /* Get the PLL3 Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLL3.PLL3M = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> RCC_PLLCKSELR_DIVM3_Pos);
24017684:	4b8e      	ldr	r3, [pc, #568]	@ (240178c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2b4>)
24017686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
24017688:	0d1b      	lsrs	r3, r3, #20
2401768a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
2401768e:	68fb      	ldr	r3, [r7, #12]
24017690:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInit->PLL3.PLL3N = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) >> RCC_PLL3DIVR_N3_Pos) + 1U;
24017692:	4b8b      	ldr	r3, [pc, #556]	@ (240178c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2b4>)
24017694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
24017696:	f3c3 0308 	ubfx	r3, r3, #0, #9
2401769a:	1c5a      	adds	r2, r3, #1
2401769c:	68fb      	ldr	r3, [r7, #12]
2401769e:	62da      	str	r2, [r3, #44]	@ 0x2c
  PeriphClkInit->PLL3.PLL3R = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> RCC_PLL3DIVR_R3_Pos) + 1U;
240176a0:	4b87      	ldr	r3, [pc, #540]	@ (240178c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2b4>)
240176a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
240176a4:	0e1b      	lsrs	r3, r3, #24
240176a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
240176aa:	1c5a      	adds	r2, r3, #1
240176ac:	68fb      	ldr	r3, [r7, #12]
240176ae:	639a      	str	r2, [r3, #56]	@ 0x38
  PeriphClkInit->PLL3.PLL3P = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> RCC_PLL3DIVR_P3_Pos) + 1U;
240176b0:	4b83      	ldr	r3, [pc, #524]	@ (240178c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2b4>)
240176b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
240176b4:	0a5b      	lsrs	r3, r3, #9
240176b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
240176ba:	1c5a      	adds	r2, r3, #1
240176bc:	68fb      	ldr	r3, [r7, #12]
240176be:	631a      	str	r2, [r3, #48]	@ 0x30
  PeriphClkInit->PLL3.PLL3Q = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> RCC_PLL3DIVR_Q3_Pos) + 1U;
240176c0:	4b7f      	ldr	r3, [pc, #508]	@ (240178c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2b4>)
240176c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
240176c4:	0c1b      	lsrs	r3, r3, #16
240176c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
240176ca:	1c5a      	adds	r2, r3, #1
240176cc:	68fb      	ldr	r3, [r7, #12]
240176ce:	635a      	str	r2, [r3, #52]	@ 0x34
  PeriphClkInit->PLL3.PLL3RGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL3RGE) >> RCC_PLLCFGR_PLL3RGE_Pos);
240176d0:	4b7b      	ldr	r3, [pc, #492]	@ (240178c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2b4>)
240176d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
240176d4:	0a9b      	lsrs	r3, r3, #10
240176d6:	f003 0203 	and.w	r2, r3, #3
240176da:	68fb      	ldr	r3, [r7, #12]
240176dc:	63da      	str	r2, [r3, #60]	@ 0x3c
  PeriphClkInit->PLL3.PLL3VCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL3VCOSEL) >> RCC_PLLCFGR_PLL3VCOSEL_Pos);
240176de:	4b78      	ldr	r3, [pc, #480]	@ (240178c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2b4>)
240176e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
240176e2:	0a5b      	lsrs	r3, r3, #9
240176e4:	f003 0201 	and.w	r2, r3, #1
240176e8:	68fb      	ldr	r3, [r7, #12]
240176ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get the PLL2 Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLL2.PLL2M = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> RCC_PLLCKSELR_DIVM2_Pos);
240176ec:	4b74      	ldr	r3, [pc, #464]	@ (240178c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2b4>)
240176ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
240176f0:	0b1b      	lsrs	r3, r3, #12
240176f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
240176f6:	68fb      	ldr	r3, [r7, #12]
240176f8:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLL2.PLL2N = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) >> RCC_PLL2DIVR_N2_Pos) + 1U;
240176fa:	4b71      	ldr	r3, [pc, #452]	@ (240178c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2b4>)
240176fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
240176fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
24017702:	1c5a      	adds	r2, r3, #1
24017704:	68fb      	ldr	r3, [r7, #12]
24017706:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLL2.PLL2R = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> RCC_PLL2DIVR_R2_Pos) + 1U;
24017708:	4b6d      	ldr	r3, [pc, #436]	@ (240178c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2b4>)
2401770a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2401770c:	0e1b      	lsrs	r3, r3, #24
2401770e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
24017712:	1c5a      	adds	r2, r3, #1
24017714:	68fb      	ldr	r3, [r7, #12]
24017716:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLL2.PLL2P = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> RCC_PLL2DIVR_P2_Pos) + 1U;
24017718:	4b69      	ldr	r3, [pc, #420]	@ (240178c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2b4>)
2401771a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2401771c:	0a5b      	lsrs	r3, r3, #9
2401771e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
24017722:	1c5a      	adds	r2, r3, #1
24017724:	68fb      	ldr	r3, [r7, #12]
24017726:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLL2.PLL2Q = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> RCC_PLL2DIVR_Q2_Pos) + 1U;
24017728:	4b65      	ldr	r3, [pc, #404]	@ (240178c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2b4>)
2401772a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2401772c:	0c1b      	lsrs	r3, r3, #16
2401772e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
24017732:	1c5a      	adds	r2, r3, #1
24017734:	68fb      	ldr	r3, [r7, #12]
24017736:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLL2.PLL2RGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL2RGE) >> RCC_PLLCFGR_PLL2RGE_Pos);
24017738:	4b61      	ldr	r3, [pc, #388]	@ (240178c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2b4>)
2401773a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2401773c:	099b      	lsrs	r3, r3, #6
2401773e:	f003 0203 	and.w	r2, r3, #3
24017742:	68fb      	ldr	r3, [r7, #12]
24017744:	61da      	str	r2, [r3, #28]
  PeriphClkInit->PLL2.PLL2VCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL2VCOSEL) >> RCC_PLLCFGR_PLL2VCOSEL_Pos);
24017746:	4b5e      	ldr	r3, [pc, #376]	@ (240178c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2b4>)
24017748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2401774a:	095b      	lsrs	r3, r3, #5
2401774c:	f003 0201 	and.w	r2, r3, #1
24017750:	68fb      	ldr	r3, [r7, #12]
24017752:	621a      	str	r2, [r3, #32]

  /* Get the USART1 configuration --------------------------------------------*/
  PeriphClkInit->Usart16ClockSelection      = __HAL_RCC_GET_USART16_SOURCE();
24017754:	4b5a      	ldr	r3, [pc, #360]	@ (240178c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2b4>)
24017756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
24017758:	f003 0238 	and.w	r2, r3, #56	@ 0x38
2401775c:	68fb      	ldr	r3, [r7, #12]
2401775e:	679a      	str	r2, [r3, #120]	@ 0x78
  /* Get the USART2/3/4/5/7/8 clock source -----------------------------------*/
  PeriphClkInit->Usart234578ClockSelection  = __HAL_RCC_GET_USART234578_SOURCE();
24017760:	4b57      	ldr	r3, [pc, #348]	@ (240178c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2b4>)
24017762:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
24017764:	f003 0207 	and.w	r2, r3, #7
24017768:	68fb      	ldr	r3, [r7, #12]
2401776a:	675a      	str	r2, [r3, #116]	@ 0x74
  /* Get the LPUART1 clock source --------------------------------------------*/
  PeriphClkInit->Lpuart1ClockSelection      = __HAL_RCC_GET_LPUART1_SOURCE();
2401776c:	4b54      	ldr	r3, [pc, #336]	@ (240178c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2b4>)
2401776e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
24017770:	f003 0207 	and.w	r2, r3, #7
24017774:	68fb      	ldr	r3, [r7, #12]
24017776:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if defined(I2C5)
  /* Get the I2C1/2/3/5 clock source -----------------------------------------*/
  PeriphClkInit->I2c1235ClockSelection       = __HAL_RCC_GET_I2C1_SOURCE();
2401777a:	4b51      	ldr	r3, [pc, #324]	@ (240178c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2b4>)
2401777c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
2401777e:	f403 5240 	and.w	r2, r3, #12288	@ 0x3000
24017782:	68fb      	ldr	r3, [r7, #12]
24017784:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
#else
  /* Get the I2C1/2/3 clock source -------------------------------------------*/
  PeriphClkInit->I2c123ClockSelection       = __HAL_RCC_GET_I2C1_SOURCE();
#endif /*I2C5*/
  /* Get the LPTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection       = __HAL_RCC_GET_LPTIM1_SOURCE();
24017788:	4b4d      	ldr	r3, [pc, #308]	@ (240178c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2b4>)
2401778a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
2401778c:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
24017790:	68fb      	ldr	r3, [r7, #12]
24017792:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  /* Get the LPTIM2 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim2ClockSelection       = __HAL_RCC_GET_LPTIM2_SOURCE();
24017796:	4b4a      	ldr	r3, [pc, #296]	@ (240178c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2b4>)
24017798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
2401779a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
2401779e:	68fb      	ldr	r3, [r7, #12]
240177a0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  /* Get the LPTIM3/4/5 clock source -----------------------------------------*/
  PeriphClkInit->Lptim345ClockSelection     = __HAL_RCC_GET_LPTIM345_SOURCE();
240177a4:	4b46      	ldr	r3, [pc, #280]	@ (240178c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2b4>)
240177a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
240177a8:	f403 4260 	and.w	r2, r3, #57344	@ 0xe000
240177ac:	68fb      	ldr	r3, [r7, #12]
240177ae:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  /* Get the SAI1 clock source -----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection         = __HAL_RCC_GET_SAI1_SOURCE();
240177b2:	4b43      	ldr	r3, [pc, #268]	@ (240178c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2b4>)
240177b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
240177b6:	f003 0207 	and.w	r2, r3, #7
240177ba:	68fb      	ldr	r3, [r7, #12]
240177bc:	659a      	str	r2, [r3, #88]	@ 0x58
  /* Get the SAI2B clock source ---------------------------------------------*/
  PeriphClkInit->Sai2BClockSelection        = __HAL_RCC_GET_SAI2B_SOURCE();
#endif  /*SAI2B*/
#if defined(SAI4)
  /* Get the SAI4A clock source ----------------------------------------------*/
  PeriphClkInit->Sai4AClockSelection        = __HAL_RCC_GET_SAI4A_SOURCE();
240177be:	4b40      	ldr	r3, [pc, #256]	@ (240178c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2b4>)
240177c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
240177c2:	f403 0260 	and.w	r2, r3, #14680064	@ 0xe00000
240177c6:	68fb      	ldr	r3, [r7, #12]
240177c8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  /* Get the SAI4B clock source ----------------------------------------------*/
  PeriphClkInit->Sai4BClockSelection        = __HAL_RCC_GET_SAI4B_SOURCE();
240177cc:	4b3c      	ldr	r3, [pc, #240]	@ (240178c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2b4>)
240177ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
240177d0:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
240177d4:	68fb      	ldr	r3, [r7, #12]
240177d6:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
#endif  /*SAI4*/
  /* Get the RTC clock source ------------------------------------------------*/
  PeriphClkInit->RTCClockSelection          = __HAL_RCC_GET_RTC_SOURCE();
240177da:	4b39      	ldr	r3, [pc, #228]	@ (240178c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2b4>)
240177dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
240177de:	f403 7240 	and.w	r2, r3, #768	@ 0x300
240177e2:	68fb      	ldr	r3, [r7, #12]
240177e4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* Get the USB clock source ------------------------------------------------*/
  PeriphClkInit->UsbClockSelection          = __HAL_RCC_GET_USB_SOURCE();
240177e8:	4b35      	ldr	r3, [pc, #212]	@ (240178c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2b4>)
240177ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
240177ec:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
240177f0:	68fb      	ldr	r3, [r7, #12]
240177f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  /* Get the SDMMC clock source ----------------------------------------------*/
  PeriphClkInit->SdmmcClockSelection        = __HAL_RCC_GET_SDMMC_SOURCE();
240177f6:	4b32      	ldr	r3, [pc, #200]	@ (240178c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2b4>)
240177f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
240177fa:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
240177fe:	68fb      	ldr	r3, [r7, #12]
24017800:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Get the RNG clock source ------------------------------------------------*/
  PeriphClkInit->RngClockSelection          = __HAL_RCC_GET_RNG_SOURCE();
24017802:	4b2f      	ldr	r3, [pc, #188]	@ (240178c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2b4>)
24017804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
24017806:	f403 7240 	and.w	r2, r3, #768	@ 0x300
2401780a:	68fb      	ldr	r3, [r7, #12]
2401780c:	67da      	str	r2, [r3, #124]	@ 0x7c
#if defined(HRTIM1)
  /* Get the HRTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Hrtim1ClockSelection       = __HAL_RCC_GET_HRTIM1_SOURCE();
#endif /* HRTIM1 */
  /* Get the ADC clock source ------------------------------------------------*/
  PeriphClkInit->AdcClockSelection          = __HAL_RCC_GET_ADC_SOURCE();
2401780e:	4b2c      	ldr	r3, [pc, #176]	@ (240178c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2b4>)
24017810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
24017812:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
24017816:	68fb      	ldr	r3, [r7, #12]
24017818:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  /* Get the SWPMI1 clock source ---------------------------------------------*/
  PeriphClkInit->Swpmi1ClockSelection       = __HAL_RCC_GET_SWPMI1_SOURCE();
2401781c:	4b28      	ldr	r3, [pc, #160]	@ (240178c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2b4>)
2401781e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
24017820:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
24017824:	68fb      	ldr	r3, [r7, #12]
24017826:	671a      	str	r2, [r3, #112]	@ 0x70
  /* Get the DFSDM1 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection       = __HAL_RCC_GET_DFSDM1_SOURCE();
24017828:	4b25      	ldr	r3, [pc, #148]	@ (240178c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2b4>)
2401782a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2401782c:	f003 7280 	and.w	r2, r3, #16777216	@ 0x1000000
24017830:	68fb      	ldr	r3, [r7, #12]
24017832:	669a      	str	r2, [r3, #104]	@ 0x68
#if defined(DFSDM2_BASE)
  /* Get the DFSDM2 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm2ClockSelection       = __HAL_RCC_GET_DFSDM2_SOURCE();
#endif /* DFSDM2 */
  /* Get the SPDIFRX clock source --------------------------------------------*/
  PeriphClkInit->SpdifrxClockSelection      = __HAL_RCC_GET_SPDIFRX_SOURCE();
24017834:	4b22      	ldr	r3, [pc, #136]	@ (240178c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2b4>)
24017836:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
24017838:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
2401783c:	68fb      	ldr	r3, [r7, #12]
2401783e:	665a      	str	r2, [r3, #100]	@ 0x64
  /* Get the SPI1/2/3 clock source -------------------------------------------*/
  PeriphClkInit->Spi123ClockSelection       = __HAL_RCC_GET_SPI123_SOURCE();
24017840:	4b1f      	ldr	r3, [pc, #124]	@ (240178c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2b4>)
24017842:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
24017844:	f403 42e0 	and.w	r2, r3, #28672	@ 0x7000
24017848:	68fb      	ldr	r3, [r7, #12]
2401784a:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Get the SPI4/5 clock source ---------------------------------------------*/
  PeriphClkInit->Spi45ClockSelection        = __HAL_RCC_GET_SPI45_SOURCE();
2401784c:	4b1c      	ldr	r3, [pc, #112]	@ (240178c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2b4>)
2401784e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
24017850:	f403 22e0 	and.w	r2, r3, #458752	@ 0x70000
24017854:	68fb      	ldr	r3, [r7, #12]
24017856:	661a      	str	r2, [r3, #96]	@ 0x60
  /* Get the SPI6 clock source -----------------------------------------------*/
  PeriphClkInit->Spi6ClockSelection         = __HAL_RCC_GET_SPI6_SOURCE();
24017858:	4b19      	ldr	r3, [pc, #100]	@ (240178c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2b4>)
2401785a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
2401785c:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
24017860:	68fb      	ldr	r3, [r7, #12]
24017862:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  /* Get the FDCAN clock source ----------------------------------------------*/
  PeriphClkInit->FdcanClockSelection        = __HAL_RCC_GET_FDCAN_SOURCE();
24017866:	4b16      	ldr	r3, [pc, #88]	@ (240178c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2b4>)
24017868:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2401786a:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
2401786e:	68fb      	ldr	r3, [r7, #12]
24017870:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* Get the CEC clock source ------------------------------------------------*/
  PeriphClkInit->CecClockSelection          = __HAL_RCC_GET_CEC_SOURCE();
24017872:	4b13      	ldr	r3, [pc, #76]	@ (240178c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2b4>)
24017874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
24017876:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
2401787a:	68fb      	ldr	r3, [r7, #12]
2401787c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  /* Get the FMC clock source ------------------------------------------------*/
  PeriphClkInit->FmcClockSelection          = __HAL_RCC_GET_FMC_SOURCE();
24017880:	4b0f      	ldr	r3, [pc, #60]	@ (240178c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2b4>)
24017882:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
24017884:	f003 0203 	and.w	r2, r3, #3
24017888:	68fb      	ldr	r3, [r7, #12]
2401788a:	649a      	str	r2, [r3, #72]	@ 0x48
  /* Get the QSPI clock source -----------------------------------------------*/
  PeriphClkInit->QspiClockSelection         = __HAL_RCC_GET_QSPI_SOURCE();
#endif /* QUADSPI */
#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /* Get the OSPI clock source -----------------------------------------------*/
  PeriphClkInit->OspiClockSelection         = __HAL_RCC_GET_OSPI_SOURCE();
2401788c:	4b0c      	ldr	r3, [pc, #48]	@ (240178c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2b4>)
2401788e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
24017890:	f003 0230 	and.w	r2, r3, #48	@ 0x30
24017894:	68fb      	ldr	r3, [r7, #12]
24017896:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Get the DSI clock source ------------------------------------------------*/
  PeriphClkInit->DsiClockSelection          = __HAL_RCC_GET_DSI_SOURCE();
#endif /*DSI*/

  /* Get the CKPER clock source ----------------------------------------------*/
  PeriphClkInit->CkperClockSelection        = __HAL_RCC_GET_CLKP_SOURCE();
24017898:	4b09      	ldr	r3, [pc, #36]	@ (240178c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2b4>)
2401789a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
2401789c:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
240178a0:	68fb      	ldr	r3, [r7, #12]
240178a2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->CFGR & RCC_CFGR_TIMPRE) == 0U)
240178a4:	4b06      	ldr	r3, [pc, #24]	@ (240178c0 <HAL_RCCEx_GetPeriphCLKConfig+0x2b4>)
240178a6:	691b      	ldr	r3, [r3, #16]
240178a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
240178ac:	2b00      	cmp	r3, #0
240178ae:	d109      	bne.n	240178c4 <HAL_RCCEx_GetPeriphCLKConfig+0x2b8>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
240178b0:	68fb      	ldr	r3, [r7, #12]
240178b2:	2200      	movs	r2, #0
240178b4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
240178b8:	e009      	b.n	240178ce <HAL_RCCEx_GetPeriphCLKConfig+0x2c2>
240178ba:	bf00      	nop
240178bc:	c9fff1f7 	.word	0xc9fff1f7
240178c0:	58024400 	.word	0x58024400
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
240178c4:	68fb      	ldr	r3, [r7, #12]
240178c6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
240178ca:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
}
240178ce:	bf00      	nop
240178d0:	3710      	adds	r7, #16
240178d2:	46bd      	mov	sp, r7
240178d4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
240178d8:	4770      	bx	lr
240178da:	bf00      	nop

240178dc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
240178dc:	b580      	push	{r7, lr}
240178de:	b090      	sub	sp, #64	@ 0x40
240178e0:	af00      	add	r7, sp, #0
240178e2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
240178e6:	e9d7 2300 	ldrd	r2, r3, [r7]
240178ea:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
240178ee:	430b      	orrs	r3, r1
240178f0:	f040 8094 	bne.w	24017a1c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
240178f4:	4b9b      	ldr	r3, [pc, #620]	@ (24017b64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
240178f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
240178f8:	f003 0307 	and.w	r3, r3, #7
240178fc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
240178fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
24017900:	2b04      	cmp	r3, #4
24017902:	f200 8087 	bhi.w	24017a14 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
24017906:	a201      	add	r2, pc, #4	@ (adr r2, 2401790c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
24017908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2401790c:	24017921 	.word	0x24017921
24017910:	24017949 	.word	0x24017949
24017914:	24017971 	.word	0x24017971
24017918:	24017a0d 	.word	0x24017a0d
2401791c:	24017999 	.word	0x24017999
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
24017920:	4b90      	ldr	r3, [pc, #576]	@ (24017b64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
24017922:	681b      	ldr	r3, [r3, #0]
24017924:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
24017928:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
2401792c:	d108      	bne.n	24017940 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
2401792e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
24017932:	4618      	mov	r0, r3
24017934:	f000 ff78 	bl	24018828 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
24017938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2401793a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2401793c:	f000 bc93 	b.w	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
24017940:	2300      	movs	r3, #0
24017942:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24017944:	f000 bc8f 	b.w	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24017948:	4b86      	ldr	r3, [pc, #536]	@ (24017b64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
2401794a:	681b      	ldr	r3, [r3, #0]
2401794c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
24017950:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
24017954:	d108      	bne.n	24017968 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24017956:	f107 0318 	add.w	r3, r7, #24
2401795a:	4618      	mov	r0, r3
2401795c:	f000 fcbc 	bl	240182d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
24017960:	69bb      	ldr	r3, [r7, #24]
24017962:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24017964:	f000 bc7f 	b.w	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
24017968:	2300      	movs	r3, #0
2401796a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
2401796c:	f000 bc7b 	b.w	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
24017970:	4b7c      	ldr	r3, [pc, #496]	@ (24017b64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
24017972:	681b      	ldr	r3, [r3, #0]
24017974:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
24017978:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
2401797c:	d108      	bne.n	24017990 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
2401797e:	f107 030c 	add.w	r3, r7, #12
24017982:	4618      	mov	r0, r3
24017984:	f000 fdfc 	bl	24018580 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
24017988:	68fb      	ldr	r3, [r7, #12]
2401798a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2401798c:	f000 bc6b 	b.w	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
24017990:	2300      	movs	r3, #0
24017992:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24017994:	f000 bc67 	b.w	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
24017998:	4b72      	ldr	r3, [pc, #456]	@ (24017b64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
2401799a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
2401799c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
240179a0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
240179a2:	4b70      	ldr	r3, [pc, #448]	@ (24017b64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
240179a4:	681b      	ldr	r3, [r3, #0]
240179a6:	f003 0304 	and.w	r3, r3, #4
240179aa:	2b04      	cmp	r3, #4
240179ac:	d10c      	bne.n	240179c8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
240179ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
240179b0:	2b00      	cmp	r3, #0
240179b2:	d109      	bne.n	240179c8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240179b4:	4b6b      	ldr	r3, [pc, #428]	@ (24017b64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
240179b6:	681b      	ldr	r3, [r3, #0]
240179b8:	08db      	lsrs	r3, r3, #3
240179ba:	f003 0303 	and.w	r3, r3, #3
240179be:	4a6a      	ldr	r2, [pc, #424]	@ (24017b68 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
240179c0:	fa22 f303 	lsr.w	r3, r2, r3
240179c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
240179c6:	e01f      	b.n	24017a08 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
240179c8:	4b66      	ldr	r3, [pc, #408]	@ (24017b64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
240179ca:	681b      	ldr	r3, [r3, #0]
240179cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
240179d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
240179d4:	d106      	bne.n	240179e4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
240179d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
240179d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
240179dc:	d102      	bne.n	240179e4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
240179de:	4b63      	ldr	r3, [pc, #396]	@ (24017b6c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
240179e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
240179e2:	e011      	b.n	24017a08 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
240179e4:	4b5f      	ldr	r3, [pc, #380]	@ (24017b64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
240179e6:	681b      	ldr	r3, [r3, #0]
240179e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
240179ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
240179f0:	d106      	bne.n	24017a00 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
240179f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
240179f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
240179f8:	d102      	bne.n	24017a00 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
240179fa:	4b5d      	ldr	r3, [pc, #372]	@ (24017b70 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
240179fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
240179fe:	e003      	b.n	24017a08 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
24017a00:	2300      	movs	r3, #0
24017a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
24017a04:	f000 bc2f 	b.w	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
24017a08:	f000 bc2d 	b.w	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
24017a0c:	4b59      	ldr	r3, [pc, #356]	@ (24017b74 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
24017a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24017a10:	f000 bc29 	b.w	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
24017a14:	2300      	movs	r3, #0
24017a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24017a18:	f000 bc25 	b.w	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
24017a1c:	e9d7 2300 	ldrd	r2, r3, [r7]
24017a20:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
24017a24:	430b      	orrs	r3, r1
24017a26:	f040 80a7 	bne.w	24017b78 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
24017a2a:	4b4e      	ldr	r3, [pc, #312]	@ (24017b64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
24017a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
24017a2e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
24017a32:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
24017a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
24017a36:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
24017a3a:	d054      	beq.n	24017ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
24017a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
24017a3e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
24017a42:	f200 808b 	bhi.w	24017b5c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
24017a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
24017a48:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
24017a4c:	f000 8083 	beq.w	24017b56 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
24017a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
24017a52:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
24017a56:	f200 8081 	bhi.w	24017b5c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
24017a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
24017a5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
24017a60:	d02f      	beq.n	24017ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
24017a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
24017a64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
24017a68:	d878      	bhi.n	24017b5c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
24017a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
24017a6c:	2b00      	cmp	r3, #0
24017a6e:	d004      	beq.n	24017a7a <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
24017a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
24017a72:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
24017a76:	d012      	beq.n	24017a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
24017a78:	e070      	b.n	24017b5c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
24017a7a:	4b3a      	ldr	r3, [pc, #232]	@ (24017b64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
24017a7c:	681b      	ldr	r3, [r3, #0]
24017a7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
24017a82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
24017a86:	d107      	bne.n	24017a98 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
24017a88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
24017a8c:	4618      	mov	r0, r3
24017a8e:	f000 fecb 	bl	24018828 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
24017a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
24017a94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24017a96:	e3e6      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
24017a98:	2300      	movs	r3, #0
24017a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24017a9c:	e3e3      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24017a9e:	4b31      	ldr	r3, [pc, #196]	@ (24017b64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
24017aa0:	681b      	ldr	r3, [r3, #0]
24017aa2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
24017aa6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
24017aaa:	d107      	bne.n	24017abc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24017aac:	f107 0318 	add.w	r3, r7, #24
24017ab0:	4618      	mov	r0, r3
24017ab2:	f000 fc11 	bl	240182d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
24017ab6:	69bb      	ldr	r3, [r7, #24]
24017ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24017aba:	e3d4      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
24017abc:	2300      	movs	r3, #0
24017abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24017ac0:	e3d1      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
24017ac2:	4b28      	ldr	r3, [pc, #160]	@ (24017b64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
24017ac4:	681b      	ldr	r3, [r3, #0]
24017ac6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
24017aca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
24017ace:	d107      	bne.n	24017ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
24017ad0:	f107 030c 	add.w	r3, r7, #12
24017ad4:	4618      	mov	r0, r3
24017ad6:	f000 fd53 	bl	24018580 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
24017ada:	68fb      	ldr	r3, [r7, #12]
24017adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24017ade:	e3c2      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
24017ae0:	2300      	movs	r3, #0
24017ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24017ae4:	e3bf      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
24017ae6:	4b1f      	ldr	r3, [pc, #124]	@ (24017b64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
24017ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
24017aea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
24017aee:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
24017af0:	4b1c      	ldr	r3, [pc, #112]	@ (24017b64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
24017af2:	681b      	ldr	r3, [r3, #0]
24017af4:	f003 0304 	and.w	r3, r3, #4
24017af8:	2b04      	cmp	r3, #4
24017afa:	d10c      	bne.n	24017b16 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
24017afc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
24017afe:	2b00      	cmp	r3, #0
24017b00:	d109      	bne.n	24017b16 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24017b02:	4b18      	ldr	r3, [pc, #96]	@ (24017b64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
24017b04:	681b      	ldr	r3, [r3, #0]
24017b06:	08db      	lsrs	r3, r3, #3
24017b08:	f003 0303 	and.w	r3, r3, #3
24017b0c:	4a16      	ldr	r2, [pc, #88]	@ (24017b68 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
24017b0e:	fa22 f303 	lsr.w	r3, r2, r3
24017b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
24017b14:	e01e      	b.n	24017b54 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
24017b16:	4b13      	ldr	r3, [pc, #76]	@ (24017b64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
24017b18:	681b      	ldr	r3, [r3, #0]
24017b1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
24017b1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
24017b22:	d106      	bne.n	24017b32 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
24017b24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
24017b26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
24017b2a:	d102      	bne.n	24017b32 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
24017b2c:	4b0f      	ldr	r3, [pc, #60]	@ (24017b6c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
24017b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
24017b30:	e010      	b.n	24017b54 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
24017b32:	4b0c      	ldr	r3, [pc, #48]	@ (24017b64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
24017b34:	681b      	ldr	r3, [r3, #0]
24017b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
24017b3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
24017b3e:	d106      	bne.n	24017b4e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
24017b40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
24017b42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
24017b46:	d102      	bne.n	24017b4e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
24017b48:	4b09      	ldr	r3, [pc, #36]	@ (24017b70 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
24017b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
24017b4c:	e002      	b.n	24017b54 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
24017b4e:	2300      	movs	r3, #0
24017b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
24017b52:	e388      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
24017b54:	e387      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
24017b56:	4b07      	ldr	r3, [pc, #28]	@ (24017b74 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
24017b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24017b5a:	e384      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
24017b5c:	2300      	movs	r3, #0
24017b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24017b60:	e381      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
24017b62:	bf00      	nop
24017b64:	58024400 	.word	0x58024400
24017b68:	03d09000 	.word	0x03d09000
24017b6c:	003d0900 	.word	0x003d0900
24017b70:	017d7840 	.word	0x017d7840
24017b74:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
24017b78:	e9d7 2300 	ldrd	r2, r3, [r7]
24017b7c:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
24017b80:	430b      	orrs	r3, r1
24017b82:	f040 809c 	bne.w	24017cbe <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
24017b86:	4b9e      	ldr	r3, [pc, #632]	@ (24017e00 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
24017b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
24017b8a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
24017b8e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
24017b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
24017b92:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
24017b96:	d054      	beq.n	24017c42 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
24017b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
24017b9a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
24017b9e:	f200 808b 	bhi.w	24017cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
24017ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
24017ba4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
24017ba8:	f000 8083 	beq.w	24017cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
24017bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
24017bae:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
24017bb2:	f200 8081 	bhi.w	24017cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
24017bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
24017bb8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
24017bbc:	d02f      	beq.n	24017c1e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
24017bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
24017bc0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
24017bc4:	d878      	bhi.n	24017cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
24017bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
24017bc8:	2b00      	cmp	r3, #0
24017bca:	d004      	beq.n	24017bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
24017bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
24017bce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
24017bd2:	d012      	beq.n	24017bfa <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
24017bd4:	e070      	b.n	24017cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
24017bd6:	4b8a      	ldr	r3, [pc, #552]	@ (24017e00 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
24017bd8:	681b      	ldr	r3, [r3, #0]
24017bda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
24017bde:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
24017be2:	d107      	bne.n	24017bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
24017be4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
24017be8:	4618      	mov	r0, r3
24017bea:	f000 fe1d 	bl	24018828 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
24017bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
24017bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24017bf2:	e338      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
24017bf4:	2300      	movs	r3, #0
24017bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24017bf8:	e335      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24017bfa:	4b81      	ldr	r3, [pc, #516]	@ (24017e00 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
24017bfc:	681b      	ldr	r3, [r3, #0]
24017bfe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
24017c02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
24017c06:	d107      	bne.n	24017c18 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24017c08:	f107 0318 	add.w	r3, r7, #24
24017c0c:	4618      	mov	r0, r3
24017c0e:	f000 fb63 	bl	240182d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
24017c12:	69bb      	ldr	r3, [r7, #24]
24017c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24017c16:	e326      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
24017c18:	2300      	movs	r3, #0
24017c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24017c1c:	e323      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
24017c1e:	4b78      	ldr	r3, [pc, #480]	@ (24017e00 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
24017c20:	681b      	ldr	r3, [r3, #0]
24017c22:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
24017c26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
24017c2a:	d107      	bne.n	24017c3c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
24017c2c:	f107 030c 	add.w	r3, r7, #12
24017c30:	4618      	mov	r0, r3
24017c32:	f000 fca5 	bl	24018580 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
24017c36:	68fb      	ldr	r3, [r7, #12]
24017c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24017c3a:	e314      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
24017c3c:	2300      	movs	r3, #0
24017c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24017c40:	e311      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
24017c42:	4b6f      	ldr	r3, [pc, #444]	@ (24017e00 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
24017c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
24017c46:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
24017c4a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
24017c4c:	4b6c      	ldr	r3, [pc, #432]	@ (24017e00 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
24017c4e:	681b      	ldr	r3, [r3, #0]
24017c50:	f003 0304 	and.w	r3, r3, #4
24017c54:	2b04      	cmp	r3, #4
24017c56:	d10c      	bne.n	24017c72 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
24017c58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
24017c5a:	2b00      	cmp	r3, #0
24017c5c:	d109      	bne.n	24017c72 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24017c5e:	4b68      	ldr	r3, [pc, #416]	@ (24017e00 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
24017c60:	681b      	ldr	r3, [r3, #0]
24017c62:	08db      	lsrs	r3, r3, #3
24017c64:	f003 0303 	and.w	r3, r3, #3
24017c68:	4a66      	ldr	r2, [pc, #408]	@ (24017e04 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
24017c6a:	fa22 f303 	lsr.w	r3, r2, r3
24017c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
24017c70:	e01e      	b.n	24017cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
24017c72:	4b63      	ldr	r3, [pc, #396]	@ (24017e00 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
24017c74:	681b      	ldr	r3, [r3, #0]
24017c76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
24017c7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
24017c7e:	d106      	bne.n	24017c8e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
24017c80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
24017c82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
24017c86:	d102      	bne.n	24017c8e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
24017c88:	4b5f      	ldr	r3, [pc, #380]	@ (24017e08 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
24017c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
24017c8c:	e010      	b.n	24017cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
24017c8e:	4b5c      	ldr	r3, [pc, #368]	@ (24017e00 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
24017c90:	681b      	ldr	r3, [r3, #0]
24017c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
24017c96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
24017c9a:	d106      	bne.n	24017caa <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
24017c9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
24017c9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
24017ca2:	d102      	bne.n	24017caa <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
24017ca4:	4b59      	ldr	r3, [pc, #356]	@ (24017e0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
24017ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
24017ca8:	e002      	b.n	24017cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
24017caa:	2300      	movs	r3, #0
24017cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
24017cae:	e2da      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
24017cb0:	e2d9      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
24017cb2:	4b57      	ldr	r3, [pc, #348]	@ (24017e10 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
24017cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24017cb6:	e2d6      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
24017cb8:	2300      	movs	r3, #0
24017cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24017cbc:	e2d3      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
24017cbe:	e9d7 2300 	ldrd	r2, r3, [r7]
24017cc2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
24017cc6:	430b      	orrs	r3, r1
24017cc8:	f040 80a7 	bne.w	24017e1a <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
24017ccc:	4b4c      	ldr	r3, [pc, #304]	@ (24017e00 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
24017cce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
24017cd0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
24017cd4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
24017cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24017cd8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
24017cdc:	d055      	beq.n	24017d8a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
24017cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24017ce0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
24017ce4:	f200 8096 	bhi.w	24017e14 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
24017ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24017cea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
24017cee:	f000 8084 	beq.w	24017dfa <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
24017cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24017cf4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
24017cf8:	f200 808c 	bhi.w	24017e14 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
24017cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24017cfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
24017d02:	d030      	beq.n	24017d66 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
24017d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24017d06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
24017d0a:	f200 8083 	bhi.w	24017e14 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
24017d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24017d10:	2b00      	cmp	r3, #0
24017d12:	d004      	beq.n	24017d1e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
24017d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24017d16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
24017d1a:	d012      	beq.n	24017d42 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
24017d1c:	e07a      	b.n	24017e14 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
24017d1e:	4b38      	ldr	r3, [pc, #224]	@ (24017e00 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
24017d20:	681b      	ldr	r3, [r3, #0]
24017d22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
24017d26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
24017d2a:	d107      	bne.n	24017d3c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
24017d2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
24017d30:	4618      	mov	r0, r3
24017d32:	f000 fd79 	bl	24018828 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
24017d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
24017d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24017d3a:	e294      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
24017d3c:	2300      	movs	r3, #0
24017d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24017d40:	e291      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24017d42:	4b2f      	ldr	r3, [pc, #188]	@ (24017e00 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
24017d44:	681b      	ldr	r3, [r3, #0]
24017d46:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
24017d4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
24017d4e:	d107      	bne.n	24017d60 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24017d50:	f107 0318 	add.w	r3, r7, #24
24017d54:	4618      	mov	r0, r3
24017d56:	f000 fabf 	bl	240182d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
24017d5a:	69bb      	ldr	r3, [r7, #24]
24017d5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24017d5e:	e282      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
24017d60:	2300      	movs	r3, #0
24017d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24017d64:	e27f      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
24017d66:	4b26      	ldr	r3, [pc, #152]	@ (24017e00 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
24017d68:	681b      	ldr	r3, [r3, #0]
24017d6a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
24017d6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
24017d72:	d107      	bne.n	24017d84 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
24017d74:	f107 030c 	add.w	r3, r7, #12
24017d78:	4618      	mov	r0, r3
24017d7a:	f000 fc01 	bl	24018580 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
24017d7e:	68fb      	ldr	r3, [r7, #12]
24017d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24017d82:	e270      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
24017d84:	2300      	movs	r3, #0
24017d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24017d88:	e26d      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
24017d8a:	4b1d      	ldr	r3, [pc, #116]	@ (24017e00 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
24017d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
24017d8e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
24017d92:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
24017d94:	4b1a      	ldr	r3, [pc, #104]	@ (24017e00 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
24017d96:	681b      	ldr	r3, [r3, #0]
24017d98:	f003 0304 	and.w	r3, r3, #4
24017d9c:	2b04      	cmp	r3, #4
24017d9e:	d10c      	bne.n	24017dba <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
24017da0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
24017da2:	2b00      	cmp	r3, #0
24017da4:	d109      	bne.n	24017dba <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24017da6:	4b16      	ldr	r3, [pc, #88]	@ (24017e00 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
24017da8:	681b      	ldr	r3, [r3, #0]
24017daa:	08db      	lsrs	r3, r3, #3
24017dac:	f003 0303 	and.w	r3, r3, #3
24017db0:	4a14      	ldr	r2, [pc, #80]	@ (24017e04 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
24017db2:	fa22 f303 	lsr.w	r3, r2, r3
24017db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
24017db8:	e01e      	b.n	24017df8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
24017dba:	4b11      	ldr	r3, [pc, #68]	@ (24017e00 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
24017dbc:	681b      	ldr	r3, [r3, #0]
24017dbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
24017dc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
24017dc6:	d106      	bne.n	24017dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
24017dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
24017dca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
24017dce:	d102      	bne.n	24017dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
24017dd0:	4b0d      	ldr	r3, [pc, #52]	@ (24017e08 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
24017dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
24017dd4:	e010      	b.n	24017df8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
24017dd6:	4b0a      	ldr	r3, [pc, #40]	@ (24017e00 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
24017dd8:	681b      	ldr	r3, [r3, #0]
24017dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
24017dde:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
24017de2:	d106      	bne.n	24017df2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
24017de4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
24017de6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
24017dea:	d102      	bne.n	24017df2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
24017dec:	4b07      	ldr	r3, [pc, #28]	@ (24017e0c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
24017dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
24017df0:	e002      	b.n	24017df8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
24017df2:	2300      	movs	r3, #0
24017df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
24017df6:	e236      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
24017df8:	e235      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
24017dfa:	4b05      	ldr	r3, [pc, #20]	@ (24017e10 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
24017dfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24017dfe:	e232      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
24017e00:	58024400 	.word	0x58024400
24017e04:	03d09000 	.word	0x03d09000
24017e08:	003d0900 	.word	0x003d0900
24017e0c:	017d7840 	.word	0x017d7840
24017e10:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
24017e14:	2300      	movs	r3, #0
24017e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24017e18:	e225      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
24017e1a:	e9d7 2300 	ldrd	r2, r3, [r7]
24017e1e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
24017e22:	430b      	orrs	r3, r1
24017e24:	f040 8085 	bne.w	24017f32 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
24017e28:	4b9c      	ldr	r3, [pc, #624]	@ (2401809c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
24017e2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
24017e2c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
24017e30:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
24017e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24017e34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
24017e38:	d06b      	beq.n	24017f12 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
24017e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24017e3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
24017e40:	d874      	bhi.n	24017f2c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
24017e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24017e44:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
24017e48:	d056      	beq.n	24017ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
24017e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24017e4c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
24017e50:	d86c      	bhi.n	24017f2c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
24017e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24017e54:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
24017e58:	d03b      	beq.n	24017ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
24017e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24017e5c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
24017e60:	d864      	bhi.n	24017f2c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
24017e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24017e64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
24017e68:	d021      	beq.n	24017eae <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
24017e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24017e6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
24017e70:	d85c      	bhi.n	24017f2c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
24017e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24017e74:	2b00      	cmp	r3, #0
24017e76:	d004      	beq.n	24017e82 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
24017e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24017e7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
24017e7e:	d004      	beq.n	24017e8a <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
24017e80:	e054      	b.n	24017f2c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
24017e82:	f7fe f8c7 	bl	24016014 <HAL_RCC_GetPCLK1Freq>
24017e86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
24017e88:	e1ed      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24017e8a:	4b84      	ldr	r3, [pc, #528]	@ (2401809c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
24017e8c:	681b      	ldr	r3, [r3, #0]
24017e8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
24017e92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
24017e96:	d107      	bne.n	24017ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24017e98:	f107 0318 	add.w	r3, r7, #24
24017e9c:	4618      	mov	r0, r3
24017e9e:	f000 fa1b 	bl	240182d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
24017ea2:	69fb      	ldr	r3, [r7, #28]
24017ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24017ea6:	e1de      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
24017ea8:	2300      	movs	r3, #0
24017eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24017eac:	e1db      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
24017eae:	4b7b      	ldr	r3, [pc, #492]	@ (2401809c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
24017eb0:	681b      	ldr	r3, [r3, #0]
24017eb2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
24017eb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
24017eba:	d107      	bne.n	24017ecc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
24017ebc:	f107 030c 	add.w	r3, r7, #12
24017ec0:	4618      	mov	r0, r3
24017ec2:	f000 fb5d 	bl	24018580 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
24017ec6:	693b      	ldr	r3, [r7, #16]
24017ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24017eca:	e1cc      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
24017ecc:	2300      	movs	r3, #0
24017ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24017ed0:	e1c9      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
24017ed2:	4b72      	ldr	r3, [pc, #456]	@ (2401809c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
24017ed4:	681b      	ldr	r3, [r3, #0]
24017ed6:	f003 0304 	and.w	r3, r3, #4
24017eda:	2b04      	cmp	r3, #4
24017edc:	d109      	bne.n	24017ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24017ede:	4b6f      	ldr	r3, [pc, #444]	@ (2401809c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
24017ee0:	681b      	ldr	r3, [r3, #0]
24017ee2:	08db      	lsrs	r3, r3, #3
24017ee4:	f003 0303 	and.w	r3, r3, #3
24017ee8:	4a6d      	ldr	r2, [pc, #436]	@ (240180a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
24017eea:	fa22 f303 	lsr.w	r3, r2, r3
24017eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24017ef0:	e1b9      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
24017ef2:	2300      	movs	r3, #0
24017ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24017ef6:	e1b6      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
24017ef8:	4b68      	ldr	r3, [pc, #416]	@ (2401809c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
24017efa:	681b      	ldr	r3, [r3, #0]
24017efc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
24017f00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
24017f04:	d102      	bne.n	24017f0c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
24017f06:	4b67      	ldr	r3, [pc, #412]	@ (240180a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
24017f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24017f0a:	e1ac      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
24017f0c:	2300      	movs	r3, #0
24017f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24017f10:	e1a9      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
24017f12:	4b62      	ldr	r3, [pc, #392]	@ (2401809c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
24017f14:	681b      	ldr	r3, [r3, #0]
24017f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
24017f1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
24017f1e:	d102      	bne.n	24017f26 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
24017f20:	4b61      	ldr	r3, [pc, #388]	@ (240180a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
24017f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24017f24:	e19f      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
24017f26:	2300      	movs	r3, #0
24017f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24017f2a:	e19c      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
24017f2c:	2300      	movs	r3, #0
24017f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24017f30:	e199      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
24017f32:	e9d7 2300 	ldrd	r2, r3, [r7]
24017f36:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
24017f3a:	430b      	orrs	r3, r1
24017f3c:	d173      	bne.n	24018026 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
24017f3e:	4b57      	ldr	r3, [pc, #348]	@ (2401809c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
24017f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
24017f42:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
24017f46:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
24017f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24017f4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
24017f4e:	d02f      	beq.n	24017fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
24017f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24017f52:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
24017f56:	d863      	bhi.n	24018020 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
24017f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24017f5a:	2b00      	cmp	r3, #0
24017f5c:	d004      	beq.n	24017f68 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
24017f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24017f60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
24017f64:	d012      	beq.n	24017f8c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
24017f66:	e05b      	b.n	24018020 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24017f68:	4b4c      	ldr	r3, [pc, #304]	@ (2401809c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
24017f6a:	681b      	ldr	r3, [r3, #0]
24017f6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
24017f70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
24017f74:	d107      	bne.n	24017f86 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24017f76:	f107 0318 	add.w	r3, r7, #24
24017f7a:	4618      	mov	r0, r3
24017f7c:	f000 f9ac 	bl	240182d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
24017f80:	69bb      	ldr	r3, [r7, #24]
24017f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24017f84:	e16f      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
24017f86:	2300      	movs	r3, #0
24017f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24017f8a:	e16c      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
24017f8c:	4b43      	ldr	r3, [pc, #268]	@ (2401809c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
24017f8e:	681b      	ldr	r3, [r3, #0]
24017f90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
24017f94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
24017f98:	d107      	bne.n	24017faa <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
24017f9a:	f107 030c 	add.w	r3, r7, #12
24017f9e:	4618      	mov	r0, r3
24017fa0:	f000 faee 	bl	24018580 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
24017fa4:	697b      	ldr	r3, [r7, #20]
24017fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24017fa8:	e15d      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
24017faa:	2300      	movs	r3, #0
24017fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24017fae:	e15a      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
24017fb0:	4b3a      	ldr	r3, [pc, #232]	@ (2401809c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
24017fb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
24017fb4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
24017fb8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
24017fba:	4b38      	ldr	r3, [pc, #224]	@ (2401809c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
24017fbc:	681b      	ldr	r3, [r3, #0]
24017fbe:	f003 0304 	and.w	r3, r3, #4
24017fc2:	2b04      	cmp	r3, #4
24017fc4:	d10c      	bne.n	24017fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
24017fc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
24017fc8:	2b00      	cmp	r3, #0
24017fca:	d109      	bne.n	24017fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24017fcc:	4b33      	ldr	r3, [pc, #204]	@ (2401809c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
24017fce:	681b      	ldr	r3, [r3, #0]
24017fd0:	08db      	lsrs	r3, r3, #3
24017fd2:	f003 0303 	and.w	r3, r3, #3
24017fd6:	4a32      	ldr	r2, [pc, #200]	@ (240180a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
24017fd8:	fa22 f303 	lsr.w	r3, r2, r3
24017fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
24017fde:	e01e      	b.n	2401801e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
24017fe0:	4b2e      	ldr	r3, [pc, #184]	@ (2401809c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
24017fe2:	681b      	ldr	r3, [r3, #0]
24017fe4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
24017fe8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
24017fec:	d106      	bne.n	24017ffc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
24017fee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
24017ff0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
24017ff4:	d102      	bne.n	24017ffc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
24017ff6:	4b2b      	ldr	r3, [pc, #172]	@ (240180a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
24017ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
24017ffa:	e010      	b.n	2401801e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
24017ffc:	4b27      	ldr	r3, [pc, #156]	@ (2401809c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
24017ffe:	681b      	ldr	r3, [r3, #0]
24018000:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
24018004:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
24018008:	d106      	bne.n	24018018 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
2401800a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
2401800c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
24018010:	d102      	bne.n	24018018 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
24018012:	4b25      	ldr	r3, [pc, #148]	@ (240180a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
24018014:	63fb      	str	r3, [r7, #60]	@ 0x3c
24018016:	e002      	b.n	2401801e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
24018018:	2300      	movs	r3, #0
2401801a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
2401801c:	e123      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
2401801e:	e122      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
24018020:	2300      	movs	r3, #0
24018022:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24018024:	e11f      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
24018026:	e9d7 2300 	ldrd	r2, r3, [r7]
2401802a:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
2401802e:	430b      	orrs	r3, r1
24018030:	d13c      	bne.n	240180ac <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
24018032:	4b1a      	ldr	r3, [pc, #104]	@ (2401809c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
24018034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
24018036:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
2401803a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
2401803c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
2401803e:	2b00      	cmp	r3, #0
24018040:	d004      	beq.n	2401804c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
24018042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24018044:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
24018048:	d012      	beq.n	24018070 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
2401804a:	e023      	b.n	24018094 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
2401804c:	4b13      	ldr	r3, [pc, #76]	@ (2401809c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
2401804e:	681b      	ldr	r3, [r3, #0]
24018050:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
24018054:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
24018058:	d107      	bne.n	2401806a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
2401805a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
2401805e:	4618      	mov	r0, r3
24018060:	f000 fbe2 	bl	24018828 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
24018064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
24018066:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24018068:	e0fd      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
2401806a:	2300      	movs	r3, #0
2401806c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
2401806e:	e0fa      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24018070:	4b0a      	ldr	r3, [pc, #40]	@ (2401809c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
24018072:	681b      	ldr	r3, [r3, #0]
24018074:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
24018078:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
2401807c:	d107      	bne.n	2401808e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2401807e:	f107 0318 	add.w	r3, r7, #24
24018082:	4618      	mov	r0, r3
24018084:	f000 f928 	bl	240182d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
24018088:	6a3b      	ldr	r3, [r7, #32]
2401808a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2401808c:	e0eb      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
2401808e:	2300      	movs	r3, #0
24018090:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24018092:	e0e8      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
24018094:	2300      	movs	r3, #0
24018096:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24018098:	e0e5      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
2401809a:	bf00      	nop
2401809c:	58024400 	.word	0x58024400
240180a0:	03d09000 	.word	0x03d09000
240180a4:	003d0900 	.word	0x003d0900
240180a8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
240180ac:	e9d7 2300 	ldrd	r2, r3, [r7]
240180b0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
240180b4:	430b      	orrs	r3, r1
240180b6:	f040 8085 	bne.w	240181c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
240180ba:	4b6d      	ldr	r3, [pc, #436]	@ (24018270 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
240180bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
240180be:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
240180c2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
240180c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
240180c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
240180ca:	d06b      	beq.n	240181a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
240180cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
240180ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
240180d2:	d874      	bhi.n	240181be <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
240180d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
240180d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
240180da:	d056      	beq.n	2401818a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
240180dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
240180de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
240180e2:	d86c      	bhi.n	240181be <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
240180e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
240180e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
240180ea:	d03b      	beq.n	24018164 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
240180ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
240180ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
240180f2:	d864      	bhi.n	240181be <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
240180f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
240180f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
240180fa:	d021      	beq.n	24018140 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
240180fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
240180fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
24018102:	d85c      	bhi.n	240181be <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
24018104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24018106:	2b00      	cmp	r3, #0
24018108:	d004      	beq.n	24018114 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
2401810a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
2401810c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
24018110:	d004      	beq.n	2401811c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
24018112:	e054      	b.n	240181be <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
24018114:	f000 f8ca 	bl	240182ac <HAL_RCCEx_GetD3PCLK1Freq>
24018118:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
2401811a:	e0a4      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2401811c:	4b54      	ldr	r3, [pc, #336]	@ (24018270 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
2401811e:	681b      	ldr	r3, [r3, #0]
24018120:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
24018124:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
24018128:	d107      	bne.n	2401813a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2401812a:	f107 0318 	add.w	r3, r7, #24
2401812e:	4618      	mov	r0, r3
24018130:	f000 f8d2 	bl	240182d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
24018134:	69fb      	ldr	r3, [r7, #28]
24018136:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24018138:	e095      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
2401813a:	2300      	movs	r3, #0
2401813c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
2401813e:	e092      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
24018140:	4b4b      	ldr	r3, [pc, #300]	@ (24018270 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
24018142:	681b      	ldr	r3, [r3, #0]
24018144:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
24018148:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
2401814c:	d107      	bne.n	2401815e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
2401814e:	f107 030c 	add.w	r3, r7, #12
24018152:	4618      	mov	r0, r3
24018154:	f000 fa14 	bl	24018580 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
24018158:	693b      	ldr	r3, [r7, #16]
2401815a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2401815c:	e083      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
2401815e:	2300      	movs	r3, #0
24018160:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24018162:	e080      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
24018164:	4b42      	ldr	r3, [pc, #264]	@ (24018270 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
24018166:	681b      	ldr	r3, [r3, #0]
24018168:	f003 0304 	and.w	r3, r3, #4
2401816c:	2b04      	cmp	r3, #4
2401816e:	d109      	bne.n	24018184 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24018170:	4b3f      	ldr	r3, [pc, #252]	@ (24018270 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
24018172:	681b      	ldr	r3, [r3, #0]
24018174:	08db      	lsrs	r3, r3, #3
24018176:	f003 0303 	and.w	r3, r3, #3
2401817a:	4a3e      	ldr	r2, [pc, #248]	@ (24018274 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
2401817c:	fa22 f303 	lsr.w	r3, r2, r3
24018180:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24018182:	e070      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
24018184:	2300      	movs	r3, #0
24018186:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24018188:	e06d      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
2401818a:	4b39      	ldr	r3, [pc, #228]	@ (24018270 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
2401818c:	681b      	ldr	r3, [r3, #0]
2401818e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
24018192:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
24018196:	d102      	bne.n	2401819e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
24018198:	4b37      	ldr	r3, [pc, #220]	@ (24018278 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
2401819a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2401819c:	e063      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
2401819e:	2300      	movs	r3, #0
240181a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
240181a2:	e060      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
240181a4:	4b32      	ldr	r3, [pc, #200]	@ (24018270 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
240181a6:	681b      	ldr	r3, [r3, #0]
240181a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
240181ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
240181b0:	d102      	bne.n	240181b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
240181b2:	4b32      	ldr	r3, [pc, #200]	@ (2401827c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
240181b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
240181b6:	e056      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
240181b8:	2300      	movs	r3, #0
240181ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
240181bc:	e053      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
240181be:	2300      	movs	r3, #0
240181c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
240181c2:	e050      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
240181c4:	e9d7 2300 	ldrd	r2, r3, [r7]
240181c8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
240181cc:	430b      	orrs	r3, r1
240181ce:	d148      	bne.n	24018262 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
240181d0:	4b27      	ldr	r3, [pc, #156]	@ (24018270 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
240181d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
240181d4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
240181d8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
240181da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
240181dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
240181e0:	d02a      	beq.n	24018238 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
240181e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
240181e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
240181e8:	d838      	bhi.n	2401825c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
240181ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
240181ec:	2b00      	cmp	r3, #0
240181ee:	d004      	beq.n	240181fa <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
240181f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
240181f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
240181f6:	d00d      	beq.n	24018214 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
240181f8:	e030      	b.n	2401825c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
240181fa:	4b1d      	ldr	r3, [pc, #116]	@ (24018270 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
240181fc:	681b      	ldr	r3, [r3, #0]
240181fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
24018202:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
24018206:	d102      	bne.n	2401820e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
24018208:	4b1c      	ldr	r3, [pc, #112]	@ (2401827c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
2401820a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2401820c:	e02b      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
2401820e:	2300      	movs	r3, #0
24018210:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24018212:	e028      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
24018214:	4b16      	ldr	r3, [pc, #88]	@ (24018270 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
24018216:	681b      	ldr	r3, [r3, #0]
24018218:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
2401821c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
24018220:	d107      	bne.n	24018232 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
24018222:	f107 0324 	add.w	r3, r7, #36	@ 0x24
24018226:	4618      	mov	r0, r3
24018228:	f000 fafe 	bl	24018828 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
2401822c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2401822e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24018230:	e019      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
24018232:	2300      	movs	r3, #0
24018234:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24018236:	e016      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24018238:	4b0d      	ldr	r3, [pc, #52]	@ (24018270 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
2401823a:	681b      	ldr	r3, [r3, #0]
2401823c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
24018240:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
24018244:	d107      	bne.n	24018256 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24018246:	f107 0318 	add.w	r3, r7, #24
2401824a:	4618      	mov	r0, r3
2401824c:	f000 f844 	bl	240182d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
24018250:	69fb      	ldr	r3, [r7, #28]
24018252:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24018254:	e007      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
24018256:	2300      	movs	r3, #0
24018258:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
2401825a:	e004      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
2401825c:	2300      	movs	r3, #0
2401825e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24018260:	e001      	b.n	24018266 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
24018262:	2300      	movs	r3, #0
24018264:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
24018266:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
24018268:	4618      	mov	r0, r3
2401826a:	3740      	adds	r7, #64	@ 0x40
2401826c:	46bd      	mov	sp, r7
2401826e:	bd80      	pop	{r7, pc}
24018270:	58024400 	.word	0x58024400
24018274:	03d09000 	.word	0x03d09000
24018278:	003d0900 	.word	0x003d0900
2401827c:	017d7840 	.word	0x017d7840

24018280 <HAL_RCCEx_GetD1PCLK1Freq>:
  * @note   Each time D1PCLK1 changes, this function must be called to update the
  *         right D1PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D1PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD1PCLK1Freq(void)
{
24018280:	b580      	push	{r7, lr}
24018282:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_D1PPRE)
  /* Get HCLK source and Compute D1PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1PPRE) >> RCC_D1CFGR_D1PPRE_Pos] & 0x1FU));
24018284:	f7fd fe96 	bl	24015fb4 <HAL_RCC_GetHCLKFreq>
24018288:	4602      	mov	r2, r0
2401828a:	4b06      	ldr	r3, [pc, #24]	@ (240182a4 <HAL_RCCEx_GetD1PCLK1Freq+0x24>)
2401828c:	699b      	ldr	r3, [r3, #24]
2401828e:	091b      	lsrs	r3, r3, #4
24018290:	f003 0307 	and.w	r3, r3, #7
24018294:	4904      	ldr	r1, [pc, #16]	@ (240182a8 <HAL_RCCEx_GetD1PCLK1Freq+0x28>)
24018296:	5ccb      	ldrb	r3, [r1, r3]
24018298:	f003 031f 	and.w	r3, r3, #31
2401829c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D1PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE) >> RCC_CDCFGR1_CDPPRE_Pos] & 0x1FU));
#endif
}
240182a0:	4618      	mov	r0, r3
240182a2:	bd80      	pop	{r7, pc}
240182a4:	58024400 	.word	0x58024400
240182a8:	2401b64c 	.word	0x2401b64c

240182ac <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
240182ac:	b580      	push	{r7, lr}
240182ae:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
240182b0:	f7fd fe80 	bl	24015fb4 <HAL_RCC_GetHCLKFreq>
240182b4:	4602      	mov	r2, r0
240182b6:	4b06      	ldr	r3, [pc, #24]	@ (240182d0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
240182b8:	6a1b      	ldr	r3, [r3, #32]
240182ba:	091b      	lsrs	r3, r3, #4
240182bc:	f003 0307 	and.w	r3, r3, #7
240182c0:	4904      	ldr	r1, [pc, #16]	@ (240182d4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
240182c2:	5ccb      	ldrb	r3, [r1, r3]
240182c4:	f003 031f 	and.w	r3, r3, #31
240182c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
240182cc:	4618      	mov	r0, r3
240182ce:	bd80      	pop	{r7, pc}
240182d0:	58024400 	.word	0x58024400
240182d4:	2401b64c 	.word	0x2401b64c

240182d8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
240182d8:	b480      	push	{r7}
240182da:	b089      	sub	sp, #36	@ 0x24
240182dc:	af00      	add	r7, sp, #0
240182de:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
240182e0:	4ba1      	ldr	r3, [pc, #644]	@ (24018568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
240182e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
240182e4:	f003 0303 	and.w	r3, r3, #3
240182e8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
240182ea:	4b9f      	ldr	r3, [pc, #636]	@ (24018568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
240182ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
240182ee:	0b1b      	lsrs	r3, r3, #12
240182f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
240182f4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
240182f6:	4b9c      	ldr	r3, [pc, #624]	@ (24018568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
240182f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
240182fa:	091b      	lsrs	r3, r3, #4
240182fc:	f003 0301 	and.w	r3, r3, #1
24018300:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
24018302:	4b99      	ldr	r3, [pc, #612]	@ (24018568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24018304:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
24018306:	08db      	lsrs	r3, r3, #3
24018308:	f3c3 030c 	ubfx	r3, r3, #0, #13
2401830c:	693a      	ldr	r2, [r7, #16]
2401830e:	fb02 f303 	mul.w	r3, r2, r3
24018312:	ee07 3a90 	vmov	s15, r3
24018316:	eef8 7a67 	vcvt.f32.u32	s15, s15
2401831a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
2401831e:	697b      	ldr	r3, [r7, #20]
24018320:	2b00      	cmp	r3, #0
24018322:	f000 8111 	beq.w	24018548 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
24018326:	69bb      	ldr	r3, [r7, #24]
24018328:	2b02      	cmp	r3, #2
2401832a:	f000 8083 	beq.w	24018434 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
2401832e:	69bb      	ldr	r3, [r7, #24]
24018330:	2b02      	cmp	r3, #2
24018332:	f200 80a1 	bhi.w	24018478 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
24018336:	69bb      	ldr	r3, [r7, #24]
24018338:	2b00      	cmp	r3, #0
2401833a:	d003      	beq.n	24018344 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
2401833c:	69bb      	ldr	r3, [r7, #24]
2401833e:	2b01      	cmp	r3, #1
24018340:	d056      	beq.n	240183f0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
24018342:	e099      	b.n	24018478 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24018344:	4b88      	ldr	r3, [pc, #544]	@ (24018568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24018346:	681b      	ldr	r3, [r3, #0]
24018348:	f003 0320 	and.w	r3, r3, #32
2401834c:	2b00      	cmp	r3, #0
2401834e:	d02d      	beq.n	240183ac <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24018350:	4b85      	ldr	r3, [pc, #532]	@ (24018568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24018352:	681b      	ldr	r3, [r3, #0]
24018354:	08db      	lsrs	r3, r3, #3
24018356:	f003 0303 	and.w	r3, r3, #3
2401835a:	4a84      	ldr	r2, [pc, #528]	@ (2401856c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
2401835c:	fa22 f303 	lsr.w	r3, r2, r3
24018360:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24018362:	68bb      	ldr	r3, [r7, #8]
24018364:	ee07 3a90 	vmov	s15, r3
24018368:	eef8 6a67 	vcvt.f32.u32	s13, s15
2401836c:	697b      	ldr	r3, [r7, #20]
2401836e:	ee07 3a90 	vmov	s15, r3
24018372:	eef8 7a67 	vcvt.f32.u32	s15, s15
24018376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2401837a:	4b7b      	ldr	r3, [pc, #492]	@ (24018568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2401837c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2401837e:	f3c3 0308 	ubfx	r3, r3, #0, #9
24018382:	ee07 3a90 	vmov	s15, r3
24018386:	eef8 6a67 	vcvt.f32.u32	s13, s15
2401838a:	ed97 6a03 	vldr	s12, [r7, #12]
2401838e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 24018570 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
24018392:	eec6 7a25 	vdiv.f32	s15, s12, s11
24018396:	ee76 7aa7 	vadd.f32	s15, s13, s15
2401839a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
2401839e:	ee77 7aa6 	vadd.f32	s15, s15, s13
240183a2:	ee67 7a27 	vmul.f32	s15, s14, s15
240183a6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
240183aa:	e087      	b.n	240184bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
240183ac:	697b      	ldr	r3, [r7, #20]
240183ae:	ee07 3a90 	vmov	s15, r3
240183b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
240183b6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 24018574 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
240183ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240183be:	4b6a      	ldr	r3, [pc, #424]	@ (24018568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
240183c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
240183c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
240183c6:	ee07 3a90 	vmov	s15, r3
240183ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
240183ce:	ed97 6a03 	vldr	s12, [r7, #12]
240183d2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 24018570 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
240183d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
240183da:	ee76 7aa7 	vadd.f32	s15, s13, s15
240183de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
240183e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
240183e6:	ee67 7a27 	vmul.f32	s15, s14, s15
240183ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
240183ee:	e065      	b.n	240184bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
240183f0:	697b      	ldr	r3, [r7, #20]
240183f2:	ee07 3a90 	vmov	s15, r3
240183f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
240183fa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 24018578 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
240183fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24018402:	4b59      	ldr	r3, [pc, #356]	@ (24018568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24018404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
24018406:	f3c3 0308 	ubfx	r3, r3, #0, #9
2401840a:	ee07 3a90 	vmov	s15, r3
2401840e:	eef8 6a67 	vcvt.f32.u32	s13, s15
24018412:	ed97 6a03 	vldr	s12, [r7, #12]
24018416:	eddf 5a56 	vldr	s11, [pc, #344]	@ 24018570 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
2401841a:	eec6 7a25 	vdiv.f32	s15, s12, s11
2401841e:	ee76 7aa7 	vadd.f32	s15, s13, s15
24018422:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
24018426:	ee77 7aa6 	vadd.f32	s15, s15, s13
2401842a:	ee67 7a27 	vmul.f32	s15, s14, s15
2401842e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
24018432:	e043      	b.n	240184bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24018434:	697b      	ldr	r3, [r7, #20]
24018436:	ee07 3a90 	vmov	s15, r3
2401843a:	eef8 7a67 	vcvt.f32.u32	s15, s15
2401843e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 2401857c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
24018442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24018446:	4b48      	ldr	r3, [pc, #288]	@ (24018568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24018448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2401844a:	f3c3 0308 	ubfx	r3, r3, #0, #9
2401844e:	ee07 3a90 	vmov	s15, r3
24018452:	eef8 6a67 	vcvt.f32.u32	s13, s15
24018456:	ed97 6a03 	vldr	s12, [r7, #12]
2401845a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 24018570 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
2401845e:	eec6 7a25 	vdiv.f32	s15, s12, s11
24018462:	ee76 7aa7 	vadd.f32	s15, s13, s15
24018466:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
2401846a:	ee77 7aa6 	vadd.f32	s15, s15, s13
2401846e:	ee67 7a27 	vmul.f32	s15, s14, s15
24018472:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
24018476:	e021      	b.n	240184bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24018478:	697b      	ldr	r3, [r7, #20]
2401847a:	ee07 3a90 	vmov	s15, r3
2401847e:	eef8 7a67 	vcvt.f32.u32	s15, s15
24018482:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 24018578 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
24018486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2401848a:	4b37      	ldr	r3, [pc, #220]	@ (24018568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2401848c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2401848e:	f3c3 0308 	ubfx	r3, r3, #0, #9
24018492:	ee07 3a90 	vmov	s15, r3
24018496:	eef8 6a67 	vcvt.f32.u32	s13, s15
2401849a:	ed97 6a03 	vldr	s12, [r7, #12]
2401849e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 24018570 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
240184a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
240184a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
240184aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
240184ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
240184b2:	ee67 7a27 	vmul.f32	s15, s14, s15
240184b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
240184ba:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
240184bc:	4b2a      	ldr	r3, [pc, #168]	@ (24018568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
240184be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
240184c0:	0a5b      	lsrs	r3, r3, #9
240184c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
240184c6:	ee07 3a90 	vmov	s15, r3
240184ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
240184ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
240184d2:	ee37 7a87 	vadd.f32	s14, s15, s14
240184d6:	edd7 6a07 	vldr	s13, [r7, #28]
240184da:	eec6 7a87 	vdiv.f32	s15, s13, s14
240184de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
240184e2:	ee17 2a90 	vmov	r2, s15
240184e6:	687b      	ldr	r3, [r7, #4]
240184e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
240184ea:	4b1f      	ldr	r3, [pc, #124]	@ (24018568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
240184ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
240184ee:	0c1b      	lsrs	r3, r3, #16
240184f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
240184f4:	ee07 3a90 	vmov	s15, r3
240184f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
240184fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
24018500:	ee37 7a87 	vadd.f32	s14, s15, s14
24018504:	edd7 6a07 	vldr	s13, [r7, #28]
24018508:	eec6 7a87 	vdiv.f32	s15, s13, s14
2401850c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24018510:	ee17 2a90 	vmov	r2, s15
24018514:	687b      	ldr	r3, [r7, #4]
24018516:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
24018518:	4b13      	ldr	r3, [pc, #76]	@ (24018568 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2401851a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2401851c:	0e1b      	lsrs	r3, r3, #24
2401851e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
24018522:	ee07 3a90 	vmov	s15, r3
24018526:	eef8 7a67 	vcvt.f32.u32	s15, s15
2401852a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
2401852e:	ee37 7a87 	vadd.f32	s14, s15, s14
24018532:	edd7 6a07 	vldr	s13, [r7, #28]
24018536:	eec6 7a87 	vdiv.f32	s15, s13, s14
2401853a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2401853e:	ee17 2a90 	vmov	r2, s15
24018542:	687b      	ldr	r3, [r7, #4]
24018544:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
24018546:	e008      	b.n	2401855a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
24018548:	687b      	ldr	r3, [r7, #4]
2401854a:	2200      	movs	r2, #0
2401854c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
2401854e:	687b      	ldr	r3, [r7, #4]
24018550:	2200      	movs	r2, #0
24018552:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
24018554:	687b      	ldr	r3, [r7, #4]
24018556:	2200      	movs	r2, #0
24018558:	609a      	str	r2, [r3, #8]
}
2401855a:	bf00      	nop
2401855c:	3724      	adds	r7, #36	@ 0x24
2401855e:	46bd      	mov	sp, r7
24018560:	f85d 7b04 	ldr.w	r7, [sp], #4
24018564:	4770      	bx	lr
24018566:	bf00      	nop
24018568:	58024400 	.word	0x58024400
2401856c:	03d09000 	.word	0x03d09000
24018570:	46000000 	.word	0x46000000
24018574:	4c742400 	.word	0x4c742400
24018578:	4a742400 	.word	0x4a742400
2401857c:	4bbebc20 	.word	0x4bbebc20

24018580 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
24018580:	b480      	push	{r7}
24018582:	b089      	sub	sp, #36	@ 0x24
24018584:	af00      	add	r7, sp, #0
24018586:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24018588:	4ba1      	ldr	r3, [pc, #644]	@ (24018810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2401858a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
2401858c:	f003 0303 	and.w	r3, r3, #3
24018590:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
24018592:	4b9f      	ldr	r3, [pc, #636]	@ (24018810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
24018594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
24018596:	0d1b      	lsrs	r3, r3, #20
24018598:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
2401859c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
2401859e:	4b9c      	ldr	r3, [pc, #624]	@ (24018810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
240185a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
240185a2:	0a1b      	lsrs	r3, r3, #8
240185a4:	f003 0301 	and.w	r3, r3, #1
240185a8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
240185aa:	4b99      	ldr	r3, [pc, #612]	@ (24018810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
240185ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
240185ae:	08db      	lsrs	r3, r3, #3
240185b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
240185b4:	693a      	ldr	r2, [r7, #16]
240185b6:	fb02 f303 	mul.w	r3, r2, r3
240185ba:	ee07 3a90 	vmov	s15, r3
240185be:	eef8 7a67 	vcvt.f32.u32	s15, s15
240185c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
240185c6:	697b      	ldr	r3, [r7, #20]
240185c8:	2b00      	cmp	r3, #0
240185ca:	f000 8111 	beq.w	240187f0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
240185ce:	69bb      	ldr	r3, [r7, #24]
240185d0:	2b02      	cmp	r3, #2
240185d2:	f000 8083 	beq.w	240186dc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
240185d6:	69bb      	ldr	r3, [r7, #24]
240185d8:	2b02      	cmp	r3, #2
240185da:	f200 80a1 	bhi.w	24018720 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
240185de:	69bb      	ldr	r3, [r7, #24]
240185e0:	2b00      	cmp	r3, #0
240185e2:	d003      	beq.n	240185ec <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
240185e4:	69bb      	ldr	r3, [r7, #24]
240185e6:	2b01      	cmp	r3, #1
240185e8:	d056      	beq.n	24018698 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
240185ea:	e099      	b.n	24018720 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
240185ec:	4b88      	ldr	r3, [pc, #544]	@ (24018810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
240185ee:	681b      	ldr	r3, [r3, #0]
240185f0:	f003 0320 	and.w	r3, r3, #32
240185f4:	2b00      	cmp	r3, #0
240185f6:	d02d      	beq.n	24018654 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240185f8:	4b85      	ldr	r3, [pc, #532]	@ (24018810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
240185fa:	681b      	ldr	r3, [r3, #0]
240185fc:	08db      	lsrs	r3, r3, #3
240185fe:	f003 0303 	and.w	r3, r3, #3
24018602:	4a84      	ldr	r2, [pc, #528]	@ (24018814 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
24018604:	fa22 f303 	lsr.w	r3, r2, r3
24018608:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
2401860a:	68bb      	ldr	r3, [r7, #8]
2401860c:	ee07 3a90 	vmov	s15, r3
24018610:	eef8 6a67 	vcvt.f32.u32	s13, s15
24018614:	697b      	ldr	r3, [r7, #20]
24018616:	ee07 3a90 	vmov	s15, r3
2401861a:	eef8 7a67 	vcvt.f32.u32	s15, s15
2401861e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24018622:	4b7b      	ldr	r3, [pc, #492]	@ (24018810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
24018624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
24018626:	f3c3 0308 	ubfx	r3, r3, #0, #9
2401862a:	ee07 3a90 	vmov	s15, r3
2401862e:	eef8 6a67 	vcvt.f32.u32	s13, s15
24018632:	ed97 6a03 	vldr	s12, [r7, #12]
24018636:	eddf 5a78 	vldr	s11, [pc, #480]	@ 24018818 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
2401863a:	eec6 7a25 	vdiv.f32	s15, s12, s11
2401863e:	ee76 7aa7 	vadd.f32	s15, s13, s15
24018642:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
24018646:	ee77 7aa6 	vadd.f32	s15, s15, s13
2401864a:	ee67 7a27 	vmul.f32	s15, s14, s15
2401864e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
24018652:	e087      	b.n	24018764 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24018654:	697b      	ldr	r3, [r7, #20]
24018656:	ee07 3a90 	vmov	s15, r3
2401865a:	eef8 7a67 	vcvt.f32.u32	s15, s15
2401865e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 2401881c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
24018662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24018666:	4b6a      	ldr	r3, [pc, #424]	@ (24018810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
24018668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2401866a:	f3c3 0308 	ubfx	r3, r3, #0, #9
2401866e:	ee07 3a90 	vmov	s15, r3
24018672:	eef8 6a67 	vcvt.f32.u32	s13, s15
24018676:	ed97 6a03 	vldr	s12, [r7, #12]
2401867a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 24018818 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
2401867e:	eec6 7a25 	vdiv.f32	s15, s12, s11
24018682:	ee76 7aa7 	vadd.f32	s15, s13, s15
24018686:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
2401868a:	ee77 7aa6 	vadd.f32	s15, s15, s13
2401868e:	ee67 7a27 	vmul.f32	s15, s14, s15
24018692:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
24018696:	e065      	b.n	24018764 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24018698:	697b      	ldr	r3, [r7, #20]
2401869a:	ee07 3a90 	vmov	s15, r3
2401869e:	eef8 7a67 	vcvt.f32.u32	s15, s15
240186a2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 24018820 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
240186a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240186aa:	4b59      	ldr	r3, [pc, #356]	@ (24018810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
240186ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
240186ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
240186b2:	ee07 3a90 	vmov	s15, r3
240186b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
240186ba:	ed97 6a03 	vldr	s12, [r7, #12]
240186be:	eddf 5a56 	vldr	s11, [pc, #344]	@ 24018818 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
240186c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
240186c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
240186ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
240186ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
240186d2:	ee67 7a27 	vmul.f32	s15, s14, s15
240186d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
240186da:	e043      	b.n	24018764 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
240186dc:	697b      	ldr	r3, [r7, #20]
240186de:	ee07 3a90 	vmov	s15, r3
240186e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
240186e6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 24018824 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
240186ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240186ee:	4b48      	ldr	r3, [pc, #288]	@ (24018810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
240186f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
240186f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
240186f6:	ee07 3a90 	vmov	s15, r3
240186fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
240186fe:	ed97 6a03 	vldr	s12, [r7, #12]
24018702:	eddf 5a45 	vldr	s11, [pc, #276]	@ 24018818 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
24018706:	eec6 7a25 	vdiv.f32	s15, s12, s11
2401870a:	ee76 7aa7 	vadd.f32	s15, s13, s15
2401870e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
24018712:	ee77 7aa6 	vadd.f32	s15, s15, s13
24018716:	ee67 7a27 	vmul.f32	s15, s14, s15
2401871a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
2401871e:	e021      	b.n	24018764 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24018720:	697b      	ldr	r3, [r7, #20]
24018722:	ee07 3a90 	vmov	s15, r3
24018726:	eef8 7a67 	vcvt.f32.u32	s15, s15
2401872a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 24018820 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
2401872e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24018732:	4b37      	ldr	r3, [pc, #220]	@ (24018810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
24018734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
24018736:	f3c3 0308 	ubfx	r3, r3, #0, #9
2401873a:	ee07 3a90 	vmov	s15, r3
2401873e:	eef8 6a67 	vcvt.f32.u32	s13, s15
24018742:	ed97 6a03 	vldr	s12, [r7, #12]
24018746:	eddf 5a34 	vldr	s11, [pc, #208]	@ 24018818 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
2401874a:	eec6 7a25 	vdiv.f32	s15, s12, s11
2401874e:	ee76 7aa7 	vadd.f32	s15, s13, s15
24018752:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
24018756:	ee77 7aa6 	vadd.f32	s15, s15, s13
2401875a:	ee67 7a27 	vmul.f32	s15, s14, s15
2401875e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
24018762:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
24018764:	4b2a      	ldr	r3, [pc, #168]	@ (24018810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
24018766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
24018768:	0a5b      	lsrs	r3, r3, #9
2401876a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
2401876e:	ee07 3a90 	vmov	s15, r3
24018772:	eef8 7a67 	vcvt.f32.u32	s15, s15
24018776:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
2401877a:	ee37 7a87 	vadd.f32	s14, s15, s14
2401877e:	edd7 6a07 	vldr	s13, [r7, #28]
24018782:	eec6 7a87 	vdiv.f32	s15, s13, s14
24018786:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2401878a:	ee17 2a90 	vmov	r2, s15
2401878e:	687b      	ldr	r3, [r7, #4]
24018790:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
24018792:	4b1f      	ldr	r3, [pc, #124]	@ (24018810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
24018794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
24018796:	0c1b      	lsrs	r3, r3, #16
24018798:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
2401879c:	ee07 3a90 	vmov	s15, r3
240187a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
240187a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
240187a8:	ee37 7a87 	vadd.f32	s14, s15, s14
240187ac:	edd7 6a07 	vldr	s13, [r7, #28]
240187b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
240187b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
240187b8:	ee17 2a90 	vmov	r2, s15
240187bc:	687b      	ldr	r3, [r7, #4]
240187be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
240187c0:	4b13      	ldr	r3, [pc, #76]	@ (24018810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
240187c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
240187c4:	0e1b      	lsrs	r3, r3, #24
240187c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
240187ca:	ee07 3a90 	vmov	s15, r3
240187ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
240187d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
240187d6:	ee37 7a87 	vadd.f32	s14, s15, s14
240187da:	edd7 6a07 	vldr	s13, [r7, #28]
240187de:	eec6 7a87 	vdiv.f32	s15, s13, s14
240187e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
240187e6:	ee17 2a90 	vmov	r2, s15
240187ea:	687b      	ldr	r3, [r7, #4]
240187ec:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
240187ee:	e008      	b.n	24018802 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
240187f0:	687b      	ldr	r3, [r7, #4]
240187f2:	2200      	movs	r2, #0
240187f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
240187f6:	687b      	ldr	r3, [r7, #4]
240187f8:	2200      	movs	r2, #0
240187fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
240187fc:	687b      	ldr	r3, [r7, #4]
240187fe:	2200      	movs	r2, #0
24018800:	609a      	str	r2, [r3, #8]
}
24018802:	bf00      	nop
24018804:	3724      	adds	r7, #36	@ 0x24
24018806:	46bd      	mov	sp, r7
24018808:	f85d 7b04 	ldr.w	r7, [sp], #4
2401880c:	4770      	bx	lr
2401880e:	bf00      	nop
24018810:	58024400 	.word	0x58024400
24018814:	03d09000 	.word	0x03d09000
24018818:	46000000 	.word	0x46000000
2401881c:	4c742400 	.word	0x4c742400
24018820:	4a742400 	.word	0x4a742400
24018824:	4bbebc20 	.word	0x4bbebc20

24018828 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
24018828:	b480      	push	{r7}
2401882a:	b089      	sub	sp, #36	@ 0x24
2401882c:	af00      	add	r7, sp, #0
2401882e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24018830:	4ba0      	ldr	r3, [pc, #640]	@ (24018ab4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
24018832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
24018834:	f003 0303 	and.w	r3, r3, #3
24018838:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
2401883a:	4b9e      	ldr	r3, [pc, #632]	@ (24018ab4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2401883c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
2401883e:	091b      	lsrs	r3, r3, #4
24018840:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
24018844:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
24018846:	4b9b      	ldr	r3, [pc, #620]	@ (24018ab4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
24018848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2401884a:	f003 0301 	and.w	r3, r3, #1
2401884e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24018850:	4b98      	ldr	r3, [pc, #608]	@ (24018ab4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
24018852:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
24018854:	08db      	lsrs	r3, r3, #3
24018856:	f3c3 030c 	ubfx	r3, r3, #0, #13
2401885a:	693a      	ldr	r2, [r7, #16]
2401885c:	fb02 f303 	mul.w	r3, r2, r3
24018860:	ee07 3a90 	vmov	s15, r3
24018864:	eef8 7a67 	vcvt.f32.u32	s15, s15
24018868:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
2401886c:	697b      	ldr	r3, [r7, #20]
2401886e:	2b00      	cmp	r3, #0
24018870:	f000 8111 	beq.w	24018a96 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
24018874:	69bb      	ldr	r3, [r7, #24]
24018876:	2b02      	cmp	r3, #2
24018878:	f000 8083 	beq.w	24018982 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
2401887c:	69bb      	ldr	r3, [r7, #24]
2401887e:	2b02      	cmp	r3, #2
24018880:	f200 80a1 	bhi.w	240189c6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
24018884:	69bb      	ldr	r3, [r7, #24]
24018886:	2b00      	cmp	r3, #0
24018888:	d003      	beq.n	24018892 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
2401888a:	69bb      	ldr	r3, [r7, #24]
2401888c:	2b01      	cmp	r3, #1
2401888e:	d056      	beq.n	2401893e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
24018890:	e099      	b.n	240189c6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24018892:	4b88      	ldr	r3, [pc, #544]	@ (24018ab4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
24018894:	681b      	ldr	r3, [r3, #0]
24018896:	f003 0320 	and.w	r3, r3, #32
2401889a:	2b00      	cmp	r3, #0
2401889c:	d02d      	beq.n	240188fa <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2401889e:	4b85      	ldr	r3, [pc, #532]	@ (24018ab4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
240188a0:	681b      	ldr	r3, [r3, #0]
240188a2:	08db      	lsrs	r3, r3, #3
240188a4:	f003 0303 	and.w	r3, r3, #3
240188a8:	4a83      	ldr	r2, [pc, #524]	@ (24018ab8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
240188aa:	fa22 f303 	lsr.w	r3, r2, r3
240188ae:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240188b0:	68bb      	ldr	r3, [r7, #8]
240188b2:	ee07 3a90 	vmov	s15, r3
240188b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
240188ba:	697b      	ldr	r3, [r7, #20]
240188bc:	ee07 3a90 	vmov	s15, r3
240188c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
240188c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240188c8:	4b7a      	ldr	r3, [pc, #488]	@ (24018ab4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
240188ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
240188cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
240188d0:	ee07 3a90 	vmov	s15, r3
240188d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
240188d8:	ed97 6a03 	vldr	s12, [r7, #12]
240188dc:	eddf 5a77 	vldr	s11, [pc, #476]	@ 24018abc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
240188e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
240188e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
240188e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
240188ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
240188f0:	ee67 7a27 	vmul.f32	s15, s14, s15
240188f4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
240188f8:	e087      	b.n	24018a0a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240188fa:	697b      	ldr	r3, [r7, #20]
240188fc:	ee07 3a90 	vmov	s15, r3
24018900:	eef8 7a67 	vcvt.f32.u32	s15, s15
24018904:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 24018ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
24018908:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2401890c:	4b69      	ldr	r3, [pc, #420]	@ (24018ab4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2401890e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
24018910:	f3c3 0308 	ubfx	r3, r3, #0, #9
24018914:	ee07 3a90 	vmov	s15, r3
24018918:	eef8 6a67 	vcvt.f32.u32	s13, s15
2401891c:	ed97 6a03 	vldr	s12, [r7, #12]
24018920:	eddf 5a66 	vldr	s11, [pc, #408]	@ 24018abc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
24018924:	eec6 7a25 	vdiv.f32	s15, s12, s11
24018928:	ee76 7aa7 	vadd.f32	s15, s13, s15
2401892c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
24018930:	ee77 7aa6 	vadd.f32	s15, s15, s13
24018934:	ee67 7a27 	vmul.f32	s15, s14, s15
24018938:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
2401893c:	e065      	b.n	24018a0a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2401893e:	697b      	ldr	r3, [r7, #20]
24018940:	ee07 3a90 	vmov	s15, r3
24018944:	eef8 7a67 	vcvt.f32.u32	s15, s15
24018948:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 24018ac4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
2401894c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24018950:	4b58      	ldr	r3, [pc, #352]	@ (24018ab4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
24018952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
24018954:	f3c3 0308 	ubfx	r3, r3, #0, #9
24018958:	ee07 3a90 	vmov	s15, r3
2401895c:	eef8 6a67 	vcvt.f32.u32	s13, s15
24018960:	ed97 6a03 	vldr	s12, [r7, #12]
24018964:	eddf 5a55 	vldr	s11, [pc, #340]	@ 24018abc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
24018968:	eec6 7a25 	vdiv.f32	s15, s12, s11
2401896c:	ee76 7aa7 	vadd.f32	s15, s13, s15
24018970:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
24018974:	ee77 7aa6 	vadd.f32	s15, s15, s13
24018978:	ee67 7a27 	vmul.f32	s15, s14, s15
2401897c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
24018980:	e043      	b.n	24018a0a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24018982:	697b      	ldr	r3, [r7, #20]
24018984:	ee07 3a90 	vmov	s15, r3
24018988:	eef8 7a67 	vcvt.f32.u32	s15, s15
2401898c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 24018ac8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
24018990:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24018994:	4b47      	ldr	r3, [pc, #284]	@ (24018ab4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
24018996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
24018998:	f3c3 0308 	ubfx	r3, r3, #0, #9
2401899c:	ee07 3a90 	vmov	s15, r3
240189a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
240189a4:	ed97 6a03 	vldr	s12, [r7, #12]
240189a8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 24018abc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
240189ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
240189b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
240189b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
240189b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
240189bc:	ee67 7a27 	vmul.f32	s15, s14, s15
240189c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
240189c4:	e021      	b.n	24018a0a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240189c6:	697b      	ldr	r3, [r7, #20]
240189c8:	ee07 3a90 	vmov	s15, r3
240189cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
240189d0:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 24018ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
240189d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240189d8:	4b36      	ldr	r3, [pc, #216]	@ (24018ab4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
240189da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
240189dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
240189e0:	ee07 3a90 	vmov	s15, r3
240189e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
240189e8:	ed97 6a03 	vldr	s12, [r7, #12]
240189ec:	eddf 5a33 	vldr	s11, [pc, #204]	@ 24018abc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
240189f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
240189f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
240189f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
240189fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
24018a00:	ee67 7a27 	vmul.f32	s15, s14, s15
24018a04:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
24018a08:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
24018a0a:	4b2a      	ldr	r3, [pc, #168]	@ (24018ab4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
24018a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
24018a0e:	0a5b      	lsrs	r3, r3, #9
24018a10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
24018a14:	ee07 3a90 	vmov	s15, r3
24018a18:	eef8 7a67 	vcvt.f32.u32	s15, s15
24018a1c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
24018a20:	ee37 7a87 	vadd.f32	s14, s15, s14
24018a24:	edd7 6a07 	vldr	s13, [r7, #28]
24018a28:	eec6 7a87 	vdiv.f32	s15, s13, s14
24018a2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24018a30:	ee17 2a90 	vmov	r2, s15
24018a34:	687b      	ldr	r3, [r7, #4]
24018a36:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
24018a38:	4b1e      	ldr	r3, [pc, #120]	@ (24018ab4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
24018a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
24018a3c:	0c1b      	lsrs	r3, r3, #16
24018a3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
24018a42:	ee07 3a90 	vmov	s15, r3
24018a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
24018a4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
24018a4e:	ee37 7a87 	vadd.f32	s14, s15, s14
24018a52:	edd7 6a07 	vldr	s13, [r7, #28]
24018a56:	eec6 7a87 	vdiv.f32	s15, s13, s14
24018a5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24018a5e:	ee17 2a90 	vmov	r2, s15
24018a62:	687b      	ldr	r3, [r7, #4]
24018a64:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
24018a66:	4b13      	ldr	r3, [pc, #76]	@ (24018ab4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
24018a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
24018a6a:	0e1b      	lsrs	r3, r3, #24
24018a6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
24018a70:	ee07 3a90 	vmov	s15, r3
24018a74:	eef8 7a67 	vcvt.f32.u32	s15, s15
24018a78:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
24018a7c:	ee37 7a87 	vadd.f32	s14, s15, s14
24018a80:	edd7 6a07 	vldr	s13, [r7, #28]
24018a84:	eec6 7a87 	vdiv.f32	s15, s13, s14
24018a88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24018a8c:	ee17 2a90 	vmov	r2, s15
24018a90:	687b      	ldr	r3, [r7, #4]
24018a92:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
24018a94:	e008      	b.n	24018aa8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
24018a96:	687b      	ldr	r3, [r7, #4]
24018a98:	2200      	movs	r2, #0
24018a9a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
24018a9c:	687b      	ldr	r3, [r7, #4]
24018a9e:	2200      	movs	r2, #0
24018aa0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
24018aa2:	687b      	ldr	r3, [r7, #4]
24018aa4:	2200      	movs	r2, #0
24018aa6:	609a      	str	r2, [r3, #8]
}
24018aa8:	bf00      	nop
24018aaa:	3724      	adds	r7, #36	@ 0x24
24018aac:	46bd      	mov	sp, r7
24018aae:	f85d 7b04 	ldr.w	r7, [sp], #4
24018ab2:	4770      	bx	lr
24018ab4:	58024400 	.word	0x58024400
24018ab8:	03d09000 	.word	0x03d09000
24018abc:	46000000 	.word	0x46000000
24018ac0:	4c742400 	.word	0x4c742400
24018ac4:	4a742400 	.word	0x4a742400
24018ac8:	4bbebc20 	.word	0x4bbebc20

24018acc <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System current Core Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
24018acc:	b580      	push	{r7, lr}
24018ace:	b082      	sub	sp, #8
24018ad0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
24018ad2:	f7fd f8f5 	bl	24015cc0 <HAL_RCC_GetSysClockFreq>
24018ad6:	4602      	mov	r2, r0
24018ad8:	4b10      	ldr	r3, [pc, #64]	@ (24018b1c <HAL_RCCEx_GetD1SysClockFreq+0x50>)
24018ada:	699b      	ldr	r3, [r3, #24]
24018adc:	0a1b      	lsrs	r3, r3, #8
24018ade:	f003 030f 	and.w	r3, r3, #15
24018ae2:	490f      	ldr	r1, [pc, #60]	@ (24018b20 <HAL_RCCEx_GetD1SysClockFreq+0x54>)
24018ae4:	5ccb      	ldrb	r3, [r1, r3]
24018ae6:	f003 031f 	and.w	r3, r3, #31
24018aea:	fa22 f303 	lsr.w	r3, r2, r3
24018aee:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24018af0:	4b0a      	ldr	r3, [pc, #40]	@ (24018b1c <HAL_RCCEx_GetD1SysClockFreq+0x50>)
24018af2:	699b      	ldr	r3, [r3, #24]
24018af4:	f003 030f 	and.w	r3, r3, #15
24018af8:	4a09      	ldr	r2, [pc, #36]	@ (24018b20 <HAL_RCCEx_GetD1SysClockFreq+0x54>)
24018afa:	5cd3      	ldrb	r3, [r2, r3]
24018afc:	f003 031f 	and.w	r3, r3, #31
24018b00:	687a      	ldr	r2, [r7, #4]
24018b02:	fa22 f303 	lsr.w	r3, r2, r3
24018b06:	4a07      	ldr	r2, [pc, #28]	@ (24018b24 <HAL_RCCEx_GetD1SysClockFreq+0x58>)
24018b08:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
24018b0a:	4a07      	ldr	r2, [pc, #28]	@ (24018b28 <HAL_RCCEx_GetD1SysClockFreq+0x5c>)
24018b0c:	687b      	ldr	r3, [r7, #4]
24018b0e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return common_system_clock;
24018b10:	687b      	ldr	r3, [r7, #4]
}
24018b12:	4618      	mov	r0, r3
24018b14:	3708      	adds	r7, #8
24018b16:	46bd      	mov	sp, r7
24018b18:	bd80      	pop	{r7, pc}
24018b1a:	bf00      	nop
24018b1c:	58024400 	.word	0x58024400
24018b20:	2401b64c 	.word	0x2401b64c
24018b24:	240004bc 	.word	0x240004bc
24018b28:	240004b8 	.word	0x240004b8

24018b2c <HAL_RCCEx_EnableLSECSS>:
  *         with HAL_RCC_OscConfig() and the LSE oscillator clock is to be selected as RTC
  *         clock with HAL_RCCEx_PeriphCLKConfig().
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
24018b2c:	b480      	push	{r7}
24018b2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
24018b30:	4b05      	ldr	r3, [pc, #20]	@ (24018b48 <HAL_RCCEx_EnableLSECSS+0x1c>)
24018b32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
24018b34:	4a04      	ldr	r2, [pc, #16]	@ (24018b48 <HAL_RCCEx_EnableLSECSS+0x1c>)
24018b36:	f043 0320 	orr.w	r3, r3, #32
24018b3a:	6713      	str	r3, [r2, #112]	@ 0x70
}
24018b3c:	bf00      	nop
24018b3e:	46bd      	mov	sp, r7
24018b40:	f85d 7b04 	ldr.w	r7, [sp], #4
24018b44:	4770      	bx	lr
24018b46:	bf00      	nop
24018b48:	58024400 	.word	0x58024400

24018b4c <HAL_RCCEx_DisableLSECSS>:
  * @brief  Disables the LSE Clock Security System.
  * @note   LSE Clock Security System can only be disabled after a LSE failure detection.
  * @retval None
  */
void HAL_RCCEx_DisableLSECSS(void)
{
24018b4c:	b480      	push	{r7}
24018b4e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
24018b50:	4b08      	ldr	r3, [pc, #32]	@ (24018b74 <HAL_RCCEx_DisableLSECSS+0x28>)
24018b52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
24018b54:	4a07      	ldr	r2, [pc, #28]	@ (24018b74 <HAL_RCCEx_DisableLSECSS+0x28>)
24018b56:	f023 0320 	bic.w	r3, r3, #32
24018b5a:	6713      	str	r3, [r2, #112]	@ 0x70
  /* Disable LSE CSS IT if any */
  __HAL_RCC_DISABLE_IT(RCC_IT_LSECSS);
24018b5c:	4b05      	ldr	r3, [pc, #20]	@ (24018b74 <HAL_RCCEx_DisableLSECSS+0x28>)
24018b5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
24018b60:	4a04      	ldr	r2, [pc, #16]	@ (24018b74 <HAL_RCCEx_DisableLSECSS+0x28>)
24018b62:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
24018b66:	6613      	str	r3, [r2, #96]	@ 0x60
}
24018b68:	bf00      	nop
24018b6a:	46bd      	mov	sp, r7
24018b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
24018b70:	4770      	bx	lr
24018b72:	bf00      	nop
24018b74:	58024400 	.word	0x58024400

24018b78 <HAL_RCCEx_EnableLSECSS_IT>:
  * @brief  Enable the LSE Clock Security System Interrupt & corresponding EXTI line.
  * @note   LSE Clock Security System Interrupt is mapped on EXTI line 18
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS_IT(void)
{
24018b78:	b480      	push	{r7}
24018b7a:	af00      	add	r7, sp, #0
  /* Enable LSE CSS */
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
24018b7c:	4b11      	ldr	r3, [pc, #68]	@ (24018bc4 <HAL_RCCEx_EnableLSECSS_IT+0x4c>)
24018b7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
24018b80:	4a10      	ldr	r2, [pc, #64]	@ (24018bc4 <HAL_RCCEx_EnableLSECSS_IT+0x4c>)
24018b82:	f043 0320 	orr.w	r3, r3, #32
24018b86:	6713      	str	r3, [r2, #112]	@ 0x70

  /* Enable LSE CSS IT */
  __HAL_RCC_ENABLE_IT(RCC_IT_LSECSS);
24018b88:	4b0e      	ldr	r3, [pc, #56]	@ (24018bc4 <HAL_RCCEx_EnableLSECSS_IT+0x4c>)
24018b8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
24018b8c:	4a0d      	ldr	r2, [pc, #52]	@ (24018bc4 <HAL_RCCEx_EnableLSECSS_IT+0x4c>)
24018b8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
24018b92:	6613      	str	r3, [r2, #96]	@ 0x60

  /* Enable IT on EXTI Line 18 */
#if defined(DUAL_CORE) && defined(CORE_CM4)
  __HAL_RCC_C2_LSECSS_EXTI_ENABLE_IT();
#else
  __HAL_RCC_LSECSS_EXTI_ENABLE_IT();
24018b94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
24018b98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
24018b9c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
24018ba0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
24018ba4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* DUAL_CORE && CORE_CM4 */
  __HAL_RCC_LSECSS_EXTI_ENABLE_RISING_EDGE();
24018ba8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
24018bac:	681b      	ldr	r3, [r3, #0]
24018bae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
24018bb2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
24018bb6:	6013      	str	r3, [r2, #0]
}
24018bb8:	bf00      	nop
24018bba:	46bd      	mov	sp, r7
24018bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
24018bc0:	4770      	bx	lr
24018bc2:	bf00      	nop
24018bc4:	58024400 	.word	0x58024400

24018bc8 <HAL_RCCEx_WakeUpStopCLKConfig>:
  * @note   This function shall not be called after the Clock Security System on HSE has been
  *         enabled.
  * @retval None
  */
void HAL_RCCEx_WakeUpStopCLKConfig(uint32_t WakeUpClk)
{
24018bc8:	b480      	push	{r7}
24018bca:	b083      	sub	sp, #12
24018bcc:	af00      	add	r7, sp, #0
24018bce:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_STOP_WAKEUPCLOCK(WakeUpClk));

  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(WakeUpClk);
24018bd0:	4b06      	ldr	r3, [pc, #24]	@ (24018bec <HAL_RCCEx_WakeUpStopCLKConfig+0x24>)
24018bd2:	691b      	ldr	r3, [r3, #16]
24018bd4:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
24018bd8:	4904      	ldr	r1, [pc, #16]	@ (24018bec <HAL_RCCEx_WakeUpStopCLKConfig+0x24>)
24018bda:	687b      	ldr	r3, [r7, #4]
24018bdc:	4313      	orrs	r3, r2
24018bde:	610b      	str	r3, [r1, #16]
}
24018be0:	bf00      	nop
24018be2:	370c      	adds	r7, #12
24018be4:	46bd      	mov	sp, r7
24018be6:	f85d 7b04 	ldr.w	r7, [sp], #4
24018bea:	4770      	bx	lr
24018bec:	58024400 	.word	0x58024400

24018bf0 <HAL_RCCEx_KerWakeUpStopCLKConfig>:
  *            @arg RCC_STOP_KERWAKEUPCLOCK_CSI: CSI oscillator selection
  *            @arg RCC_STOP_KERWAKEUPCLOCK_HSI: HSI oscillator selection
  * @retval None
  */
void HAL_RCCEx_KerWakeUpStopCLKConfig(uint32_t WakeUpClk)
{
24018bf0:	b480      	push	{r7}
24018bf2:	b083      	sub	sp, #12
24018bf4:	af00      	add	r7, sp, #0
24018bf6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_STOP_KERWAKEUPCLOCK(WakeUpClk));

  __HAL_RCC_KERWAKEUPSTOP_CLK_CONFIG(WakeUpClk);
24018bf8:	4b06      	ldr	r3, [pc, #24]	@ (24018c14 <HAL_RCCEx_KerWakeUpStopCLKConfig+0x24>)
24018bfa:	691b      	ldr	r3, [r3, #16]
24018bfc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
24018c00:	4904      	ldr	r1, [pc, #16]	@ (24018c14 <HAL_RCCEx_KerWakeUpStopCLKConfig+0x24>)
24018c02:	687b      	ldr	r3, [r7, #4]
24018c04:	4313      	orrs	r3, r2
24018c06:	610b      	str	r3, [r1, #16]
}
24018c08:	bf00      	nop
24018c0a:	370c      	adds	r7, #12
24018c0c:	46bd      	mov	sp, r7
24018c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
24018c12:	4770      	bx	lr
24018c14:	58024400 	.word	0x58024400

24018c18 <HAL_RCCEx_WWDGxSysResetConfig>:
  * @note   This bit can be set by software but is cleared by hardware during a system reset
  *
  * @retval None
  */
void HAL_RCCEx_WWDGxSysResetConfig(uint32_t RCC_WWDGx)
{
24018c18:	b480      	push	{r7}
24018c1a:	b083      	sub	sp, #12
24018c1c:	af00      	add	r7, sp, #0
24018c1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_SCOPE_WWDG(RCC_WWDGx));
  SET_BIT(RCC->GCR, RCC_WWDGx) ;
24018c20:	4b06      	ldr	r3, [pc, #24]	@ (24018c3c <HAL_RCCEx_WWDGxSysResetConfig+0x24>)
24018c22:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
24018c26:	4905      	ldr	r1, [pc, #20]	@ (24018c3c <HAL_RCCEx_WWDGxSysResetConfig+0x24>)
24018c28:	687b      	ldr	r3, [r7, #4]
24018c2a:	4313      	orrs	r3, r2
24018c2c:	f8c1 30a0 	str.w	r3, [r1, #160]	@ 0xa0
}
24018c30:	bf00      	nop
24018c32:	370c      	adds	r7, #12
24018c34:	46bd      	mov	sp, r7
24018c36:	f85d 7b04 	ldr.w	r7, [sp], #4
24018c3a:	4770      	bx	lr
24018c3c:	58024400 	.word	0x58024400

24018c40 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
24018c40:	b580      	push	{r7, lr}
24018c42:	b084      	sub	sp, #16
24018c44:	af00      	add	r7, sp, #0
24018c46:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
24018c48:	4b26      	ldr	r3, [pc, #152]	@ (24018ce4 <HAL_RCCEx_CRSConfig+0xa4>)
24018c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
24018c4e:	4a25      	ldr	r2, [pc, #148]	@ (24018ce4 <HAL_RCCEx_CRSConfig+0xa4>)
24018c50:	f043 0302 	orr.w	r3, r3, #2
24018c54:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
24018c58:	4b22      	ldr	r3, [pc, #136]	@ (24018ce4 <HAL_RCCEx_CRSConfig+0xa4>)
24018c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
24018c5e:	4a21      	ldr	r2, [pc, #132]	@ (24018ce4 <HAL_RCCEx_CRSConfig+0xa4>)
24018c60:	f023 0302 	bic.w	r3, r3, #2
24018c64:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
24018c68:	f7ea f8dc 	bl	24002e24 <HAL_GetREVID>
24018c6c:	4603      	mov	r3, r0
24018c6e:	f241 0203 	movw	r2, #4099	@ 0x1003
24018c72:	4293      	cmp	r3, r2
24018c74:	d80b      	bhi.n	24018c8e <HAL_RCCEx_CRSConfig+0x4e>
24018c76:	687b      	ldr	r3, [r7, #4]
24018c78:	685b      	ldr	r3, [r3, #4]
24018c7a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
24018c7e:	d106      	bne.n	24018c8e <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
24018c80:	687b      	ldr	r3, [r7, #4]
24018c82:	681a      	ldr	r2, [r3, #0]
24018c84:	687b      	ldr	r3, [r7, #4]
24018c86:	689b      	ldr	r3, [r3, #8]
24018c88:	4313      	orrs	r3, r2
24018c8a:	60fb      	str	r3, [r7, #12]
24018c8c:	e008      	b.n	24018ca0 <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
24018c8e:	687b      	ldr	r3, [r7, #4]
24018c90:	681a      	ldr	r2, [r3, #0]
24018c92:	687b      	ldr	r3, [r7, #4]
24018c94:	685b      	ldr	r3, [r3, #4]
24018c96:	431a      	orrs	r2, r3
24018c98:	687b      	ldr	r3, [r7, #4]
24018c9a:	689b      	ldr	r3, [r3, #8]
24018c9c:	4313      	orrs	r3, r2
24018c9e:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
24018ca0:	687b      	ldr	r3, [r7, #4]
24018ca2:	68db      	ldr	r3, [r3, #12]
24018ca4:	68fa      	ldr	r2, [r7, #12]
24018ca6:	4313      	orrs	r3, r2
24018ca8:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
24018caa:	687b      	ldr	r3, [r7, #4]
24018cac:	691b      	ldr	r3, [r3, #16]
24018cae:	041b      	lsls	r3, r3, #16
24018cb0:	68fa      	ldr	r2, [r7, #12]
24018cb2:	4313      	orrs	r3, r2
24018cb4:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
24018cb6:	4a0c      	ldr	r2, [pc, #48]	@ (24018ce8 <HAL_RCCEx_CRSConfig+0xa8>)
24018cb8:	68fb      	ldr	r3, [r7, #12]
24018cba:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
24018cbc:	4b0a      	ldr	r3, [pc, #40]	@ (24018ce8 <HAL_RCCEx_CRSConfig+0xa8>)
24018cbe:	681b      	ldr	r3, [r3, #0]
24018cc0:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
24018cc4:	687b      	ldr	r3, [r7, #4]
24018cc6:	695b      	ldr	r3, [r3, #20]
24018cc8:	021b      	lsls	r3, r3, #8
24018cca:	4907      	ldr	r1, [pc, #28]	@ (24018ce8 <HAL_RCCEx_CRSConfig+0xa8>)
24018ccc:	4313      	orrs	r3, r2
24018cce:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
24018cd0:	4b05      	ldr	r3, [pc, #20]	@ (24018ce8 <HAL_RCCEx_CRSConfig+0xa8>)
24018cd2:	681b      	ldr	r3, [r3, #0]
24018cd4:	4a04      	ldr	r2, [pc, #16]	@ (24018ce8 <HAL_RCCEx_CRSConfig+0xa8>)
24018cd6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
24018cda:	6013      	str	r3, [r2, #0]
}
24018cdc:	bf00      	nop
24018cde:	3710      	adds	r7, #16
24018ce0:	46bd      	mov	sp, r7
24018ce2:	bd80      	pop	{r7, pc}
24018ce4:	58024400 	.word	0x58024400
24018ce8:	40008400 	.word	0x40008400

24018cec <HAL_RCCEx_CRSSoftwareSynchronizationGenerate>:
/**
  * @brief  Generate the software synchronization event
  * @retval None
  */
void HAL_RCCEx_CRSSoftwareSynchronizationGenerate(void)
{
24018cec:	b480      	push	{r7}
24018cee:	af00      	add	r7, sp, #0
  SET_BIT(CRS->CR, CRS_CR_SWSYNC);
24018cf0:	4b05      	ldr	r3, [pc, #20]	@ (24018d08 <HAL_RCCEx_CRSSoftwareSynchronizationGenerate+0x1c>)
24018cf2:	681b      	ldr	r3, [r3, #0]
24018cf4:	4a04      	ldr	r2, [pc, #16]	@ (24018d08 <HAL_RCCEx_CRSSoftwareSynchronizationGenerate+0x1c>)
24018cf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
24018cfa:	6013      	str	r3, [r2, #0]
}
24018cfc:	bf00      	nop
24018cfe:	46bd      	mov	sp, r7
24018d00:	f85d 7b04 	ldr.w	r7, [sp], #4
24018d04:	4770      	bx	lr
24018d06:	bf00      	nop
24018d08:	40008400 	.word	0x40008400

24018d0c <HAL_RCCEx_CRSGetSynchronizationInfo>:
  * @brief  Return synchronization info
  * @param  pSynchroInfo Pointer on RCC_CRSSynchroInfoTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSGetSynchronizationInfo(RCC_CRSSynchroInfoTypeDef *pSynchroInfo)
{
24018d0c:	b480      	push	{r7}
24018d0e:	b083      	sub	sp, #12
24018d10:	af00      	add	r7, sp, #0
24018d12:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(pSynchroInfo != (void *)NULL);

  /* Get the reload value */
  pSynchroInfo->ReloadValue = (uint32_t)(READ_BIT(CRS->CFGR, CRS_CFGR_RELOAD));
24018d14:	4b0e      	ldr	r3, [pc, #56]	@ (24018d50 <HAL_RCCEx_CRSGetSynchronizationInfo+0x44>)
24018d16:	685b      	ldr	r3, [r3, #4]
24018d18:	b29a      	uxth	r2, r3
24018d1a:	687b      	ldr	r3, [r7, #4]
24018d1c:	601a      	str	r2, [r3, #0]

  /* Get HSI48 oscillator smooth trimming */
  pSynchroInfo->HSI48CalibrationValue = (uint32_t)(READ_BIT(CRS->CR, CRS_CR_TRIM) >> CRS_CR_TRIM_Pos);
24018d1e:	4b0c      	ldr	r3, [pc, #48]	@ (24018d50 <HAL_RCCEx_CRSGetSynchronizationInfo+0x44>)
24018d20:	681b      	ldr	r3, [r3, #0]
24018d22:	0a1b      	lsrs	r3, r3, #8
24018d24:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
24018d28:	687b      	ldr	r3, [r7, #4]
24018d2a:	605a      	str	r2, [r3, #4]

  /* Get Frequency error capture */
  pSynchroInfo->FreqErrorCapture = (uint32_t)(READ_BIT(CRS->ISR, CRS_ISR_FECAP) >> CRS_ISR_FECAP_Pos);
24018d2c:	4b08      	ldr	r3, [pc, #32]	@ (24018d50 <HAL_RCCEx_CRSGetSynchronizationInfo+0x44>)
24018d2e:	689b      	ldr	r3, [r3, #8]
24018d30:	0c1b      	lsrs	r3, r3, #16
24018d32:	b29a      	uxth	r2, r3
24018d34:	687b      	ldr	r3, [r7, #4]
24018d36:	609a      	str	r2, [r3, #8]

  /* Get Frequency error direction */
  pSynchroInfo->FreqErrorDirection = (uint32_t)(READ_BIT(CRS->ISR, CRS_ISR_FEDIR));
24018d38:	4b05      	ldr	r3, [pc, #20]	@ (24018d50 <HAL_RCCEx_CRSGetSynchronizationInfo+0x44>)
24018d3a:	689b      	ldr	r3, [r3, #8]
24018d3c:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
24018d40:	687b      	ldr	r3, [r7, #4]
24018d42:	60da      	str	r2, [r3, #12]
}
24018d44:	bf00      	nop
24018d46:	370c      	adds	r7, #12
24018d48:	46bd      	mov	sp, r7
24018d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
24018d4e:	4770      	bx	lr
24018d50:	40008400 	.word	0x40008400

24018d54 <HAL_RCCEx_CRSWaitSynchronization>:
*            @arg @ref RCC_CRS_SYNCERR
*            @arg @ref RCC_CRS_SYNCMISS
*            @arg @ref RCC_CRS_TRIMOVF
*/
uint32_t HAL_RCCEx_CRSWaitSynchronization(uint32_t Timeout)
{
24018d54:	b580      	push	{r7, lr}
24018d56:	b084      	sub	sp, #16
24018d58:	af00      	add	r7, sp, #0
24018d5a:	6078      	str	r0, [r7, #4]
  uint32_t crsstatus = RCC_CRS_NONE;
24018d5c:	2300      	movs	r3, #0
24018d5e:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Get time-out */
  tickstart = HAL_GetTick();
24018d60:	f7e9 ffc6 	bl	24002cf0 <HAL_GetTick>
24018d64:	60b8      	str	r0, [r7, #8]

  /* Wait for CRS flag or time-out detection */
  do
  {
    if (Timeout != HAL_MAX_DELAY)
24018d66:	687b      	ldr	r3, [r7, #4]
24018d68:	f1b3 3fff 	cmp.w	r3, #4294967295
24018d6c:	d00c      	beq.n	24018d88 <HAL_RCCEx_CRSWaitSynchronization+0x34>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
24018d6e:	f7e9 ffbf 	bl	24002cf0 <HAL_GetTick>
24018d72:	4602      	mov	r2, r0
24018d74:	68bb      	ldr	r3, [r7, #8]
24018d76:	1ad3      	subs	r3, r2, r3
24018d78:	687a      	ldr	r2, [r7, #4]
24018d7a:	429a      	cmp	r2, r3
24018d7c:	d302      	bcc.n	24018d84 <HAL_RCCEx_CRSWaitSynchronization+0x30>
24018d7e:	687b      	ldr	r3, [r7, #4]
24018d80:	2b00      	cmp	r3, #0
24018d82:	d101      	bne.n	24018d88 <HAL_RCCEx_CRSWaitSynchronization+0x34>
      {
        crsstatus = RCC_CRS_TIMEOUT;
24018d84:	2301      	movs	r3, #1
24018d86:	60fb      	str	r3, [r7, #12]
      }
    }
    /* Check CRS SYNCOK flag  */
    if (__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_SYNCOK))
24018d88:	4b2a      	ldr	r3, [pc, #168]	@ (24018e34 <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
24018d8a:	689b      	ldr	r3, [r3, #8]
24018d8c:	f003 0301 	and.w	r3, r3, #1
24018d90:	2b01      	cmp	r3, #1
24018d92:	d106      	bne.n	24018da2 <HAL_RCCEx_CRSWaitSynchronization+0x4e>
    {
      /* CRS SYNC event OK */
      crsstatus |= RCC_CRS_SYNCOK;
24018d94:	68fb      	ldr	r3, [r7, #12]
24018d96:	f043 0302 	orr.w	r3, r3, #2
24018d9a:	60fb      	str	r3, [r7, #12]

      /* Clear CRS SYNC event OK bit */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_SYNCOK);
24018d9c:	4b25      	ldr	r3, [pc, #148]	@ (24018e34 <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
24018d9e:	2201      	movs	r2, #1
24018da0:	60da      	str	r2, [r3, #12]
    }

    /* Check CRS SYNCWARN flag  */
    if (__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_SYNCWARN))
24018da2:	4b24      	ldr	r3, [pc, #144]	@ (24018e34 <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
24018da4:	689b      	ldr	r3, [r3, #8]
24018da6:	f003 0302 	and.w	r3, r3, #2
24018daa:	2b02      	cmp	r3, #2
24018dac:	d106      	bne.n	24018dbc <HAL_RCCEx_CRSWaitSynchronization+0x68>
    {
      /* CRS SYNC warning */
      crsstatus |= RCC_CRS_SYNCWARN;
24018dae:	68fb      	ldr	r3, [r7, #12]
24018db0:	f043 0304 	orr.w	r3, r3, #4
24018db4:	60fb      	str	r3, [r7, #12]

      /* Clear CRS SYNCWARN bit */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_SYNCWARN);
24018db6:	4b1f      	ldr	r3, [pc, #124]	@ (24018e34 <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
24018db8:	2202      	movs	r2, #2
24018dba:	60da      	str	r2, [r3, #12]
    }

    /* Check CRS TRIM overflow flag  */
    if (__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_TRIMOVF))
24018dbc:	4b1d      	ldr	r3, [pc, #116]	@ (24018e34 <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
24018dbe:	689b      	ldr	r3, [r3, #8]
24018dc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
24018dc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
24018dc8:	d106      	bne.n	24018dd8 <HAL_RCCEx_CRSWaitSynchronization+0x84>
    {
      /* CRS SYNC Error */
      crsstatus |= RCC_CRS_TRIMOVF;
24018dca:	68fb      	ldr	r3, [r7, #12]
24018dcc:	f043 0320 	orr.w	r3, r3, #32
24018dd0:	60fb      	str	r3, [r7, #12]

      /* Clear CRS Error bit */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_TRIMOVF);
24018dd2:	4b18      	ldr	r3, [pc, #96]	@ (24018e34 <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
24018dd4:	2204      	movs	r2, #4
24018dd6:	60da      	str	r2, [r3, #12]
    }

    /* Check CRS Error flag  */
    if (__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_SYNCERR))
24018dd8:	4b16      	ldr	r3, [pc, #88]	@ (24018e34 <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
24018dda:	689b      	ldr	r3, [r3, #8]
24018ddc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
24018de0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
24018de4:	d106      	bne.n	24018df4 <HAL_RCCEx_CRSWaitSynchronization+0xa0>
    {
      /* CRS SYNC Error */
      crsstatus |= RCC_CRS_SYNCERR;
24018de6:	68fb      	ldr	r3, [r7, #12]
24018de8:	f043 0308 	orr.w	r3, r3, #8
24018dec:	60fb      	str	r3, [r7, #12]

      /* Clear CRS Error bit */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_SYNCERR);
24018dee:	4b11      	ldr	r3, [pc, #68]	@ (24018e34 <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
24018df0:	2204      	movs	r2, #4
24018df2:	60da      	str	r2, [r3, #12]
    }

    /* Check CRS SYNC Missed flag  */
    if (__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_SYNCMISS))
24018df4:	4b0f      	ldr	r3, [pc, #60]	@ (24018e34 <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
24018df6:	689b      	ldr	r3, [r3, #8]
24018df8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
24018dfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
24018e00:	d106      	bne.n	24018e10 <HAL_RCCEx_CRSWaitSynchronization+0xbc>
    {
      /* CRS SYNC Missed */
      crsstatus |= RCC_CRS_SYNCMISS;
24018e02:	68fb      	ldr	r3, [r7, #12]
24018e04:	f043 0310 	orr.w	r3, r3, #16
24018e08:	60fb      	str	r3, [r7, #12]

      /* Clear CRS SYNC Missed bit */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_SYNCMISS);
24018e0a:	4b0a      	ldr	r3, [pc, #40]	@ (24018e34 <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
24018e0c:	2204      	movs	r2, #4
24018e0e:	60da      	str	r2, [r3, #12]
    }

    /* Check CRS Expected SYNC flag  */
    if (__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_ESYNC))
24018e10:	4b08      	ldr	r3, [pc, #32]	@ (24018e34 <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
24018e12:	689b      	ldr	r3, [r3, #8]
24018e14:	f003 0308 	and.w	r3, r3, #8
24018e18:	2b08      	cmp	r3, #8
24018e1a:	d102      	bne.n	24018e22 <HAL_RCCEx_CRSWaitSynchronization+0xce>
    {
      /* frequency error counter reached a zero value */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_ESYNC);
24018e1c:	4b05      	ldr	r3, [pc, #20]	@ (24018e34 <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
24018e1e:	2208      	movs	r2, #8
24018e20:	60da      	str	r2, [r3, #12]
    }
  }
  while (RCC_CRS_NONE == crsstatus);
24018e22:	68fb      	ldr	r3, [r7, #12]
24018e24:	2b00      	cmp	r3, #0
24018e26:	d09e      	beq.n	24018d66 <HAL_RCCEx_CRSWaitSynchronization+0x12>

  return crsstatus;
24018e28:	68fb      	ldr	r3, [r7, #12]
}
24018e2a:	4618      	mov	r0, r3
24018e2c:	3710      	adds	r7, #16
24018e2e:	46bd      	mov	sp, r7
24018e30:	bd80      	pop	{r7, pc}
24018e32:	bf00      	nop
24018e34:	40008400 	.word	0x40008400

24018e38 <HAL_RCCEx_CRS_IRQHandler>:
/**
  * @brief Handle the Clock Recovery System interrupt request.
  * @retval None
  */
void HAL_RCCEx_CRS_IRQHandler(void)
{
24018e38:	b580      	push	{r7, lr}
24018e3a:	b084      	sub	sp, #16
24018e3c:	af00      	add	r7, sp, #0
  uint32_t crserror = RCC_CRS_NONE;
24018e3e:	2300      	movs	r3, #0
24018e40:	60fb      	str	r3, [r7, #12]
  /* Get current IT flags and IT sources values */
  uint32_t itflags = READ_REG(CRS->ISR);
24018e42:	4b33      	ldr	r3, [pc, #204]	@ (24018f10 <HAL_RCCEx_CRS_IRQHandler+0xd8>)
24018e44:	689b      	ldr	r3, [r3, #8]
24018e46:	60bb      	str	r3, [r7, #8]
  uint32_t itsources = READ_REG(CRS->CR);
24018e48:	4b31      	ldr	r3, [pc, #196]	@ (24018f10 <HAL_RCCEx_CRS_IRQHandler+0xd8>)
24018e4a:	681b      	ldr	r3, [r3, #0]
24018e4c:	607b      	str	r3, [r7, #4]

  /* Check CRS SYNCOK flag  */
  if (((itflags & RCC_CRS_FLAG_SYNCOK) != 0U) && ((itsources & RCC_CRS_IT_SYNCOK) != 0U))
24018e4e:	68bb      	ldr	r3, [r7, #8]
24018e50:	f003 0301 	and.w	r3, r3, #1
24018e54:	2b00      	cmp	r3, #0
24018e56:	d00a      	beq.n	24018e6e <HAL_RCCEx_CRS_IRQHandler+0x36>
24018e58:	687b      	ldr	r3, [r7, #4]
24018e5a:	f003 0301 	and.w	r3, r3, #1
24018e5e:	2b00      	cmp	r3, #0
24018e60:	d005      	beq.n	24018e6e <HAL_RCCEx_CRS_IRQHandler+0x36>
  {
    /* Clear CRS SYNC event OK flag */
    WRITE_REG(CRS->ICR, CRS_ICR_SYNCOKC);
24018e62:	4b2b      	ldr	r3, [pc, #172]	@ (24018f10 <HAL_RCCEx_CRS_IRQHandler+0xd8>)
24018e64:	2201      	movs	r2, #1
24018e66:	60da      	str	r2, [r3, #12]

    /* user callback */
    HAL_RCCEx_CRS_SyncOkCallback();
24018e68:	f000 f854 	bl	24018f14 <HAL_RCCEx_CRS_SyncOkCallback>
24018e6c:	e04b      	b.n	24018f06 <HAL_RCCEx_CRS_IRQHandler+0xce>
  }
  /* Check CRS SYNCWARN flag  */
  else if (((itflags & RCC_CRS_FLAG_SYNCWARN) != 0U) && ((itsources & RCC_CRS_IT_SYNCWARN) != 0U))
24018e6e:	68bb      	ldr	r3, [r7, #8]
24018e70:	f003 0302 	and.w	r3, r3, #2
24018e74:	2b00      	cmp	r3, #0
24018e76:	d00a      	beq.n	24018e8e <HAL_RCCEx_CRS_IRQHandler+0x56>
24018e78:	687b      	ldr	r3, [r7, #4]
24018e7a:	f003 0302 	and.w	r3, r3, #2
24018e7e:	2b00      	cmp	r3, #0
24018e80:	d005      	beq.n	24018e8e <HAL_RCCEx_CRS_IRQHandler+0x56>
  {
    /* Clear CRS SYNCWARN flag */
    WRITE_REG(CRS->ICR, CRS_ICR_SYNCWARNC);
24018e82:	4b23      	ldr	r3, [pc, #140]	@ (24018f10 <HAL_RCCEx_CRS_IRQHandler+0xd8>)
24018e84:	2202      	movs	r2, #2
24018e86:	60da      	str	r2, [r3, #12]

    /* user callback */
    HAL_RCCEx_CRS_SyncWarnCallback();
24018e88:	f000 f84b 	bl	24018f22 <HAL_RCCEx_CRS_SyncWarnCallback>
24018e8c:	e03b      	b.n	24018f06 <HAL_RCCEx_CRS_IRQHandler+0xce>
  }
  /* Check CRS Expected SYNC flag  */
  else if (((itflags & RCC_CRS_FLAG_ESYNC) != 0U) && ((itsources & RCC_CRS_IT_ESYNC) != 0U))
24018e8e:	68bb      	ldr	r3, [r7, #8]
24018e90:	f003 0308 	and.w	r3, r3, #8
24018e94:	2b00      	cmp	r3, #0
24018e96:	d00a      	beq.n	24018eae <HAL_RCCEx_CRS_IRQHandler+0x76>
24018e98:	687b      	ldr	r3, [r7, #4]
24018e9a:	f003 0308 	and.w	r3, r3, #8
24018e9e:	2b00      	cmp	r3, #0
24018ea0:	d005      	beq.n	24018eae <HAL_RCCEx_CRS_IRQHandler+0x76>
  {
    /* frequency error counter reached a zero value */
    WRITE_REG(CRS->ICR, CRS_ICR_ESYNCC);
24018ea2:	4b1b      	ldr	r3, [pc, #108]	@ (24018f10 <HAL_RCCEx_CRS_IRQHandler+0xd8>)
24018ea4:	2208      	movs	r2, #8
24018ea6:	60da      	str	r2, [r3, #12]

    /* user callback */
    HAL_RCCEx_CRS_ExpectedSyncCallback();
24018ea8:	f000 f842 	bl	24018f30 <HAL_RCCEx_CRS_ExpectedSyncCallback>
24018eac:	e02b      	b.n	24018f06 <HAL_RCCEx_CRS_IRQHandler+0xce>
  }
  /* Check CRS Error flags  */
  else
  {
    if (((itflags & RCC_CRS_FLAG_ERR) != 0U) && ((itsources & RCC_CRS_IT_ERR) != 0U))
24018eae:	68bb      	ldr	r3, [r7, #8]
24018eb0:	f003 0304 	and.w	r3, r3, #4
24018eb4:	2b00      	cmp	r3, #0
24018eb6:	d026      	beq.n	24018f06 <HAL_RCCEx_CRS_IRQHandler+0xce>
24018eb8:	687b      	ldr	r3, [r7, #4]
24018eba:	f003 0304 	and.w	r3, r3, #4
24018ebe:	2b00      	cmp	r3, #0
24018ec0:	d021      	beq.n	24018f06 <HAL_RCCEx_CRS_IRQHandler+0xce>
    {
      if ((itflags & RCC_CRS_FLAG_SYNCERR) != 0U)
24018ec2:	68bb      	ldr	r3, [r7, #8]
24018ec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
24018ec8:	2b00      	cmp	r3, #0
24018eca:	d003      	beq.n	24018ed4 <HAL_RCCEx_CRS_IRQHandler+0x9c>
      {
        crserror |= RCC_CRS_SYNCERR;
24018ecc:	68fb      	ldr	r3, [r7, #12]
24018ece:	f043 0308 	orr.w	r3, r3, #8
24018ed2:	60fb      	str	r3, [r7, #12]
      }
      if ((itflags & RCC_CRS_FLAG_SYNCMISS) != 0U)
24018ed4:	68bb      	ldr	r3, [r7, #8]
24018ed6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
24018eda:	2b00      	cmp	r3, #0
24018edc:	d003      	beq.n	24018ee6 <HAL_RCCEx_CRS_IRQHandler+0xae>
      {
        crserror |= RCC_CRS_SYNCMISS;
24018ede:	68fb      	ldr	r3, [r7, #12]
24018ee0:	f043 0310 	orr.w	r3, r3, #16
24018ee4:	60fb      	str	r3, [r7, #12]
      }
      if ((itflags & RCC_CRS_FLAG_TRIMOVF) != 0U)
24018ee6:	68bb      	ldr	r3, [r7, #8]
24018ee8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
24018eec:	2b00      	cmp	r3, #0
24018eee:	d003      	beq.n	24018ef8 <HAL_RCCEx_CRS_IRQHandler+0xc0>
      {
        crserror |= RCC_CRS_TRIMOVF;
24018ef0:	68fb      	ldr	r3, [r7, #12]
24018ef2:	f043 0320 	orr.w	r3, r3, #32
24018ef6:	60fb      	str	r3, [r7, #12]
      }

      /* Clear CRS Error flags */
      WRITE_REG(CRS->ICR, CRS_ICR_ERRC);
24018ef8:	4b05      	ldr	r3, [pc, #20]	@ (24018f10 <HAL_RCCEx_CRS_IRQHandler+0xd8>)
24018efa:	2204      	movs	r2, #4
24018efc:	60da      	str	r2, [r3, #12]

      /* user error callback */
      HAL_RCCEx_CRS_ErrorCallback(crserror);
24018efe:	68f8      	ldr	r0, [r7, #12]
24018f00:	f000 f81d 	bl	24018f3e <HAL_RCCEx_CRS_ErrorCallback>
    }
  }
}
24018f04:	e7ff      	b.n	24018f06 <HAL_RCCEx_CRS_IRQHandler+0xce>
24018f06:	bf00      	nop
24018f08:	3710      	adds	r7, #16
24018f0a:	46bd      	mov	sp, r7
24018f0c:	bd80      	pop	{r7, pc}
24018f0e:	bf00      	nop
24018f10:	40008400 	.word	0x40008400

24018f14 <HAL_RCCEx_CRS_SyncOkCallback>:
/**
  * @brief  RCCEx Clock Recovery System SYNCOK interrupt callback.
  * @retval none
  */
__weak void HAL_RCCEx_CRS_SyncOkCallback(void)
{
24018f14:	b480      	push	{r7}
24018f16:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_CRS_SyncOkCallback should be implemented in the user file
   */
}
24018f18:	bf00      	nop
24018f1a:	46bd      	mov	sp, r7
24018f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
24018f20:	4770      	bx	lr

24018f22 <HAL_RCCEx_CRS_SyncWarnCallback>:
/**
  * @brief  RCCEx Clock Recovery System SYNCWARN interrupt callback.
  * @retval none
  */
__weak void HAL_RCCEx_CRS_SyncWarnCallback(void)
{
24018f22:	b480      	push	{r7}
24018f24:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_CRS_SyncWarnCallback should be implemented in the user file
   */
}
24018f26:	bf00      	nop
24018f28:	46bd      	mov	sp, r7
24018f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
24018f2e:	4770      	bx	lr

24018f30 <HAL_RCCEx_CRS_ExpectedSyncCallback>:
/**
  * @brief  RCCEx Clock Recovery System Expected SYNC interrupt callback.
  * @retval none
  */
__weak void HAL_RCCEx_CRS_ExpectedSyncCallback(void)
{
24018f30:	b480      	push	{r7}
24018f32:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_CRS_ExpectedSyncCallback should be implemented in the user file
   */
}
24018f34:	bf00      	nop
24018f36:	46bd      	mov	sp, r7
24018f38:	f85d 7b04 	ldr.w	r7, [sp], #4
24018f3c:	4770      	bx	lr

24018f3e <HAL_RCCEx_CRS_ErrorCallback>:
  *           @arg @ref RCC_CRS_SYNCMISS
  *           @arg @ref RCC_CRS_TRIMOVF
  * @retval none
  */
__weak void HAL_RCCEx_CRS_ErrorCallback(uint32_t Error)
{
24018f3e:	b480      	push	{r7}
24018f40:	b083      	sub	sp, #12
24018f42:	af00      	add	r7, sp, #0
24018f44:	6078      	str	r0, [r7, #4]
  UNUSED(Error);

  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_CRS_ErrorCallback should be implemented in the user file
   */
}
24018f46:	bf00      	nop
24018f48:	370c      	adds	r7, #12
24018f4a:	46bd      	mov	sp, r7
24018f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
24018f50:	4770      	bx	lr
	...

24018f54 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
24018f54:	b580      	push	{r7, lr}
24018f56:	b084      	sub	sp, #16
24018f58:	af00      	add	r7, sp, #0
24018f5a:	6078      	str	r0, [r7, #4]
24018f5c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
24018f5e:	2300      	movs	r3, #0
24018f60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
24018f62:	4b53      	ldr	r3, [pc, #332]	@ (240190b0 <RCCEx_PLL2_Config+0x15c>)
24018f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
24018f66:	f003 0303 	and.w	r3, r3, #3
24018f6a:	2b03      	cmp	r3, #3
24018f6c:	d101      	bne.n	24018f72 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
24018f6e:	2301      	movs	r3, #1
24018f70:	e099      	b.n	240190a6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
24018f72:	4b4f      	ldr	r3, [pc, #316]	@ (240190b0 <RCCEx_PLL2_Config+0x15c>)
24018f74:	681b      	ldr	r3, [r3, #0]
24018f76:	4a4e      	ldr	r2, [pc, #312]	@ (240190b0 <RCCEx_PLL2_Config+0x15c>)
24018f78:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
24018f7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
24018f7e:	f7e9 feb7 	bl	24002cf0 <HAL_GetTick>
24018f82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
24018f84:	e008      	b.n	24018f98 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
24018f86:	f7e9 feb3 	bl	24002cf0 <HAL_GetTick>
24018f8a:	4602      	mov	r2, r0
24018f8c:	68bb      	ldr	r3, [r7, #8]
24018f8e:	1ad3      	subs	r3, r2, r3
24018f90:	2b02      	cmp	r3, #2
24018f92:	d901      	bls.n	24018f98 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
24018f94:	2303      	movs	r3, #3
24018f96:	e086      	b.n	240190a6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
24018f98:	4b45      	ldr	r3, [pc, #276]	@ (240190b0 <RCCEx_PLL2_Config+0x15c>)
24018f9a:	681b      	ldr	r3, [r3, #0]
24018f9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
24018fa0:	2b00      	cmp	r3, #0
24018fa2:	d1f0      	bne.n	24018f86 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
24018fa4:	4b42      	ldr	r3, [pc, #264]	@ (240190b0 <RCCEx_PLL2_Config+0x15c>)
24018fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
24018fa8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
24018fac:	687b      	ldr	r3, [r7, #4]
24018fae:	681b      	ldr	r3, [r3, #0]
24018fb0:	031b      	lsls	r3, r3, #12
24018fb2:	493f      	ldr	r1, [pc, #252]	@ (240190b0 <RCCEx_PLL2_Config+0x15c>)
24018fb4:	4313      	orrs	r3, r2
24018fb6:	628b      	str	r3, [r1, #40]	@ 0x28
24018fb8:	687b      	ldr	r3, [r7, #4]
24018fba:	685b      	ldr	r3, [r3, #4]
24018fbc:	3b01      	subs	r3, #1
24018fbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
24018fc2:	687b      	ldr	r3, [r7, #4]
24018fc4:	689b      	ldr	r3, [r3, #8]
24018fc6:	3b01      	subs	r3, #1
24018fc8:	025b      	lsls	r3, r3, #9
24018fca:	b29b      	uxth	r3, r3
24018fcc:	431a      	orrs	r2, r3
24018fce:	687b      	ldr	r3, [r7, #4]
24018fd0:	68db      	ldr	r3, [r3, #12]
24018fd2:	3b01      	subs	r3, #1
24018fd4:	041b      	lsls	r3, r3, #16
24018fd6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
24018fda:	431a      	orrs	r2, r3
24018fdc:	687b      	ldr	r3, [r7, #4]
24018fde:	691b      	ldr	r3, [r3, #16]
24018fe0:	3b01      	subs	r3, #1
24018fe2:	061b      	lsls	r3, r3, #24
24018fe4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
24018fe8:	4931      	ldr	r1, [pc, #196]	@ (240190b0 <RCCEx_PLL2_Config+0x15c>)
24018fea:	4313      	orrs	r3, r2
24018fec:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
24018fee:	4b30      	ldr	r3, [pc, #192]	@ (240190b0 <RCCEx_PLL2_Config+0x15c>)
24018ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
24018ff2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
24018ff6:	687b      	ldr	r3, [r7, #4]
24018ff8:	695b      	ldr	r3, [r3, #20]
24018ffa:	492d      	ldr	r1, [pc, #180]	@ (240190b0 <RCCEx_PLL2_Config+0x15c>)
24018ffc:	4313      	orrs	r3, r2
24018ffe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
24019000:	4b2b      	ldr	r3, [pc, #172]	@ (240190b0 <RCCEx_PLL2_Config+0x15c>)
24019002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
24019004:	f023 0220 	bic.w	r2, r3, #32
24019008:	687b      	ldr	r3, [r7, #4]
2401900a:	699b      	ldr	r3, [r3, #24]
2401900c:	4928      	ldr	r1, [pc, #160]	@ (240190b0 <RCCEx_PLL2_Config+0x15c>)
2401900e:	4313      	orrs	r3, r2
24019010:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
24019012:	4b27      	ldr	r3, [pc, #156]	@ (240190b0 <RCCEx_PLL2_Config+0x15c>)
24019014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
24019016:	4a26      	ldr	r2, [pc, #152]	@ (240190b0 <RCCEx_PLL2_Config+0x15c>)
24019018:	f023 0310 	bic.w	r3, r3, #16
2401901c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
2401901e:	4b24      	ldr	r3, [pc, #144]	@ (240190b0 <RCCEx_PLL2_Config+0x15c>)
24019020:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
24019022:	4b24      	ldr	r3, [pc, #144]	@ (240190b4 <RCCEx_PLL2_Config+0x160>)
24019024:	4013      	ands	r3, r2
24019026:	687a      	ldr	r2, [r7, #4]
24019028:	69d2      	ldr	r2, [r2, #28]
2401902a:	00d2      	lsls	r2, r2, #3
2401902c:	4920      	ldr	r1, [pc, #128]	@ (240190b0 <RCCEx_PLL2_Config+0x15c>)
2401902e:	4313      	orrs	r3, r2
24019030:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
24019032:	4b1f      	ldr	r3, [pc, #124]	@ (240190b0 <RCCEx_PLL2_Config+0x15c>)
24019034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
24019036:	4a1e      	ldr	r2, [pc, #120]	@ (240190b0 <RCCEx_PLL2_Config+0x15c>)
24019038:	f043 0310 	orr.w	r3, r3, #16
2401903c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
2401903e:	683b      	ldr	r3, [r7, #0]
24019040:	2b00      	cmp	r3, #0
24019042:	d106      	bne.n	24019052 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
24019044:	4b1a      	ldr	r3, [pc, #104]	@ (240190b0 <RCCEx_PLL2_Config+0x15c>)
24019046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
24019048:	4a19      	ldr	r2, [pc, #100]	@ (240190b0 <RCCEx_PLL2_Config+0x15c>)
2401904a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
2401904e:	62d3      	str	r3, [r2, #44]	@ 0x2c
24019050:	e00f      	b.n	24019072 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
24019052:	683b      	ldr	r3, [r7, #0]
24019054:	2b01      	cmp	r3, #1
24019056:	d106      	bne.n	24019066 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
24019058:	4b15      	ldr	r3, [pc, #84]	@ (240190b0 <RCCEx_PLL2_Config+0x15c>)
2401905a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2401905c:	4a14      	ldr	r2, [pc, #80]	@ (240190b0 <RCCEx_PLL2_Config+0x15c>)
2401905e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
24019062:	62d3      	str	r3, [r2, #44]	@ 0x2c
24019064:	e005      	b.n	24019072 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
24019066:	4b12      	ldr	r3, [pc, #72]	@ (240190b0 <RCCEx_PLL2_Config+0x15c>)
24019068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2401906a:	4a11      	ldr	r2, [pc, #68]	@ (240190b0 <RCCEx_PLL2_Config+0x15c>)
2401906c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
24019070:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
24019072:	4b0f      	ldr	r3, [pc, #60]	@ (240190b0 <RCCEx_PLL2_Config+0x15c>)
24019074:	681b      	ldr	r3, [r3, #0]
24019076:	4a0e      	ldr	r2, [pc, #56]	@ (240190b0 <RCCEx_PLL2_Config+0x15c>)
24019078:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
2401907c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
2401907e:	f7e9 fe37 	bl	24002cf0 <HAL_GetTick>
24019082:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
24019084:	e008      	b.n	24019098 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
24019086:	f7e9 fe33 	bl	24002cf0 <HAL_GetTick>
2401908a:	4602      	mov	r2, r0
2401908c:	68bb      	ldr	r3, [r7, #8]
2401908e:	1ad3      	subs	r3, r2, r3
24019090:	2b02      	cmp	r3, #2
24019092:	d901      	bls.n	24019098 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
24019094:	2303      	movs	r3, #3
24019096:	e006      	b.n	240190a6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
24019098:	4b05      	ldr	r3, [pc, #20]	@ (240190b0 <RCCEx_PLL2_Config+0x15c>)
2401909a:	681b      	ldr	r3, [r3, #0]
2401909c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
240190a0:	2b00      	cmp	r3, #0
240190a2:	d0f0      	beq.n	24019086 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
240190a4:	7bfb      	ldrb	r3, [r7, #15]
}
240190a6:	4618      	mov	r0, r3
240190a8:	3710      	adds	r7, #16
240190aa:	46bd      	mov	sp, r7
240190ac:	bd80      	pop	{r7, pc}
240190ae:	bf00      	nop
240190b0:	58024400 	.word	0x58024400
240190b4:	ffff0007 	.word	0xffff0007

240190b8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
240190b8:	b580      	push	{r7, lr}
240190ba:	b084      	sub	sp, #16
240190bc:	af00      	add	r7, sp, #0
240190be:	6078      	str	r0, [r7, #4]
240190c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
240190c2:	2300      	movs	r3, #0
240190c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
240190c6:	4b53      	ldr	r3, [pc, #332]	@ (24019214 <RCCEx_PLL3_Config+0x15c>)
240190c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
240190ca:	f003 0303 	and.w	r3, r3, #3
240190ce:	2b03      	cmp	r3, #3
240190d0:	d101      	bne.n	240190d6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
240190d2:	2301      	movs	r3, #1
240190d4:	e099      	b.n	2401920a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
240190d6:	4b4f      	ldr	r3, [pc, #316]	@ (24019214 <RCCEx_PLL3_Config+0x15c>)
240190d8:	681b      	ldr	r3, [r3, #0]
240190da:	4a4e      	ldr	r2, [pc, #312]	@ (24019214 <RCCEx_PLL3_Config+0x15c>)
240190dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
240190e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
240190e2:	f7e9 fe05 	bl	24002cf0 <HAL_GetTick>
240190e6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
240190e8:	e008      	b.n	240190fc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
240190ea:	f7e9 fe01 	bl	24002cf0 <HAL_GetTick>
240190ee:	4602      	mov	r2, r0
240190f0:	68bb      	ldr	r3, [r7, #8]
240190f2:	1ad3      	subs	r3, r2, r3
240190f4:	2b02      	cmp	r3, #2
240190f6:	d901      	bls.n	240190fc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
240190f8:	2303      	movs	r3, #3
240190fa:	e086      	b.n	2401920a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
240190fc:	4b45      	ldr	r3, [pc, #276]	@ (24019214 <RCCEx_PLL3_Config+0x15c>)
240190fe:	681b      	ldr	r3, [r3, #0]
24019100:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
24019104:	2b00      	cmp	r3, #0
24019106:	d1f0      	bne.n	240190ea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
24019108:	4b42      	ldr	r3, [pc, #264]	@ (24019214 <RCCEx_PLL3_Config+0x15c>)
2401910a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
2401910c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
24019110:	687b      	ldr	r3, [r7, #4]
24019112:	681b      	ldr	r3, [r3, #0]
24019114:	051b      	lsls	r3, r3, #20
24019116:	493f      	ldr	r1, [pc, #252]	@ (24019214 <RCCEx_PLL3_Config+0x15c>)
24019118:	4313      	orrs	r3, r2
2401911a:	628b      	str	r3, [r1, #40]	@ 0x28
2401911c:	687b      	ldr	r3, [r7, #4]
2401911e:	685b      	ldr	r3, [r3, #4]
24019120:	3b01      	subs	r3, #1
24019122:	f3c3 0208 	ubfx	r2, r3, #0, #9
24019126:	687b      	ldr	r3, [r7, #4]
24019128:	689b      	ldr	r3, [r3, #8]
2401912a:	3b01      	subs	r3, #1
2401912c:	025b      	lsls	r3, r3, #9
2401912e:	b29b      	uxth	r3, r3
24019130:	431a      	orrs	r2, r3
24019132:	687b      	ldr	r3, [r7, #4]
24019134:	68db      	ldr	r3, [r3, #12]
24019136:	3b01      	subs	r3, #1
24019138:	041b      	lsls	r3, r3, #16
2401913a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
2401913e:	431a      	orrs	r2, r3
24019140:	687b      	ldr	r3, [r7, #4]
24019142:	691b      	ldr	r3, [r3, #16]
24019144:	3b01      	subs	r3, #1
24019146:	061b      	lsls	r3, r3, #24
24019148:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
2401914c:	4931      	ldr	r1, [pc, #196]	@ (24019214 <RCCEx_PLL3_Config+0x15c>)
2401914e:	4313      	orrs	r3, r2
24019150:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
24019152:	4b30      	ldr	r3, [pc, #192]	@ (24019214 <RCCEx_PLL3_Config+0x15c>)
24019154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
24019156:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
2401915a:	687b      	ldr	r3, [r7, #4]
2401915c:	695b      	ldr	r3, [r3, #20]
2401915e:	492d      	ldr	r1, [pc, #180]	@ (24019214 <RCCEx_PLL3_Config+0x15c>)
24019160:	4313      	orrs	r3, r2
24019162:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
24019164:	4b2b      	ldr	r3, [pc, #172]	@ (24019214 <RCCEx_PLL3_Config+0x15c>)
24019166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
24019168:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
2401916c:	687b      	ldr	r3, [r7, #4]
2401916e:	699b      	ldr	r3, [r3, #24]
24019170:	4928      	ldr	r1, [pc, #160]	@ (24019214 <RCCEx_PLL3_Config+0x15c>)
24019172:	4313      	orrs	r3, r2
24019174:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
24019176:	4b27      	ldr	r3, [pc, #156]	@ (24019214 <RCCEx_PLL3_Config+0x15c>)
24019178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2401917a:	4a26      	ldr	r2, [pc, #152]	@ (24019214 <RCCEx_PLL3_Config+0x15c>)
2401917c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
24019180:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
24019182:	4b24      	ldr	r3, [pc, #144]	@ (24019214 <RCCEx_PLL3_Config+0x15c>)
24019184:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
24019186:	4b24      	ldr	r3, [pc, #144]	@ (24019218 <RCCEx_PLL3_Config+0x160>)
24019188:	4013      	ands	r3, r2
2401918a:	687a      	ldr	r2, [r7, #4]
2401918c:	69d2      	ldr	r2, [r2, #28]
2401918e:	00d2      	lsls	r2, r2, #3
24019190:	4920      	ldr	r1, [pc, #128]	@ (24019214 <RCCEx_PLL3_Config+0x15c>)
24019192:	4313      	orrs	r3, r2
24019194:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
24019196:	4b1f      	ldr	r3, [pc, #124]	@ (24019214 <RCCEx_PLL3_Config+0x15c>)
24019198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2401919a:	4a1e      	ldr	r2, [pc, #120]	@ (24019214 <RCCEx_PLL3_Config+0x15c>)
2401919c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
240191a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
240191a2:	683b      	ldr	r3, [r7, #0]
240191a4:	2b00      	cmp	r3, #0
240191a6:	d106      	bne.n	240191b6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
240191a8:	4b1a      	ldr	r3, [pc, #104]	@ (24019214 <RCCEx_PLL3_Config+0x15c>)
240191aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
240191ac:	4a19      	ldr	r2, [pc, #100]	@ (24019214 <RCCEx_PLL3_Config+0x15c>)
240191ae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
240191b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
240191b4:	e00f      	b.n	240191d6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
240191b6:	683b      	ldr	r3, [r7, #0]
240191b8:	2b01      	cmp	r3, #1
240191ba:	d106      	bne.n	240191ca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
240191bc:	4b15      	ldr	r3, [pc, #84]	@ (24019214 <RCCEx_PLL3_Config+0x15c>)
240191be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
240191c0:	4a14      	ldr	r2, [pc, #80]	@ (24019214 <RCCEx_PLL3_Config+0x15c>)
240191c2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
240191c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
240191c8:	e005      	b.n	240191d6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
240191ca:	4b12      	ldr	r3, [pc, #72]	@ (24019214 <RCCEx_PLL3_Config+0x15c>)
240191cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
240191ce:	4a11      	ldr	r2, [pc, #68]	@ (24019214 <RCCEx_PLL3_Config+0x15c>)
240191d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
240191d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
240191d6:	4b0f      	ldr	r3, [pc, #60]	@ (24019214 <RCCEx_PLL3_Config+0x15c>)
240191d8:	681b      	ldr	r3, [r3, #0]
240191da:	4a0e      	ldr	r2, [pc, #56]	@ (24019214 <RCCEx_PLL3_Config+0x15c>)
240191dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
240191e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
240191e2:	f7e9 fd85 	bl	24002cf0 <HAL_GetTick>
240191e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
240191e8:	e008      	b.n	240191fc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
240191ea:	f7e9 fd81 	bl	24002cf0 <HAL_GetTick>
240191ee:	4602      	mov	r2, r0
240191f0:	68bb      	ldr	r3, [r7, #8]
240191f2:	1ad3      	subs	r3, r2, r3
240191f4:	2b02      	cmp	r3, #2
240191f6:	d901      	bls.n	240191fc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
240191f8:	2303      	movs	r3, #3
240191fa:	e006      	b.n	2401920a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
240191fc:	4b05      	ldr	r3, [pc, #20]	@ (24019214 <RCCEx_PLL3_Config+0x15c>)
240191fe:	681b      	ldr	r3, [r3, #0]
24019200:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
24019204:	2b00      	cmp	r3, #0
24019206:	d0f0      	beq.n	240191ea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
24019208:	7bfb      	ldrb	r3, [r7, #15]
}
2401920a:	4618      	mov	r0, r3
2401920c:	3710      	adds	r7, #16
2401920e:	46bd      	mov	sp, r7
24019210:	bd80      	pop	{r7, pc}
24019212:	bf00      	nop
24019214:	58024400 	.word	0x58024400
24019218:	ffff0007 	.word	0xffff0007

2401921c <HAL_RCCEx_LSECSS_IRQHandler>:
/**
  * @brief Handle the RCC LSE Clock Security System interrupt request.
  * @retval None
  */
void HAL_RCCEx_LSECSS_IRQHandler(void)
{
2401921c:	b580      	push	{r7, lr}
2401921e:	af00      	add	r7, sp, #0
  /* Check RCC LSE CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_LSECSS))
24019220:	4b07      	ldr	r3, [pc, #28]	@ (24019240 <HAL_RCCEx_LSECSS_IRQHandler+0x24>)
24019222:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
24019224:	f403 7300 	and.w	r3, r3, #512	@ 0x200
24019228:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
2401922c:	d105      	bne.n	2401923a <HAL_RCCEx_LSECSS_IRQHandler+0x1e>
  {

    /* Clear RCC LSE CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_LSECSS);
2401922e:	4b04      	ldr	r3, [pc, #16]	@ (24019240 <HAL_RCCEx_LSECSS_IRQHandler+0x24>)
24019230:	f44f 7200 	mov.w	r2, #512	@ 0x200
24019234:	669a      	str	r2, [r3, #104]	@ 0x68

    /* RCC LSE Clock Security System interrupt user callback */
    HAL_RCCEx_LSECSS_Callback();
24019236:	f000 f805 	bl	24019244 <HAL_RCCEx_LSECSS_Callback>

  }
}
2401923a:	bf00      	nop
2401923c:	bd80      	pop	{r7, pc}
2401923e:	bf00      	nop
24019240:	58024400 	.word	0x58024400

24019244 <HAL_RCCEx_LSECSS_Callback>:
/**
  * @brief  RCCEx LSE Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCCEx_LSECSS_Callback(void)
{
24019244:	b480      	push	{r7}
24019246:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_LSECSS_Callback should be implemented in the user file
  */
}
24019248:	bf00      	nop
2401924a:	46bd      	mov	sp, r7
2401924c:	f85d 7b04 	ldr.w	r7, [sp], #4
24019250:	4770      	bx	lr

24019252 <apInit>:

STR _str, _str2;


void apInit(void)
{
24019252:	b580      	push	{r7, lr}
24019254:	af00      	add	r7, sp, #0
//	apSwitchInit();
//	apQspiInit();
	apCustomLoaderInit();
24019256:	f000 fa07 	bl	24019668 <apCustomLoaderInit>
}
2401925a:	bf00      	nop
2401925c:	bd80      	pop	{r7, pc}

2401925e <apMain>:

void apMain(void)
{
2401925e:	b480      	push	{r7}
24019260:	af00      	add	r7, sp, #0
	while(true)
24019262:	bf00      	nop
24019264:	e7fd      	b.n	24019262 <apMain+0x4>
	...

24019268 <Init>:
 * @param  None
 * @retval  LOADER_OK = 1   : Operation succeeded
 * @retval  LOADER_FAIL = 0 : Operation failed
 */
int Init(void)
{
24019268:	b580      	push	{r7, lr}
2401926a:	b082      	sub	sp, #8
2401926c:	af00      	add	r7, sp, #0
    *(uint32_t*)0xE000EDF0 = 0xA05F0000; //enable interrupts in debug
2401926e:	4b1b      	ldr	r3, [pc, #108]	@ (240192dc <Init+0x74>)
24019270:	4a1b      	ldr	r2, [pc, #108]	@ (240192e0 <Init+0x78>)
24019272:	601a      	str	r2, [r3, #0]

    SystemInit();
24019274:	f001 f912 	bl	2401a49c <SystemInit>
     * change VTOR setting for other devices
     * SCB->VTOR = 0x20000000 | 0x200;
     *
     * */

    SCB->VTOR = 0x24000000 | 0x200;
24019278:	4b1a      	ldr	r3, [pc, #104]	@ (240192e4 <Init+0x7c>)
2401927a:	4a1b      	ldr	r2, [pc, #108]	@ (240192e8 <Init+0x80>)
2401927c:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
2401927e:	b662      	cpsie	i
}
24019280:	bf00      	nop

    __enable_irq(); //enable interrupts

    HAL_Init();
24019282:	f7e9 fc41 	bl	24002b08 <HAL_Init>

    SystemClock_Config();
24019286:	f000 ff0b 	bl	2401a0a0 <SystemClock_Config>

    MX_GPIO_Init();
2401928a:	f001 fb23 	bl	2401a8d4 <MX_GPIO_Init>

    __HAL_RCC_OSPI1_FORCE_RESET();  //completely reset peripheral
2401928e:	4b17      	ldr	r3, [pc, #92]	@ (240192ec <Init+0x84>)
24019290:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
24019292:	4a16      	ldr	r2, [pc, #88]	@ (240192ec <Init+0x84>)
24019294:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
24019298:	67d3      	str	r3, [r2, #124]	@ 0x7c
    __HAL_RCC_OSPI1_RELEASE_RESET();
2401929a:	4b14      	ldr	r3, [pc, #80]	@ (240192ec <Init+0x84>)
2401929c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
2401929e:	4a13      	ldr	r2, [pc, #76]	@ (240192ec <Init+0x84>)
240192a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
240192a4:	67d3      	str	r3, [r2, #124]	@ 0x7c

    if (CSP_QUADSPI_Init() != HAL_OK)
240192a6:	f000 fa05 	bl	240196b4 <CSP_QUADSPI_Init>
240192aa:	4603      	mov	r3, r0
240192ac:	2b00      	cmp	r3, #0
240192ae:	d001      	beq.n	240192b4 <Init+0x4c>
    {
    	//__disable_irq();  //disable interrupts
        return LOADER_FAIL;
240192b0:	2300      	movs	r3, #0
240192b2:	e00e      	b.n	240192d2 <Init+0x6a>
    }


    if (CSP_QSPI_EnableMemoryMappedMode() != HAL_OK)
240192b4:	f000 faed 	bl	24019892 <CSP_QSPI_EnableMemoryMappedMode>
240192b8:	4603      	mov	r3, r0
240192ba:	2b00      	cmp	r3, #0
240192bc:	d001      	beq.n	240192c2 <Init+0x5a>
    {
    	//__disable_irq(); //disable interrupts
        return LOADER_FAIL;
240192be:	2300      	movs	r3, #0
240192c0:	e007      	b.n	240192d2 <Init+0x6a>
    }

    /*Trigger read access before HAL_QSPI_Abort() otherwise abort functionality gets stuck*/
    uint32_t a = *(uint32_t*) 0x90000000;
240192c2:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
240192c6:	681b      	ldr	r3, [r3, #0]
240192c8:	607b      	str	r3, [r7, #4]
    a++;
240192ca:	687b      	ldr	r3, [r7, #4]
240192cc:	3301      	adds	r3, #1
240192ce:	607b      	str	r3, [r7, #4]

    //__disable_irq(); //disable interrupts
    return LOADER_OK;
240192d0:	2301      	movs	r3, #1
}
240192d2:	4618      	mov	r0, r3
240192d4:	3708      	adds	r7, #8
240192d6:	46bd      	mov	sp, r7
240192d8:	bd80      	pop	{r7, pc}
240192da:	bf00      	nop
240192dc:	e000edf0 	.word	0xe000edf0
240192e0:	a05f0000 	.word	0xa05f0000
240192e4:	e000ed00 	.word	0xe000ed00
240192e8:	24000200 	.word	0x24000200
240192ec:	58024400 	.word	0x58024400

240192f0 <Write>:
 * @param   buffer : pointer to data buffer
 * @retval  LOADER_OK = 1       : Operation succeeded
 * @retval  LOADER_FAIL = 0 : Operation failed
 */
int Write(uint32_t Address, uint32_t Size, uint8_t* buffer)
{
240192f0:	b580      	push	{r7, lr}
240192f2:	b084      	sub	sp, #16
240192f4:	af00      	add	r7, sp, #0
240192f6:	60f8      	str	r0, [r7, #12]
240192f8:	60b9      	str	r1, [r7, #8]
240192fa:	607a      	str	r2, [r7, #4]
  __ASM volatile ("cpsie i" : : : "memory");
240192fc:	b662      	cpsie	i
}
240192fe:	bf00      	nop
	__enable_irq(); //enable interrupts

    if (CSP_QUADSPI_Init() != HAL_OK)
24019300:	f000 f9d8 	bl	240196b4 <CSP_QUADSPI_Init>
24019304:	4603      	mov	r3, r0
24019306:	2b00      	cmp	r3, #0
24019308:	d003      	beq.n	24019312 <Write+0x22>
  __ASM volatile ("cpsid i" : : : "memory");
2401930a:	b672      	cpsid	i
}
2401930c:	bf00      	nop
    {
    	__disable_irq();  //disable interrupts
        return LOADER_FAIL;
2401930e:	2300      	movs	r3, #0
24019310:	e011      	b.n	24019336 <Write+0x46>
    }

    if (CSP_QSPI_WriteMemory((uint8_t*) buffer, (Address & (0x0fffffff)), Size) != HAL_OK)
24019312:	68fb      	ldr	r3, [r7, #12]
24019314:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
24019318:	68ba      	ldr	r2, [r7, #8]
2401931a:	4619      	mov	r1, r3
2401931c:	6878      	ldr	r0, [r7, #4]
2401931e:	f000 fa6f 	bl	24019800 <CSP_QSPI_WriteMemory>
24019322:	4603      	mov	r3, r0
24019324:	2b00      	cmp	r3, #0
24019326:	d003      	beq.n	24019330 <Write+0x40>
  __ASM volatile ("cpsid i" : : : "memory");
24019328:	b672      	cpsid	i
}
2401932a:	bf00      	nop
    {
    	__disable_irq(); //disable interrupts
        return LOADER_FAIL;
2401932c:	2300      	movs	r3, #0
2401932e:	e002      	b.n	24019336 <Write+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
24019330:	b672      	cpsid	i
}
24019332:	bf00      	nop
    }

    __disable_irq(); //disable interrupts
    return LOADER_OK;
24019334:	2301      	movs	r3, #1
}
24019336:	4618      	mov	r0, r3
24019338:	3710      	adds	r7, #16
2401933a:	46bd      	mov	sp, r7
2401933c:	bd80      	pop	{r7, pc}

2401933e <SectorErase>:
 * @param   EraseEndAddress   :  erase end address
 * @retval  LOADER_OK = 1       : Operation succeeded
 * @retval  LOADER_FAIL = 0 : Operation failed
 */
int SectorErase(uint32_t EraseStartAddress, uint32_t EraseEndAddress)
{
2401933e:	b580      	push	{r7, lr}
24019340:	b082      	sub	sp, #8
24019342:	af00      	add	r7, sp, #0
24019344:	6078      	str	r0, [r7, #4]
24019346:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsie i" : : : "memory");
24019348:	b662      	cpsie	i
}
2401934a:	bf00      	nop
	__enable_irq(); //enable interrupts

    if (CSP_QUADSPI_Init() != HAL_OK)
2401934c:	f000 f9b2 	bl	240196b4 <CSP_QUADSPI_Init>
24019350:	4603      	mov	r3, r0
24019352:	2b00      	cmp	r3, #0
24019354:	d003      	beq.n	2401935e <SectorErase+0x20>
  __ASM volatile ("cpsid i" : : : "memory");
24019356:	b672      	cpsid	i
}
24019358:	bf00      	nop
    {
    	__disable_irq();  //disable interrupts
        return LOADER_FAIL;
2401935a:	2300      	movs	r3, #0
2401935c:	e00d      	b.n	2401937a <SectorErase+0x3c>
    }

    if (CSP_QSPI_EraseSector(EraseStartAddress, EraseEndAddress) != HAL_OK)
2401935e:	6839      	ldr	r1, [r7, #0]
24019360:	6878      	ldr	r0, [r7, #4]
24019362:	f000 fa2d 	bl	240197c0 <CSP_QSPI_EraseSector>
24019366:	4603      	mov	r3, r0
24019368:	2b00      	cmp	r3, #0
2401936a:	d003      	beq.n	24019374 <SectorErase+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
2401936c:	b672      	cpsid	i
}
2401936e:	bf00      	nop
    {
    	__disable_irq(); //disable interrupts
        return LOADER_FAIL;
24019370:	2300      	movs	r3, #0
24019372:	e002      	b.n	2401937a <SectorErase+0x3c>
  __ASM volatile ("cpsid i" : : : "memory");
24019374:	b672      	cpsid	i
}
24019376:	bf00      	nop
    }

    __disable_irq(); //disable interrupts
    return LOADER_OK;
24019378:	2301      	movs	r3, #1
}
2401937a:	4618      	mov	r0, r3
2401937c:	3708      	adds	r7, #8
2401937e:	46bd      	mov	sp, r7
24019380:	bd80      	pop	{r7, pc}

24019382 <MassErase>:
 * outputs   :
 *     none
 * Note: Optional for all types of device
 */
int MassErase(void)
{
24019382:	b580      	push	{r7, lr}
24019384:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
24019386:	b662      	cpsie	i
}
24019388:	bf00      	nop
	__enable_irq(); //enable interrupts

    if (CSP_QUADSPI_Init() != HAL_OK)
2401938a:	f000 f993 	bl	240196b4 <CSP_QUADSPI_Init>
2401938e:	4603      	mov	r3, r0
24019390:	2b00      	cmp	r3, #0
24019392:	d003      	beq.n	2401939c <MassErase+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
24019394:	b672      	cpsid	i
}
24019396:	bf00      	nop
    {
    	__disable_irq();  //disable interrupts
        return LOADER_FAIL;
24019398:	2300      	movs	r3, #0
2401939a:	e00b      	b.n	240193b4 <MassErase+0x32>
    }

    if (CSP_QSPI_Erase_Chip() != HAL_OK)
2401939c:	f000 f9b8 	bl	24019710 <CSP_QSPI_Erase_Chip>
240193a0:	4603      	mov	r3, r0
240193a2:	2b00      	cmp	r3, #0
240193a4:	d003      	beq.n	240193ae <MassErase+0x2c>
  __ASM volatile ("cpsid i" : : : "memory");
240193a6:	b672      	cpsid	i
}
240193a8:	bf00      	nop
    {
    	__disable_irq(); //disable interrupts
        return LOADER_FAIL;
240193aa:	2300      	movs	r3, #0
240193ac:	e002      	b.n	240193b4 <MassErase+0x32>
  __ASM volatile ("cpsid i" : : : "memory");
240193ae:	b672      	cpsid	i
}
240193b0:	bf00      	nop
    }

    __disable_irq(); //disable interrupts
    return LOADER_OK;
240193b2:	2301      	movs	r3, #1
}
240193b4:	4618      	mov	r0, r3
240193b6:	bd80      	pop	{r7, pc}

240193b8 <CheckSum>:
 * outputs   :
 *     R0             : Checksum value
 * Note: Optional for all types of device
 */
uint32_t CheckSum(uint32_t StartAddress, uint32_t Size, uint32_t InitVal)
{
240193b8:	b480      	push	{r7}
240193ba:	b089      	sub	sp, #36	@ 0x24
240193bc:	af00      	add	r7, sp, #0
240193be:	60f8      	str	r0, [r7, #12]
240193c0:	60b9      	str	r1, [r7, #8]
240193c2:	607a      	str	r2, [r7, #4]
    uint8_t missalignementAddress = StartAddress % 4;
240193c4:	68fb      	ldr	r3, [r7, #12]
240193c6:	b2db      	uxtb	r3, r3
240193c8:	f003 0303 	and.w	r3, r3, #3
240193cc:	77fb      	strb	r3, [r7, #31]
    uint8_t missalignementSize = Size;
240193ce:	68bb      	ldr	r3, [r7, #8]
240193d0:	77bb      	strb	r3, [r7, #30]
    int cnt;
    uint32_t Val;

    StartAddress -= StartAddress % 4;
240193d2:	68fb      	ldr	r3, [r7, #12]
240193d4:	f023 0303 	bic.w	r3, r3, #3
240193d8:	60fb      	str	r3, [r7, #12]
    Size += (Size % 4 == 0) ? 0 : 4 - (Size % 4);
240193da:	68bb      	ldr	r3, [r7, #8]
240193dc:	f003 0303 	and.w	r3, r3, #3
240193e0:	2b00      	cmp	r3, #0
240193e2:	d005      	beq.n	240193f0 <CheckSum+0x38>
240193e4:	68bb      	ldr	r3, [r7, #8]
240193e6:	f003 0303 	and.w	r3, r3, #3
240193ea:	f1c3 0304 	rsb	r3, r3, #4
240193ee:	e000      	b.n	240193f2 <CheckSum+0x3a>
240193f0:	2300      	movs	r3, #0
240193f2:	68ba      	ldr	r2, [r7, #8]
240193f4:	4413      	add	r3, r2
240193f6:	60bb      	str	r3, [r7, #8]

    for (cnt = 0; cnt < Size; cnt += 4)
240193f8:	2300      	movs	r3, #0
240193fa:	61bb      	str	r3, [r7, #24]
240193fc:	e0b3      	b.n	24019566 <CheckSum+0x1ae>
    {
        Val = *(uint32_t*) StartAddress;
240193fe:	68fb      	ldr	r3, [r7, #12]
24019400:	681b      	ldr	r3, [r3, #0]
24019402:	617b      	str	r3, [r7, #20]
        if (missalignementAddress)
24019404:	7ffb      	ldrb	r3, [r7, #31]
24019406:	2b00      	cmp	r3, #0
24019408:	d040      	beq.n	2401948c <CheckSum+0xd4>
        {
            switch (missalignementAddress)
2401940a:	7ffb      	ldrb	r3, [r7, #31]
2401940c:	2b03      	cmp	r3, #3
2401940e:	d032      	beq.n	24019476 <CheckSum+0xbe>
24019410:	2b03      	cmp	r3, #3
24019412:	f300 80a2 	bgt.w	2401955a <CheckSum+0x1a2>
24019416:	2b01      	cmp	r3, #1
24019418:	d002      	beq.n	24019420 <CheckSum+0x68>
2401941a:	2b02      	cmp	r3, #2
2401941c:	d019      	beq.n	24019452 <CheckSum+0x9a>
2401941e:	e09c      	b.n	2401955a <CheckSum+0x1a2>
            {
                case 1:
                    InitVal += (uint8_t) (Val >> 8 & 0xff);
24019420:	697b      	ldr	r3, [r7, #20]
24019422:	0a1b      	lsrs	r3, r3, #8
24019424:	b2db      	uxtb	r3, r3
24019426:	461a      	mov	r2, r3
24019428:	687b      	ldr	r3, [r7, #4]
2401942a:	4413      	add	r3, r2
2401942c:	607b      	str	r3, [r7, #4]
                    InitVal += (uint8_t) (Val >> 16 & 0xff);
2401942e:	697b      	ldr	r3, [r7, #20]
24019430:	0c1b      	lsrs	r3, r3, #16
24019432:	b2db      	uxtb	r3, r3
24019434:	461a      	mov	r2, r3
24019436:	687b      	ldr	r3, [r7, #4]
24019438:	4413      	add	r3, r2
2401943a:	607b      	str	r3, [r7, #4]
                    InitVal += (uint8_t) (Val >> 24 & 0xff);
2401943c:	697b      	ldr	r3, [r7, #20]
2401943e:	0e1b      	lsrs	r3, r3, #24
24019440:	b2db      	uxtb	r3, r3
24019442:	461a      	mov	r2, r3
24019444:	687b      	ldr	r3, [r7, #4]
24019446:	4413      	add	r3, r2
24019448:	607b      	str	r3, [r7, #4]
                    missalignementAddress -= 1;
2401944a:	7ffb      	ldrb	r3, [r7, #31]
2401944c:	3b01      	subs	r3, #1
2401944e:	77fb      	strb	r3, [r7, #31]
                    break;
24019450:	e083      	b.n	2401955a <CheckSum+0x1a2>
                case 2:
                    InitVal += (uint8_t) (Val >> 16 & 0xff);
24019452:	697b      	ldr	r3, [r7, #20]
24019454:	0c1b      	lsrs	r3, r3, #16
24019456:	b2db      	uxtb	r3, r3
24019458:	461a      	mov	r2, r3
2401945a:	687b      	ldr	r3, [r7, #4]
2401945c:	4413      	add	r3, r2
2401945e:	607b      	str	r3, [r7, #4]
                    InitVal += (uint8_t) (Val >> 24 & 0xff);
24019460:	697b      	ldr	r3, [r7, #20]
24019462:	0e1b      	lsrs	r3, r3, #24
24019464:	b2db      	uxtb	r3, r3
24019466:	461a      	mov	r2, r3
24019468:	687b      	ldr	r3, [r7, #4]
2401946a:	4413      	add	r3, r2
2401946c:	607b      	str	r3, [r7, #4]
                    missalignementAddress -= 2;
2401946e:	7ffb      	ldrb	r3, [r7, #31]
24019470:	3b02      	subs	r3, #2
24019472:	77fb      	strb	r3, [r7, #31]
                    break;
24019474:	e071      	b.n	2401955a <CheckSum+0x1a2>
                case 3:
                    InitVal += (uint8_t) (Val >> 24 & 0xff);
24019476:	697b      	ldr	r3, [r7, #20]
24019478:	0e1b      	lsrs	r3, r3, #24
2401947a:	b2db      	uxtb	r3, r3
2401947c:	461a      	mov	r2, r3
2401947e:	687b      	ldr	r3, [r7, #4]
24019480:	4413      	add	r3, r2
24019482:	607b      	str	r3, [r7, #4]
                    missalignementAddress -= 3;
24019484:	7ffb      	ldrb	r3, [r7, #31]
24019486:	3b03      	subs	r3, #3
24019488:	77fb      	strb	r3, [r7, #31]
                    break;
2401948a:	e066      	b.n	2401955a <CheckSum+0x1a2>
            }
        }
        else if ((Size - missalignementSize) % 4 && (Size - cnt) <= 4)
2401948c:	7fbb      	ldrb	r3, [r7, #30]
2401948e:	68ba      	ldr	r2, [r7, #8]
24019490:	1ad3      	subs	r3, r2, r3
24019492:	f003 0303 	and.w	r3, r3, #3
24019496:	2b00      	cmp	r3, #0
24019498:	d044      	beq.n	24019524 <CheckSum+0x16c>
2401949a:	69bb      	ldr	r3, [r7, #24]
2401949c:	68ba      	ldr	r2, [r7, #8]
2401949e:	1ad3      	subs	r3, r2, r3
240194a0:	2b04      	cmp	r3, #4
240194a2:	d83f      	bhi.n	24019524 <CheckSum+0x16c>
        {
            switch (Size - missalignementSize)
240194a4:	7fbb      	ldrb	r3, [r7, #30]
240194a6:	68ba      	ldr	r2, [r7, #8]
240194a8:	1ad3      	subs	r3, r2, r3
240194aa:	2b03      	cmp	r3, #3
240194ac:	d02f      	beq.n	2401950e <CheckSum+0x156>
240194ae:	2b03      	cmp	r3, #3
240194b0:	d853      	bhi.n	2401955a <CheckSum+0x1a2>
240194b2:	2b01      	cmp	r3, #1
240194b4:	d002      	beq.n	240194bc <CheckSum+0x104>
240194b6:	2b02      	cmp	r3, #2
240194b8:	d018      	beq.n	240194ec <CheckSum+0x134>
240194ba:	e04e      	b.n	2401955a <CheckSum+0x1a2>
            {
                case 1:
                    InitVal += (uint8_t) Val;
240194bc:	697b      	ldr	r3, [r7, #20]
240194be:	b2db      	uxtb	r3, r3
240194c0:	461a      	mov	r2, r3
240194c2:	687b      	ldr	r3, [r7, #4]
240194c4:	4413      	add	r3, r2
240194c6:	607b      	str	r3, [r7, #4]
                    InitVal += (uint8_t) (Val >> 8 & 0xff);
240194c8:	697b      	ldr	r3, [r7, #20]
240194ca:	0a1b      	lsrs	r3, r3, #8
240194cc:	b2db      	uxtb	r3, r3
240194ce:	461a      	mov	r2, r3
240194d0:	687b      	ldr	r3, [r7, #4]
240194d2:	4413      	add	r3, r2
240194d4:	607b      	str	r3, [r7, #4]
                    InitVal += (uint8_t) (Val >> 16 & 0xff);
240194d6:	697b      	ldr	r3, [r7, #20]
240194d8:	0c1b      	lsrs	r3, r3, #16
240194da:	b2db      	uxtb	r3, r3
240194dc:	461a      	mov	r2, r3
240194de:	687b      	ldr	r3, [r7, #4]
240194e0:	4413      	add	r3, r2
240194e2:	607b      	str	r3, [r7, #4]
                    missalignementSize -= 1;
240194e4:	7fbb      	ldrb	r3, [r7, #30]
240194e6:	3b01      	subs	r3, #1
240194e8:	77bb      	strb	r3, [r7, #30]
                    break;
240194ea:	e01a      	b.n	24019522 <CheckSum+0x16a>
                case 2:
                    InitVal += (uint8_t) Val;
240194ec:	697b      	ldr	r3, [r7, #20]
240194ee:	b2db      	uxtb	r3, r3
240194f0:	461a      	mov	r2, r3
240194f2:	687b      	ldr	r3, [r7, #4]
240194f4:	4413      	add	r3, r2
240194f6:	607b      	str	r3, [r7, #4]
                    InitVal += (uint8_t) (Val >> 8 & 0xff);
240194f8:	697b      	ldr	r3, [r7, #20]
240194fa:	0a1b      	lsrs	r3, r3, #8
240194fc:	b2db      	uxtb	r3, r3
240194fe:	461a      	mov	r2, r3
24019500:	687b      	ldr	r3, [r7, #4]
24019502:	4413      	add	r3, r2
24019504:	607b      	str	r3, [r7, #4]
                    missalignementSize -= 2;
24019506:	7fbb      	ldrb	r3, [r7, #30]
24019508:	3b02      	subs	r3, #2
2401950a:	77bb      	strb	r3, [r7, #30]
                    break;
2401950c:	e009      	b.n	24019522 <CheckSum+0x16a>
                case 3:
                    InitVal += (uint8_t) Val;
2401950e:	697b      	ldr	r3, [r7, #20]
24019510:	b2db      	uxtb	r3, r3
24019512:	461a      	mov	r2, r3
24019514:	687b      	ldr	r3, [r7, #4]
24019516:	4413      	add	r3, r2
24019518:	607b      	str	r3, [r7, #4]
                    missalignementSize -= 3;
2401951a:	7fbb      	ldrb	r3, [r7, #30]
2401951c:	3b03      	subs	r3, #3
2401951e:	77bb      	strb	r3, [r7, #30]
                    break;
24019520:	bf00      	nop
            switch (Size - missalignementSize)
24019522:	e01a      	b.n	2401955a <CheckSum+0x1a2>
            }
        }
        else
        {
            InitVal += (uint8_t) Val;
24019524:	697b      	ldr	r3, [r7, #20]
24019526:	b2db      	uxtb	r3, r3
24019528:	461a      	mov	r2, r3
2401952a:	687b      	ldr	r3, [r7, #4]
2401952c:	4413      	add	r3, r2
2401952e:	607b      	str	r3, [r7, #4]
            InitVal += (uint8_t) (Val >> 8 & 0xff);
24019530:	697b      	ldr	r3, [r7, #20]
24019532:	0a1b      	lsrs	r3, r3, #8
24019534:	b2db      	uxtb	r3, r3
24019536:	461a      	mov	r2, r3
24019538:	687b      	ldr	r3, [r7, #4]
2401953a:	4413      	add	r3, r2
2401953c:	607b      	str	r3, [r7, #4]
            InitVal += (uint8_t) (Val >> 16 & 0xff);
2401953e:	697b      	ldr	r3, [r7, #20]
24019540:	0c1b      	lsrs	r3, r3, #16
24019542:	b2db      	uxtb	r3, r3
24019544:	461a      	mov	r2, r3
24019546:	687b      	ldr	r3, [r7, #4]
24019548:	4413      	add	r3, r2
2401954a:	607b      	str	r3, [r7, #4]
            InitVal += (uint8_t) (Val >> 24 & 0xff);
2401954c:	697b      	ldr	r3, [r7, #20]
2401954e:	0e1b      	lsrs	r3, r3, #24
24019550:	b2db      	uxtb	r3, r3
24019552:	461a      	mov	r2, r3
24019554:	687b      	ldr	r3, [r7, #4]
24019556:	4413      	add	r3, r2
24019558:	607b      	str	r3, [r7, #4]
        }
        StartAddress += 4;
2401955a:	68fb      	ldr	r3, [r7, #12]
2401955c:	3304      	adds	r3, #4
2401955e:	60fb      	str	r3, [r7, #12]
    for (cnt = 0; cnt < Size; cnt += 4)
24019560:	69bb      	ldr	r3, [r7, #24]
24019562:	3304      	adds	r3, #4
24019564:	61bb      	str	r3, [r7, #24]
24019566:	69bb      	ldr	r3, [r7, #24]
24019568:	68ba      	ldr	r2, [r7, #8]
2401956a:	429a      	cmp	r2, r3
2401956c:	f63f af47 	bhi.w	240193fe <CheckSum+0x46>
    }

    return (InitVal);
24019570:	687b      	ldr	r3, [r7, #4]
}
24019572:	4618      	mov	r0, r3
24019574:	3724      	adds	r7, #36	@ 0x24
24019576:	46bd      	mov	sp, r7
24019578:	f85d 7b04 	ldr.w	r7, [sp], #4
2401957c:	4770      	bx	lr

2401957e <Verify>:
 *     R0             : Operation failed (address of failure)
 *     R1             : Checksum value
 * Note: Optional for all types of device
 */
uint64_t Verify(uint32_t MemoryAddr, uint32_t RAMBufferAddr, uint32_t Size, uint32_t missalignement)
{
2401957e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
24019582:	b088      	sub	sp, #32
24019584:	af00      	add	r7, sp, #0
24019586:	60f8      	str	r0, [r7, #12]
24019588:	60b9      	str	r1, [r7, #8]
2401958a:	607a      	str	r2, [r7, #4]
2401958c:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsie i" : : : "memory");
2401958e:	b662      	cpsie	i
}
24019590:	bf00      	nop
	__enable_irq(); //enable interrupts
    uint32_t VerifiedData = 0, InitVal = 0;
24019592:	2300      	movs	r3, #0
24019594:	61fb      	str	r3, [r7, #28]
24019596:	2300      	movs	r3, #0
24019598:	61bb      	str	r3, [r7, #24]
    uint64_t checksum;
    Size *= 4;
2401959a:	687b      	ldr	r3, [r7, #4]
2401959c:	009b      	lsls	r3, r3, #2
2401959e:	607b      	str	r3, [r7, #4]

    if (CSP_QUADSPI_Init() != HAL_OK)
240195a0:	f000 f888 	bl	240196b4 <CSP_QUADSPI_Init>
240195a4:	4603      	mov	r3, r0
240195a6:	2b00      	cmp	r3, #0
240195a8:	d006      	beq.n	240195b8 <Verify+0x3a>
  __ASM volatile ("cpsid i" : : : "memory");
240195aa:	b672      	cpsid	i
}
240195ac:	bf00      	nop
    {
    	__disable_irq();  //disable interrupts
        return LOADER_FAIL;
240195ae:	f04f 0400 	mov.w	r4, #0
240195b2:	f04f 0500 	mov.w	r5, #0
240195b6:	e04f      	b.n	24019658 <Verify+0xda>
    }

    if (CSP_QSPI_EnableMemoryMappedMode() != HAL_OK)
240195b8:	f000 f96b 	bl	24019892 <CSP_QSPI_EnableMemoryMappedMode>
240195bc:	4603      	mov	r3, r0
240195be:	2b00      	cmp	r3, #0
240195c0:	d006      	beq.n	240195d0 <Verify+0x52>
  __ASM volatile ("cpsid i" : : : "memory");
240195c2:	b672      	cpsid	i
}
240195c4:	bf00      	nop
    {
    	__disable_irq(); //disable interrupts
        return LOADER_FAIL;
240195c6:	f04f 0400 	mov.w	r4, #0
240195ca:	f04f 0500 	mov.w	r5, #0
240195ce:	e043      	b.n	24019658 <Verify+0xda>
    }

    checksum = CheckSum((uint32_t) MemoryAddr + (missalignement & 0xf), Size - ((missalignement >> 16) & 0xF), InitVal);
240195d0:	683b      	ldr	r3, [r7, #0]
240195d2:	f003 020f 	and.w	r2, r3, #15
240195d6:	68fb      	ldr	r3, [r7, #12]
240195d8:	18d0      	adds	r0, r2, r3
240195da:	683b      	ldr	r3, [r7, #0]
240195dc:	0c1b      	lsrs	r3, r3, #16
240195de:	f003 030f 	and.w	r3, r3, #15
240195e2:	687a      	ldr	r2, [r7, #4]
240195e4:	1ad3      	subs	r3, r2, r3
240195e6:	69ba      	ldr	r2, [r7, #24]
240195e8:	4619      	mov	r1, r3
240195ea:	f7ff fee5 	bl	240193b8 <CheckSum>
240195ee:	4603      	mov	r3, r0
240195f0:	2200      	movs	r2, #0
240195f2:	469a      	mov	sl, r3
240195f4:	4693      	mov	fp, r2
240195f6:	e9c7 ab04 	strd	sl, fp, [r7, #16]
    while (Size > VerifiedData)
240195fa:	e01f      	b.n	2401963c <Verify+0xbe>
    {
        if (*(uint8_t*) MemoryAddr++!= *((uint8_t*) RAMBufferAddr + VerifiedData))
240195fc:	68fb      	ldr	r3, [r7, #12]
240195fe:	1c5a      	adds	r2, r3, #1
24019600:	60fa      	str	r2, [r7, #12]
24019602:	781a      	ldrb	r2, [r3, #0]
24019604:	69f9      	ldr	r1, [r7, #28]
24019606:	68bb      	ldr	r3, [r7, #8]
24019608:	440b      	add	r3, r1
2401960a:	781b      	ldrb	r3, [r3, #0]
2401960c:	429a      	cmp	r2, r3
2401960e:	d012      	beq.n	24019636 <Verify+0xb8>
        {
        	//__disable_irq(); //disable interrupts
            return ((checksum << 32) + (MemoryAddr + VerifiedData));
24019610:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
24019614:	f04f 0200 	mov.w	r2, #0
24019618:	f04f 0300 	mov.w	r3, #0
2401961c:	0003      	movs	r3, r0
2401961e:	2200      	movs	r2, #0
24019620:	68f8      	ldr	r0, [r7, #12]
24019622:	69f9      	ldr	r1, [r7, #28]
24019624:	4401      	add	r1, r0
24019626:	2000      	movs	r0, #0
24019628:	4688      	mov	r8, r1
2401962a:	4681      	mov	r9, r0
2401962c:	eb12 0408 	adds.w	r4, r2, r8
24019630:	eb43 0509 	adc.w	r5, r3, r9
24019634:	e010      	b.n	24019658 <Verify+0xda>
        }
        VerifiedData++;
24019636:	69fb      	ldr	r3, [r7, #28]
24019638:	3301      	adds	r3, #1
2401963a:	61fb      	str	r3, [r7, #28]
    while (Size > VerifiedData)
2401963c:	687a      	ldr	r2, [r7, #4]
2401963e:	69fb      	ldr	r3, [r7, #28]
24019640:	429a      	cmp	r2, r3
24019642:	d8db      	bhi.n	240195fc <Verify+0x7e>
  __ASM volatile ("cpsid i" : : : "memory");
24019644:	b672      	cpsid	i
}
24019646:	bf00      	nop
    }

    __disable_irq(); //disable interrupts
    return (checksum << 32);
24019648:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
2401964c:	f04f 0400 	mov.w	r4, #0
24019650:	f04f 0500 	mov.w	r5, #0
24019654:	0015      	movs	r5, r2
24019656:	2400      	movs	r4, #0
}
24019658:	4622      	mov	r2, r4
2401965a:	462b      	mov	r3, r5
2401965c:	4610      	mov	r0, r2
2401965e:	4619      	mov	r1, r3
24019660:	3720      	adds	r7, #32
24019662:	46bd      	mov	sp, r7
24019664:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

24019668 <apCustomLoaderInit>:

uint8_t buffer_test[MEMORY_SECTOR_SIZE];
uint8_t buffer_test_comp[MEMORY_SECTOR_SIZE];

void apCustomLoaderInit(void)
{
24019668:	b580      	push	{r7, lr}
2401966a:	b084      	sub	sp, #16
2401966c:	af00      	add	r7, sp, #0
  	CSP_QUADSPI_Init();
2401966e:	f000 f821 	bl	240196b4 <CSP_QUADSPI_Init>

  	if (CSP_QSPI_EnableMemoryMappedMode() != HAL_OK)
24019672:	f000 f90e 	bl	24019892 <CSP_QSPI_EnableMemoryMappedMode>
24019676:	4603      	mov	r3, r0
24019678:	2b00      	cmp	r3, #0
2401967a:	d001      	beq.n	24019680 <apCustomLoaderInit+0x18>
  	{
  		while(1); //breakpoint - error detected
2401967c:	bf00      	nop
2401967e:	e7fd      	b.n	2401967c <apCustomLoaderInit+0x14>
  	}

	bool jump = true;
24019680:	2301      	movs	r3, #1
24019682:	73fb      	strb	r3, [r7, #15]
	if(jump == true)
24019684:	7bfb      	ldrb	r3, [r7, #15]
24019686:	2b00      	cmp	r3, #0
24019688:	d00e      	beq.n	240196a8 <apCustomLoaderInit+0x40>
	{
	    __set_MSP(*(volatile uint32_t*)0x90000000);
2401968a:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
2401968e:	681b      	ldr	r3, [r3, #0]
24019690:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
24019692:	683b      	ldr	r3, [r7, #0]
24019694:	f383 8808 	msr	MSP, r3
}
24019698:	bf00      	nop
	    uint32_t jump_address = *(volatile uint32_t*)0x90000004;
2401969a:	4b05      	ldr	r3, [pc, #20]	@ (240196b0 <apCustomLoaderInit+0x48>)
2401969c:	681b      	ldr	r3, [r3, #0]
2401969e:	60bb      	str	r3, [r7, #8]
		void (*pJump)(void);
		pJump = (void (*)(void))jump_address;
240196a0:	68bb      	ldr	r3, [r7, #8]
240196a2:	607b      	str	r3, [r7, #4]
		pJump();
240196a4:	687b      	ldr	r3, [r7, #4]
240196a6:	4798      	blx	r3
	}
}
240196a8:	bf00      	nop
240196aa:	3710      	adds	r7, #16
240196ac:	46bd      	mov	sp, r7
240196ae:	bd80      	pop	{r7, pc}
240196b0:	90000004 	.word	0x90000004

240196b4 <CSP_QUADSPI_Init>:

/* QUADSPI init function */
uint8_t CSP_QUADSPI_Init(void)
{
240196b4:	b580      	push	{r7, lr}
240196b6:	af00      	add	r7, sp, #0
	//prepare QSPI peripheral for ST-Link Utility operations
	if (HAL_OSPI_DeInit(&hospi1) != HAL_OK)
240196b8:	4814      	ldr	r0, [pc, #80]	@ (2401970c <CSP_QUADSPI_Init+0x58>)
240196ba:	f7f8 fbad 	bl	24011e18 <HAL_OSPI_DeInit>
240196be:	4603      	mov	r3, r0
240196c0:	2b00      	cmp	r3, #0
240196c2:	d001      	beq.n	240196c8 <CSP_QUADSPI_Init+0x14>
	{
		return HAL_ERROR;
240196c4:	2301      	movs	r3, #1
240196c6:	e01e      	b.n	24019706 <CSP_QUADSPI_Init+0x52>
	}

	MX_OCTOSPI1_Init();
240196c8:	f001 f978 	bl	2401a9bc <MX_OCTOSPI1_Init>

	if(QSPI_ResetChip() != HAL_OK)
240196cc:	f000 f8ed 	bl	240198aa <QSPI_ResetChip>
240196d0:	4603      	mov	r3, r0
240196d2:	2b00      	cmp	r3, #0
240196d4:	d001      	beq.n	240196da <CSP_QUADSPI_Init+0x26>
	{
		return HAL_ERROR;
240196d6:	2301      	movs	r3, #1
240196d8:	e015      	b.n	24019706 <CSP_QUADSPI_Init+0x52>
	}

	// HAL_Delay(1);

	if(QSPI_AutoPollingMemReady() != HAL_OK)
240196da:	f000 f825 	bl	24019728 <QSPI_AutoPollingMemReady>
240196de:	4603      	mov	r3, r0
240196e0:	2b00      	cmp	r3, #0
240196e2:	d001      	beq.n	240196e8 <CSP_QUADSPI_Init+0x34>
	{
		return HAL_ERROR;
240196e4:	2301      	movs	r3, #1
240196e6:	e00e      	b.n	24019706 <CSP_QUADSPI_Init+0x52>
	}

	if(QSPI_WriteEnable() != HAL_OK)
240196e8:	f000 f830 	bl	2401974c <QSPI_WriteEnable>
240196ec:	4603      	mov	r3, r0
240196ee:	2b00      	cmp	r3, #0
240196f0:	d001      	beq.n	240196f6 <CSP_QUADSPI_Init+0x42>
	{
		return HAL_ERROR;
240196f2:	2301      	movs	r3, #1
240196f4:	e007      	b.n	24019706 <CSP_QUADSPI_Init+0x52>
	}

	if(QSPI_Configuration() != HAL_OK)
240196f6:	f000 f835 	bl	24019764 <QSPI_Configuration>
240196fa:	4603      	mov	r3, r0
240196fc:	2b00      	cmp	r3, #0
240196fe:	d001      	beq.n	24019704 <CSP_QUADSPI_Init+0x50>
	{
		return HAL_ERROR;
24019700:	2301      	movs	r3, #1
24019702:	e000      	b.n	24019706 <CSP_QUADSPI_Init+0x52>
	}

	return HAL_OK;
24019704:	2300      	movs	r3, #0
}
24019706:	4618      	mov	r0, r3
24019708:	bd80      	pop	{r7, pc}
2401970a:	bf00      	nop
2401970c:	2400288c 	.word	0x2400288c

24019710 <CSP_QSPI_Erase_Chip>:

uint8_t CSP_QSPI_Erase_Chip(void)
{
24019710:	b580      	push	{r7, lr}
24019712:	af00      	add	r7, sp, #0
	if(apQspiEraseBulkchip() == true)
24019714:	f000 fa68 	bl	24019be8 <apQspiEraseBulkchip>
24019718:	4603      	mov	r3, r0
2401971a:	2b00      	cmp	r3, #0
2401971c:	d001      	beq.n	24019722 <CSP_QSPI_Erase_Chip+0x12>
	{
		return HAL_OK;
2401971e:	2300      	movs	r3, #0
24019720:	e000      	b.n	24019724 <CSP_QSPI_Erase_Chip+0x14>
	}
	return HAL_ERROR;
24019722:	2301      	movs	r3, #1
}
24019724:	4618      	mov	r0, r3
24019726:	bd80      	pop	{r7, pc}

24019728 <QSPI_AutoPollingMemReady>:

uint8_t QSPI_AutoPollingMemReady(void)
{
24019728:	b580      	push	{r7, lr}
2401972a:	af00      	add	r7, sp, #0
	if(apQspiAutoPollingMemReady(&hospi1, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) == true)
2401972c:	f241 3188 	movw	r1, #5000	@ 0x1388
24019730:	4805      	ldr	r0, [pc, #20]	@ (24019748 <QSPI_AutoPollingMemReady+0x20>)
24019732:	f000 fac7 	bl	24019cc4 <apQspiAutoPollingMemReady>
24019736:	4603      	mov	r3, r0
24019738:	2b00      	cmp	r3, #0
2401973a:	d001      	beq.n	24019740 <QSPI_AutoPollingMemReady+0x18>
	{
		return HAL_OK;
2401973c:	2300      	movs	r3, #0
2401973e:	e000      	b.n	24019742 <QSPI_AutoPollingMemReady+0x1a>
	}
	return HAL_ERROR;
24019740:	2301      	movs	r3, #1
}
24019742:	4618      	mov	r0, r3
24019744:	bd80      	pop	{r7, pc}
24019746:	bf00      	nop
24019748:	2400288c 	.word	0x2400288c

2401974c <QSPI_WriteEnable>:

static uint8_t QSPI_WriteEnable(void)
{
2401974c:	b580      	push	{r7, lr}
2401974e:	af00      	add	r7, sp, #0
	if(apQspiWriteEnable() == true)
24019750:	f000 f9ec 	bl	24019b2c <apQspiWriteEnable>
24019754:	4603      	mov	r3, r0
24019756:	2b00      	cmp	r3, #0
24019758:	d001      	beq.n	2401975e <QSPI_WriteEnable+0x12>
	{
		return HAL_OK;
2401975a:	2300      	movs	r3, #0
2401975c:	e000      	b.n	24019760 <QSPI_WriteEnable+0x14>
	}
	return HAL_ERROR;
2401975e:	2301      	movs	r3, #1
}
24019760:	4618      	mov	r0, r3
24019762:	bd80      	pop	{r7, pc}

24019764 <QSPI_Configuration>:
/*Enable quad mode and set dummy cycles count*/
uint8_t QSPI_Configuration(void)
{
24019764:	b580      	push	{r7, lr}
24019766:	b082      	sub	sp, #8
24019768:	af00      	add	r7, sp, #0
	//@ example code에는 quad mode를 enable하나 생략하였다.
	HAL_StatusTypeDef ret = HAL_OK;
2401976a:	2300      	movs	r3, #0
2401976c:	71fb      	strb	r3, [r7, #7]

	uint8_t test_buffer[4] = { 0 };
2401976e:	2300      	movs	r3, #0
24019770:	603b      	str	r3, [r7, #0]

	if(apQspiReadState1() == false)
24019772:	f000 f8eb 	bl	2401994c <apQspiReadState1>
24019776:	4603      	mov	r3, r0
24019778:	f083 0301 	eor.w	r3, r3, #1
2401977c:	b2db      	uxtb	r3, r3
2401977e:	2b00      	cmp	r3, #0
24019780:	d001      	beq.n	24019786 <QSPI_Configuration+0x22>
	{
		ret = HAL_ERROR;
24019782:	2301      	movs	r3, #1
24019784:	71fb      	strb	r3, [r7, #7]
	}
	if(apQspiReadState2() == false)
24019786:	f000 f90d 	bl	240199a4 <apQspiReadState2>
2401978a:	4603      	mov	r3, r0
2401978c:	f083 0301 	eor.w	r3, r3, #1
24019790:	b2db      	uxtb	r3, r3
24019792:	2b00      	cmp	r3, #0
24019794:	d001      	beq.n	2401979a <QSPI_Configuration+0x36>
	{
		ret = HAL_ERROR;
24019796:	2301      	movs	r3, #1
24019798:	71fb      	strb	r3, [r7, #7]
	}
	if(apQspiReadState3() == false)
2401979a:	f000 f92f 	bl	240199fc <apQspiReadState3>
2401979e:	4603      	mov	r3, r0
240197a0:	f083 0301 	eor.w	r3, r3, #1
240197a4:	b2db      	uxtb	r3, r3
240197a6:	2b00      	cmp	r3, #0
240197a8:	d001      	beq.n	240197ae <QSPI_Configuration+0x4a>
	{
		ret = HAL_ERROR;
240197aa:	2301      	movs	r3, #1
240197ac:	71fb      	strb	r3, [r7, #7]
	}

	apQspiGetStauts(test_buffer);
240197ae:	463b      	mov	r3, r7
240197b0:	4618      	mov	r0, r3
240197b2:	f000 f94f 	bl	24019a54 <apQspiGetStauts>

	return ret;
240197b6:	79fb      	ldrb	r3, [r7, #7]
}
240197b8:	4618      	mov	r0, r3
240197ba:	3708      	adds	r7, #8
240197bc:	46bd      	mov	sp, r7
240197be:	bd80      	pop	{r7, pc}

240197c0 <CSP_QSPI_EraseSector>:

uint8_t CSP_QSPI_EraseSector(uint32_t EraseStartAddress, uint32_t EraseEndAddress)
{
240197c0:	b580      	push	{r7, lr}
240197c2:	b082      	sub	sp, #8
240197c4:	af00      	add	r7, sp, #0
240197c6:	6078      	str	r0, [r7, #4]
240197c8:	6039      	str	r1, [r7, #0]
	EraseStartAddress = EraseStartAddress - EraseStartAddress % MEMORY_SECTOR_SIZE;
240197ca:	687a      	ldr	r2, [r7, #4]
240197cc:	4b0b      	ldr	r3, [pc, #44]	@ (240197fc <CSP_QSPI_EraseSector+0x3c>)
240197ce:	4013      	ands	r3, r2
240197d0:	607b      	str	r3, [r7, #4]

	while (EraseEndAddress >= EraseStartAddress)
240197d2:	e009      	b.n	240197e8 <CSP_QSPI_EraseSector+0x28>
	{
		apQspiEraseSector((EraseStartAddress & 0x0FFFFFFF));
240197d4:	687b      	ldr	r3, [r7, #4]
240197d6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
240197da:	4618      	mov	r0, r3
240197dc:	f000 fa38 	bl	24019c50 <apQspiEraseSector>
		EraseStartAddress += MEMORY_SECTOR_SIZE;
240197e0:	687b      	ldr	r3, [r7, #4]
240197e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
240197e6:	607b      	str	r3, [r7, #4]
	while (EraseEndAddress >= EraseStartAddress)
240197e8:	683a      	ldr	r2, [r7, #0]
240197ea:	687b      	ldr	r3, [r7, #4]
240197ec:	429a      	cmp	r2, r3
240197ee:	d2f1      	bcs.n	240197d4 <CSP_QSPI_EraseSector+0x14>
	}

	return HAL_OK;
240197f0:	2300      	movs	r3, #0
}
240197f2:	4618      	mov	r0, r3
240197f4:	3708      	adds	r7, #8
240197f6:	46bd      	mov	sp, r7
240197f8:	bd80      	pop	{r7, pc}
240197fa:	bf00      	nop
240197fc:	fffff000 	.word	0xfffff000

24019800 <CSP_QSPI_WriteMemory>:

uint8_t CSP_QSPI_WriteMemory(uint8_t* buffer, uint32_t address, uint32_t buffer_size)
{
24019800:	b580      	push	{r7, lr}
24019802:	b088      	sub	sp, #32
24019804:	af00      	add	r7, sp, #0
24019806:	60f8      	str	r0, [r7, #12]
24019808:	60b9      	str	r1, [r7, #8]
2401980a:	607a      	str	r2, [r7, #4]
	uint32_t end_addr, current_size, current_addr;

	current_addr = 0;
2401980c:	2300      	movs	r3, #0
2401980e:	61bb      	str	r3, [r7, #24]

	while (current_addr <= address)
24019810:	e003      	b.n	2401981a <CSP_QSPI_WriteMemory+0x1a>
	{
		current_addr += MEMORY_PAGE_SIZE;
24019812:	69bb      	ldr	r3, [r7, #24]
24019814:	f503 7380 	add.w	r3, r3, #256	@ 0x100
24019818:	61bb      	str	r3, [r7, #24]
	while (current_addr <= address)
2401981a:	69ba      	ldr	r2, [r7, #24]
2401981c:	68bb      	ldr	r3, [r7, #8]
2401981e:	429a      	cmp	r2, r3
24019820:	d9f7      	bls.n	24019812 <CSP_QSPI_WriteMemory+0x12>
	}
	current_size = current_addr - address;
24019822:	69ba      	ldr	r2, [r7, #24]
24019824:	68bb      	ldr	r3, [r7, #8]
24019826:	1ad3      	subs	r3, r2, r3
24019828:	61fb      	str	r3, [r7, #28]

	/* Check if the size of the data is less than the remaining place in the page */
	if (current_size > buffer_size)
2401982a:	69fa      	ldr	r2, [r7, #28]
2401982c:	687b      	ldr	r3, [r7, #4]
2401982e:	429a      	cmp	r2, r3
24019830:	d901      	bls.n	24019836 <CSP_QSPI_WriteMemory+0x36>
	{
		current_size = buffer_size;
24019832:	687b      	ldr	r3, [r7, #4]
24019834:	61fb      	str	r3, [r7, #28]
	}

	/* Initialize the adress variables */
	current_addr = address;
24019836:	68bb      	ldr	r3, [r7, #8]
24019838:	61bb      	str	r3, [r7, #24]
	end_addr = address + buffer_size;
2401983a:	68ba      	ldr	r2, [r7, #8]
2401983c:	687b      	ldr	r3, [r7, #4]
2401983e:	4413      	add	r3, r2
24019840:	617b      	str	r3, [r7, #20]

	/* Perform the write page by page */
	do
	{
		if(current_size == 0)
24019842:	69fb      	ldr	r3, [r7, #28]
24019844:	2b00      	cmp	r3, #0
24019846:	d01e      	beq.n	24019886 <CSP_QSPI_WriteMemory+0x86>
		{
			break;
		}
		apQspiWrite(buffer, current_addr, current_size);
24019848:	69fa      	ldr	r2, [r7, #28]
2401984a:	69b9      	ldr	r1, [r7, #24]
2401984c:	68f8      	ldr	r0, [r7, #12]
2401984e:	f000 fb59 	bl	24019f04 <apQspiWrite>

		/* Update the address and size variables for next page programming */
		current_addr += current_size;
24019852:	69ba      	ldr	r2, [r7, #24]
24019854:	69fb      	ldr	r3, [r7, #28]
24019856:	4413      	add	r3, r2
24019858:	61bb      	str	r3, [r7, #24]
		buffer += current_size;
2401985a:	68fa      	ldr	r2, [r7, #12]
2401985c:	69fb      	ldr	r3, [r7, #28]
2401985e:	4413      	add	r3, r2
24019860:	60fb      	str	r3, [r7, #12]
		current_size = ((current_addr + MEMORY_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MEMORY_PAGE_SIZE;
24019862:	69bb      	ldr	r3, [r7, #24]
24019864:	f503 7380 	add.w	r3, r3, #256	@ 0x100
24019868:	697a      	ldr	r2, [r7, #20]
2401986a:	429a      	cmp	r2, r3
2401986c:	d203      	bcs.n	24019876 <CSP_QSPI_WriteMemory+0x76>
2401986e:	697a      	ldr	r2, [r7, #20]
24019870:	69bb      	ldr	r3, [r7, #24]
24019872:	1ad3      	subs	r3, r2, r3
24019874:	e001      	b.n	2401987a <CSP_QSPI_WriteMemory+0x7a>
24019876:	f44f 7380 	mov.w	r3, #256	@ 0x100
2401987a:	61fb      	str	r3, [r7, #28]
	}
	while (current_addr <= end_addr);
2401987c:	69ba      	ldr	r2, [r7, #24]
2401987e:	697b      	ldr	r3, [r7, #20]
24019880:	429a      	cmp	r2, r3
24019882:	d9de      	bls.n	24019842 <CSP_QSPI_WriteMemory+0x42>
24019884:	e000      	b.n	24019888 <CSP_QSPI_WriteMemory+0x88>
			break;
24019886:	bf00      	nop

	return HAL_OK;
24019888:	2300      	movs	r3, #0
}
2401988a:	4618      	mov	r0, r3
2401988c:	3720      	adds	r7, #32
2401988e:	46bd      	mov	sp, r7
24019890:	bd80      	pop	{r7, pc}

24019892 <CSP_QSPI_EnableMemoryMappedMode>:

uint8_t CSP_QSPI_EnableMemoryMappedMode(void)
{
24019892:	b580      	push	{r7, lr}
24019894:	af00      	add	r7, sp, #0
	if(apQspiMemMapStart() == true)
24019896:	f000 faad 	bl	24019df4 <apQspiMemMapStart>
2401989a:	4603      	mov	r3, r0
2401989c:	2b00      	cmp	r3, #0
2401989e:	d001      	beq.n	240198a4 <CSP_QSPI_EnableMemoryMappedMode+0x12>
	{
		return HAL_OK;
240198a0:	2300      	movs	r3, #0
240198a2:	e000      	b.n	240198a6 <CSP_QSPI_EnableMemoryMappedMode+0x14>
	}
	return HAL_ERROR;
240198a4:	2301      	movs	r3, #1
}
240198a6:	4618      	mov	r0, r3
240198a8:	bd80      	pop	{r7, pc}

240198aa <QSPI_ResetChip>:

uint8_t QSPI_ResetChip()
{
240198aa:	b580      	push	{r7, lr}
240198ac:	af00      	add	r7, sp, #0
	if(apQspiResetChip() == true)
240198ae:	f000 f8ef 	bl	24019a90 <apQspiResetChip>
240198b2:	4603      	mov	r3, r0
240198b4:	2b00      	cmp	r3, #0
240198b6:	d001      	beq.n	240198bc <QSPI_ResetChip+0x12>
	{
		return HAL_OK;
240198b8:	2300      	movs	r3, #0
240198ba:	e000      	b.n	240198be <QSPI_ResetChip+0x14>
	}
	return HAL_ERROR;
240198bc:	2301      	movs	r3, #1
}
240198be:	4618      	mov	r0, r3
240198c0:	bd80      	pop	{r7, pc}
	...

240198c4 <apQspiInit>:
static bool _eraseAllchip(void);
#endif


void apQspiInit(void)
{
240198c4:	b580      	push	{r7, lr}
240198c6:	b09a      	sub	sp, #104	@ 0x68
240198c8:	af00      	add	r7, sp, #0
	if(switch_inst.pushed == true)
240198ca:	4b1b      	ldr	r3, [pc, #108]	@ (24019938 <apQspiInit+0x74>)
240198cc:	791b      	ldrb	r3, [r3, #4]
240198ce:	2b00      	cmp	r3, #0
240198d0:	d007      	beq.n	240198e2 <apQspiInit+0x1e>
	{
		apQspiResetChip();
240198d2:	f000 f8dd 	bl	24019a90 <apQspiResetChip>
		apQspiEraseBulkchip();
240198d6:	f000 f987 	bl	24019be8 <apQspiEraseBulkchip>
		HAL_DeInit();
240198da:	f7e9 f951 	bl	24002b80 <HAL_DeInit>
		HAL_MspDeInit();
240198de:	f7e9 f9b6 	bl	24002c4e <HAL_MspDeInit>
	}
	apQspiReadState1();
240198e2:	f000 f833 	bl	2401994c <apQspiReadState1>
	apQspiReadState2();
240198e6:	f000 f85d 	bl	240199a4 <apQspiReadState2>
	apQspiReadState3();
240198ea:	f000 f887 	bl	240199fc <apQspiReadState3>

	uint8_t test[100] = {0, };
240198ee:	2300      	movs	r3, #0
240198f0:	603b      	str	r3, [r7, #0]
240198f2:	1d3b      	adds	r3, r7, #4
240198f4:	2260      	movs	r2, #96	@ 0x60
240198f6:	2100      	movs	r1, #0
240198f8:	4618      	mov	r0, r3
240198fa:	f001 fb6a 	bl	2401afd2 <memset>
	for(int i = 0; i < 100; i++)
240198fe:	2300      	movs	r3, #0
24019900:	667b      	str	r3, [r7, #100]	@ 0x64
24019902:	e009      	b.n	24019918 <apQspiInit+0x54>
	{
		test[i] = i;
24019904:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
24019906:	b2d9      	uxtb	r1, r3
24019908:	463a      	mov	r2, r7
2401990a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
2401990c:	4413      	add	r3, r2
2401990e:	460a      	mov	r2, r1
24019910:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 100; i++)
24019912:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
24019914:	3301      	adds	r3, #1
24019916:	667b      	str	r3, [r7, #100]	@ 0x64
24019918:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
2401991a:	2b63      	cmp	r3, #99	@ 0x63
2401991c:	ddf2      	ble.n	24019904 <apQspiInit+0x40>
	}
	apQspiWrite(test, 0, 100);
2401991e:	463b      	mov	r3, r7
24019920:	2264      	movs	r2, #100	@ 0x64
24019922:	2100      	movs	r1, #0
24019924:	4618      	mov	r0, r3
24019926:	f000 faed 	bl	24019f04 <apQspiWrite>

	apQspiMemMapStart();
2401992a:	f000 fa63 	bl	24019df4 <apQspiMemMapStart>
}
2401992e:	bf00      	nop
24019930:	3768      	adds	r7, #104	@ 0x68
24019932:	46bd      	mov	sp, r7
24019934:	bd80      	pop	{r7, pc}
24019936:	bf00      	nop
24019938:	2400287c 	.word	0x2400287c

2401993c <apQspiLoop>:

void apQspiLoop(void)
{
2401993c:	b480      	push	{r7}
2401993e:	af00      	add	r7, sp, #0

}
24019940:	bf00      	nop
24019942:	46bd      	mov	sp, r7
24019944:	f85d 7b04 	ldr.w	r7, [sp], #4
24019948:	4770      	bx	lr
	...

2401994c <apQspiReadState1>:

bool apQspiReadState1(void)
{
2401994c:	b580      	push	{r7, lr}
2401994e:	b094      	sub	sp, #80	@ 0x50
24019950:	af00      	add	r7, sp, #0
	OSPI_RegularCmdTypeDef s_command;
	memset(&s_command, '\0', sizeof(s_command));
24019952:	463b      	mov	r3, r7
24019954:	2250      	movs	r2, #80	@ 0x50
24019956:	2100      	movs	r1, #0
24019958:	4618      	mov	r0, r3
2401995a:	f001 fb3a 	bl	2401afd2 <memset>

	/* Configure automatic polling mode to wait for memory ready */
	s_command.InstructionMode   = HAL_OSPI_INSTRUCTION_1_LINE;
2401995e:	2301      	movs	r3, #1
24019960:	60fb      	str	r3, [r7, #12]
	s_command.Instruction       = DEF_AP_QSPI_READ_STATUS_1; // READ_STATUS_REG_CMD
24019962:	2305      	movs	r3, #5
24019964:	60bb      	str	r3, [r7, #8]
	s_command.AddressMode       = HAL_OSPI_ADDRESS_NONE;
24019966:	2300      	movs	r3, #0
24019968:	61fb      	str	r3, [r7, #28]
	s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
2401996a:	2300      	movs	r3, #0
2401996c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	s_command.DataMode          = HAL_OSPI_DATA_1_LINE;
2401996e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
24019972:	63bb      	str	r3, [r7, #56]	@ 0x38
	s_command.NbData = 1;
24019974:	2301      	movs	r3, #1
24019976:	63fb      	str	r3, [r7, #60]	@ 0x3c

	HAL_OSPI_Command(&hospi1, &s_command, 0xFFFF);
24019978:	463b      	mov	r3, r7
2401997a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
2401997e:	4619      	mov	r1, r3
24019980:	4806      	ldr	r0, [pc, #24]	@ (2401999c <apQspiReadState1+0x50>)
24019982:	f7f8 fbbd 	bl	24012100 <HAL_OSPI_Command>
	HAL_OSPI_Receive(&hospi1, &reg_state[0], 0xFFFF);
24019986:	f64f 72ff 	movw	r2, #65535	@ 0xffff
2401998a:	4905      	ldr	r1, [pc, #20]	@ (240199a0 <apQspiReadState1+0x54>)
2401998c:	4803      	ldr	r0, [pc, #12]	@ (2401999c <apQspiReadState1+0x50>)
2401998e:	f7f8 fda6 	bl	240124de <HAL_OSPI_Receive>

	return true;
24019992:	2301      	movs	r3, #1
}
24019994:	4618      	mov	r0, r3
24019996:	3750      	adds	r7, #80	@ 0x50
24019998:	46bd      	mov	sp, r7
2401999a:	bd80      	pop	{r7, pc}
2401999c:	2400288c 	.word	0x2400288c
240199a0:	24002578 	.word	0x24002578

240199a4 <apQspiReadState2>:

bool apQspiReadState2(void)
{
240199a4:	b580      	push	{r7, lr}
240199a6:	b094      	sub	sp, #80	@ 0x50
240199a8:	af00      	add	r7, sp, #0
	OSPI_RegularCmdTypeDef s_command;
	memset(&s_command, '\0', sizeof(s_command));
240199aa:	463b      	mov	r3, r7
240199ac:	2250      	movs	r2, #80	@ 0x50
240199ae:	2100      	movs	r1, #0
240199b0:	4618      	mov	r0, r3
240199b2:	f001 fb0e 	bl	2401afd2 <memset>

	/* Configure automatic polling mode to wait for memory ready */
	s_command.InstructionMode   = HAL_OSPI_INSTRUCTION_1_LINE;
240199b6:	2301      	movs	r3, #1
240199b8:	60fb      	str	r3, [r7, #12]
	s_command.Instruction       = DEF_AP_QSPI_READ_STATUS_2; // READ_STATUS_REG_CMD
240199ba:	2335      	movs	r3, #53	@ 0x35
240199bc:	60bb      	str	r3, [r7, #8]
	s_command.AddressMode       = HAL_OSPI_ADDRESS_NONE;
240199be:	2300      	movs	r3, #0
240199c0:	61fb      	str	r3, [r7, #28]
	s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
240199c2:	2300      	movs	r3, #0
240199c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	s_command.DataMode          = HAL_OSPI_DATA_1_LINE;
240199c6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
240199ca:	63bb      	str	r3, [r7, #56]	@ 0x38
	s_command.NbData = 1;
240199cc:	2301      	movs	r3, #1
240199ce:	63fb      	str	r3, [r7, #60]	@ 0x3c

	HAL_OSPI_Command(&hospi1, &s_command, 0xFFFF);
240199d0:	463b      	mov	r3, r7
240199d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
240199d6:	4619      	mov	r1, r3
240199d8:	4806      	ldr	r0, [pc, #24]	@ (240199f4 <apQspiReadState2+0x50>)
240199da:	f7f8 fb91 	bl	24012100 <HAL_OSPI_Command>
	HAL_OSPI_Receive(&hospi1, &reg_state[1], 0xFFFF);
240199de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
240199e2:	4905      	ldr	r1, [pc, #20]	@ (240199f8 <apQspiReadState2+0x54>)
240199e4:	4803      	ldr	r0, [pc, #12]	@ (240199f4 <apQspiReadState2+0x50>)
240199e6:	f7f8 fd7a 	bl	240124de <HAL_OSPI_Receive>

	return true;
240199ea:	2301      	movs	r3, #1
}
240199ec:	4618      	mov	r0, r3
240199ee:	3750      	adds	r7, #80	@ 0x50
240199f0:	46bd      	mov	sp, r7
240199f2:	bd80      	pop	{r7, pc}
240199f4:	2400288c 	.word	0x2400288c
240199f8:	24002579 	.word	0x24002579

240199fc <apQspiReadState3>:

bool apQspiReadState3(void)
{
240199fc:	b580      	push	{r7, lr}
240199fe:	b094      	sub	sp, #80	@ 0x50
24019a00:	af00      	add	r7, sp, #0
	OSPI_RegularCmdTypeDef s_command;
	memset(&s_command, '\0', sizeof(s_command));
24019a02:	463b      	mov	r3, r7
24019a04:	2250      	movs	r2, #80	@ 0x50
24019a06:	2100      	movs	r1, #0
24019a08:	4618      	mov	r0, r3
24019a0a:	f001 fae2 	bl	2401afd2 <memset>

	/* Configure automatic polling mode to wait for memory ready */
	s_command.InstructionMode   = HAL_OSPI_INSTRUCTION_1_LINE;
24019a0e:	2301      	movs	r3, #1
24019a10:	60fb      	str	r3, [r7, #12]
	s_command.Instruction       = DEF_AP_QSPI_READ_STATUS_3; // READ_STATUS_REG_CMD
24019a12:	2315      	movs	r3, #21
24019a14:	60bb      	str	r3, [r7, #8]
	s_command.AddressMode       = HAL_OSPI_ADDRESS_NONE;
24019a16:	2300      	movs	r3, #0
24019a18:	61fb      	str	r3, [r7, #28]
	s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
24019a1a:	2300      	movs	r3, #0
24019a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	s_command.DataMode          = HAL_OSPI_DATA_1_LINE;
24019a1e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
24019a22:	63bb      	str	r3, [r7, #56]	@ 0x38
	s_command.NbData = 1;
24019a24:	2301      	movs	r3, #1
24019a26:	63fb      	str	r3, [r7, #60]	@ 0x3c

	HAL_OSPI_Command(&hospi1, &s_command, 0xFFFF);
24019a28:	463b      	mov	r3, r7
24019a2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
24019a2e:	4619      	mov	r1, r3
24019a30:	4806      	ldr	r0, [pc, #24]	@ (24019a4c <apQspiReadState3+0x50>)
24019a32:	f7f8 fb65 	bl	24012100 <HAL_OSPI_Command>
	HAL_OSPI_Receive(&hospi1, &reg_state[2], 0xFFFF);
24019a36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
24019a3a:	4905      	ldr	r1, [pc, #20]	@ (24019a50 <apQspiReadState3+0x54>)
24019a3c:	4803      	ldr	r0, [pc, #12]	@ (24019a4c <apQspiReadState3+0x50>)
24019a3e:	f7f8 fd4e 	bl	240124de <HAL_OSPI_Receive>

	return true;
24019a42:	2301      	movs	r3, #1
}
24019a44:	4618      	mov	r0, r3
24019a46:	3750      	adds	r7, #80	@ 0x50
24019a48:	46bd      	mov	sp, r7
24019a4a:	bd80      	pop	{r7, pc}
24019a4c:	2400288c 	.word	0x2400288c
24019a50:	2400257a 	.word	0x2400257a

24019a54 <apQspiGetStauts>:

void apQspiGetStauts(uint8_t ret[])
{
24019a54:	b480      	push	{r7}
24019a56:	b085      	sub	sp, #20
24019a58:	af00      	add	r7, sp, #0
24019a5a:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 3; i++)
24019a5c:	2300      	movs	r3, #0
24019a5e:	60fb      	str	r3, [r7, #12]
24019a60:	e00a      	b.n	24019a78 <apQspiGetStauts+0x24>
	{
		ret[i] = reg_state[i];
24019a62:	68fb      	ldr	r3, [r7, #12]
24019a64:	687a      	ldr	r2, [r7, #4]
24019a66:	4413      	add	r3, r2
24019a68:	4908      	ldr	r1, [pc, #32]	@ (24019a8c <apQspiGetStauts+0x38>)
24019a6a:	68fa      	ldr	r2, [r7, #12]
24019a6c:	440a      	add	r2, r1
24019a6e:	7812      	ldrb	r2, [r2, #0]
24019a70:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 3; i++)
24019a72:	68fb      	ldr	r3, [r7, #12]
24019a74:	3301      	adds	r3, #1
24019a76:	60fb      	str	r3, [r7, #12]
24019a78:	68fb      	ldr	r3, [r7, #12]
24019a7a:	2b02      	cmp	r3, #2
24019a7c:	ddf1      	ble.n	24019a62 <apQspiGetStauts+0xe>
	}
}
24019a7e:	bf00      	nop
24019a80:	bf00      	nop
24019a82:	3714      	adds	r7, #20
24019a84:	46bd      	mov	sp, r7
24019a86:	f85d 7b04 	ldr.w	r7, [sp], #4
24019a8a:	4770      	bx	lr
24019a8c:	24002578 	.word	0x24002578

24019a90 <apQspiResetChip>:

bool apQspiResetChip(void)
{
24019a90:	b580      	push	{r7, lr}
24019a92:	b094      	sub	sp, #80	@ 0x50
24019a94:	af00      	add	r7, sp, #0
	OSPI_RegularCmdTypeDef cmd;

    memset((void *)&cmd, '\0', sizeof(cmd));
24019a96:	463b      	mov	r3, r7
24019a98:	2250      	movs	r2, #80	@ 0x50
24019a9a:	2100      	movs	r1, #0
24019a9c:	4618      	mov	r0, r3
24019a9e:	f001 fa98 	bl	2401afd2 <memset>
    cmd.Instruction = DEF_AP_QSPI_ENABLE_RESET;  // Write Enable command
24019aa2:	2366      	movs	r3, #102	@ 0x66
24019aa4:	60bb      	str	r3, [r7, #8]
    cmd.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE;
24019aa6:	2301      	movs	r3, #1
24019aa8:	60fb      	str	r3, [r7, #12]
    cmd.AddressMode = HAL_OSPI_ADDRESS_NONE;  // No address required
24019aaa:	2300      	movs	r3, #0
24019aac:	61fb      	str	r3, [r7, #28]
    cmd.DataMode = HAL_OSPI_DATA_NONE;  // No data to be transmitted
24019aae:	2300      	movs	r3, #0
24019ab0:	63bb      	str	r3, [r7, #56]	@ 0x38
    cmd.DummyCycles = 0;
24019ab2:	2300      	movs	r3, #0
24019ab4:	647b      	str	r3, [r7, #68]	@ 0x44

    if (HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
24019ab6:	463b      	mov	r3, r7
24019ab8:	f241 3288 	movw	r2, #5000	@ 0x1388
24019abc:	4619      	mov	r1, r3
24019abe:	4819      	ldr	r0, [pc, #100]	@ (24019b24 <apQspiResetChip+0x94>)
24019ac0:	f7f8 fb1e 	bl	24012100 <HAL_OSPI_Command>
24019ac4:	4603      	mov	r3, r0
24019ac6:	2b00      	cmp	r3, #0
24019ac8:	d001      	beq.n	24019ace <apQspiResetChip+0x3e>
    {
        return false;
24019aca:	2300      	movs	r3, #0
24019acc:	e026      	b.n	24019b1c <apQspiResetChip+0x8c>
    }

	if(apQspiAutoPollingMemReady(&hospi1, HAL_OSPI_TIMEOUT_DEFAULT_VALUE * 1000) == false)
24019ace:	4916      	ldr	r1, [pc, #88]	@ (24019b28 <apQspiResetChip+0x98>)
24019ad0:	4814      	ldr	r0, [pc, #80]	@ (24019b24 <apQspiResetChip+0x94>)
24019ad2:	f000 f8f7 	bl	24019cc4 <apQspiAutoPollingMemReady>
24019ad6:	4603      	mov	r3, r0
24019ad8:	f083 0301 	eor.w	r3, r3, #1
24019adc:	b2db      	uxtb	r3, r3
24019ade:	2b00      	cmp	r3, #0
24019ae0:	d001      	beq.n	24019ae6 <apQspiResetChip+0x56>
	{
		return false;
24019ae2:	2300      	movs	r3, #0
24019ae4:	e01a      	b.n	24019b1c <apQspiResetChip+0x8c>
	}

    cmd.Instruction = DEF_AP_QSPI_RESET_DEVICE;  // Write Enable command
24019ae6:	2399      	movs	r3, #153	@ 0x99
24019ae8:	60bb      	str	r3, [r7, #8]

    if (HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
24019aea:	463b      	mov	r3, r7
24019aec:	f241 3288 	movw	r2, #5000	@ 0x1388
24019af0:	4619      	mov	r1, r3
24019af2:	480c      	ldr	r0, [pc, #48]	@ (24019b24 <apQspiResetChip+0x94>)
24019af4:	f7f8 fb04 	bl	24012100 <HAL_OSPI_Command>
24019af8:	4603      	mov	r3, r0
24019afa:	2b00      	cmp	r3, #0
24019afc:	d001      	beq.n	24019b02 <apQspiResetChip+0x72>
    {
        return false;
24019afe:	2300      	movs	r3, #0
24019b00:	e00c      	b.n	24019b1c <apQspiResetChip+0x8c>
    }

	if(apQspiAutoPollingMemReady(&hospi1, HAL_OSPI_TIMEOUT_DEFAULT_VALUE * 1000) == false)
24019b02:	4909      	ldr	r1, [pc, #36]	@ (24019b28 <apQspiResetChip+0x98>)
24019b04:	4807      	ldr	r0, [pc, #28]	@ (24019b24 <apQspiResetChip+0x94>)
24019b06:	f000 f8dd 	bl	24019cc4 <apQspiAutoPollingMemReady>
24019b0a:	4603      	mov	r3, r0
24019b0c:	f083 0301 	eor.w	r3, r3, #1
24019b10:	b2db      	uxtb	r3, r3
24019b12:	2b00      	cmp	r3, #0
24019b14:	d001      	beq.n	24019b1a <apQspiResetChip+0x8a>
	{
		return false;
24019b16:	2300      	movs	r3, #0
24019b18:	e000      	b.n	24019b1c <apQspiResetChip+0x8c>
	}

    return true;
24019b1a:	2301      	movs	r3, #1
}
24019b1c:	4618      	mov	r0, r3
24019b1e:	3750      	adds	r7, #80	@ 0x50
24019b20:	46bd      	mov	sp, r7
24019b22:	bd80      	pop	{r7, pc}
24019b24:	2400288c 	.word	0x2400288c
24019b28:	004c4b40 	.word	0x004c4b40

24019b2c <apQspiWriteEnable>:

bool apQspiWriteEnable(void)
{
24019b2c:	b580      	push	{r7, lr}
24019b2e:	b094      	sub	sp, #80	@ 0x50
24019b30:	af00      	add	r7, sp, #0
	OSPI_RegularCmdTypeDef cmd = {0, };
24019b32:	463b      	mov	r3, r7
24019b34:	2250      	movs	r2, #80	@ 0x50
24019b36:	2100      	movs	r1, #0
24019b38:	4618      	mov	r0, r3
24019b3a:	f001 fa4a 	bl	2401afd2 <memset>

	// busy check
    cmd.Instruction = DEF_AP_QSPI_READ_STATUS_1;  // Write Enable command
24019b3e:	2305      	movs	r3, #5
24019b40:	60bb      	str	r3, [r7, #8]
    cmd.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE;
24019b42:	2301      	movs	r3, #1
24019b44:	60fb      	str	r3, [r7, #12]
    cmd.AddressMode = HAL_OSPI_ADDRESS_NONE;  // No address required
24019b46:	2300      	movs	r3, #0
24019b48:	61fb      	str	r3, [r7, #28]
    cmd.DataMode = HAL_OSPI_DATA_NONE;  // No data to be transmitted
24019b4a:	2300      	movs	r3, #0
24019b4c:	63bb      	str	r3, [r7, #56]	@ 0x38
    cmd.DummyCycles = 0;
24019b4e:	2300      	movs	r3, #0
24019b50:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
24019b52:	463b      	mov	r3, r7
24019b54:	f241 3288 	movw	r2, #5000	@ 0x1388
24019b58:	4619      	mov	r1, r3
24019b5a:	4822      	ldr	r0, [pc, #136]	@ (24019be4 <apQspiWriteEnable+0xb8>)
24019b5c:	f7f8 fad0 	bl	24012100 <HAL_OSPI_Command>
24019b60:	4603      	mov	r3, r0
24019b62:	2b00      	cmp	r3, #0
24019b64:	d001      	beq.n	24019b6a <apQspiWriteEnable+0x3e>
    {
        return false;
24019b66:	2300      	movs	r3, #0
24019b68:	e038      	b.n	24019bdc <apQspiWriteEnable+0xb0>
    }
	if(apQspiAutoPollingMemReady(&hospi1, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) == false)
24019b6a:	f241 3188 	movw	r1, #5000	@ 0x1388
24019b6e:	481d      	ldr	r0, [pc, #116]	@ (24019be4 <apQspiWriteEnable+0xb8>)
24019b70:	f000 f8a8 	bl	24019cc4 <apQspiAutoPollingMemReady>
24019b74:	4603      	mov	r3, r0
24019b76:	f083 0301 	eor.w	r3, r3, #1
24019b7a:	b2db      	uxtb	r3, r3
24019b7c:	2b00      	cmp	r3, #0
24019b7e:	d001      	beq.n	24019b84 <apQspiWriteEnable+0x58>
	{
		return false;
24019b80:	2300      	movs	r3, #0
24019b82:	e02b      	b.n	24019bdc <apQspiWriteEnable+0xb0>
	}

	// write enable
    memset((void *)&cmd, '\0', sizeof(cmd));
24019b84:	463b      	mov	r3, r7
24019b86:	2250      	movs	r2, #80	@ 0x50
24019b88:	2100      	movs	r1, #0
24019b8a:	4618      	mov	r0, r3
24019b8c:	f001 fa21 	bl	2401afd2 <memset>
    cmd.Instruction = DEF_AP_QSPI_WRITE_ENABLE;  // Write Enable command
24019b90:	2306      	movs	r3, #6
24019b92:	60bb      	str	r3, [r7, #8]
    cmd.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE;
24019b94:	2301      	movs	r3, #1
24019b96:	60fb      	str	r3, [r7, #12]
    cmd.AddressMode = HAL_OSPI_ADDRESS_NONE;  // No address required
24019b98:	2300      	movs	r3, #0
24019b9a:	61fb      	str	r3, [r7, #28]
    cmd.DataMode = HAL_OSPI_DATA_NONE;  // No data to be transmitted
24019b9c:	2300      	movs	r3, #0
24019b9e:	63bb      	str	r3, [r7, #56]	@ 0x38
    cmd.DummyCycles = 0;
24019ba0:	2300      	movs	r3, #0
24019ba2:	647b      	str	r3, [r7, #68]	@ 0x44
    cmd.NbData = 1; // s_config status bytes size를 대체함
24019ba4:	2301      	movs	r3, #1
24019ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
24019ba8:	463b      	mov	r3, r7
24019baa:	f241 3288 	movw	r2, #5000	@ 0x1388
24019bae:	4619      	mov	r1, r3
24019bb0:	480c      	ldr	r0, [pc, #48]	@ (24019be4 <apQspiWriteEnable+0xb8>)
24019bb2:	f7f8 faa5 	bl	24012100 <HAL_OSPI_Command>
24019bb6:	4603      	mov	r3, r0
24019bb8:	2b00      	cmp	r3, #0
24019bba:	d001      	beq.n	24019bc0 <apQspiWriteEnable+0x94>
    {
        return false;
24019bbc:	2300      	movs	r3, #0
24019bbe:	e00d      	b.n	24019bdc <apQspiWriteEnable+0xb0>
    }

	if(apQspiAutoPollingWriteEnable(&hospi1, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) == false)
24019bc0:	f241 3188 	movw	r1, #5000	@ 0x1388
24019bc4:	4807      	ldr	r0, [pc, #28]	@ (24019be4 <apQspiWriteEnable+0xb8>)
24019bc6:	f000 f8c9 	bl	24019d5c <apQspiAutoPollingWriteEnable>
24019bca:	4603      	mov	r3, r0
24019bcc:	f083 0301 	eor.w	r3, r3, #1
24019bd0:	b2db      	uxtb	r3, r3
24019bd2:	2b00      	cmp	r3, #0
24019bd4:	d001      	beq.n	24019bda <apQspiWriteEnable+0xae>
	{
		return false;
24019bd6:	2300      	movs	r3, #0
24019bd8:	e000      	b.n	24019bdc <apQspiWriteEnable+0xb0>
	}

    return true;
24019bda:	2301      	movs	r3, #1
}
24019bdc:	4618      	mov	r0, r3
24019bde:	3750      	adds	r7, #80	@ 0x50
24019be0:	46bd      	mov	sp, r7
24019be2:	bd80      	pop	{r7, pc}
24019be4:	2400288c 	.word	0x2400288c

24019be8 <apQspiEraseBulkchip>:

bool apQspiEraseBulkchip(void)
{
24019be8:	b580      	push	{r7, lr}
24019bea:	b094      	sub	sp, #80	@ 0x50
24019bec:	af00      	add	r7, sp, #0
	apQspiWriteEnable();
24019bee:	f7ff ff9d 	bl	24019b2c <apQspiWriteEnable>

	OSPI_RegularCmdTypeDef cmd = {0, };
24019bf2:	463b      	mov	r3, r7
24019bf4:	2250      	movs	r2, #80	@ 0x50
24019bf6:	2100      	movs	r1, #0
24019bf8:	4618      	mov	r0, r3
24019bfa:	f001 f9ea 	bl	2401afd2 <memset>

    cmd.Instruction = DEF_AP_QSPI_CHIP_ERASE_1;  // Write Enable command
24019bfe:	23c7      	movs	r3, #199	@ 0xc7
24019c00:	60bb      	str	r3, [r7, #8]
    cmd.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE;
24019c02:	2301      	movs	r3, #1
24019c04:	60fb      	str	r3, [r7, #12]
    cmd.AddressMode = HAL_OSPI_ADDRESS_NONE;  // No address required
24019c06:	2300      	movs	r3, #0
24019c08:	61fb      	str	r3, [r7, #28]
    cmd.DataMode = HAL_OSPI_DATA_NONE;  // No data to be transmitted
24019c0a:	2300      	movs	r3, #0
24019c0c:	63bb      	str	r3, [r7, #56]	@ 0x38
    cmd.DummyCycles = 0;
24019c0e:	2300      	movs	r3, #0
24019c10:	647b      	str	r3, [r7, #68]	@ 0x44

    if (HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
24019c12:	463b      	mov	r3, r7
24019c14:	f241 3288 	movw	r2, #5000	@ 0x1388
24019c18:	4619      	mov	r1, r3
24019c1a:	480b      	ldr	r0, [pc, #44]	@ (24019c48 <apQspiEraseBulkchip+0x60>)
24019c1c:	f7f8 fa70 	bl	24012100 <HAL_OSPI_Command>
24019c20:	4603      	mov	r3, r0
24019c22:	2b00      	cmp	r3, #0
24019c24:	d001      	beq.n	24019c2a <apQspiEraseBulkchip+0x42>
    {
        return false;
24019c26:	2300      	movs	r3, #0
24019c28:	e009      	b.n	24019c3e <apQspiEraseBulkchip+0x56>
    }

	while(true)
	{
		if(apQspiAutoPollingMemReady(&hospi1, HAL_OSPI_TIMEOUT_DEFAULT_VALUE * 1000) == true)
24019c2a:	4908      	ldr	r1, [pc, #32]	@ (24019c4c <apQspiEraseBulkchip+0x64>)
24019c2c:	4806      	ldr	r0, [pc, #24]	@ (24019c48 <apQspiEraseBulkchip+0x60>)
24019c2e:	f000 f849 	bl	24019cc4 <apQspiAutoPollingMemReady>
24019c32:	4603      	mov	r3, r0
24019c34:	2b00      	cmp	r3, #0
24019c36:	d100      	bne.n	24019c3a <apQspiEraseBulkchip+0x52>
24019c38:	e7f7      	b.n	24019c2a <apQspiEraseBulkchip+0x42>
		{
			break;
24019c3a:	bf00      	nop
		}
	}

    return true;
24019c3c:	2301      	movs	r3, #1
}
24019c3e:	4618      	mov	r0, r3
24019c40:	3750      	adds	r7, #80	@ 0x50
24019c42:	46bd      	mov	sp, r7
24019c44:	bd80      	pop	{r7, pc}
24019c46:	bf00      	nop
24019c48:	2400288c 	.word	0x2400288c
24019c4c:	004c4b40 	.word	0x004c4b40

24019c50 <apQspiEraseSector>:

bool apQspiEraseSector(uint32_t address)
{
24019c50:	b580      	push	{r7, lr}
24019c52:	b096      	sub	sp, #88	@ 0x58
24019c54:	af00      	add	r7, sp, #0
24019c56:	6078      	str	r0, [r7, #4]
    OSPI_RegularCmdTypeDef cmd = {0, };
24019c58:	f107 0308 	add.w	r3, r7, #8
24019c5c:	2250      	movs	r2, #80	@ 0x50
24019c5e:	2100      	movs	r1, #0
24019c60:	4618      	mov	r0, r3
24019c62:	f001 f9b6 	bl	2401afd2 <memset>

	apQspiWriteEnable();
24019c66:	f7ff ff61 	bl	24019b2c <apQspiWriteEnable>

	cmd.Instruction = DEF_AP_QSPI_CHIP_ERASE_64K; // chip erase
24019c6a:	23d8      	movs	r3, #216	@ 0xd8
24019c6c:	613b      	str	r3, [r7, #16]
	cmd.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE;
24019c6e:	2301      	movs	r3, #1
24019c70:	617b      	str	r3, [r7, #20]
	cmd.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
24019c72:	f44f 7380 	mov.w	r3, #256	@ 0x100
24019c76:	627b      	str	r3, [r7, #36]	@ 0x24
	cmd.AddressSize = HAL_OSPI_ADDRESS_24_BITS;
24019c78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
24019c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
	cmd.Address = address * 4096;
24019c7e:	687b      	ldr	r3, [r7, #4]
24019c80:	031b      	lsls	r3, r3, #12
24019c82:	623b      	str	r3, [r7, #32]
	cmd.DataMode = HAL_OSPI_DATA_NONE;  // Quad mode for data
24019c84:	2300      	movs	r3, #0
24019c86:	643b      	str	r3, [r7, #64]	@ 0x40
	cmd.DummyCycles = 0;  /// fast read에 사용된다고함
24019c88:	2300      	movs	r3, #0
24019c8a:	64fb      	str	r3, [r7, #76]	@ 0x4c

	HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
24019c8c:	f107 0308 	add.w	r3, r7, #8
24019c90:	f241 3288 	movw	r2, #5000	@ 0x1388
24019c94:	4619      	mov	r1, r3
24019c96:	480a      	ldr	r0, [pc, #40]	@ (24019cc0 <apQspiEraseSector+0x70>)
24019c98:	f7f8 fa32 	bl	24012100 <HAL_OSPI_Command>

	if(apQspiAutoPollingMemReady(&hospi1, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) == false)
24019c9c:	f241 3188 	movw	r1, #5000	@ 0x1388
24019ca0:	4807      	ldr	r0, [pc, #28]	@ (24019cc0 <apQspiEraseSector+0x70>)
24019ca2:	f000 f80f 	bl	24019cc4 <apQspiAutoPollingMemReady>
24019ca6:	4603      	mov	r3, r0
24019ca8:	f083 0301 	eor.w	r3, r3, #1
24019cac:	b2db      	uxtb	r3, r3
24019cae:	2b00      	cmp	r3, #0
24019cb0:	d001      	beq.n	24019cb6 <apQspiEraseSector+0x66>
	{
		return false;
24019cb2:	2300      	movs	r3, #0
24019cb4:	e000      	b.n	24019cb8 <apQspiEraseSector+0x68>
	}

	return true;
24019cb6:	2301      	movs	r3, #1
}
24019cb8:	4618      	mov	r0, r3
24019cba:	3758      	adds	r7, #88	@ 0x58
24019cbc:	46bd      	mov	sp, r7
24019cbe:	bd80      	pop	{r7, pc}
24019cc0:	2400288c 	.word	0x2400288c

24019cc4 <apQspiAutoPollingMemReady>:
/*
 * @ brief : check busy state only
 */

bool apQspiAutoPollingMemReady(OSPI_HandleTypeDef *hospi1, uint32_t Timeout)
{
24019cc4:	b580      	push	{r7, lr}
24019cc6:	b09c      	sub	sp, #112	@ 0x70
24019cc8:	af00      	add	r7, sp, #0
24019cca:	6078      	str	r0, [r7, #4]
24019ccc:	6039      	str	r1, [r7, #0]
	OSPI_RegularCmdTypeDef s_command = {0, };
24019cce:	f107 0320 	add.w	r3, r7, #32
24019cd2:	2250      	movs	r2, #80	@ 0x50
24019cd4:	2100      	movs	r1, #0
24019cd6:	4618      	mov	r0, r3
24019cd8:	f001 f97b 	bl	2401afd2 <memset>
	OSPI_AutoPollingTypeDef s_config = {0, };
24019cdc:	f107 030c 	add.w	r3, r7, #12
24019ce0:	2200      	movs	r2, #0
24019ce2:	601a      	str	r2, [r3, #0]
24019ce4:	605a      	str	r2, [r3, #4]
24019ce6:	609a      	str	r2, [r3, #8]
24019ce8:	60da      	str	r2, [r3, #12]
24019cea:	611a      	str	r2, [r3, #16]

	/* Configure automatic polling mode to wait for memory ready */
	s_command.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE;
24019cec:	2301      	movs	r3, #1
24019cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
	s_command.Instruction = DEF_AP_QSPI_READ_STATUS_1; // READ_STATUS_REG_CMD
24019cf0:	2305      	movs	r3, #5
24019cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
	s_command.AddressMode = HAL_OSPI_ADDRESS_NONE;
24019cf4:	2300      	movs	r3, #0
24019cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
24019cf8:	2300      	movs	r3, #0
24019cfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
	s_command.DataMode = HAL_OSPI_DATA_1_LINE;
24019cfc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
24019d00:	65bb      	str	r3, [r7, #88]	@ 0x58
	s_command.NbData = 1;  // s_config status bytes size를 대체함
24019d02:	2301      	movs	r3, #1
24019d04:	65fb      	str	r3, [r7, #92]	@ 0x5c
	s_command.DummyCycles = 0;
24019d06:	2300      	movs	r3, #0
24019d08:	667b      	str	r3, [r7, #100]	@ 0x64

	s_config.Match           = 0x00;
24019d0a:	2300      	movs	r3, #0
24019d0c:	60fb      	str	r3, [r7, #12]
	s_config.Mask            = 0x01; // W25Q128FV_SR_WIP
24019d0e:	2301      	movs	r3, #1
24019d10:	613b      	str	r3, [r7, #16]
	s_config.MatchMode       = HAL_OSPI_MATCH_MODE_AND;
24019d12:	2300      	movs	r3, #0
24019d14:	617b      	str	r3, [r7, #20]
	// s_config.StatusBytesSize = 1;
	s_config.Interval        = 0x10;
24019d16:	2310      	movs	r3, #16
24019d18:	61fb      	str	r3, [r7, #28]
	s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
24019d1a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
24019d1e:	61bb      	str	r3, [r7, #24]

    if (HAL_OSPI_Command(hospi1, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
24019d20:	f107 0320 	add.w	r3, r7, #32
24019d24:	f241 3288 	movw	r2, #5000	@ 0x1388
24019d28:	4619      	mov	r1, r3
24019d2a:	6878      	ldr	r0, [r7, #4]
24019d2c:	f7f8 f9e8 	bl	24012100 <HAL_OSPI_Command>
24019d30:	4603      	mov	r3, r0
24019d32:	2b00      	cmp	r3, #0
24019d34:	d001      	beq.n	24019d3a <apQspiAutoPollingMemReady+0x76>
    {
        return false;
24019d36:	2300      	movs	r3, #0
24019d38:	e00c      	b.n	24019d54 <apQspiAutoPollingMemReady+0x90>
    }
	if(HAL_OSPI_AutoPolling(hospi1, &s_config, Timeout) != HAL_OK)
24019d3a:	f107 030c 	add.w	r3, r7, #12
24019d3e:	683a      	ldr	r2, [r7, #0]
24019d40:	4619      	mov	r1, r3
24019d42:	6878      	ldr	r0, [r7, #4]
24019d44:	f7f8 fed2 	bl	24012aec <HAL_OSPI_AutoPolling>
24019d48:	4603      	mov	r3, r0
24019d4a:	2b00      	cmp	r3, #0
24019d4c:	d001      	beq.n	24019d52 <apQspiAutoPollingMemReady+0x8e>
	{
		return false;
24019d4e:	2300      	movs	r3, #0
24019d50:	e000      	b.n	24019d54 <apQspiAutoPollingMemReady+0x90>
	}
	return true;
24019d52:	2301      	movs	r3, #1
}
24019d54:	4618      	mov	r0, r3
24019d56:	3770      	adds	r7, #112	@ 0x70
24019d58:	46bd      	mov	sp, r7
24019d5a:	bd80      	pop	{r7, pc}

24019d5c <apQspiAutoPollingWriteEnable>:

bool apQspiAutoPollingWriteEnable(OSPI_HandleTypeDef *hospi1, uint32_t Timeout)
{
24019d5c:	b580      	push	{r7, lr}
24019d5e:	b09c      	sub	sp, #112	@ 0x70
24019d60:	af00      	add	r7, sp, #0
24019d62:	6078      	str	r0, [r7, #4]
24019d64:	6039      	str	r1, [r7, #0]
	OSPI_RegularCmdTypeDef s_command = {0, };
24019d66:	f107 0320 	add.w	r3, r7, #32
24019d6a:	2250      	movs	r2, #80	@ 0x50
24019d6c:	2100      	movs	r1, #0
24019d6e:	4618      	mov	r0, r3
24019d70:	f001 f92f 	bl	2401afd2 <memset>
	OSPI_AutoPollingTypeDef s_config = {0, };
24019d74:	f107 030c 	add.w	r3, r7, #12
24019d78:	2200      	movs	r2, #0
24019d7a:	601a      	str	r2, [r3, #0]
24019d7c:	605a      	str	r2, [r3, #4]
24019d7e:	609a      	str	r2, [r3, #8]
24019d80:	60da      	str	r2, [r3, #12]
24019d82:	611a      	str	r2, [r3, #16]

	/* Configure automatic polling mode to wait for memory ready */
	s_command.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE;
24019d84:	2301      	movs	r3, #1
24019d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
	s_command.Instruction = DEF_AP_QSPI_READ_STATUS_1; // READ_STATUS_REG_CMD
24019d88:	2305      	movs	r3, #5
24019d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
	s_command.AddressMode = HAL_OSPI_ADDRESS_NONE;
24019d8c:	2300      	movs	r3, #0
24019d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
24019d90:	2300      	movs	r3, #0
24019d92:	64fb      	str	r3, [r7, #76]	@ 0x4c
	s_command.DataMode = HAL_OSPI_DATA_1_LINE;
24019d94:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
24019d98:	65bb      	str	r3, [r7, #88]	@ 0x58
	s_command.NbData = 1;  // s_config status bytes size를 대체함
24019d9a:	2301      	movs	r3, #1
24019d9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
	s_command.DummyCycles = 0;
24019d9e:	2300      	movs	r3, #0
24019da0:	667b      	str	r3, [r7, #100]	@ 0x64

	s_config.Match           = 0x02;
24019da2:	2302      	movs	r3, #2
24019da4:	60fb      	str	r3, [r7, #12]
	s_config.Mask            = 0x02; // W25Q128FV_SR_WIP
24019da6:	2302      	movs	r3, #2
24019da8:	613b      	str	r3, [r7, #16]
	s_config.MatchMode       = HAL_OSPI_MATCH_MODE_AND;
24019daa:	2300      	movs	r3, #0
24019dac:	617b      	str	r3, [r7, #20]
	// s_config.StatusBytesSize = 1;
	s_config.Interval        = 0x10;
24019dae:	2310      	movs	r3, #16
24019db0:	61fb      	str	r3, [r7, #28]
	s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
24019db2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
24019db6:	61bb      	str	r3, [r7, #24]

    if (HAL_OSPI_Command(hospi1, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
24019db8:	f107 0320 	add.w	r3, r7, #32
24019dbc:	f241 3288 	movw	r2, #5000	@ 0x1388
24019dc0:	4619      	mov	r1, r3
24019dc2:	6878      	ldr	r0, [r7, #4]
24019dc4:	f7f8 f99c 	bl	24012100 <HAL_OSPI_Command>
24019dc8:	4603      	mov	r3, r0
24019dca:	2b00      	cmp	r3, #0
24019dcc:	d001      	beq.n	24019dd2 <apQspiAutoPollingWriteEnable+0x76>
    {
        return false;
24019dce:	2300      	movs	r3, #0
24019dd0:	e00c      	b.n	24019dec <apQspiAutoPollingWriteEnable+0x90>
    }
	if(HAL_OSPI_AutoPolling(hospi1, &s_config, Timeout) != HAL_OK)
24019dd2:	f107 030c 	add.w	r3, r7, #12
24019dd6:	683a      	ldr	r2, [r7, #0]
24019dd8:	4619      	mov	r1, r3
24019dda:	6878      	ldr	r0, [r7, #4]
24019ddc:	f7f8 fe86 	bl	24012aec <HAL_OSPI_AutoPolling>
24019de0:	4603      	mov	r3, r0
24019de2:	2b00      	cmp	r3, #0
24019de4:	d001      	beq.n	24019dea <apQspiAutoPollingWriteEnable+0x8e>
	{
		return false;
24019de6:	2300      	movs	r3, #0
24019de8:	e000      	b.n	24019dec <apQspiAutoPollingWriteEnable+0x90>
	}
	return true;
24019dea:	2301      	movs	r3, #1
}
24019dec:	4618      	mov	r0, r3
24019dee:	3770      	adds	r7, #112	@ 0x70
24019df0:	46bd      	mov	sp, r7
24019df2:	bd80      	pop	{r7, pc}

24019df4 <apQspiMemMapStart>:


bool apQspiMemMapStart(void)
{
24019df4:	b580      	push	{r7, lr}
24019df6:	b096      	sub	sp, #88	@ 0x58
24019df8:	af00      	add	r7, sp, #0
	OSPI_RegularCmdTypeDef s_command = {0, };
24019dfa:	f107 0308 	add.w	r3, r7, #8
24019dfe:	2250      	movs	r2, #80	@ 0x50
24019e00:	2100      	movs	r1, #0
24019e02:	4618      	mov	r0, r3
24019e04:	f001 f8e5 	bl	2401afd2 <memset>
    OSPI_MemoryMappedTypeDef cfg = {0, };
24019e08:	463b      	mov	r3, r7
24019e0a:	2200      	movs	r2, #0
24019e0c:	601a      	str	r2, [r3, #0]
24019e0e:	605a      	str	r2, [r3, #4]


	/* Configure automatic polling mode to wait for memory ready */
	s_command.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE;
24019e10:	2301      	movs	r3, #1
24019e12:	617b      	str	r3, [r7, #20]
	s_command.Instruction = DEF_AP_QSPI_FAST_READ; // READ_STATUS_REG_CMD
24019e14:	23eb      	movs	r3, #235	@ 0xeb
24019e16:	613b      	str	r3, [r7, #16]
	s_command.AddressMode = HAL_OSPI_ADDRESS_4_LINES;
24019e18:	f44f 7340 	mov.w	r3, #768	@ 0x300
24019e1c:	627b      	str	r3, [r7, #36]	@ 0x24
	s_command.AddressSize = HAL_OSPI_ADDRESS_24_BITS;
24019e1e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
24019e22:	62bb      	str	r3, [r7, #40]	@ 0x28
	s_command.Address = 0;
24019e24:	2300      	movs	r3, #0
24019e26:	623b      	str	r3, [r7, #32]
	s_command.DataMode = HAL_OSPI_DATA_4_LINES;
24019e28:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
24019e2c:	643b      	str	r3, [r7, #64]	@ 0x40
	s_command.NbData = 0;
24019e2e:	2300      	movs	r3, #0
24019e30:	647b      	str	r3, [r7, #68]	@ 0x44
	s_command.DummyCycles = 6;
24019e32:	2306      	movs	r3, #6
24019e34:	64fb      	str	r3, [r7, #76]	@ 0x4c

	if (HAL_OSPI_Command(&hospi1, &s_command, 0xFFFF) != HAL_OK)
24019e36:	f107 0308 	add.w	r3, r7, #8
24019e3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
24019e3e:	4619      	mov	r1, r3
24019e40:	480c      	ldr	r0, [pc, #48]	@ (24019e74 <apQspiMemMapStart+0x80>)
24019e42:	f7f8 f95d 	bl	24012100 <HAL_OSPI_Command>
24019e46:	4603      	mov	r3, r0
24019e48:	2b00      	cmp	r3, #0
24019e4a:	d001      	beq.n	24019e50 <apQspiMemMapStart+0x5c>
	{
		return false;
24019e4c:	2300      	movs	r3, #0
24019e4e:	e00c      	b.n	24019e6a <apQspiMemMapStart+0x76>
	}
	cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
24019e50:	2300      	movs	r3, #0
24019e52:	603b      	str	r3, [r7, #0]

    if(HAL_OSPI_MemoryMapped(&hospi1, &cfg) != HAL_OK)
24019e54:	463b      	mov	r3, r7
24019e56:	4619      	mov	r1, r3
24019e58:	4806      	ldr	r0, [pc, #24]	@ (24019e74 <apQspiMemMapStart+0x80>)
24019e5a:	f7f8 ff49 	bl	24012cf0 <HAL_OSPI_MemoryMapped>
24019e5e:	4603      	mov	r3, r0
24019e60:	2b00      	cmp	r3, #0
24019e62:	d001      	beq.n	24019e68 <apQspiMemMapStart+0x74>
    {
        Error_Handler();
24019e64:	f000 f98a 	bl	2401a17c <Error_Handler>
    }

    return true;
24019e68:	2301      	movs	r3, #1
}
24019e6a:	4618      	mov	r0, r3
24019e6c:	3758      	adds	r7, #88	@ 0x58
24019e6e:	46bd      	mov	sp, r7
24019e70:	bd80      	pop	{r7, pc}
24019e72:	bf00      	nop
24019e74:	2400288c 	.word	0x2400288c

24019e78 <apQspiRead>:

bool apQspiRead(uint8_t ret_buff[], uint32_t p_address, uint32_t length)
{
24019e78:	b580      	push	{r7, lr}
24019e7a:	b098      	sub	sp, #96	@ 0x60
24019e7c:	af00      	add	r7, sp, #0
24019e7e:	60f8      	str	r0, [r7, #12]
24019e80:	60b9      	str	r1, [r7, #8]
24019e82:	607a      	str	r2, [r7, #4]
	if(length < DEF_READ_BUFF_LENGTH)
24019e84:	687b      	ldr	r3, [r7, #4]
24019e86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
24019e8a:	d233      	bcs.n	24019ef4 <apQspiRead+0x7c>
	{
		OSPI_RegularCmdTypeDef sCommand = {0};
24019e8c:	f107 0310 	add.w	r3, r7, #16
24019e90:	2250      	movs	r2, #80	@ 0x50
24019e92:	2100      	movs	r1, #0
24019e94:	4618      	mov	r0, r3
24019e96:	f001 f89c 	bl	2401afd2 <memset>
		sCommand.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE;
24019e9a:	2301      	movs	r3, #1
24019e9c:	61fb      	str	r3, [r7, #28]
		sCommand.Instruction = DEF_AP_QSPI_FAST_READ; // READ_STATUS_REG_CMD
24019e9e:	23eb      	movs	r3, #235	@ 0xeb
24019ea0:	61bb      	str	r3, [r7, #24]
		sCommand.AddressMode = HAL_OSPI_ADDRESS_4_LINES;
24019ea2:	f44f 7340 	mov.w	r3, #768	@ 0x300
24019ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
		sCommand.AddressSize = HAL_OSPI_ADDRESS_24_BITS;
24019ea8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
24019eac:	633b      	str	r3, [r7, #48]	@ 0x30
		sCommand.Address = p_address;
24019eae:	68bb      	ldr	r3, [r7, #8]
24019eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
		sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
24019eb2:	2300      	movs	r3, #0
24019eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
		sCommand.DataMode = HAL_OSPI_DATA_4_LINES;
24019eb6:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
24019eba:	64bb      	str	r3, [r7, #72]	@ 0x48
		sCommand.NbData = length;
24019ebc:	687b      	ldr	r3, [r7, #4]
24019ebe:	64fb      	str	r3, [r7, #76]	@ 0x4c
		sCommand.DummyCycles = 6;
24019ec0:	2306      	movs	r3, #6
24019ec2:	657b      	str	r3, [r7, #84]	@ 0x54

		if (HAL_OSPI_Command(&hospi1, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
24019ec4:	f107 0310 	add.w	r3, r7, #16
24019ec8:	f241 3288 	movw	r2, #5000	@ 0x1388
24019ecc:	4619      	mov	r1, r3
24019ece:	480c      	ldr	r0, [pc, #48]	@ (24019f00 <apQspiRead+0x88>)
24019ed0:	f7f8 f916 	bl	24012100 <HAL_OSPI_Command>
24019ed4:	4603      	mov	r3, r0
24019ed6:	2b00      	cmp	r3, #0
24019ed8:	d001      	beq.n	24019ede <apQspiRead+0x66>
		{
			return false;
24019eda:	2300      	movs	r3, #0
24019edc:	e00b      	b.n	24019ef6 <apQspiRead+0x7e>
		}

		if (HAL_OSPI_Receive(&hospi1, ret_buff, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
24019ede:	f241 3288 	movw	r2, #5000	@ 0x1388
24019ee2:	68f9      	ldr	r1, [r7, #12]
24019ee4:	4806      	ldr	r0, [pc, #24]	@ (24019f00 <apQspiRead+0x88>)
24019ee6:	f7f8 fafa 	bl	240124de <HAL_OSPI_Receive>
24019eea:	4603      	mov	r3, r0
24019eec:	2b00      	cmp	r3, #0
24019eee:	d001      	beq.n	24019ef4 <apQspiRead+0x7c>
		{
			return false;
24019ef0:	2300      	movs	r3, #0
24019ef2:	e000      	b.n	24019ef6 <apQspiRead+0x7e>
		}
	}
    return true;
24019ef4:	2301      	movs	r3, #1
}
24019ef6:	4618      	mov	r0, r3
24019ef8:	3760      	adds	r7, #96	@ 0x60
24019efa:	46bd      	mov	sp, r7
24019efc:	bd80      	pop	{r7, pc}
24019efe:	bf00      	nop
24019f00:	2400288c 	.word	0x2400288c

24019f04 <apQspiWrite>:

bool apQspiWrite(uint8_t buff[], uint32_t p_address, uint32_t length)
{
24019f04:	b580      	push	{r7, lr}
24019f06:	b098      	sub	sp, #96	@ 0x60
24019f08:	af00      	add	r7, sp, #0
24019f0a:	60f8      	str	r0, [r7, #12]
24019f0c:	60b9      	str	r1, [r7, #8]
24019f0e:	607a      	str	r2, [r7, #4]
	OSPI_RegularCmdTypeDef s_command = {0, };
24019f10:	f107 0310 	add.w	r3, r7, #16
24019f14:	2250      	movs	r2, #80	@ 0x50
24019f16:	2100      	movs	r1, #0
24019f18:	4618      	mov	r0, r3
24019f1a:	f001 f85a 	bl	2401afd2 <memset>

	if((length < DEF_READ_BUFF_LENGTH) && (length > 0))
24019f1e:	687b      	ldr	r3, [r7, #4]
24019f20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
24019f24:	d234      	bcs.n	24019f90 <apQspiWrite+0x8c>
24019f26:	687b      	ldr	r3, [r7, #4]
24019f28:	2b00      	cmp	r3, #0
24019f2a:	d031      	beq.n	24019f90 <apQspiWrite+0x8c>
	{
		apQspiWriteEnable();
24019f2c:	f7ff fdfe 	bl	24019b2c <apQspiWriteEnable>

		/* Configure automatic polling mode to wait for memory ready */
		s_command.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE;
24019f30:	2301      	movs	r3, #1
24019f32:	61fb      	str	r3, [r7, #28]
		s_command.Instruction = DEF_AP_QSPI_WRITE; // READ_STATUS_REG_CMD
24019f34:	2332      	movs	r3, #50	@ 0x32
24019f36:	61bb      	str	r3, [r7, #24]
		s_command.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
24019f38:	f44f 7380 	mov.w	r3, #256	@ 0x100
24019f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		s_command.AddressSize = HAL_OSPI_ADDRESS_24_BITS;
24019f3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
24019f42:	633b      	str	r3, [r7, #48]	@ 0x30
		s_command.Address = p_address;
24019f44:	68bb      	ldr	r3, [r7, #8]
24019f46:	62bb      	str	r3, [r7, #40]	@ 0x28
		s_command.DataMode = HAL_OSPI_DATA_4_LINES;
24019f48:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
24019f4c:	64bb      	str	r3, [r7, #72]	@ 0x48
		s_command.NbData = length;
24019f4e:	687b      	ldr	r3, [r7, #4]
24019f50:	64fb      	str	r3, [r7, #76]	@ 0x4c

		if (HAL_OSPI_Command(&hospi1, &s_command, HAL_OSPI_TIMEOUT_COUNTER_DISABLE) != HAL_OK)
24019f52:	f107 0310 	add.w	r3, r7, #16
24019f56:	2200      	movs	r2, #0
24019f58:	4619      	mov	r1, r3
24019f5a:	4810      	ldr	r0, [pc, #64]	@ (24019f9c <apQspiWrite+0x98>)
24019f5c:	f7f8 f8d0 	bl	24012100 <HAL_OSPI_Command>
24019f60:	4603      	mov	r3, r0
24019f62:	2b00      	cmp	r3, #0
24019f64:	d001      	beq.n	24019f6a <apQspiWrite+0x66>
		{
			return false;
24019f66:	2300      	movs	r3, #0
24019f68:	e013      	b.n	24019f92 <apQspiWrite+0x8e>
		}

		HAL_OSPI_Transmit(&hospi1, buff, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
24019f6a:	f241 3288 	movw	r2, #5000	@ 0x1388
24019f6e:	68f9      	ldr	r1, [r7, #12]
24019f70:	480a      	ldr	r0, [pc, #40]	@ (24019f9c <apQspiWrite+0x98>)
24019f72:	f7f8 fa41 	bl	240123f8 <HAL_OSPI_Transmit>

		if(apQspiAutoPollingMemReady(&hospi1, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) == false)
24019f76:	f241 3188 	movw	r1, #5000	@ 0x1388
24019f7a:	4808      	ldr	r0, [pc, #32]	@ (24019f9c <apQspiWrite+0x98>)
24019f7c:	f7ff fea2 	bl	24019cc4 <apQspiAutoPollingMemReady>
24019f80:	4603      	mov	r3, r0
24019f82:	f083 0301 	eor.w	r3, r3, #1
24019f86:	b2db      	uxtb	r3, r3
24019f88:	2b00      	cmp	r3, #0
24019f8a:	d001      	beq.n	24019f90 <apQspiWrite+0x8c>
		{
			return false;
24019f8c:	2300      	movs	r3, #0
24019f8e:	e000      	b.n	24019f92 <apQspiWrite+0x8e>
		}
	}
    return true;
24019f90:	2301      	movs	r3, #1
}
24019f92:	4618      	mov	r0, r3
24019f94:	3760      	adds	r7, #96	@ 0x60
24019f96:	46bd      	mov	sp, r7
24019f98:	bd80      	pop	{r7, pc}
24019f9a:	bf00      	nop
24019f9c:	2400288c 	.word	0x2400288c

24019fa0 <apSwitchInit>:

static bool isPushed(void);


void apSwitchInit(void)
{
24019fa0:	b580      	push	{r7, lr}
24019fa2:	b082      	sub	sp, #8
24019fa4:	af00      	add	r7, sp, #0
	uint32_t tick = millis();
24019fa6:	f000 f873 	bl	2401a090 <millis>
24019faa:	6078      	str	r0, [r7, #4]

	while(true)
	{
		if(millis() - tick > 1)
24019fac:	f000 f870 	bl	2401a090 <millis>
24019fb0:	4602      	mov	r2, r0
24019fb2:	687b      	ldr	r3, [r7, #4]
24019fb4:	1ad3      	subs	r3, r2, r3
24019fb6:	2b01      	cmp	r3, #1
24019fb8:	d9f8      	bls.n	24019fac <apSwitchInit+0xc>
		{
			if(millis() - tick > 100)
24019fba:	f000 f869 	bl	2401a090 <millis>
24019fbe:	4602      	mov	r2, r0
24019fc0:	687b      	ldr	r3, [r7, #4]
24019fc2:	1ad3      	subs	r3, r2, r3
24019fc4:	2b64      	cmp	r3, #100	@ 0x64
24019fc6:	d816      	bhi.n	24019ff6 <apSwitchInit+0x56>
			{
				break;
			}
			if(isPushed() == true)
24019fc8:	f000 f824 	bl	2401a014 <isPushed>
24019fcc:	4603      	mov	r3, r0
24019fce:	2b00      	cmp	r3, #0
24019fd0:	d00d      	beq.n	24019fee <apSwitchInit+0x4e>
			{
				if(switch_inst.pushed_history > 10)
24019fd2:	4b0b      	ldr	r3, [pc, #44]	@ (2401a000 <apSwitchInit+0x60>)
24019fd4:	681b      	ldr	r3, [r3, #0]
24019fd6:	2b0a      	cmp	r3, #10
24019fd8:	dd03      	ble.n	24019fe2 <apSwitchInit+0x42>
				{
					switch_inst.pushed = true;
24019fda:	4b09      	ldr	r3, [pc, #36]	@ (2401a000 <apSwitchInit+0x60>)
24019fdc:	2201      	movs	r2, #1
24019fde:	711a      	strb	r2, [r3, #4]
					break;
24019fe0:	e00a      	b.n	24019ff8 <apSwitchInit+0x58>
				}
				switch_inst.pushed_history += 1;
24019fe2:	4b07      	ldr	r3, [pc, #28]	@ (2401a000 <apSwitchInit+0x60>)
24019fe4:	681b      	ldr	r3, [r3, #0]
24019fe6:	3301      	adds	r3, #1
24019fe8:	4a05      	ldr	r2, [pc, #20]	@ (2401a000 <apSwitchInit+0x60>)
24019fea:	6013      	str	r3, [r2, #0]
24019fec:	e7de      	b.n	24019fac <apSwitchInit+0xc>
			}
			else
			{
				switch_inst.pushed_history = 0;
24019fee:	4b04      	ldr	r3, [pc, #16]	@ (2401a000 <apSwitchInit+0x60>)
24019ff0:	2200      	movs	r2, #0
24019ff2:	601a      	str	r2, [r3, #0]
		if(millis() - tick > 1)
24019ff4:	e7da      	b.n	24019fac <apSwitchInit+0xc>
				break;
24019ff6:	bf00      	nop
			}
		}
	}
}
24019ff8:	bf00      	nop
24019ffa:	3708      	adds	r7, #8
24019ffc:	46bd      	mov	sp, r7
24019ffe:	bd80      	pop	{r7, pc}
2401a000:	2400287c 	.word	0x2400287c

2401a004 <apSwitchLoop>:

void apSwitchLoop(void)
{
2401a004:	b480      	push	{r7}
2401a006:	af00      	add	r7, sp, #0
	if(switch_inst.pushed == false)
	{
	}
}
2401a008:	bf00      	nop
2401a00a:	46bd      	mov	sp, r7
2401a00c:	f85d 7b04 	ldr.w	r7, [sp], #4
2401a010:	4770      	bx	lr
	...

2401a014 <isPushed>:

static bool isPushed(void)
{
2401a014:	b580      	push	{r7, lr}
2401a016:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_4) == GPIO_PIN_RESET)
2401a018:	2110      	movs	r1, #16
2401a01a:	4805      	ldr	r0, [pc, #20]	@ (2401a030 <isPushed+0x1c>)
2401a01c:	f7f0 fc36 	bl	2400a88c <HAL_GPIO_ReadPin>
2401a020:	4603      	mov	r3, r0
2401a022:	2b00      	cmp	r3, #0
2401a024:	d101      	bne.n	2401a02a <isPushed+0x16>
	{
		return true;
2401a026:	2301      	movs	r3, #1
2401a028:	e000      	b.n	2401a02c <isPushed+0x18>
	}

	return false;
2401a02a:	2300      	movs	r3, #0
}
2401a02c:	4618      	mov	r0, r3
2401a02e:	bd80      	pop	{r7, pc}
2401a030:	58021c00 	.word	0x58021c00

2401a034 <bspInit>:

void SystemClock_Config(void);


void bspInit(void)
{
2401a034:	b580      	push	{r7, lr}
2401a036:	af00      	add	r7, sp, #0
	HAL_Init();
2401a038:	f7e8 fd66 	bl	24002b08 <HAL_Init>
	SystemClock_Config();
2401a03c:	f000 f830 	bl	2401a0a0 <SystemClock_Config>
}
2401a040:	bf00      	nop
2401a042:	bd80      	pop	{r7, pc}

2401a044 <delay>:

void delay(uint32_t tick)
{
2401a044:	b580      	push	{r7, lr}
2401a046:	b082      	sub	sp, #8
2401a048:	af00      	add	r7, sp, #0
2401a04a:	6078      	str	r0, [r7, #4]
	HAL_Delay(tick);
2401a04c:	6878      	ldr	r0, [r7, #4]
2401a04e:	f7e8 fe9b 	bl	24002d88 <HAL_Delay>
}
2401a052:	bf00      	nop
2401a054:	3708      	adds	r7, #8
2401a056:	46bd      	mov	sp, r7
2401a058:	bd80      	pop	{r7, pc}

2401a05a <delayWhile>:

void delayWhile(uint32_t tick)
{
2401a05a:	b580      	push	{r7, lr}
2401a05c:	b084      	sub	sp, #16
2401a05e:	af00      	add	r7, sp, #0
2401a060:	6078      	str	r0, [r7, #4]
	uint32_t tick_buff = millis();
2401a062:	f000 f815 	bl	2401a090 <millis>
2401a066:	60f8      	str	r0, [r7, #12]

	if(tick <= 0)
2401a068:	687b      	ldr	r3, [r7, #4]
2401a06a:	2b00      	cmp	r3, #0
2401a06c:	d101      	bne.n	2401a072 <delayWhile+0x18>
	{
		tick = 0;
2401a06e:	2300      	movs	r3, #0
2401a070:	607b      	str	r3, [r7, #4]
	}

	while(millis() - tick_buff < tick - 1)
2401a072:	bf00      	nop
2401a074:	f000 f80c 	bl	2401a090 <millis>
2401a078:	4602      	mov	r2, r0
2401a07a:	68fb      	ldr	r3, [r7, #12]
2401a07c:	1ad2      	subs	r2, r2, r3
2401a07e:	687b      	ldr	r3, [r7, #4]
2401a080:	3b01      	subs	r3, #1
2401a082:	429a      	cmp	r2, r3
2401a084:	d3f6      	bcc.n	2401a074 <delayWhile+0x1a>
	{

	}
}
2401a086:	bf00      	nop
2401a088:	bf00      	nop
2401a08a:	3710      	adds	r7, #16
2401a08c:	46bd      	mov	sp, r7
2401a08e:	bd80      	pop	{r7, pc}

2401a090 <millis>:

uint32_t millis(void)
{
2401a090:	b580      	push	{r7, lr}
2401a092:	af00      	add	r7, sp, #0
	return HAL_GetTick();
2401a094:	f7e8 fe2c 	bl	24002cf0 <HAL_GetTick>
2401a098:	4603      	mov	r3, r0
}
2401a09a:	4618      	mov	r0, r3
2401a09c:	bd80      	pop	{r7, pc}
	...

2401a0a0 <SystemClock_Config>:

void SystemClock_Config(void)
{
2401a0a0:	b580      	push	{r7, lr}
2401a0a2:	b09c      	sub	sp, #112	@ 0x70
2401a0a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
2401a0a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
2401a0aa:	224c      	movs	r2, #76	@ 0x4c
2401a0ac:	2100      	movs	r1, #0
2401a0ae:	4618      	mov	r0, r3
2401a0b0:	f000 ff8f 	bl	2401afd2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
2401a0b4:	1d3b      	adds	r3, r7, #4
2401a0b6:	2220      	movs	r2, #32
2401a0b8:	2100      	movs	r1, #0
2401a0ba:	4618      	mov	r0, r3
2401a0bc:	f000 ff89 	bl	2401afd2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
2401a0c0:	2002      	movs	r0, #2
2401a0c2:	f7fa f9f7 	bl	240144b4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
2401a0c6:	2300      	movs	r3, #0
2401a0c8:	603b      	str	r3, [r7, #0]
2401a0ca:	4b2b      	ldr	r3, [pc, #172]	@ (2401a178 <SystemClock_Config+0xd8>)
2401a0cc:	699b      	ldr	r3, [r3, #24]
2401a0ce:	4a2a      	ldr	r2, [pc, #168]	@ (2401a178 <SystemClock_Config+0xd8>)
2401a0d0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
2401a0d4:	6193      	str	r3, [r2, #24]
2401a0d6:	4b28      	ldr	r3, [pc, #160]	@ (2401a178 <SystemClock_Config+0xd8>)
2401a0d8:	699b      	ldr	r3, [r3, #24]
2401a0da:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
2401a0de:	603b      	str	r3, [r7, #0]
2401a0e0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
2401a0e2:	bf00      	nop
2401a0e4:	4b24      	ldr	r3, [pc, #144]	@ (2401a178 <SystemClock_Config+0xd8>)
2401a0e6:	699b      	ldr	r3, [r3, #24]
2401a0e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
2401a0ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
2401a0f0:	d1f8      	bne.n	2401a0e4 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
2401a0f2:	2301      	movs	r3, #1
2401a0f4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
2401a0f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
2401a0fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
2401a0fc:	2302      	movs	r3, #2
2401a0fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
2401a100:	2302      	movs	r3, #2
2401a102:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
2401a104:	2302      	movs	r3, #2
2401a106:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
2401a108:	232c      	movs	r3, #44	@ 0x2c
2401a10a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
2401a10c:	2301      	movs	r3, #1
2401a10e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
2401a110:	2302      	movs	r3, #2
2401a112:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
2401a114:	2302      	movs	r3, #2
2401a116:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
2401a118:	230c      	movs	r3, #12
2401a11a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
2401a11c:	2300      	movs	r3, #0
2401a11e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
2401a120:	2300      	movs	r3, #0
2401a122:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
2401a124:	f107 0324 	add.w	r3, r7, #36	@ 0x24
2401a128:	4618      	mov	r0, r3
2401a12a:	f7fa ffaf 	bl	2401508c <HAL_RCC_OscConfig>
2401a12e:	4603      	mov	r3, r0
2401a130:	2b00      	cmp	r3, #0
2401a132:	d001      	beq.n	2401a138 <SystemClock_Config+0x98>
  {
	Error_Handler();
2401a134:	f000 f822 	bl	2401a17c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
2401a138:	233f      	movs	r3, #63	@ 0x3f
2401a13a:	607b      	str	r3, [r7, #4]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
							  |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
2401a13c:	2303      	movs	r3, #3
2401a13e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
2401a140:	2300      	movs	r3, #0
2401a142:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
2401a144:	2308      	movs	r3, #8
2401a146:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
2401a148:	2340      	movs	r3, #64	@ 0x40
2401a14a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
2401a14c:	2340      	movs	r3, #64	@ 0x40
2401a14e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
2401a150:	f44f 6380 	mov.w	r3, #1024	@ 0x400
2401a154:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
2401a156:	2340      	movs	r3, #64	@ 0x40
2401a158:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
2401a15a:	1d3b      	adds	r3, r7, #4
2401a15c:	2103      	movs	r1, #3
2401a15e:	4618      	mov	r0, r3
2401a160:	f7fb fb6e 	bl	24015840 <HAL_RCC_ClockConfig>
2401a164:	4603      	mov	r3, r0
2401a166:	2b00      	cmp	r3, #0
2401a168:	d001      	beq.n	2401a16e <SystemClock_Config+0xce>
  {
	Error_Handler();
2401a16a:	f000 f807 	bl	2401a17c <Error_Handler>
  }
}
2401a16e:	bf00      	nop
2401a170:	3770      	adds	r7, #112	@ 0x70
2401a172:	46bd      	mov	sp, r7
2401a174:	bd80      	pop	{r7, pc}
2401a176:	bf00      	nop
2401a178:	58024800 	.word	0x58024800

2401a17c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
2401a17c:	b480      	push	{r7}
2401a17e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
2401a180:	b672      	cpsid	i
}
2401a182:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
2401a184:	bf00      	nop
2401a186:	e7fd      	b.n	2401a184 <Error_Handler+0x8>

2401a188 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
2401a188:	b480      	push	{r7}
2401a18a:	b083      	sub	sp, #12
2401a18c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
2401a18e:	4b0a      	ldr	r3, [pc, #40]	@ (2401a1b8 <HAL_MspInit+0x30>)
2401a190:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
2401a194:	4a08      	ldr	r2, [pc, #32]	@ (2401a1b8 <HAL_MspInit+0x30>)
2401a196:	f043 0302 	orr.w	r3, r3, #2
2401a19a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
2401a19e:	4b06      	ldr	r3, [pc, #24]	@ (2401a1b8 <HAL_MspInit+0x30>)
2401a1a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
2401a1a4:	f003 0302 	and.w	r3, r3, #2
2401a1a8:	607b      	str	r3, [r7, #4]
2401a1aa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
2401a1ac:	bf00      	nop
2401a1ae:	370c      	adds	r7, #12
2401a1b0:	46bd      	mov	sp, r7
2401a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
2401a1b6:	4770      	bx	lr
2401a1b8:	58024400 	.word	0x58024400

2401a1bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
2401a1bc:	b480      	push	{r7}
2401a1be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
2401a1c0:	bf00      	nop
2401a1c2:	e7fd      	b.n	2401a1c0 <NMI_Handler+0x4>

2401a1c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
2401a1c4:	b480      	push	{r7}
2401a1c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
2401a1c8:	bf00      	nop
2401a1ca:	e7fd      	b.n	2401a1c8 <HardFault_Handler+0x4>

2401a1cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
2401a1cc:	b480      	push	{r7}
2401a1ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
2401a1d0:	bf00      	nop
2401a1d2:	e7fd      	b.n	2401a1d0 <MemManage_Handler+0x4>

2401a1d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
2401a1d4:	b480      	push	{r7}
2401a1d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
2401a1d8:	bf00      	nop
2401a1da:	e7fd      	b.n	2401a1d8 <BusFault_Handler+0x4>

2401a1dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
2401a1dc:	b480      	push	{r7}
2401a1de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
2401a1e0:	bf00      	nop
2401a1e2:	e7fd      	b.n	2401a1e0 <UsageFault_Handler+0x4>

2401a1e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
2401a1e4:	b480      	push	{r7}
2401a1e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
2401a1e8:	bf00      	nop
2401a1ea:	46bd      	mov	sp, r7
2401a1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
2401a1f0:	4770      	bx	lr

2401a1f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
2401a1f2:	b480      	push	{r7}
2401a1f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
2401a1f6:	bf00      	nop
2401a1f8:	46bd      	mov	sp, r7
2401a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
2401a1fe:	4770      	bx	lr

2401a200 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
2401a200:	b480      	push	{r7}
2401a202:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
2401a204:	bf00      	nop
2401a206:	46bd      	mov	sp, r7
2401a208:	f85d 7b04 	ldr.w	r7, [sp], #4
2401a20c:	4770      	bx	lr

2401a20e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
2401a20e:	b580      	push	{r7, lr}
2401a210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
2401a212:	f7e8 fd59 	bl	24002cc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
2401a216:	bf00      	nop
2401a218:	bd80      	pop	{r7, pc}

2401a21a <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
2401a21a:	b480      	push	{r7}
2401a21c:	af00      	add	r7, sp, #0
}
2401a21e:	bf00      	nop
2401a220:	46bd      	mov	sp, r7
2401a222:	f85d 7b04 	ldr.w	r7, [sp], #4
2401a226:	4770      	bx	lr

2401a228 <_getpid>:

int _getpid(void)
{
2401a228:	b480      	push	{r7}
2401a22a:	af00      	add	r7, sp, #0
  return 1;
2401a22c:	2301      	movs	r3, #1
}
2401a22e:	4618      	mov	r0, r3
2401a230:	46bd      	mov	sp, r7
2401a232:	f85d 7b04 	ldr.w	r7, [sp], #4
2401a236:	4770      	bx	lr

2401a238 <_kill>:

int _kill(int pid, int sig)
{
2401a238:	b580      	push	{r7, lr}
2401a23a:	b082      	sub	sp, #8
2401a23c:	af00      	add	r7, sp, #0
2401a23e:	6078      	str	r0, [r7, #4]
2401a240:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
2401a242:	f000 ff6b 	bl	2401b11c <__errno>
2401a246:	4603      	mov	r3, r0
2401a248:	2216      	movs	r2, #22
2401a24a:	601a      	str	r2, [r3, #0]
  return -1;
2401a24c:	f04f 33ff 	mov.w	r3, #4294967295
}
2401a250:	4618      	mov	r0, r3
2401a252:	3708      	adds	r7, #8
2401a254:	46bd      	mov	sp, r7
2401a256:	bd80      	pop	{r7, pc}

2401a258 <_exit>:

void _exit (int status)
{
2401a258:	b580      	push	{r7, lr}
2401a25a:	b082      	sub	sp, #8
2401a25c:	af00      	add	r7, sp, #0
2401a25e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
2401a260:	f04f 31ff 	mov.w	r1, #4294967295
2401a264:	6878      	ldr	r0, [r7, #4]
2401a266:	f7ff ffe7 	bl	2401a238 <_kill>
  while (1) {}    /* Make sure we hang here */
2401a26a:	bf00      	nop
2401a26c:	e7fd      	b.n	2401a26a <_exit+0x12>

2401a26e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
2401a26e:	b580      	push	{r7, lr}
2401a270:	b086      	sub	sp, #24
2401a272:	af00      	add	r7, sp, #0
2401a274:	60f8      	str	r0, [r7, #12]
2401a276:	60b9      	str	r1, [r7, #8]
2401a278:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
2401a27a:	2300      	movs	r3, #0
2401a27c:	617b      	str	r3, [r7, #20]
2401a27e:	e00a      	b.n	2401a296 <_read+0x28>
  {
    *ptr++ = __io_getchar();
2401a280:	f3af 8000 	nop.w
2401a284:	4601      	mov	r1, r0
2401a286:	68bb      	ldr	r3, [r7, #8]
2401a288:	1c5a      	adds	r2, r3, #1
2401a28a:	60ba      	str	r2, [r7, #8]
2401a28c:	b2ca      	uxtb	r2, r1
2401a28e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
2401a290:	697b      	ldr	r3, [r7, #20]
2401a292:	3301      	adds	r3, #1
2401a294:	617b      	str	r3, [r7, #20]
2401a296:	697a      	ldr	r2, [r7, #20]
2401a298:	687b      	ldr	r3, [r7, #4]
2401a29a:	429a      	cmp	r2, r3
2401a29c:	dbf0      	blt.n	2401a280 <_read+0x12>
  }

  return len;
2401a29e:	687b      	ldr	r3, [r7, #4]
}
2401a2a0:	4618      	mov	r0, r3
2401a2a2:	3718      	adds	r7, #24
2401a2a4:	46bd      	mov	sp, r7
2401a2a6:	bd80      	pop	{r7, pc}

2401a2a8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
2401a2a8:	b580      	push	{r7, lr}
2401a2aa:	b086      	sub	sp, #24
2401a2ac:	af00      	add	r7, sp, #0
2401a2ae:	60f8      	str	r0, [r7, #12]
2401a2b0:	60b9      	str	r1, [r7, #8]
2401a2b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
2401a2b4:	2300      	movs	r3, #0
2401a2b6:	617b      	str	r3, [r7, #20]
2401a2b8:	e009      	b.n	2401a2ce <_write+0x26>
  {
    __io_putchar(*ptr++);
2401a2ba:	68bb      	ldr	r3, [r7, #8]
2401a2bc:	1c5a      	adds	r2, r3, #1
2401a2be:	60ba      	str	r2, [r7, #8]
2401a2c0:	781b      	ldrb	r3, [r3, #0]
2401a2c2:	4618      	mov	r0, r3
2401a2c4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
2401a2c8:	697b      	ldr	r3, [r7, #20]
2401a2ca:	3301      	adds	r3, #1
2401a2cc:	617b      	str	r3, [r7, #20]
2401a2ce:	697a      	ldr	r2, [r7, #20]
2401a2d0:	687b      	ldr	r3, [r7, #4]
2401a2d2:	429a      	cmp	r2, r3
2401a2d4:	dbf1      	blt.n	2401a2ba <_write+0x12>
  }
  return len;
2401a2d6:	687b      	ldr	r3, [r7, #4]
}
2401a2d8:	4618      	mov	r0, r3
2401a2da:	3718      	adds	r7, #24
2401a2dc:	46bd      	mov	sp, r7
2401a2de:	bd80      	pop	{r7, pc}

2401a2e0 <_close>:

int _close(int file)
{
2401a2e0:	b480      	push	{r7}
2401a2e2:	b083      	sub	sp, #12
2401a2e4:	af00      	add	r7, sp, #0
2401a2e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
2401a2e8:	f04f 33ff 	mov.w	r3, #4294967295
}
2401a2ec:	4618      	mov	r0, r3
2401a2ee:	370c      	adds	r7, #12
2401a2f0:	46bd      	mov	sp, r7
2401a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
2401a2f6:	4770      	bx	lr

2401a2f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
2401a2f8:	b480      	push	{r7}
2401a2fa:	b083      	sub	sp, #12
2401a2fc:	af00      	add	r7, sp, #0
2401a2fe:	6078      	str	r0, [r7, #4]
2401a300:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
2401a302:	683b      	ldr	r3, [r7, #0]
2401a304:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
2401a308:	605a      	str	r2, [r3, #4]
  return 0;
2401a30a:	2300      	movs	r3, #0
}
2401a30c:	4618      	mov	r0, r3
2401a30e:	370c      	adds	r7, #12
2401a310:	46bd      	mov	sp, r7
2401a312:	f85d 7b04 	ldr.w	r7, [sp], #4
2401a316:	4770      	bx	lr

2401a318 <_isatty>:

int _isatty(int file)
{
2401a318:	b480      	push	{r7}
2401a31a:	b083      	sub	sp, #12
2401a31c:	af00      	add	r7, sp, #0
2401a31e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
2401a320:	2301      	movs	r3, #1
}
2401a322:	4618      	mov	r0, r3
2401a324:	370c      	adds	r7, #12
2401a326:	46bd      	mov	sp, r7
2401a328:	f85d 7b04 	ldr.w	r7, [sp], #4
2401a32c:	4770      	bx	lr

2401a32e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
2401a32e:	b480      	push	{r7}
2401a330:	b085      	sub	sp, #20
2401a332:	af00      	add	r7, sp, #0
2401a334:	60f8      	str	r0, [r7, #12]
2401a336:	60b9      	str	r1, [r7, #8]
2401a338:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
2401a33a:	2300      	movs	r3, #0
}
2401a33c:	4618      	mov	r0, r3
2401a33e:	3714      	adds	r7, #20
2401a340:	46bd      	mov	sp, r7
2401a342:	f85d 7b04 	ldr.w	r7, [sp], #4
2401a346:	4770      	bx	lr

2401a348 <_open>:

int _open(char *path, int flags, ...)
{
2401a348:	b40e      	push	{r1, r2, r3}
2401a34a:	b480      	push	{r7}
2401a34c:	b082      	sub	sp, #8
2401a34e:	af00      	add	r7, sp, #0
2401a350:	6078      	str	r0, [r7, #4]
  (void)path;
  (void)flags;
  /* Pretend like we always fail */
  return -1;
2401a352:	f04f 33ff 	mov.w	r3, #4294967295
}
2401a356:	4618      	mov	r0, r3
2401a358:	3708      	adds	r7, #8
2401a35a:	46bd      	mov	sp, r7
2401a35c:	f85d 7b04 	ldr.w	r7, [sp], #4
2401a360:	b003      	add	sp, #12
2401a362:	4770      	bx	lr

2401a364 <_wait>:

int _wait(int *status)
{
2401a364:	b580      	push	{r7, lr}
2401a366:	b082      	sub	sp, #8
2401a368:	af00      	add	r7, sp, #0
2401a36a:	6078      	str	r0, [r7, #4]
  (void)status;
  errno = ECHILD;
2401a36c:	f000 fed6 	bl	2401b11c <__errno>
2401a370:	4603      	mov	r3, r0
2401a372:	220a      	movs	r2, #10
2401a374:	601a      	str	r2, [r3, #0]
  return -1;
2401a376:	f04f 33ff 	mov.w	r3, #4294967295
}
2401a37a:	4618      	mov	r0, r3
2401a37c:	3708      	adds	r7, #8
2401a37e:	46bd      	mov	sp, r7
2401a380:	bd80      	pop	{r7, pc}

2401a382 <_unlink>:

int _unlink(char *name)
{
2401a382:	b580      	push	{r7, lr}
2401a384:	b082      	sub	sp, #8
2401a386:	af00      	add	r7, sp, #0
2401a388:	6078      	str	r0, [r7, #4]
  (void)name;
  errno = ENOENT;
2401a38a:	f000 fec7 	bl	2401b11c <__errno>
2401a38e:	4603      	mov	r3, r0
2401a390:	2202      	movs	r2, #2
2401a392:	601a      	str	r2, [r3, #0]
  return -1;
2401a394:	f04f 33ff 	mov.w	r3, #4294967295
}
2401a398:	4618      	mov	r0, r3
2401a39a:	3708      	adds	r7, #8
2401a39c:	46bd      	mov	sp, r7
2401a39e:	bd80      	pop	{r7, pc}

2401a3a0 <_times>:

int _times(struct tms *buf)
{
2401a3a0:	b480      	push	{r7}
2401a3a2:	b083      	sub	sp, #12
2401a3a4:	af00      	add	r7, sp, #0
2401a3a6:	6078      	str	r0, [r7, #4]
  (void)buf;
  return -1;
2401a3a8:	f04f 33ff 	mov.w	r3, #4294967295
}
2401a3ac:	4618      	mov	r0, r3
2401a3ae:	370c      	adds	r7, #12
2401a3b0:	46bd      	mov	sp, r7
2401a3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
2401a3b6:	4770      	bx	lr

2401a3b8 <_stat>:

int _stat(char *file, struct stat *st)
{
2401a3b8:	b480      	push	{r7}
2401a3ba:	b083      	sub	sp, #12
2401a3bc:	af00      	add	r7, sp, #0
2401a3be:	6078      	str	r0, [r7, #4]
2401a3c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
2401a3c2:	683b      	ldr	r3, [r7, #0]
2401a3c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
2401a3c8:	605a      	str	r2, [r3, #4]
  return 0;
2401a3ca:	2300      	movs	r3, #0
}
2401a3cc:	4618      	mov	r0, r3
2401a3ce:	370c      	adds	r7, #12
2401a3d0:	46bd      	mov	sp, r7
2401a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
2401a3d6:	4770      	bx	lr

2401a3d8 <_link>:

int _link(char *old, char *new)
{
2401a3d8:	b580      	push	{r7, lr}
2401a3da:	b082      	sub	sp, #8
2401a3dc:	af00      	add	r7, sp, #0
2401a3de:	6078      	str	r0, [r7, #4]
2401a3e0:	6039      	str	r1, [r7, #0]
  (void)old;
  (void)new;
  errno = EMLINK;
2401a3e2:	f000 fe9b 	bl	2401b11c <__errno>
2401a3e6:	4603      	mov	r3, r0
2401a3e8:	221f      	movs	r2, #31
2401a3ea:	601a      	str	r2, [r3, #0]
  return -1;
2401a3ec:	f04f 33ff 	mov.w	r3, #4294967295
}
2401a3f0:	4618      	mov	r0, r3
2401a3f2:	3708      	adds	r7, #8
2401a3f4:	46bd      	mov	sp, r7
2401a3f6:	bd80      	pop	{r7, pc}

2401a3f8 <_fork>:

int _fork(void)
{
2401a3f8:	b580      	push	{r7, lr}
2401a3fa:	af00      	add	r7, sp, #0
  errno = EAGAIN;
2401a3fc:	f000 fe8e 	bl	2401b11c <__errno>
2401a400:	4603      	mov	r3, r0
2401a402:	220b      	movs	r2, #11
2401a404:	601a      	str	r2, [r3, #0]
  return -1;
2401a406:	f04f 33ff 	mov.w	r3, #4294967295
}
2401a40a:	4618      	mov	r0, r3
2401a40c:	bd80      	pop	{r7, pc}

2401a40e <_execve>:

int _execve(char *name, char **argv, char **env)
{
2401a40e:	b580      	push	{r7, lr}
2401a410:	b084      	sub	sp, #16
2401a412:	af00      	add	r7, sp, #0
2401a414:	60f8      	str	r0, [r7, #12]
2401a416:	60b9      	str	r1, [r7, #8]
2401a418:	607a      	str	r2, [r7, #4]
  (void)name;
  (void)argv;
  (void)env;
  errno = ENOMEM;
2401a41a:	f000 fe7f 	bl	2401b11c <__errno>
2401a41e:	4603      	mov	r3, r0
2401a420:	220c      	movs	r2, #12
2401a422:	601a      	str	r2, [r3, #0]
  return -1;
2401a424:	f04f 33ff 	mov.w	r3, #4294967295
}
2401a428:	4618      	mov	r0, r3
2401a42a:	3710      	adds	r7, #16
2401a42c:	46bd      	mov	sp, r7
2401a42e:	bd80      	pop	{r7, pc}

2401a430 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
2401a430:	b580      	push	{r7, lr}
2401a432:	b086      	sub	sp, #24
2401a434:	af00      	add	r7, sp, #0
2401a436:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
2401a438:	4a14      	ldr	r2, [pc, #80]	@ (2401a48c <_sbrk+0x5c>)
2401a43a:	4b15      	ldr	r3, [pc, #84]	@ (2401a490 <_sbrk+0x60>)
2401a43c:	1ad3      	subs	r3, r2, r3
2401a43e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
2401a440:	697b      	ldr	r3, [r7, #20]
2401a442:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
2401a444:	4b13      	ldr	r3, [pc, #76]	@ (2401a494 <_sbrk+0x64>)
2401a446:	681b      	ldr	r3, [r3, #0]
2401a448:	2b00      	cmp	r3, #0
2401a44a:	d102      	bne.n	2401a452 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
2401a44c:	4b11      	ldr	r3, [pc, #68]	@ (2401a494 <_sbrk+0x64>)
2401a44e:	4a12      	ldr	r2, [pc, #72]	@ (2401a498 <_sbrk+0x68>)
2401a450:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
2401a452:	4b10      	ldr	r3, [pc, #64]	@ (2401a494 <_sbrk+0x64>)
2401a454:	681a      	ldr	r2, [r3, #0]
2401a456:	687b      	ldr	r3, [r7, #4]
2401a458:	4413      	add	r3, r2
2401a45a:	693a      	ldr	r2, [r7, #16]
2401a45c:	429a      	cmp	r2, r3
2401a45e:	d207      	bcs.n	2401a470 <_sbrk+0x40>
  {
    errno = ENOMEM;
2401a460:	f000 fe5c 	bl	2401b11c <__errno>
2401a464:	4603      	mov	r3, r0
2401a466:	220c      	movs	r2, #12
2401a468:	601a      	str	r2, [r3, #0]
    return (void *)-1;
2401a46a:	f04f 33ff 	mov.w	r3, #4294967295
2401a46e:	e009      	b.n	2401a484 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
2401a470:	4b08      	ldr	r3, [pc, #32]	@ (2401a494 <_sbrk+0x64>)
2401a472:	681b      	ldr	r3, [r3, #0]
2401a474:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
2401a476:	4b07      	ldr	r3, [pc, #28]	@ (2401a494 <_sbrk+0x64>)
2401a478:	681a      	ldr	r2, [r3, #0]
2401a47a:	687b      	ldr	r3, [r7, #4]
2401a47c:	4413      	add	r3, r2
2401a47e:	4a05      	ldr	r2, [pc, #20]	@ (2401a494 <_sbrk+0x64>)
2401a480:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
2401a482:	68fb      	ldr	r3, [r7, #12]
}
2401a484:	4618      	mov	r0, r3
2401a486:	3718      	adds	r7, #24
2401a488:	46bd      	mov	sp, r7
2401a48a:	bd80      	pop	{r7, pc}
2401a48c:	24100004 	.word	0x24100004
2401a490:	00000400 	.word	0x00000400
2401a494:	24002888 	.word	0x24002888
2401a498:	2401b65c 	.word	0x2401b65c

2401a49c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
2401a49c:	b480      	push	{r7}
2401a49e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
2401a4a0:	4b32      	ldr	r3, [pc, #200]	@ (2401a56c <SystemInit+0xd0>)
2401a4a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
2401a4a6:	4a31      	ldr	r2, [pc, #196]	@ (2401a56c <SystemInit+0xd0>)
2401a4a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
2401a4ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
2401a4b0:	4b2f      	ldr	r3, [pc, #188]	@ (2401a570 <SystemInit+0xd4>)
2401a4b2:	681b      	ldr	r3, [r3, #0]
2401a4b4:	f003 030f 	and.w	r3, r3, #15
2401a4b8:	2b06      	cmp	r3, #6
2401a4ba:	d807      	bhi.n	2401a4cc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
2401a4bc:	4b2c      	ldr	r3, [pc, #176]	@ (2401a570 <SystemInit+0xd4>)
2401a4be:	681b      	ldr	r3, [r3, #0]
2401a4c0:	f023 030f 	bic.w	r3, r3, #15
2401a4c4:	4a2a      	ldr	r2, [pc, #168]	@ (2401a570 <SystemInit+0xd4>)
2401a4c6:	f043 0307 	orr.w	r3, r3, #7
2401a4ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
2401a4cc:	4b29      	ldr	r3, [pc, #164]	@ (2401a574 <SystemInit+0xd8>)
2401a4ce:	681b      	ldr	r3, [r3, #0]
2401a4d0:	4a28      	ldr	r2, [pc, #160]	@ (2401a574 <SystemInit+0xd8>)
2401a4d2:	f043 0301 	orr.w	r3, r3, #1
2401a4d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
2401a4d8:	4b26      	ldr	r3, [pc, #152]	@ (2401a574 <SystemInit+0xd8>)
2401a4da:	2200      	movs	r2, #0
2401a4dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
2401a4de:	4b25      	ldr	r3, [pc, #148]	@ (2401a574 <SystemInit+0xd8>)
2401a4e0:	681a      	ldr	r2, [r3, #0]
2401a4e2:	4924      	ldr	r1, [pc, #144]	@ (2401a574 <SystemInit+0xd8>)
2401a4e4:	4b24      	ldr	r3, [pc, #144]	@ (2401a578 <SystemInit+0xdc>)
2401a4e6:	4013      	ands	r3, r2
2401a4e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
2401a4ea:	4b21      	ldr	r3, [pc, #132]	@ (2401a570 <SystemInit+0xd4>)
2401a4ec:	681b      	ldr	r3, [r3, #0]
2401a4ee:	f003 0308 	and.w	r3, r3, #8
2401a4f2:	2b00      	cmp	r3, #0
2401a4f4:	d007      	beq.n	2401a506 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
2401a4f6:	4b1e      	ldr	r3, [pc, #120]	@ (2401a570 <SystemInit+0xd4>)
2401a4f8:	681b      	ldr	r3, [r3, #0]
2401a4fa:	f023 030f 	bic.w	r3, r3, #15
2401a4fe:	4a1c      	ldr	r2, [pc, #112]	@ (2401a570 <SystemInit+0xd4>)
2401a500:	f043 0307 	orr.w	r3, r3, #7
2401a504:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
2401a506:	4b1b      	ldr	r3, [pc, #108]	@ (2401a574 <SystemInit+0xd8>)
2401a508:	2200      	movs	r2, #0
2401a50a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
2401a50c:	4b19      	ldr	r3, [pc, #100]	@ (2401a574 <SystemInit+0xd8>)
2401a50e:	2200      	movs	r2, #0
2401a510:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
2401a512:	4b18      	ldr	r3, [pc, #96]	@ (2401a574 <SystemInit+0xd8>)
2401a514:	2200      	movs	r2, #0
2401a516:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
2401a518:	4b16      	ldr	r3, [pc, #88]	@ (2401a574 <SystemInit+0xd8>)
2401a51a:	4a18      	ldr	r2, [pc, #96]	@ (2401a57c <SystemInit+0xe0>)
2401a51c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
2401a51e:	4b15      	ldr	r3, [pc, #84]	@ (2401a574 <SystemInit+0xd8>)
2401a520:	4a17      	ldr	r2, [pc, #92]	@ (2401a580 <SystemInit+0xe4>)
2401a522:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
2401a524:	4b13      	ldr	r3, [pc, #76]	@ (2401a574 <SystemInit+0xd8>)
2401a526:	4a17      	ldr	r2, [pc, #92]	@ (2401a584 <SystemInit+0xe8>)
2401a528:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
2401a52a:	4b12      	ldr	r3, [pc, #72]	@ (2401a574 <SystemInit+0xd8>)
2401a52c:	2200      	movs	r2, #0
2401a52e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
2401a530:	4b10      	ldr	r3, [pc, #64]	@ (2401a574 <SystemInit+0xd8>)
2401a532:	4a14      	ldr	r2, [pc, #80]	@ (2401a584 <SystemInit+0xe8>)
2401a534:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
2401a536:	4b0f      	ldr	r3, [pc, #60]	@ (2401a574 <SystemInit+0xd8>)
2401a538:	2200      	movs	r2, #0
2401a53a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
2401a53c:	4b0d      	ldr	r3, [pc, #52]	@ (2401a574 <SystemInit+0xd8>)
2401a53e:	4a11      	ldr	r2, [pc, #68]	@ (2401a584 <SystemInit+0xe8>)
2401a540:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
2401a542:	4b0c      	ldr	r3, [pc, #48]	@ (2401a574 <SystemInit+0xd8>)
2401a544:	2200      	movs	r2, #0
2401a546:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
2401a548:	4b0a      	ldr	r3, [pc, #40]	@ (2401a574 <SystemInit+0xd8>)
2401a54a:	681b      	ldr	r3, [r3, #0]
2401a54c:	4a09      	ldr	r2, [pc, #36]	@ (2401a574 <SystemInit+0xd8>)
2401a54e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
2401a552:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
2401a554:	4b07      	ldr	r3, [pc, #28]	@ (2401a574 <SystemInit+0xd8>)
2401a556:	2200      	movs	r2, #0
2401a558:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
2401a55a:	4b0b      	ldr	r3, [pc, #44]	@ (2401a588 <SystemInit+0xec>)
2401a55c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
2401a560:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
2401a562:	bf00      	nop
2401a564:	46bd      	mov	sp, r7
2401a566:	f85d 7b04 	ldr.w	r7, [sp], #4
2401a56a:	4770      	bx	lr
2401a56c:	e000ed00 	.word	0xe000ed00
2401a570:	52002000 	.word	0x52002000
2401a574:	58024400 	.word	0x58024400
2401a578:	eaf6ed7f 	.word	0xeaf6ed7f
2401a57c:	02020200 	.word	0x02020200
2401a580:	01ff0000 	.word	0x01ff0000
2401a584:	01010280 	.word	0x01010280
2401a588:	52004000 	.word	0x52004000

2401a58c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
2401a58c:	b480      	push	{r7}
2401a58e:	b08b      	sub	sp, #44	@ 0x2c
2401a590:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;


  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
2401a592:	4bb1      	ldr	r3, [pc, #708]	@ (2401a858 <SystemCoreClockUpdate+0x2cc>)
2401a594:	691b      	ldr	r3, [r3, #16]
2401a596:	f003 0338 	and.w	r3, r3, #56	@ 0x38
2401a59a:	2b18      	cmp	r3, #24
2401a59c:	f200 812e 	bhi.w	2401a7fc <SystemCoreClockUpdate+0x270>
2401a5a0:	a201      	add	r2, pc, #4	@ (adr r2, 2401a5a8 <SystemCoreClockUpdate+0x1c>)
2401a5a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2401a5a6:	bf00      	nop
2401a5a8:	2401a60d 	.word	0x2401a60d
2401a5ac:	2401a7fd 	.word	0x2401a7fd
2401a5b0:	2401a7fd 	.word	0x2401a7fd
2401a5b4:	2401a7fd 	.word	0x2401a7fd
2401a5b8:	2401a7fd 	.word	0x2401a7fd
2401a5bc:	2401a7fd 	.word	0x2401a7fd
2401a5c0:	2401a7fd 	.word	0x2401a7fd
2401a5c4:	2401a7fd 	.word	0x2401a7fd
2401a5c8:	2401a621 	.word	0x2401a621
2401a5cc:	2401a7fd 	.word	0x2401a7fd
2401a5d0:	2401a7fd 	.word	0x2401a7fd
2401a5d4:	2401a7fd 	.word	0x2401a7fd
2401a5d8:	2401a7fd 	.word	0x2401a7fd
2401a5dc:	2401a7fd 	.word	0x2401a7fd
2401a5e0:	2401a7fd 	.word	0x2401a7fd
2401a5e4:	2401a7fd 	.word	0x2401a7fd
2401a5e8:	2401a627 	.word	0x2401a627
2401a5ec:	2401a7fd 	.word	0x2401a7fd
2401a5f0:	2401a7fd 	.word	0x2401a7fd
2401a5f4:	2401a7fd 	.word	0x2401a7fd
2401a5f8:	2401a7fd 	.word	0x2401a7fd
2401a5fc:	2401a7fd 	.word	0x2401a7fd
2401a600:	2401a7fd 	.word	0x2401a7fd
2401a604:	2401a7fd 	.word	0x2401a7fd
2401a608:	2401a62d 	.word	0x2401a62d
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    common_system_clock = (uint32_t) (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3));
2401a60c:	4b92      	ldr	r3, [pc, #584]	@ (2401a858 <SystemCoreClockUpdate+0x2cc>)
2401a60e:	681b      	ldr	r3, [r3, #0]
2401a610:	08db      	lsrs	r3, r3, #3
2401a612:	f003 0303 	and.w	r3, r3, #3
2401a616:	4a91      	ldr	r2, [pc, #580]	@ (2401a85c <SystemCoreClockUpdate+0x2d0>)
2401a618:	fa22 f303 	lsr.w	r3, r2, r3
2401a61c:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
2401a61e:	e0f7      	b.n	2401a810 <SystemCoreClockUpdate+0x284>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    common_system_clock = CSI_VALUE;
2401a620:	4b8f      	ldr	r3, [pc, #572]	@ (2401a860 <SystemCoreClockUpdate+0x2d4>)
2401a622:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
2401a624:	e0f4      	b.n	2401a810 <SystemCoreClockUpdate+0x284>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    common_system_clock = HSE_VALUE;
2401a626:	4b8f      	ldr	r3, [pc, #572]	@ (2401a864 <SystemCoreClockUpdate+0x2d8>)
2401a628:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
2401a62a:	e0f1      	b.n	2401a810 <SystemCoreClockUpdate+0x284>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2401a62c:	4b8a      	ldr	r3, [pc, #552]	@ (2401a858 <SystemCoreClockUpdate+0x2cc>)
2401a62e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
2401a630:	f003 0303 	and.w	r3, r3, #3
2401a634:	61fb      	str	r3, [r7, #28]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
2401a636:	4b88      	ldr	r3, [pc, #544]	@ (2401a858 <SystemCoreClockUpdate+0x2cc>)
2401a638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
2401a63a:	091b      	lsrs	r3, r3, #4
2401a63c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
2401a640:	61bb      	str	r3, [r7, #24]
    pllfracen = ((RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
2401a642:	4b85      	ldr	r3, [pc, #532]	@ (2401a858 <SystemCoreClockUpdate+0x2cc>)
2401a644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2401a646:	f003 0301 	and.w	r3, r3, #1
2401a64a:	617b      	str	r3, [r7, #20]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
2401a64c:	4b82      	ldr	r3, [pc, #520]	@ (2401a858 <SystemCoreClockUpdate+0x2cc>)
2401a64e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
2401a650:	08db      	lsrs	r3, r3, #3
2401a652:	f3c3 030c 	ubfx	r3, r3, #0, #13
2401a656:	697a      	ldr	r2, [r7, #20]
2401a658:	fb02 f303 	mul.w	r3, r2, r3
2401a65c:	ee07 3a90 	vmov	s15, r3
2401a660:	eef8 7a67 	vcvt.f32.u32	s15, s15
2401a664:	edc7 7a04 	vstr	s15, [r7, #16]

    if (pllm != 0U)
2401a668:	69bb      	ldr	r3, [r7, #24]
2401a66a:	2b00      	cmp	r3, #0
2401a66c:	f000 80c3 	beq.w	2401a7f6 <SystemCoreClockUpdate+0x26a>
2401a670:	69fb      	ldr	r3, [r7, #28]
2401a672:	2b02      	cmp	r3, #2
2401a674:	d059      	beq.n	2401a72a <SystemCoreClockUpdate+0x19e>
2401a676:	69fb      	ldr	r3, [r7, #28]
2401a678:	2b02      	cmp	r3, #2
2401a67a:	d878      	bhi.n	2401a76e <SystemCoreClockUpdate+0x1e2>
2401a67c:	69fb      	ldr	r3, [r7, #28]
2401a67e:	2b00      	cmp	r3, #0
2401a680:	d003      	beq.n	2401a68a <SystemCoreClockUpdate+0xfe>
2401a682:	69fb      	ldr	r3, [r7, #28]
2401a684:	2b01      	cmp	r3, #1
2401a686:	d02e      	beq.n	2401a6e6 <SystemCoreClockUpdate+0x15a>
2401a688:	e071      	b.n	2401a76e <SystemCoreClockUpdate+0x1e2>
    {
      switch (pllsource)
      {
        case RCC_PLLCKSELR_PLLSRC_HSI:  /* HSI used as PLL clock source */

        hsivalue = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3)) ;
2401a68a:	4b73      	ldr	r3, [pc, #460]	@ (2401a858 <SystemCoreClockUpdate+0x2cc>)
2401a68c:	681b      	ldr	r3, [r3, #0]
2401a68e:	08db      	lsrs	r3, r3, #3
2401a690:	f003 0303 	and.w	r3, r3, #3
2401a694:	4a71      	ldr	r2, [pc, #452]	@ (2401a85c <SystemCoreClockUpdate+0x2d0>)
2401a696:	fa22 f303 	lsr.w	r3, r2, r3
2401a69a:	60fb      	str	r3, [r7, #12]
        pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
2401a69c:	68fb      	ldr	r3, [r7, #12]
2401a69e:	ee07 3a90 	vmov	s15, r3
2401a6a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
2401a6a6:	69bb      	ldr	r3, [r7, #24]
2401a6a8:	ee07 3a90 	vmov	s15, r3
2401a6ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
2401a6b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2401a6b4:	4b68      	ldr	r3, [pc, #416]	@ (2401a858 <SystemCoreClockUpdate+0x2cc>)
2401a6b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2401a6b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
2401a6bc:	ee07 3a90 	vmov	s15, r3
2401a6c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
2401a6c4:	ed97 6a04 	vldr	s12, [r7, #16]
2401a6c8:	eddf 5a67 	vldr	s11, [pc, #412]	@ 2401a868 <SystemCoreClockUpdate+0x2dc>
2401a6cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
2401a6d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
2401a6d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
2401a6d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
2401a6dc:	ee67 7a27 	vmul.f32	s15, s14, s15
2401a6e0:	edc7 7a08 	vstr	s15, [r7, #32]

        break;
2401a6e4:	e071      	b.n	2401a7ca <SystemCoreClockUpdate+0x23e>

        case RCC_PLLCKSELR_PLLSRC_CSI:  /* CSI used as PLL clock source */
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
2401a6e6:	69bb      	ldr	r3, [r7, #24]
2401a6e8:	ee07 3a90 	vmov	s15, r3
2401a6ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
2401a6f0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 2401a86c <SystemCoreClockUpdate+0x2e0>
2401a6f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2401a6f8:	4b57      	ldr	r3, [pc, #348]	@ (2401a858 <SystemCoreClockUpdate+0x2cc>)
2401a6fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2401a6fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
2401a700:	ee07 3a90 	vmov	s15, r3
2401a704:	eef8 6a67 	vcvt.f32.u32	s13, s15
2401a708:	ed97 6a04 	vldr	s12, [r7, #16]
2401a70c:	eddf 5a56 	vldr	s11, [pc, #344]	@ 2401a868 <SystemCoreClockUpdate+0x2dc>
2401a710:	eec6 7a25 	vdiv.f32	s15, s12, s11
2401a714:	ee76 7aa7 	vadd.f32	s15, s13, s15
2401a718:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
2401a71c:	ee77 7aa6 	vadd.f32	s15, s15, s13
2401a720:	ee67 7a27 	vmul.f32	s15, s14, s15
2401a724:	edc7 7a08 	vstr	s15, [r7, #32]
        break;
2401a728:	e04f      	b.n	2401a7ca <SystemCoreClockUpdate+0x23e>

        case RCC_PLLCKSELR_PLLSRC_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
2401a72a:	69bb      	ldr	r3, [r7, #24]
2401a72c:	ee07 3a90 	vmov	s15, r3
2401a730:	eef8 7a67 	vcvt.f32.u32	s15, s15
2401a734:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 2401a870 <SystemCoreClockUpdate+0x2e4>
2401a738:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2401a73c:	4b46      	ldr	r3, [pc, #280]	@ (2401a858 <SystemCoreClockUpdate+0x2cc>)
2401a73e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2401a740:	f3c3 0308 	ubfx	r3, r3, #0, #9
2401a744:	ee07 3a90 	vmov	s15, r3
2401a748:	eef8 6a67 	vcvt.f32.u32	s13, s15
2401a74c:	ed97 6a04 	vldr	s12, [r7, #16]
2401a750:	eddf 5a45 	vldr	s11, [pc, #276]	@ 2401a868 <SystemCoreClockUpdate+0x2dc>
2401a754:	eec6 7a25 	vdiv.f32	s15, s12, s11
2401a758:	ee76 7aa7 	vadd.f32	s15, s13, s15
2401a75c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
2401a760:	ee77 7aa6 	vadd.f32	s15, s15, s13
2401a764:	ee67 7a27 	vmul.f32	s15, s14, s15
2401a768:	edc7 7a08 	vstr	s15, [r7, #32]
        break;
2401a76c:	e02d      	b.n	2401a7ca <SystemCoreClockUpdate+0x23e>

      default:
          hsivalue = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3)) ;
2401a76e:	4b3a      	ldr	r3, [pc, #232]	@ (2401a858 <SystemCoreClockUpdate+0x2cc>)
2401a770:	681b      	ldr	r3, [r3, #0]
2401a772:	08db      	lsrs	r3, r3, #3
2401a774:	f003 0303 	and.w	r3, r3, #3
2401a778:	4a38      	ldr	r2, [pc, #224]	@ (2401a85c <SystemCoreClockUpdate+0x2d0>)
2401a77a:	fa22 f303 	lsr.w	r3, r2, r3
2401a77e:	60fb      	str	r3, [r7, #12]
          pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
2401a780:	68fb      	ldr	r3, [r7, #12]
2401a782:	ee07 3a90 	vmov	s15, r3
2401a786:	eef8 6a67 	vcvt.f32.u32	s13, s15
2401a78a:	69bb      	ldr	r3, [r7, #24]
2401a78c:	ee07 3a90 	vmov	s15, r3
2401a790:	eef8 7a67 	vcvt.f32.u32	s15, s15
2401a794:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2401a798:	4b2f      	ldr	r3, [pc, #188]	@ (2401a858 <SystemCoreClockUpdate+0x2cc>)
2401a79a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2401a79c:	f3c3 0308 	ubfx	r3, r3, #0, #9
2401a7a0:	ee07 3a90 	vmov	s15, r3
2401a7a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
2401a7a8:	ed97 6a04 	vldr	s12, [r7, #16]
2401a7ac:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 2401a868 <SystemCoreClockUpdate+0x2dc>
2401a7b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
2401a7b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
2401a7b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
2401a7bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
2401a7c0:	ee67 7a27 	vmul.f32	s15, s14, s15
2401a7c4:	edc7 7a08 	vstr	s15, [r7, #32]
        break;
2401a7c8:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
2401a7ca:	4b23      	ldr	r3, [pc, #140]	@ (2401a858 <SystemCoreClockUpdate+0x2cc>)
2401a7cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2401a7ce:	0a5b      	lsrs	r3, r3, #9
2401a7d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
2401a7d4:	3301      	adds	r3, #1
2401a7d6:	60bb      	str	r3, [r7, #8]
      common_system_clock =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
2401a7d8:	68bb      	ldr	r3, [r7, #8]
2401a7da:	ee07 3a90 	vmov	s15, r3
2401a7de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
2401a7e2:	edd7 6a08 	vldr	s13, [r7, #32]
2401a7e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
2401a7ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2401a7ee:	ee17 3a90 	vmov	r3, s15
2401a7f2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    else
    {
      common_system_clock = 0U;
    }
    break;
2401a7f4:	e00c      	b.n	2401a810 <SystemCoreClockUpdate+0x284>
      common_system_clock = 0U;
2401a7f6:	2300      	movs	r3, #0
2401a7f8:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
2401a7fa:	e009      	b.n	2401a810 <SystemCoreClockUpdate+0x284>

  default:
    common_system_clock = (uint32_t) (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3));
2401a7fc:	4b16      	ldr	r3, [pc, #88]	@ (2401a858 <SystemCoreClockUpdate+0x2cc>)
2401a7fe:	681b      	ldr	r3, [r3, #0]
2401a800:	08db      	lsrs	r3, r3, #3
2401a802:	f003 0303 	and.w	r3, r3, #3
2401a806:	4a15      	ldr	r2, [pc, #84]	@ (2401a85c <SystemCoreClockUpdate+0x2d0>)
2401a808:	fa22 f303 	lsr.w	r3, r2, r3
2401a80c:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
2401a80e:	bf00      	nop
  }

  /* Compute SystemClock frequency --------------------------------------------------*/
#if defined (RCC_D1CFGR_D1CPRE)
  tmp = D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos];
2401a810:	4b11      	ldr	r3, [pc, #68]	@ (2401a858 <SystemCoreClockUpdate+0x2cc>)
2401a812:	699b      	ldr	r3, [r3, #24]
2401a814:	0a1b      	lsrs	r3, r3, #8
2401a816:	f003 030f 	and.w	r3, r3, #15
2401a81a:	4a16      	ldr	r2, [pc, #88]	@ (2401a874 <SystemCoreClockUpdate+0x2e8>)
2401a81c:	5cd3      	ldrb	r3, [r2, r3]
2401a81e:	607b      	str	r3, [r7, #4]

  /* common_system_clock frequency : CM7 CPU frequency  */
  common_system_clock >>= tmp;
2401a820:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
2401a822:	687b      	ldr	r3, [r7, #4]
2401a824:	fa22 f303 	lsr.w	r3, r2, r3
2401a828:	627b      	str	r3, [r7, #36]	@ 0x24

  /* SystemD2Clock frequency : CM4 CPU, AXI and AHBs Clock frequency  */
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
2401a82a:	4b0b      	ldr	r3, [pc, #44]	@ (2401a858 <SystemCoreClockUpdate+0x2cc>)
2401a82c:	699b      	ldr	r3, [r3, #24]
2401a82e:	f003 030f 	and.w	r3, r3, #15
2401a832:	4a10      	ldr	r2, [pc, #64]	@ (2401a874 <SystemCoreClockUpdate+0x2e8>)
2401a834:	5cd3      	ldrb	r3, [r2, r3]
2401a836:	f003 031f 	and.w	r3, r3, #31
2401a83a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
2401a83c:	fa22 f303 	lsr.w	r3, r2, r3
2401a840:	4a0d      	ldr	r2, [pc, #52]	@ (2401a878 <SystemCoreClockUpdate+0x2ec>)
2401a842:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
2401a844:	4a0d      	ldr	r2, [pc, #52]	@ (2401a87c <SystemCoreClockUpdate+0x2f0>)
2401a846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2401a848:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */
}
2401a84a:	bf00      	nop
2401a84c:	372c      	adds	r7, #44	@ 0x2c
2401a84e:	46bd      	mov	sp, r7
2401a850:	f85d 7b04 	ldr.w	r7, [sp], #4
2401a854:	4770      	bx	lr
2401a856:	bf00      	nop
2401a858:	58024400 	.word	0x58024400
2401a85c:	03d09000 	.word	0x03d09000
2401a860:	003d0900 	.word	0x003d0900
2401a864:	017d7840 	.word	0x017d7840
2401a868:	46000000 	.word	0x46000000
2401a86c:	4a742400 	.word	0x4a742400
2401a870:	4bbebc20 	.word	0x4bbebc20
2401a874:	2401b64c 	.word	0x2401b64c
2401a878:	240004bc 	.word	0x240004bc
2401a87c:	240004b8 	.word	0x240004b8

2401a880 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
2401a880:	f8df d034 	ldr.w	sp, [pc, #52]	@ 2401a8b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
2401a884:	f7ff fe0a 	bl	2401a49c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
2401a888:	480c      	ldr	r0, [pc, #48]	@ (2401a8bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
2401a88a:	490d      	ldr	r1, [pc, #52]	@ (2401a8c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
2401a88c:	4a0d      	ldr	r2, [pc, #52]	@ (2401a8c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
2401a88e:	2300      	movs	r3, #0
  b LoopCopyDataInit
2401a890:	e002      	b.n	2401a898 <LoopCopyDataInit>

2401a892 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
2401a892:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
2401a894:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
2401a896:	3304      	adds	r3, #4

2401a898 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
2401a898:	18c4      	adds	r4, r0, r3
  cmp r4, r1
2401a89a:	428c      	cmp	r4, r1
  bcc CopyDataInit
2401a89c:	d3f9      	bcc.n	2401a892 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
2401a89e:	4a0a      	ldr	r2, [pc, #40]	@ (2401a8c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
2401a8a0:	4c0a      	ldr	r4, [pc, #40]	@ (2401a8cc <LoopFillZerobss+0x22>)
  movs r3, #0
2401a8a2:	2300      	movs	r3, #0
  b LoopFillZerobss
2401a8a4:	e001      	b.n	2401a8aa <LoopFillZerobss>

2401a8a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
2401a8a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
2401a8a8:	3204      	adds	r2, #4

2401a8aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
2401a8aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
2401a8ac:	d3fb      	bcc.n	2401a8a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
2401a8ae:	f000 fc3b 	bl	2401b128 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
2401a8b2:	f000 f9e3 	bl	2401ac7c <main>
  bx  lr
2401a8b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
2401a8b8:	24100004 	.word	0x24100004
  ldr r0, =_sdata
2401a8bc:	240004a8 	.word	0x240004a8
  ldr r1, =_edata
2401a8c0:	2400051c 	.word	0x2400051c
  ldr r2, =_sidata
2401a8c4:	240004a8 	.word	0x240004a8
  ldr r2, =_sbss
2401a8c8:	2400051c 	.word	0x2400051c
  ldr r4, =_ebss
2401a8cc:	24002a38 	.word	0x24002a38

2401a8d0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
2401a8d0:	e7fe      	b.n	2401a8d0 <ADC3_IRQHandler>
	...

2401a8d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
2401a8d4:	b580      	push	{r7, lr}
2401a8d6:	b08a      	sub	sp, #40	@ 0x28
2401a8d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
2401a8da:	f107 0314 	add.w	r3, r7, #20
2401a8de:	2200      	movs	r2, #0
2401a8e0:	601a      	str	r2, [r3, #0]
2401a8e2:	605a      	str	r2, [r3, #4]
2401a8e4:	609a      	str	r2, [r3, #8]
2401a8e6:	60da      	str	r2, [r3, #12]
2401a8e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
2401a8ea:	4b32      	ldr	r3, [pc, #200]	@ (2401a9b4 <MX_GPIO_Init+0xe0>)
2401a8ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
2401a8f0:	4a30      	ldr	r2, [pc, #192]	@ (2401a9b4 <MX_GPIO_Init+0xe0>)
2401a8f2:	f043 0304 	orr.w	r3, r3, #4
2401a8f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
2401a8fa:	4b2e      	ldr	r3, [pc, #184]	@ (2401a9b4 <MX_GPIO_Init+0xe0>)
2401a8fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
2401a900:	f003 0304 	and.w	r3, r3, #4
2401a904:	613b      	str	r3, [r7, #16]
2401a906:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
2401a908:	4b2a      	ldr	r3, [pc, #168]	@ (2401a9b4 <MX_GPIO_Init+0xe0>)
2401a90a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
2401a90e:	4a29      	ldr	r2, [pc, #164]	@ (2401a9b4 <MX_GPIO_Init+0xe0>)
2401a910:	f043 0320 	orr.w	r3, r3, #32
2401a914:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
2401a918:	4b26      	ldr	r3, [pc, #152]	@ (2401a9b4 <MX_GPIO_Init+0xe0>)
2401a91a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
2401a91e:	f003 0320 	and.w	r3, r3, #32
2401a922:	60fb      	str	r3, [r7, #12]
2401a924:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
2401a926:	4b23      	ldr	r3, [pc, #140]	@ (2401a9b4 <MX_GPIO_Init+0xe0>)
2401a928:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
2401a92c:	4a21      	ldr	r2, [pc, #132]	@ (2401a9b4 <MX_GPIO_Init+0xe0>)
2401a92e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
2401a932:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
2401a936:	4b1f      	ldr	r3, [pc, #124]	@ (2401a9b4 <MX_GPIO_Init+0xe0>)
2401a938:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
2401a93c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
2401a940:	60bb      	str	r3, [r7, #8]
2401a942:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
2401a944:	4b1b      	ldr	r3, [pc, #108]	@ (2401a9b4 <MX_GPIO_Init+0xe0>)
2401a946:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
2401a94a:	4a1a      	ldr	r2, [pc, #104]	@ (2401a9b4 <MX_GPIO_Init+0xe0>)
2401a94c:	f043 0302 	orr.w	r3, r3, #2
2401a950:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
2401a954:	4b17      	ldr	r3, [pc, #92]	@ (2401a9b4 <MX_GPIO_Init+0xe0>)
2401a956:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
2401a95a:	f003 0302 	and.w	r3, r3, #2
2401a95e:	607b      	str	r3, [r7, #4]
2401a960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
2401a962:	4b14      	ldr	r3, [pc, #80]	@ (2401a9b4 <MX_GPIO_Init+0xe0>)
2401a964:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
2401a968:	4a12      	ldr	r2, [pc, #72]	@ (2401a9b4 <MX_GPIO_Init+0xe0>)
2401a96a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
2401a96e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
2401a972:	4b10      	ldr	r3, [pc, #64]	@ (2401a9b4 <MX_GPIO_Init+0xe0>)
2401a974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
2401a978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
2401a97c:	603b      	str	r3, [r7, #0]
2401a97e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
2401a980:	2200      	movs	r2, #0
2401a982:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
2401a986:	480c      	ldr	r0, [pc, #48]	@ (2401a9b8 <MX_GPIO_Init+0xe4>)
2401a988:	f7ef ff98 	bl	2400a8bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
2401a98c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
2401a990:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
2401a992:	2301      	movs	r3, #1
2401a994:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
2401a996:	2300      	movs	r3, #0
2401a998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
2401a99a:	2300      	movs	r3, #0
2401a99c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
2401a99e:	f107 0314 	add.w	r3, r7, #20
2401a9a2:	4619      	mov	r1, r3
2401a9a4:	4804      	ldr	r0, [pc, #16]	@ (2401a9b8 <MX_GPIO_Init+0xe4>)
2401a9a6:	f7ef fcc7 	bl	2400a338 <HAL_GPIO_Init>

}
2401a9aa:	bf00      	nop
2401a9ac:	3728      	adds	r7, #40	@ 0x28
2401a9ae:	46bd      	mov	sp, r7
2401a9b0:	bd80      	pop	{r7, pc}
2401a9b2:	bf00      	nop
2401a9b4:	58024400 	.word	0x58024400
2401a9b8:	58020800 	.word	0x58020800

2401a9bc <MX_OCTOSPI1_Init>:

OSPI_HandleTypeDef hospi1;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
2401a9bc:	b580      	push	{r7, lr}
2401a9be:	b086      	sub	sp, #24
2401a9c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
2401a9c2:	463b      	mov	r3, r7
2401a9c4:	2200      	movs	r2, #0
2401a9c6:	601a      	str	r2, [r3, #0]
2401a9c8:	605a      	str	r2, [r3, #4]
2401a9ca:	609a      	str	r2, [r3, #8]
2401a9cc:	60da      	str	r2, [r3, #12]
2401a9ce:	611a      	str	r2, [r3, #16]
2401a9d0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
2401a9d2:	4b27      	ldr	r3, [pc, #156]	@ (2401aa70 <MX_OCTOSPI1_Init+0xb4>)
2401a9d4:	4a27      	ldr	r2, [pc, #156]	@ (2401aa74 <MX_OCTOSPI1_Init+0xb8>)
2401a9d6:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 8;
2401a9d8:	4b25      	ldr	r3, [pc, #148]	@ (2401aa70 <MX_OCTOSPI1_Init+0xb4>)
2401a9da:	2208      	movs	r2, #8
2401a9dc:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
2401a9de:	4b24      	ldr	r3, [pc, #144]	@ (2401aa70 <MX_OCTOSPI1_Init+0xb4>)
2401a9e0:	2200      	movs	r2, #0
2401a9e2:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
2401a9e4:	4b22      	ldr	r3, [pc, #136]	@ (2401aa70 <MX_OCTOSPI1_Init+0xb4>)
2401a9e6:	2200      	movs	r2, #0
2401a9e8:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 24;
2401a9ea:	4b21      	ldr	r3, [pc, #132]	@ (2401aa70 <MX_OCTOSPI1_Init+0xb4>)
2401a9ec:	2218      	movs	r2, #24
2401a9ee:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 2;
2401a9f0:	4b1f      	ldr	r3, [pc, #124]	@ (2401aa70 <MX_OCTOSPI1_Init+0xb4>)
2401a9f2:	2202      	movs	r2, #2
2401a9f4:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
2401a9f6:	4b1e      	ldr	r3, [pc, #120]	@ (2401aa70 <MX_OCTOSPI1_Init+0xb4>)
2401a9f8:	2200      	movs	r2, #0
2401a9fa:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
2401a9fc:	4b1c      	ldr	r3, [pc, #112]	@ (2401aa70 <MX_OCTOSPI1_Init+0xb4>)
2401a9fe:	2200      	movs	r2, #0
2401aa00:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
2401aa02:	4b1b      	ldr	r3, [pc, #108]	@ (2401aa70 <MX_OCTOSPI1_Init+0xb4>)
2401aa04:	2200      	movs	r2, #0
2401aa06:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 8;
2401aa08:	4b19      	ldr	r3, [pc, #100]	@ (2401aa70 <MX_OCTOSPI1_Init+0xb4>)
2401aa0a:	2208      	movs	r2, #8
2401aa0c:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
2401aa0e:	4b18      	ldr	r3, [pc, #96]	@ (2401aa70 <MX_OCTOSPI1_Init+0xb4>)
2401aa10:	2200      	movs	r2, #0
2401aa12:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
2401aa14:	4b16      	ldr	r3, [pc, #88]	@ (2401aa70 <MX_OCTOSPI1_Init+0xb4>)
2401aa16:	2200      	movs	r2, #0
2401aa18:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
2401aa1a:	4b15      	ldr	r3, [pc, #84]	@ (2401aa70 <MX_OCTOSPI1_Init+0xb4>)
2401aa1c:	2200      	movs	r2, #0
2401aa1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
2401aa20:	4b13      	ldr	r3, [pc, #76]	@ (2401aa70 <MX_OCTOSPI1_Init+0xb4>)
2401aa22:	2208      	movs	r2, #8
2401aa24:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 0;
2401aa26:	4b12      	ldr	r3, [pc, #72]	@ (2401aa70 <MX_OCTOSPI1_Init+0xb4>)
2401aa28:	2200      	movs	r2, #0
2401aa2a:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 0;
2401aa2c:	4b10      	ldr	r3, [pc, #64]	@ (2401aa70 <MX_OCTOSPI1_Init+0xb4>)
2401aa2e:	2200      	movs	r2, #0
2401aa30:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
2401aa32:	480f      	ldr	r0, [pc, #60]	@ (2401aa70 <MX_OCTOSPI1_Init+0xb4>)
2401aa34:	f7f7 f92a 	bl	24011c8c <HAL_OSPI_Init>
2401aa38:	4603      	mov	r3, r0
2401aa3a:	2b00      	cmp	r3, #0
2401aa3c:	d001      	beq.n	2401aa42 <MX_OCTOSPI1_Init+0x86>
  {
    Error_Handler();
2401aa3e:	f7ff fb9d 	bl	2401a17c <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
2401aa42:	2301      	movs	r3, #1
2401aa44:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.NCSPort = 1;
2401aa46:	2301      	movs	r3, #1
2401aa48:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
2401aa4a:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
2401aa4e:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
2401aa50:	463b      	mov	r3, r7
2401aa52:	f241 3288 	movw	r2, #5000	@ 0x1388
2401aa56:	4619      	mov	r1, r3
2401aa58:	4805      	ldr	r0, [pc, #20]	@ (2401aa70 <MX_OCTOSPI1_Init+0xb4>)
2401aa5a:	f7f8 fb45 	bl	240130e8 <HAL_OSPIM_Config>
2401aa5e:	4603      	mov	r3, r0
2401aa60:	2b00      	cmp	r3, #0
2401aa62:	d001      	beq.n	2401aa68 <MX_OCTOSPI1_Init+0xac>
  {
    Error_Handler();
2401aa64:	f7ff fb8a 	bl	2401a17c <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
2401aa68:	bf00      	nop
2401aa6a:	3718      	adds	r7, #24
2401aa6c:	46bd      	mov	sp, r7
2401aa6e:	bd80      	pop	{r7, pc}
2401aa70:	2400288c 	.word	0x2400288c
2401aa74:	52005000 	.word	0x52005000

2401aa78 <HAL_OSPI_MspInit>:

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
2401aa78:	b580      	push	{r7, lr}
2401aa7a:	b0bc      	sub	sp, #240	@ 0xf0
2401aa7c:	af00      	add	r7, sp, #0
2401aa7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
2401aa80:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
2401aa84:	2200      	movs	r2, #0
2401aa86:	601a      	str	r2, [r3, #0]
2401aa88:	605a      	str	r2, [r3, #4]
2401aa8a:	609a      	str	r2, [r3, #8]
2401aa8c:	60da      	str	r2, [r3, #12]
2401aa8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
2401aa90:	f107 0320 	add.w	r3, r7, #32
2401aa94:	22b8      	movs	r2, #184	@ 0xb8
2401aa96:	2100      	movs	r1, #0
2401aa98:	4618      	mov	r0, r3
2401aa9a:	f000 fa9a 	bl	2401afd2 <memset>
  if(ospiHandle->Instance==OCTOSPI1)
2401aa9e:	687b      	ldr	r3, [r7, #4]
2401aaa0:	681b      	ldr	r3, [r3, #0]
2401aaa2:	4a52      	ldr	r2, [pc, #328]	@ (2401abec <HAL_OSPI_MspInit+0x174>)
2401aaa4:	4293      	cmp	r3, r2
2401aaa6:	f040 809d 	bne.w	2401abe4 <HAL_OSPI_MspInit+0x16c>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
2401aaaa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
2401aaae:	f04f 0300 	mov.w	r3, #0
2401aab2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_D1HCLK;
2401aab6:	2300      	movs	r3, #0
2401aab8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
2401aaba:	f107 0320 	add.w	r3, r7, #32
2401aabe:	4618      	mov	r0, r3
2401aac0:	f7fb fc04 	bl	240162cc <HAL_RCCEx_PeriphCLKConfig>
2401aac4:	4603      	mov	r3, r0
2401aac6:	2b00      	cmp	r3, #0
2401aac8:	d001      	beq.n	2401aace <HAL_OSPI_MspInit+0x56>
    {
      Error_Handler();
2401aaca:	f7ff fb57 	bl	2401a17c <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
2401aace:	4b48      	ldr	r3, [pc, #288]	@ (2401abf0 <HAL_OSPI_MspInit+0x178>)
2401aad0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
2401aad4:	4a46      	ldr	r2, [pc, #280]	@ (2401abf0 <HAL_OSPI_MspInit+0x178>)
2401aad6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
2401aada:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
2401aade:	4b44      	ldr	r3, [pc, #272]	@ (2401abf0 <HAL_OSPI_MspInit+0x178>)
2401aae0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
2401aae4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
2401aae8:	61fb      	str	r3, [r7, #28]
2401aaea:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_OSPI1_CLK_ENABLE();
2401aaec:	4b40      	ldr	r3, [pc, #256]	@ (2401abf0 <HAL_OSPI_MspInit+0x178>)
2401aaee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
2401aaf2:	4a3f      	ldr	r2, [pc, #252]	@ (2401abf0 <HAL_OSPI_MspInit+0x178>)
2401aaf4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
2401aaf8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
2401aafc:	4b3c      	ldr	r3, [pc, #240]	@ (2401abf0 <HAL_OSPI_MspInit+0x178>)
2401aafe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
2401ab02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
2401ab06:	61bb      	str	r3, [r7, #24]
2401ab08:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
2401ab0a:	4b39      	ldr	r3, [pc, #228]	@ (2401abf0 <HAL_OSPI_MspInit+0x178>)
2401ab0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
2401ab10:	4a37      	ldr	r2, [pc, #220]	@ (2401abf0 <HAL_OSPI_MspInit+0x178>)
2401ab12:	f043 0320 	orr.w	r3, r3, #32
2401ab16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
2401ab1a:	4b35      	ldr	r3, [pc, #212]	@ (2401abf0 <HAL_OSPI_MspInit+0x178>)
2401ab1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
2401ab20:	f003 0320 	and.w	r3, r3, #32
2401ab24:	617b      	str	r3, [r7, #20]
2401ab26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
2401ab28:	4b31      	ldr	r3, [pc, #196]	@ (2401abf0 <HAL_OSPI_MspInit+0x178>)
2401ab2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
2401ab2e:	4a30      	ldr	r2, [pc, #192]	@ (2401abf0 <HAL_OSPI_MspInit+0x178>)
2401ab30:	f043 0302 	orr.w	r3, r3, #2
2401ab34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
2401ab38:	4b2d      	ldr	r3, [pc, #180]	@ (2401abf0 <HAL_OSPI_MspInit+0x178>)
2401ab3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
2401ab3e:	f003 0302 	and.w	r3, r3, #2
2401ab42:	613b      	str	r3, [r7, #16]
2401ab44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
2401ab46:	4b2a      	ldr	r3, [pc, #168]	@ (2401abf0 <HAL_OSPI_MspInit+0x178>)
2401ab48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
2401ab4c:	4a28      	ldr	r2, [pc, #160]	@ (2401abf0 <HAL_OSPI_MspInit+0x178>)
2401ab4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
2401ab52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
2401ab56:	4b26      	ldr	r3, [pc, #152]	@ (2401abf0 <HAL_OSPI_MspInit+0x178>)
2401ab58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
2401ab5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
2401ab60:	60fb      	str	r3, [r7, #12]
2401ab62:	68fb      	ldr	r3, [r7, #12]
    PF8     ------> OCTOSPIM_P1_IO0
    PF9     ------> OCTOSPIM_P1_IO1
    PB2     ------> OCTOSPIM_P1_CLK
    PG6     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
2401ab64:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
2401ab68:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2401ab6c:	2302      	movs	r3, #2
2401ab6e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2401ab72:	2300      	movs	r3, #0
2401ab74:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
2401ab78:	2303      	movs	r3, #3
2401ab7a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
2401ab7e:	230a      	movs	r3, #10
2401ab80:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
2401ab84:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
2401ab88:	4619      	mov	r1, r3
2401ab8a:	481a      	ldr	r0, [pc, #104]	@ (2401abf4 <HAL_OSPI_MspInit+0x17c>)
2401ab8c:	f7ef fbd4 	bl	2400a338 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
2401ab90:	2304      	movs	r3, #4
2401ab92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2401ab96:	2302      	movs	r3, #2
2401ab98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2401ab9c:	2300      	movs	r3, #0
2401ab9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
2401aba2:	2303      	movs	r3, #3
2401aba4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
2401aba8:	2309      	movs	r3, #9
2401abaa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
2401abae:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
2401abb2:	4619      	mov	r1, r3
2401abb4:	4810      	ldr	r0, [pc, #64]	@ (2401abf8 <HAL_OSPI_MspInit+0x180>)
2401abb6:	f7ef fbbf 	bl	2400a338 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
2401abba:	2340      	movs	r3, #64	@ 0x40
2401abbc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2401abc0:	2302      	movs	r3, #2
2401abc2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2401abc6:	2300      	movs	r3, #0
2401abc8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
2401abcc:	2303      	movs	r3, #3
2401abce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
2401abd2:	230a      	movs	r3, #10
2401abd4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
2401abd8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
2401abdc:	4619      	mov	r1, r3
2401abde:	4807      	ldr	r0, [pc, #28]	@ (2401abfc <HAL_OSPI_MspInit+0x184>)
2401abe0:	f7ef fbaa 	bl	2400a338 <HAL_GPIO_Init>

  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
2401abe4:	bf00      	nop
2401abe6:	37f0      	adds	r7, #240	@ 0xf0
2401abe8:	46bd      	mov	sp, r7
2401abea:	bd80      	pop	{r7, pc}
2401abec:	52005000 	.word	0x52005000
2401abf0:	58024400 	.word	0x58024400
2401abf4:	58021400 	.word	0x58021400
2401abf8:	58020400 	.word	0x58020400
2401abfc:	58021800 	.word	0x58021800

2401ac00 <HAL_OSPI_MspDeInit>:

void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* ospiHandle)
{
2401ac00:	b580      	push	{r7, lr}
2401ac02:	b082      	sub	sp, #8
2401ac04:	af00      	add	r7, sp, #0
2401ac06:	6078      	str	r0, [r7, #4]

  if(ospiHandle->Instance==OCTOSPI1)
2401ac08:	687b      	ldr	r3, [r7, #4]
2401ac0a:	681b      	ldr	r3, [r3, #0]
2401ac0c:	4a11      	ldr	r2, [pc, #68]	@ (2401ac54 <HAL_OSPI_MspDeInit+0x54>)
2401ac0e:	4293      	cmp	r3, r2
2401ac10:	d11c      	bne.n	2401ac4c <HAL_OSPI_MspDeInit+0x4c>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_OCTOSPIM_CLK_DISABLE();
2401ac12:	4b11      	ldr	r3, [pc, #68]	@ (2401ac58 <HAL_OSPI_MspDeInit+0x58>)
2401ac14:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
2401ac18:	4a0f      	ldr	r2, [pc, #60]	@ (2401ac58 <HAL_OSPI_MspDeInit+0x58>)
2401ac1a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
2401ac1e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    __HAL_RCC_OSPI1_CLK_DISABLE();
2401ac22:	4b0d      	ldr	r3, [pc, #52]	@ (2401ac58 <HAL_OSPI_MspDeInit+0x58>)
2401ac24:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
2401ac28:	4a0b      	ldr	r2, [pc, #44]	@ (2401ac58 <HAL_OSPI_MspDeInit+0x58>)
2401ac2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
2401ac2e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    PF8     ------> OCTOSPIM_P1_IO0
    PF9     ------> OCTOSPIM_P1_IO1
    PB2     ------> OCTOSPIM_P1_CLK
    PG6     ------> OCTOSPIM_P1_NCS
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
2401ac32:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
2401ac36:	4809      	ldr	r0, [pc, #36]	@ (2401ac5c <HAL_OSPI_MspDeInit+0x5c>)
2401ac38:	f7ef fd26 	bl	2400a688 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2);
2401ac3c:	2104      	movs	r1, #4
2401ac3e:	4808      	ldr	r0, [pc, #32]	@ (2401ac60 <HAL_OSPI_MspDeInit+0x60>)
2401ac40:	f7ef fd22 	bl	2400a688 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_6);
2401ac44:	2140      	movs	r1, #64	@ 0x40
2401ac46:	4807      	ldr	r0, [pc, #28]	@ (2401ac64 <HAL_OSPI_MspDeInit+0x64>)
2401ac48:	f7ef fd1e 	bl	2400a688 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }
}
2401ac4c:	bf00      	nop
2401ac4e:	3708      	adds	r7, #8
2401ac50:	46bd      	mov	sp, r7
2401ac52:	bd80      	pop	{r7, pc}
2401ac54:	52005000 	.word	0x52005000
2401ac58:	58024400 	.word	0x58024400
2401ac5c:	58021400 	.word	0x58021400
2401ac60:	58020400 	.word	0x58020400
2401ac64:	58021800 	.word	0x58021800

2401ac68 <hwInit>:

#include "hw.h"


void hwInit(void)
{
2401ac68:	b580      	push	{r7, lr}
2401ac6a:	af00      	add	r7, sp, #0
	bspInit();
2401ac6c:	f7ff f9e2 	bl	2401a034 <bspInit>
	MX_GPIO_Init();
2401ac70:	f7ff fe30 	bl	2401a8d4 <MX_GPIO_Init>
	MX_OCTOSPI1_Init();
2401ac74:	f7ff fea2 	bl	2401a9bc <MX_OCTOSPI1_Init>
}
2401ac78:	bf00      	nop
2401ac7a:	bd80      	pop	{r7, pc}

2401ac7c <main>:

#include "main.h"


int main(void)
{
2401ac7c:	b580      	push	{r7, lr}
2401ac7e:	af00      	add	r7, sp, #0
	hwInit();
2401ac80:	f7ff fff2 	bl	2401ac68 <hwInit>
	apInit();
2401ac84:	f7fe fae5 	bl	24019252 <apInit>

	apMain();
2401ac88:	f7fe fae9 	bl	2401925e <apMain>

	return 0;
2401ac8c:	2300      	movs	r3, #0
}
2401ac8e:	4618      	mov	r0, r3
2401ac90:	bd80      	pop	{r7, pc}
	...

2401ac94 <exit>:
2401ac94:	b508      	push	{r3, lr}
2401ac96:	4b06      	ldr	r3, [pc, #24]	@ (2401acb0 <exit+0x1c>)
2401ac98:	4604      	mov	r4, r0
2401ac9a:	b113      	cbz	r3, 2401aca2 <exit+0xe>
2401ac9c:	2100      	movs	r1, #0
2401ac9e:	f3af 8000 	nop.w
2401aca2:	4b04      	ldr	r3, [pc, #16]	@ (2401acb4 <exit+0x20>)
2401aca4:	681b      	ldr	r3, [r3, #0]
2401aca6:	b103      	cbz	r3, 2401acaa <exit+0x16>
2401aca8:	4798      	blx	r3
2401acaa:	4620      	mov	r0, r4
2401acac:	f7ff fad4 	bl	2401a258 <_exit>
2401acb0:	00000000 	.word	0x00000000
2401acb4:	24002a20 	.word	0x24002a20

2401acb8 <std>:
2401acb8:	2300      	movs	r3, #0
2401acba:	b510      	push	{r4, lr}
2401acbc:	4604      	mov	r4, r0
2401acbe:	e9c0 3300 	strd	r3, r3, [r0]
2401acc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
2401acc6:	6083      	str	r3, [r0, #8]
2401acc8:	8181      	strh	r1, [r0, #12]
2401acca:	6643      	str	r3, [r0, #100]	@ 0x64
2401accc:	81c2      	strh	r2, [r0, #14]
2401acce:	6183      	str	r3, [r0, #24]
2401acd0:	4619      	mov	r1, r3
2401acd2:	2208      	movs	r2, #8
2401acd4:	305c      	adds	r0, #92	@ 0x5c
2401acd6:	f000 f97c 	bl	2401afd2 <memset>
2401acda:	4b0d      	ldr	r3, [pc, #52]	@ (2401ad10 <std+0x58>)
2401acdc:	6263      	str	r3, [r4, #36]	@ 0x24
2401acde:	4b0d      	ldr	r3, [pc, #52]	@ (2401ad14 <std+0x5c>)
2401ace0:	62a3      	str	r3, [r4, #40]	@ 0x28
2401ace2:	4b0d      	ldr	r3, [pc, #52]	@ (2401ad18 <std+0x60>)
2401ace4:	62e3      	str	r3, [r4, #44]	@ 0x2c
2401ace6:	4b0d      	ldr	r3, [pc, #52]	@ (2401ad1c <std+0x64>)
2401ace8:	6323      	str	r3, [r4, #48]	@ 0x30
2401acea:	4b0d      	ldr	r3, [pc, #52]	@ (2401ad20 <std+0x68>)
2401acec:	6224      	str	r4, [r4, #32]
2401acee:	429c      	cmp	r4, r3
2401acf0:	d006      	beq.n	2401ad00 <std+0x48>
2401acf2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
2401acf6:	4294      	cmp	r4, r2
2401acf8:	d002      	beq.n	2401ad00 <std+0x48>
2401acfa:	33d0      	adds	r3, #208	@ 0xd0
2401acfc:	429c      	cmp	r4, r3
2401acfe:	d105      	bne.n	2401ad0c <std+0x54>
2401ad00:	f104 0058 	add.w	r0, r4, #88	@ 0x58
2401ad04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
2401ad08:	f000 ba33 	b.w	2401b172 <__retarget_lock_init_recursive>
2401ad0c:	bd10      	pop	{r4, pc}
2401ad0e:	bf00      	nop
2401ad10:	2401af49 	.word	0x2401af49
2401ad14:	2401af6f 	.word	0x2401af6f
2401ad18:	2401afa7 	.word	0x2401afa7
2401ad1c:	2401afcb 	.word	0x2401afcb
2401ad20:	240028e8 	.word	0x240028e8

2401ad24 <stdio_exit_handler>:
2401ad24:	4a02      	ldr	r2, [pc, #8]	@ (2401ad30 <stdio_exit_handler+0xc>)
2401ad26:	4903      	ldr	r1, [pc, #12]	@ (2401ad34 <stdio_exit_handler+0x10>)
2401ad28:	4803      	ldr	r0, [pc, #12]	@ (2401ad38 <stdio_exit_handler+0x14>)
2401ad2a:	f000 b8ef 	b.w	2401af0c <_fwalk_sglue>
2401ad2e:	bf00      	nop
2401ad30:	240004c0 	.word	0x240004c0
2401ad34:	2401b481 	.word	0x2401b481
2401ad38:	240004d0 	.word	0x240004d0

2401ad3c <cleanup_stdio>:
2401ad3c:	6841      	ldr	r1, [r0, #4]
2401ad3e:	4b0c      	ldr	r3, [pc, #48]	@ (2401ad70 <cleanup_stdio+0x34>)
2401ad40:	4299      	cmp	r1, r3
2401ad42:	b510      	push	{r4, lr}
2401ad44:	4604      	mov	r4, r0
2401ad46:	d001      	beq.n	2401ad4c <cleanup_stdio+0x10>
2401ad48:	f000 fb9a 	bl	2401b480 <_fflush_r>
2401ad4c:	68a1      	ldr	r1, [r4, #8]
2401ad4e:	4b09      	ldr	r3, [pc, #36]	@ (2401ad74 <cleanup_stdio+0x38>)
2401ad50:	4299      	cmp	r1, r3
2401ad52:	d002      	beq.n	2401ad5a <cleanup_stdio+0x1e>
2401ad54:	4620      	mov	r0, r4
2401ad56:	f000 fb93 	bl	2401b480 <_fflush_r>
2401ad5a:	68e1      	ldr	r1, [r4, #12]
2401ad5c:	4b06      	ldr	r3, [pc, #24]	@ (2401ad78 <cleanup_stdio+0x3c>)
2401ad5e:	4299      	cmp	r1, r3
2401ad60:	d004      	beq.n	2401ad6c <cleanup_stdio+0x30>
2401ad62:	4620      	mov	r0, r4
2401ad64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
2401ad68:	f000 bb8a 	b.w	2401b480 <_fflush_r>
2401ad6c:	bd10      	pop	{r4, pc}
2401ad6e:	bf00      	nop
2401ad70:	240028e8 	.word	0x240028e8
2401ad74:	24002950 	.word	0x24002950
2401ad78:	240029b8 	.word	0x240029b8

2401ad7c <__fp_lock>:
2401ad7c:	b508      	push	{r3, lr}
2401ad7e:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
2401ad80:	07da      	lsls	r2, r3, #31
2401ad82:	d405      	bmi.n	2401ad90 <__fp_lock+0x14>
2401ad84:	898b      	ldrh	r3, [r1, #12]
2401ad86:	059b      	lsls	r3, r3, #22
2401ad88:	d402      	bmi.n	2401ad90 <__fp_lock+0x14>
2401ad8a:	6d88      	ldr	r0, [r1, #88]	@ 0x58
2401ad8c:	f000 f9f5 	bl	2401b17a <__retarget_lock_acquire_recursive>
2401ad90:	2000      	movs	r0, #0
2401ad92:	bd08      	pop	{r3, pc}

2401ad94 <__fp_unlock>:
2401ad94:	b508      	push	{r3, lr}
2401ad96:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
2401ad98:	07da      	lsls	r2, r3, #31
2401ad9a:	d405      	bmi.n	2401ada8 <__fp_unlock+0x14>
2401ad9c:	898b      	ldrh	r3, [r1, #12]
2401ad9e:	059b      	lsls	r3, r3, #22
2401ada0:	d402      	bmi.n	2401ada8 <__fp_unlock+0x14>
2401ada2:	6d88      	ldr	r0, [r1, #88]	@ 0x58
2401ada4:	f000 f9ef 	bl	2401b186 <__retarget_lock_release_recursive>
2401ada8:	2000      	movs	r0, #0
2401adaa:	bd08      	pop	{r3, pc}

2401adac <global_stdio_init.part.0>:
2401adac:	b510      	push	{r4, lr}
2401adae:	4b0b      	ldr	r3, [pc, #44]	@ (2401addc <global_stdio_init.part.0+0x30>)
2401adb0:	4c0b      	ldr	r4, [pc, #44]	@ (2401ade0 <global_stdio_init.part.0+0x34>)
2401adb2:	4a0c      	ldr	r2, [pc, #48]	@ (2401ade4 <global_stdio_init.part.0+0x38>)
2401adb4:	601a      	str	r2, [r3, #0]
2401adb6:	4620      	mov	r0, r4
2401adb8:	2200      	movs	r2, #0
2401adba:	2104      	movs	r1, #4
2401adbc:	f7ff ff7c 	bl	2401acb8 <std>
2401adc0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
2401adc4:	2201      	movs	r2, #1
2401adc6:	2109      	movs	r1, #9
2401adc8:	f7ff ff76 	bl	2401acb8 <std>
2401adcc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
2401add0:	2202      	movs	r2, #2
2401add2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
2401add6:	2112      	movs	r1, #18
2401add8:	f7ff bf6e 	b.w	2401acb8 <std>
2401addc:	24002a20 	.word	0x24002a20
2401ade0:	240028e8 	.word	0x240028e8
2401ade4:	2401ad25 	.word	0x2401ad25

2401ade8 <__sfp_lock_acquire>:
2401ade8:	4801      	ldr	r0, [pc, #4]	@ (2401adf0 <__sfp_lock_acquire+0x8>)
2401adea:	f000 b9c6 	b.w	2401b17a <__retarget_lock_acquire_recursive>
2401adee:	bf00      	nop
2401adf0:	24002a2f 	.word	0x24002a2f

2401adf4 <__sfp_lock_release>:
2401adf4:	4801      	ldr	r0, [pc, #4]	@ (2401adfc <__sfp_lock_release+0x8>)
2401adf6:	f000 b9c6 	b.w	2401b186 <__retarget_lock_release_recursive>
2401adfa:	bf00      	nop
2401adfc:	24002a2f 	.word	0x24002a2f

2401ae00 <__sfp>:
2401ae00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2401ae02:	4607      	mov	r7, r0
2401ae04:	f7ff fff0 	bl	2401ade8 <__sfp_lock_acquire>
2401ae08:	4b23      	ldr	r3, [pc, #140]	@ (2401ae98 <__sfp+0x98>)
2401ae0a:	681b      	ldr	r3, [r3, #0]
2401ae0c:	b90b      	cbnz	r3, 2401ae12 <__sfp+0x12>
2401ae0e:	f7ff ffcd 	bl	2401adac <global_stdio_init.part.0>
2401ae12:	4e22      	ldr	r6, [pc, #136]	@ (2401ae9c <__sfp+0x9c>)
2401ae14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
2401ae18:	3b01      	subs	r3, #1
2401ae1a:	d50f      	bpl.n	2401ae3c <__sfp+0x3c>
2401ae1c:	6835      	ldr	r5, [r6, #0]
2401ae1e:	2d00      	cmp	r5, #0
2401ae20:	d137      	bne.n	2401ae92 <__sfp+0x92>
2401ae22:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
2401ae26:	4638      	mov	r0, r7
2401ae28:	f000 fa1a 	bl	2401b260 <_malloc_r>
2401ae2c:	4604      	mov	r4, r0
2401ae2e:	bb28      	cbnz	r0, 2401ae7c <__sfp+0x7c>
2401ae30:	6030      	str	r0, [r6, #0]
2401ae32:	f7ff ffdf 	bl	2401adf4 <__sfp_lock_release>
2401ae36:	230c      	movs	r3, #12
2401ae38:	603b      	str	r3, [r7, #0]
2401ae3a:	e01b      	b.n	2401ae74 <__sfp+0x74>
2401ae3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
2401ae40:	b9d5      	cbnz	r5, 2401ae78 <__sfp+0x78>
2401ae42:	4b17      	ldr	r3, [pc, #92]	@ (2401aea0 <__sfp+0xa0>)
2401ae44:	60e3      	str	r3, [r4, #12]
2401ae46:	f104 0058 	add.w	r0, r4, #88	@ 0x58
2401ae4a:	6665      	str	r5, [r4, #100]	@ 0x64
2401ae4c:	f000 f991 	bl	2401b172 <__retarget_lock_init_recursive>
2401ae50:	f7ff ffd0 	bl	2401adf4 <__sfp_lock_release>
2401ae54:	e9c4 5501 	strd	r5, r5, [r4, #4]
2401ae58:	e9c4 5504 	strd	r5, r5, [r4, #16]
2401ae5c:	6025      	str	r5, [r4, #0]
2401ae5e:	61a5      	str	r5, [r4, #24]
2401ae60:	2208      	movs	r2, #8
2401ae62:	4629      	mov	r1, r5
2401ae64:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
2401ae68:	f000 f8b3 	bl	2401afd2 <memset>
2401ae6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
2401ae70:	e9c4 5512 	strd	r5, r5, [r4, #72]	@ 0x48
2401ae74:	4620      	mov	r0, r4
2401ae76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2401ae78:	3468      	adds	r4, #104	@ 0x68
2401ae7a:	e7cd      	b.n	2401ae18 <__sfp+0x18>
2401ae7c:	2304      	movs	r3, #4
2401ae7e:	6005      	str	r5, [r0, #0]
2401ae80:	6043      	str	r3, [r0, #4]
2401ae82:	300c      	adds	r0, #12
2401ae84:	60a0      	str	r0, [r4, #8]
2401ae86:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
2401ae8a:	4629      	mov	r1, r5
2401ae8c:	f000 f8a1 	bl	2401afd2 <memset>
2401ae90:	6034      	str	r4, [r6, #0]
2401ae92:	6836      	ldr	r6, [r6, #0]
2401ae94:	e7be      	b.n	2401ae14 <__sfp+0x14>
2401ae96:	bf00      	nop
2401ae98:	24002a20 	.word	0x24002a20
2401ae9c:	240004c0 	.word	0x240004c0
2401aea0:	ffff0001 	.word	0xffff0001

2401aea4 <__sinit>:
2401aea4:	b510      	push	{r4, lr}
2401aea6:	4604      	mov	r4, r0
2401aea8:	f7ff ff9e 	bl	2401ade8 <__sfp_lock_acquire>
2401aeac:	6a23      	ldr	r3, [r4, #32]
2401aeae:	b11b      	cbz	r3, 2401aeb8 <__sinit+0x14>
2401aeb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
2401aeb4:	f7ff bf9e 	b.w	2401adf4 <__sfp_lock_release>
2401aeb8:	4b04      	ldr	r3, [pc, #16]	@ (2401aecc <__sinit+0x28>)
2401aeba:	6223      	str	r3, [r4, #32]
2401aebc:	4b04      	ldr	r3, [pc, #16]	@ (2401aed0 <__sinit+0x2c>)
2401aebe:	681b      	ldr	r3, [r3, #0]
2401aec0:	2b00      	cmp	r3, #0
2401aec2:	d1f5      	bne.n	2401aeb0 <__sinit+0xc>
2401aec4:	f7ff ff72 	bl	2401adac <global_stdio_init.part.0>
2401aec8:	e7f2      	b.n	2401aeb0 <__sinit+0xc>
2401aeca:	bf00      	nop
2401aecc:	2401ad3d 	.word	0x2401ad3d
2401aed0:	24002a20 	.word	0x24002a20

2401aed4 <__fp_lock_all>:
2401aed4:	b508      	push	{r3, lr}
2401aed6:	f7ff ff87 	bl	2401ade8 <__sfp_lock_acquire>
2401aeda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
2401aede:	4a02      	ldr	r2, [pc, #8]	@ (2401aee8 <__fp_lock_all+0x14>)
2401aee0:	4902      	ldr	r1, [pc, #8]	@ (2401aeec <__fp_lock_all+0x18>)
2401aee2:	2000      	movs	r0, #0
2401aee4:	f000 b812 	b.w	2401af0c <_fwalk_sglue>
2401aee8:	240004c0 	.word	0x240004c0
2401aeec:	2401ad7d 	.word	0x2401ad7d

2401aef0 <__fp_unlock_all>:
2401aef0:	b508      	push	{r3, lr}
2401aef2:	4a04      	ldr	r2, [pc, #16]	@ (2401af04 <__fp_unlock_all+0x14>)
2401aef4:	4904      	ldr	r1, [pc, #16]	@ (2401af08 <__fp_unlock_all+0x18>)
2401aef6:	2000      	movs	r0, #0
2401aef8:	f000 f808 	bl	2401af0c <_fwalk_sglue>
2401aefc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
2401af00:	f7ff bf78 	b.w	2401adf4 <__sfp_lock_release>
2401af04:	240004c0 	.word	0x240004c0
2401af08:	2401ad95 	.word	0x2401ad95

2401af0c <_fwalk_sglue>:
2401af0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2401af10:	4607      	mov	r7, r0
2401af12:	4688      	mov	r8, r1
2401af14:	4614      	mov	r4, r2
2401af16:	2600      	movs	r6, #0
2401af18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
2401af1c:	f1b9 0901 	subs.w	r9, r9, #1
2401af20:	d505      	bpl.n	2401af2e <_fwalk_sglue+0x22>
2401af22:	6824      	ldr	r4, [r4, #0]
2401af24:	2c00      	cmp	r4, #0
2401af26:	d1f7      	bne.n	2401af18 <_fwalk_sglue+0xc>
2401af28:	4630      	mov	r0, r6
2401af2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
2401af2e:	89ab      	ldrh	r3, [r5, #12]
2401af30:	2b01      	cmp	r3, #1
2401af32:	d907      	bls.n	2401af44 <_fwalk_sglue+0x38>
2401af34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
2401af38:	3301      	adds	r3, #1
2401af3a:	d003      	beq.n	2401af44 <_fwalk_sglue+0x38>
2401af3c:	4629      	mov	r1, r5
2401af3e:	4638      	mov	r0, r7
2401af40:	47c0      	blx	r8
2401af42:	4306      	orrs	r6, r0
2401af44:	3568      	adds	r5, #104	@ 0x68
2401af46:	e7e9      	b.n	2401af1c <_fwalk_sglue+0x10>

2401af48 <__sread>:
2401af48:	b510      	push	{r4, lr}
2401af4a:	460c      	mov	r4, r1
2401af4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
2401af50:	f000 f8c0 	bl	2401b0d4 <_read_r>
2401af54:	2800      	cmp	r0, #0
2401af56:	bfab      	itete	ge
2401af58:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
2401af5a:	89a3      	ldrhlt	r3, [r4, #12]
2401af5c:	181b      	addge	r3, r3, r0
2401af5e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
2401af62:	bfac      	ite	ge
2401af64:	6563      	strge	r3, [r4, #84]	@ 0x54
2401af66:	81a3      	strhlt	r3, [r4, #12]
2401af68:	bd10      	pop	{r4, pc}

2401af6a <__seofread>:
2401af6a:	2000      	movs	r0, #0
2401af6c:	4770      	bx	lr

2401af6e <__swrite>:
2401af6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2401af72:	461f      	mov	r7, r3
2401af74:	898b      	ldrh	r3, [r1, #12]
2401af76:	05db      	lsls	r3, r3, #23
2401af78:	4605      	mov	r5, r0
2401af7a:	460c      	mov	r4, r1
2401af7c:	4616      	mov	r6, r2
2401af7e:	d505      	bpl.n	2401af8c <__swrite+0x1e>
2401af80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
2401af84:	2302      	movs	r3, #2
2401af86:	2200      	movs	r2, #0
2401af88:	f000 f892 	bl	2401b0b0 <_lseek_r>
2401af8c:	89a3      	ldrh	r3, [r4, #12]
2401af8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
2401af92:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
2401af96:	81a3      	strh	r3, [r4, #12]
2401af98:	4632      	mov	r2, r6
2401af9a:	463b      	mov	r3, r7
2401af9c:	4628      	mov	r0, r5
2401af9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
2401afa2:	f000 b8a9 	b.w	2401b0f8 <_write_r>

2401afa6 <__sseek>:
2401afa6:	b510      	push	{r4, lr}
2401afa8:	460c      	mov	r4, r1
2401afaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
2401afae:	f000 f87f 	bl	2401b0b0 <_lseek_r>
2401afb2:	1c43      	adds	r3, r0, #1
2401afb4:	89a3      	ldrh	r3, [r4, #12]
2401afb6:	bf15      	itete	ne
2401afb8:	6560      	strne	r0, [r4, #84]	@ 0x54
2401afba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
2401afbe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
2401afc2:	81a3      	strheq	r3, [r4, #12]
2401afc4:	bf18      	it	ne
2401afc6:	81a3      	strhne	r3, [r4, #12]
2401afc8:	bd10      	pop	{r4, pc}

2401afca <__sclose>:
2401afca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
2401afce:	f000 b809 	b.w	2401afe4 <_close_r>

2401afd2 <memset>:
2401afd2:	4402      	add	r2, r0
2401afd4:	4603      	mov	r3, r0
2401afd6:	4293      	cmp	r3, r2
2401afd8:	d100      	bne.n	2401afdc <memset+0xa>
2401afda:	4770      	bx	lr
2401afdc:	f803 1b01 	strb.w	r1, [r3], #1
2401afe0:	e7f9      	b.n	2401afd6 <memset+0x4>
	...

2401afe4 <_close_r>:
2401afe4:	b538      	push	{r3, r4, r5, lr}
2401afe6:	4d06      	ldr	r5, [pc, #24]	@ (2401b000 <_close_r+0x1c>)
2401afe8:	2300      	movs	r3, #0
2401afea:	4604      	mov	r4, r0
2401afec:	4608      	mov	r0, r1
2401afee:	602b      	str	r3, [r5, #0]
2401aff0:	f7ff f976 	bl	2401a2e0 <_close>
2401aff4:	1c43      	adds	r3, r0, #1
2401aff6:	d102      	bne.n	2401affe <_close_r+0x1a>
2401aff8:	682b      	ldr	r3, [r5, #0]
2401affa:	b103      	cbz	r3, 2401affe <_close_r+0x1a>
2401affc:	6023      	str	r3, [r4, #0]
2401affe:	bd38      	pop	{r3, r4, r5, pc}
2401b000:	24002a24 	.word	0x24002a24

2401b004 <_reclaim_reent>:
2401b004:	4b29      	ldr	r3, [pc, #164]	@ (2401b0ac <_reclaim_reent+0xa8>)
2401b006:	681b      	ldr	r3, [r3, #0]
2401b008:	4283      	cmp	r3, r0
2401b00a:	b570      	push	{r4, r5, r6, lr}
2401b00c:	4604      	mov	r4, r0
2401b00e:	d04b      	beq.n	2401b0a8 <_reclaim_reent+0xa4>
2401b010:	69c3      	ldr	r3, [r0, #28]
2401b012:	b1ab      	cbz	r3, 2401b040 <_reclaim_reent+0x3c>
2401b014:	68db      	ldr	r3, [r3, #12]
2401b016:	b16b      	cbz	r3, 2401b034 <_reclaim_reent+0x30>
2401b018:	2500      	movs	r5, #0
2401b01a:	69e3      	ldr	r3, [r4, #28]
2401b01c:	68db      	ldr	r3, [r3, #12]
2401b01e:	5959      	ldr	r1, [r3, r5]
2401b020:	2900      	cmp	r1, #0
2401b022:	d13b      	bne.n	2401b09c <_reclaim_reent+0x98>
2401b024:	3504      	adds	r5, #4
2401b026:	2d80      	cmp	r5, #128	@ 0x80
2401b028:	d1f7      	bne.n	2401b01a <_reclaim_reent+0x16>
2401b02a:	69e3      	ldr	r3, [r4, #28]
2401b02c:	4620      	mov	r0, r4
2401b02e:	68d9      	ldr	r1, [r3, #12]
2401b030:	f000 f8aa 	bl	2401b188 <_free_r>
2401b034:	69e3      	ldr	r3, [r4, #28]
2401b036:	6819      	ldr	r1, [r3, #0]
2401b038:	b111      	cbz	r1, 2401b040 <_reclaim_reent+0x3c>
2401b03a:	4620      	mov	r0, r4
2401b03c:	f000 f8a4 	bl	2401b188 <_free_r>
2401b040:	6961      	ldr	r1, [r4, #20]
2401b042:	b111      	cbz	r1, 2401b04a <_reclaim_reent+0x46>
2401b044:	4620      	mov	r0, r4
2401b046:	f000 f89f 	bl	2401b188 <_free_r>
2401b04a:	69e1      	ldr	r1, [r4, #28]
2401b04c:	b111      	cbz	r1, 2401b054 <_reclaim_reent+0x50>
2401b04e:	4620      	mov	r0, r4
2401b050:	f000 f89a 	bl	2401b188 <_free_r>
2401b054:	6b21      	ldr	r1, [r4, #48]	@ 0x30
2401b056:	b111      	cbz	r1, 2401b05e <_reclaim_reent+0x5a>
2401b058:	4620      	mov	r0, r4
2401b05a:	f000 f895 	bl	2401b188 <_free_r>
2401b05e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
2401b060:	b111      	cbz	r1, 2401b068 <_reclaim_reent+0x64>
2401b062:	4620      	mov	r0, r4
2401b064:	f000 f890 	bl	2401b188 <_free_r>
2401b068:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
2401b06a:	b111      	cbz	r1, 2401b072 <_reclaim_reent+0x6e>
2401b06c:	4620      	mov	r0, r4
2401b06e:	f000 f88b 	bl	2401b188 <_free_r>
2401b072:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
2401b074:	b111      	cbz	r1, 2401b07c <_reclaim_reent+0x78>
2401b076:	4620      	mov	r0, r4
2401b078:	f000 f886 	bl	2401b188 <_free_r>
2401b07c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
2401b07e:	b111      	cbz	r1, 2401b086 <_reclaim_reent+0x82>
2401b080:	4620      	mov	r0, r4
2401b082:	f000 f881 	bl	2401b188 <_free_r>
2401b086:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
2401b088:	b111      	cbz	r1, 2401b090 <_reclaim_reent+0x8c>
2401b08a:	4620      	mov	r0, r4
2401b08c:	f000 f87c 	bl	2401b188 <_free_r>
2401b090:	6a23      	ldr	r3, [r4, #32]
2401b092:	b14b      	cbz	r3, 2401b0a8 <_reclaim_reent+0xa4>
2401b094:	4620      	mov	r0, r4
2401b096:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
2401b09a:	4718      	bx	r3
2401b09c:	680e      	ldr	r6, [r1, #0]
2401b09e:	4620      	mov	r0, r4
2401b0a0:	f000 f872 	bl	2401b188 <_free_r>
2401b0a4:	4631      	mov	r1, r6
2401b0a6:	e7bb      	b.n	2401b020 <_reclaim_reent+0x1c>
2401b0a8:	bd70      	pop	{r4, r5, r6, pc}
2401b0aa:	bf00      	nop
2401b0ac:	240004cc 	.word	0x240004cc

2401b0b0 <_lseek_r>:
2401b0b0:	b538      	push	{r3, r4, r5, lr}
2401b0b2:	4d07      	ldr	r5, [pc, #28]	@ (2401b0d0 <_lseek_r+0x20>)
2401b0b4:	4604      	mov	r4, r0
2401b0b6:	4608      	mov	r0, r1
2401b0b8:	4611      	mov	r1, r2
2401b0ba:	2200      	movs	r2, #0
2401b0bc:	602a      	str	r2, [r5, #0]
2401b0be:	461a      	mov	r2, r3
2401b0c0:	f7ff f935 	bl	2401a32e <_lseek>
2401b0c4:	1c43      	adds	r3, r0, #1
2401b0c6:	d102      	bne.n	2401b0ce <_lseek_r+0x1e>
2401b0c8:	682b      	ldr	r3, [r5, #0]
2401b0ca:	b103      	cbz	r3, 2401b0ce <_lseek_r+0x1e>
2401b0cc:	6023      	str	r3, [r4, #0]
2401b0ce:	bd38      	pop	{r3, r4, r5, pc}
2401b0d0:	24002a24 	.word	0x24002a24

2401b0d4 <_read_r>:
2401b0d4:	b538      	push	{r3, r4, r5, lr}
2401b0d6:	4d07      	ldr	r5, [pc, #28]	@ (2401b0f4 <_read_r+0x20>)
2401b0d8:	4604      	mov	r4, r0
2401b0da:	4608      	mov	r0, r1
2401b0dc:	4611      	mov	r1, r2
2401b0de:	2200      	movs	r2, #0
2401b0e0:	602a      	str	r2, [r5, #0]
2401b0e2:	461a      	mov	r2, r3
2401b0e4:	f7ff f8c3 	bl	2401a26e <_read>
2401b0e8:	1c43      	adds	r3, r0, #1
2401b0ea:	d102      	bne.n	2401b0f2 <_read_r+0x1e>
2401b0ec:	682b      	ldr	r3, [r5, #0]
2401b0ee:	b103      	cbz	r3, 2401b0f2 <_read_r+0x1e>
2401b0f0:	6023      	str	r3, [r4, #0]
2401b0f2:	bd38      	pop	{r3, r4, r5, pc}
2401b0f4:	24002a24 	.word	0x24002a24

2401b0f8 <_write_r>:
2401b0f8:	b538      	push	{r3, r4, r5, lr}
2401b0fa:	4d07      	ldr	r5, [pc, #28]	@ (2401b118 <_write_r+0x20>)
2401b0fc:	4604      	mov	r4, r0
2401b0fe:	4608      	mov	r0, r1
2401b100:	4611      	mov	r1, r2
2401b102:	2200      	movs	r2, #0
2401b104:	602a      	str	r2, [r5, #0]
2401b106:	461a      	mov	r2, r3
2401b108:	f7ff f8ce 	bl	2401a2a8 <_write>
2401b10c:	1c43      	adds	r3, r0, #1
2401b10e:	d102      	bne.n	2401b116 <_write_r+0x1e>
2401b110:	682b      	ldr	r3, [r5, #0]
2401b112:	b103      	cbz	r3, 2401b116 <_write_r+0x1e>
2401b114:	6023      	str	r3, [r4, #0]
2401b116:	bd38      	pop	{r3, r4, r5, pc}
2401b118:	24002a24 	.word	0x24002a24

2401b11c <__errno>:
2401b11c:	4b01      	ldr	r3, [pc, #4]	@ (2401b124 <__errno+0x8>)
2401b11e:	6818      	ldr	r0, [r3, #0]
2401b120:	4770      	bx	lr
2401b122:	bf00      	nop
2401b124:	240004cc 	.word	0x240004cc

2401b128 <__libc_init_array>:
2401b128:	b570      	push	{r4, r5, r6, lr}
2401b12a:	4d0d      	ldr	r5, [pc, #52]	@ (2401b160 <__libc_init_array+0x38>)
2401b12c:	4c0d      	ldr	r4, [pc, #52]	@ (2401b164 <__libc_init_array+0x3c>)
2401b12e:	1b64      	subs	r4, r4, r5
2401b130:	10a4      	asrs	r4, r4, #2
2401b132:	2600      	movs	r6, #0
2401b134:	42a6      	cmp	r6, r4
2401b136:	d109      	bne.n	2401b14c <__libc_init_array+0x24>
2401b138:	4d0b      	ldr	r5, [pc, #44]	@ (2401b168 <__libc_init_array+0x40>)
2401b13a:	4c0c      	ldr	r4, [pc, #48]	@ (2401b16c <__libc_init_array+0x44>)
2401b13c:	f000 f9ee 	bl	2401b51c <_init>
2401b140:	1b64      	subs	r4, r4, r5
2401b142:	10a4      	asrs	r4, r4, #2
2401b144:	2600      	movs	r6, #0
2401b146:	42a6      	cmp	r6, r4
2401b148:	d105      	bne.n	2401b156 <__libc_init_array+0x2e>
2401b14a:	bd70      	pop	{r4, r5, r6, pc}
2401b14c:	f855 3b04 	ldr.w	r3, [r5], #4
2401b150:	4798      	blx	r3
2401b152:	3601      	adds	r6, #1
2401b154:	e7ee      	b.n	2401b134 <__libc_init_array+0xc>
2401b156:	f855 3b04 	ldr.w	r3, [r5], #4
2401b15a:	4798      	blx	r3
2401b15c:	3601      	adds	r6, #1
2401b15e:	e7f2      	b.n	2401b146 <__libc_init_array+0x1e>
2401b160:	240004a0 	.word	0x240004a0
2401b164:	240004a0 	.word	0x240004a0
2401b168:	240004a0 	.word	0x240004a0
2401b16c:	240004a4 	.word	0x240004a4

2401b170 <__retarget_lock_init>:
2401b170:	4770      	bx	lr

2401b172 <__retarget_lock_init_recursive>:
2401b172:	4770      	bx	lr

2401b174 <__retarget_lock_close>:
2401b174:	4770      	bx	lr

2401b176 <__retarget_lock_close_recursive>:
2401b176:	4770      	bx	lr

2401b178 <__retarget_lock_acquire>:
2401b178:	4770      	bx	lr

2401b17a <__retarget_lock_acquire_recursive>:
2401b17a:	4770      	bx	lr

2401b17c <__retarget_lock_try_acquire>:
2401b17c:	2001      	movs	r0, #1
2401b17e:	4770      	bx	lr

2401b180 <__retarget_lock_try_acquire_recursive>:
2401b180:	2001      	movs	r0, #1
2401b182:	4770      	bx	lr

2401b184 <__retarget_lock_release>:
2401b184:	4770      	bx	lr

2401b186 <__retarget_lock_release_recursive>:
2401b186:	4770      	bx	lr

2401b188 <_free_r>:
2401b188:	b538      	push	{r3, r4, r5, lr}
2401b18a:	4605      	mov	r5, r0
2401b18c:	2900      	cmp	r1, #0
2401b18e:	d041      	beq.n	2401b214 <_free_r+0x8c>
2401b190:	f851 3c04 	ldr.w	r3, [r1, #-4]
2401b194:	1f0c      	subs	r4, r1, #4
2401b196:	2b00      	cmp	r3, #0
2401b198:	bfb8      	it	lt
2401b19a:	18e4      	addlt	r4, r4, r3
2401b19c:	f000 f8e0 	bl	2401b360 <__malloc_lock>
2401b1a0:	4a1d      	ldr	r2, [pc, #116]	@ (2401b218 <_free_r+0x90>)
2401b1a2:	6813      	ldr	r3, [r2, #0]
2401b1a4:	b933      	cbnz	r3, 2401b1b4 <_free_r+0x2c>
2401b1a6:	6063      	str	r3, [r4, #4]
2401b1a8:	6014      	str	r4, [r2, #0]
2401b1aa:	4628      	mov	r0, r5
2401b1ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
2401b1b0:	f000 b8dc 	b.w	2401b36c <__malloc_unlock>
2401b1b4:	42a3      	cmp	r3, r4
2401b1b6:	d908      	bls.n	2401b1ca <_free_r+0x42>
2401b1b8:	6820      	ldr	r0, [r4, #0]
2401b1ba:	1821      	adds	r1, r4, r0
2401b1bc:	428b      	cmp	r3, r1
2401b1be:	bf01      	itttt	eq
2401b1c0:	6819      	ldreq	r1, [r3, #0]
2401b1c2:	685b      	ldreq	r3, [r3, #4]
2401b1c4:	1809      	addeq	r1, r1, r0
2401b1c6:	6021      	streq	r1, [r4, #0]
2401b1c8:	e7ed      	b.n	2401b1a6 <_free_r+0x1e>
2401b1ca:	461a      	mov	r2, r3
2401b1cc:	685b      	ldr	r3, [r3, #4]
2401b1ce:	b10b      	cbz	r3, 2401b1d4 <_free_r+0x4c>
2401b1d0:	42a3      	cmp	r3, r4
2401b1d2:	d9fa      	bls.n	2401b1ca <_free_r+0x42>
2401b1d4:	6811      	ldr	r1, [r2, #0]
2401b1d6:	1850      	adds	r0, r2, r1
2401b1d8:	42a0      	cmp	r0, r4
2401b1da:	d10b      	bne.n	2401b1f4 <_free_r+0x6c>
2401b1dc:	6820      	ldr	r0, [r4, #0]
2401b1de:	4401      	add	r1, r0
2401b1e0:	1850      	adds	r0, r2, r1
2401b1e2:	4283      	cmp	r3, r0
2401b1e4:	6011      	str	r1, [r2, #0]
2401b1e6:	d1e0      	bne.n	2401b1aa <_free_r+0x22>
2401b1e8:	6818      	ldr	r0, [r3, #0]
2401b1ea:	685b      	ldr	r3, [r3, #4]
2401b1ec:	6053      	str	r3, [r2, #4]
2401b1ee:	4408      	add	r0, r1
2401b1f0:	6010      	str	r0, [r2, #0]
2401b1f2:	e7da      	b.n	2401b1aa <_free_r+0x22>
2401b1f4:	d902      	bls.n	2401b1fc <_free_r+0x74>
2401b1f6:	230c      	movs	r3, #12
2401b1f8:	602b      	str	r3, [r5, #0]
2401b1fa:	e7d6      	b.n	2401b1aa <_free_r+0x22>
2401b1fc:	6820      	ldr	r0, [r4, #0]
2401b1fe:	1821      	adds	r1, r4, r0
2401b200:	428b      	cmp	r3, r1
2401b202:	bf04      	itt	eq
2401b204:	6819      	ldreq	r1, [r3, #0]
2401b206:	685b      	ldreq	r3, [r3, #4]
2401b208:	6063      	str	r3, [r4, #4]
2401b20a:	bf04      	itt	eq
2401b20c:	1809      	addeq	r1, r1, r0
2401b20e:	6021      	streq	r1, [r4, #0]
2401b210:	6054      	str	r4, [r2, #4]
2401b212:	e7ca      	b.n	2401b1aa <_free_r+0x22>
2401b214:	bd38      	pop	{r3, r4, r5, pc}
2401b216:	bf00      	nop
2401b218:	24002a34 	.word	0x24002a34

2401b21c <sbrk_aligned>:
2401b21c:	b570      	push	{r4, r5, r6, lr}
2401b21e:	4e0f      	ldr	r6, [pc, #60]	@ (2401b25c <sbrk_aligned+0x40>)
2401b220:	460c      	mov	r4, r1
2401b222:	6831      	ldr	r1, [r6, #0]
2401b224:	4605      	mov	r5, r0
2401b226:	b911      	cbnz	r1, 2401b22e <sbrk_aligned+0x12>
2401b228:	f000 f966 	bl	2401b4f8 <_sbrk_r>
2401b22c:	6030      	str	r0, [r6, #0]
2401b22e:	4621      	mov	r1, r4
2401b230:	4628      	mov	r0, r5
2401b232:	f000 f961 	bl	2401b4f8 <_sbrk_r>
2401b236:	1c43      	adds	r3, r0, #1
2401b238:	d103      	bne.n	2401b242 <sbrk_aligned+0x26>
2401b23a:	f04f 34ff 	mov.w	r4, #4294967295
2401b23e:	4620      	mov	r0, r4
2401b240:	bd70      	pop	{r4, r5, r6, pc}
2401b242:	1cc4      	adds	r4, r0, #3
2401b244:	f024 0403 	bic.w	r4, r4, #3
2401b248:	42a0      	cmp	r0, r4
2401b24a:	d0f8      	beq.n	2401b23e <sbrk_aligned+0x22>
2401b24c:	1a21      	subs	r1, r4, r0
2401b24e:	4628      	mov	r0, r5
2401b250:	f000 f952 	bl	2401b4f8 <_sbrk_r>
2401b254:	3001      	adds	r0, #1
2401b256:	d1f2      	bne.n	2401b23e <sbrk_aligned+0x22>
2401b258:	e7ef      	b.n	2401b23a <sbrk_aligned+0x1e>
2401b25a:	bf00      	nop
2401b25c:	24002a30 	.word	0x24002a30

2401b260 <_malloc_r>:
2401b260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2401b264:	1ccd      	adds	r5, r1, #3
2401b266:	f025 0503 	bic.w	r5, r5, #3
2401b26a:	3508      	adds	r5, #8
2401b26c:	2d0c      	cmp	r5, #12
2401b26e:	bf38      	it	cc
2401b270:	250c      	movcc	r5, #12
2401b272:	2d00      	cmp	r5, #0
2401b274:	4606      	mov	r6, r0
2401b276:	db01      	blt.n	2401b27c <_malloc_r+0x1c>
2401b278:	42a9      	cmp	r1, r5
2401b27a:	d904      	bls.n	2401b286 <_malloc_r+0x26>
2401b27c:	230c      	movs	r3, #12
2401b27e:	6033      	str	r3, [r6, #0]
2401b280:	2000      	movs	r0, #0
2401b282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
2401b286:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 2401b35c <_malloc_r+0xfc>
2401b28a:	f000 f869 	bl	2401b360 <__malloc_lock>
2401b28e:	f8d8 3000 	ldr.w	r3, [r8]
2401b292:	461c      	mov	r4, r3
2401b294:	bb44      	cbnz	r4, 2401b2e8 <_malloc_r+0x88>
2401b296:	4629      	mov	r1, r5
2401b298:	4630      	mov	r0, r6
2401b29a:	f7ff ffbf 	bl	2401b21c <sbrk_aligned>
2401b29e:	1c43      	adds	r3, r0, #1
2401b2a0:	4604      	mov	r4, r0
2401b2a2:	d158      	bne.n	2401b356 <_malloc_r+0xf6>
2401b2a4:	f8d8 4000 	ldr.w	r4, [r8]
2401b2a8:	4627      	mov	r7, r4
2401b2aa:	2f00      	cmp	r7, #0
2401b2ac:	d143      	bne.n	2401b336 <_malloc_r+0xd6>
2401b2ae:	2c00      	cmp	r4, #0
2401b2b0:	d04b      	beq.n	2401b34a <_malloc_r+0xea>
2401b2b2:	6823      	ldr	r3, [r4, #0]
2401b2b4:	4639      	mov	r1, r7
2401b2b6:	4630      	mov	r0, r6
2401b2b8:	eb04 0903 	add.w	r9, r4, r3
2401b2bc:	f000 f91c 	bl	2401b4f8 <_sbrk_r>
2401b2c0:	4581      	cmp	r9, r0
2401b2c2:	d142      	bne.n	2401b34a <_malloc_r+0xea>
2401b2c4:	6821      	ldr	r1, [r4, #0]
2401b2c6:	1a6d      	subs	r5, r5, r1
2401b2c8:	4629      	mov	r1, r5
2401b2ca:	4630      	mov	r0, r6
2401b2cc:	f7ff ffa6 	bl	2401b21c <sbrk_aligned>
2401b2d0:	3001      	adds	r0, #1
2401b2d2:	d03a      	beq.n	2401b34a <_malloc_r+0xea>
2401b2d4:	6823      	ldr	r3, [r4, #0]
2401b2d6:	442b      	add	r3, r5
2401b2d8:	6023      	str	r3, [r4, #0]
2401b2da:	f8d8 3000 	ldr.w	r3, [r8]
2401b2de:	685a      	ldr	r2, [r3, #4]
2401b2e0:	bb62      	cbnz	r2, 2401b33c <_malloc_r+0xdc>
2401b2e2:	f8c8 7000 	str.w	r7, [r8]
2401b2e6:	e00f      	b.n	2401b308 <_malloc_r+0xa8>
2401b2e8:	6822      	ldr	r2, [r4, #0]
2401b2ea:	1b52      	subs	r2, r2, r5
2401b2ec:	d420      	bmi.n	2401b330 <_malloc_r+0xd0>
2401b2ee:	2a0b      	cmp	r2, #11
2401b2f0:	d917      	bls.n	2401b322 <_malloc_r+0xc2>
2401b2f2:	1961      	adds	r1, r4, r5
2401b2f4:	42a3      	cmp	r3, r4
2401b2f6:	6025      	str	r5, [r4, #0]
2401b2f8:	bf18      	it	ne
2401b2fa:	6059      	strne	r1, [r3, #4]
2401b2fc:	6863      	ldr	r3, [r4, #4]
2401b2fe:	bf08      	it	eq
2401b300:	f8c8 1000 	streq.w	r1, [r8]
2401b304:	5162      	str	r2, [r4, r5]
2401b306:	604b      	str	r3, [r1, #4]
2401b308:	4630      	mov	r0, r6
2401b30a:	f000 f82f 	bl	2401b36c <__malloc_unlock>
2401b30e:	f104 000b 	add.w	r0, r4, #11
2401b312:	1d23      	adds	r3, r4, #4
2401b314:	f020 0007 	bic.w	r0, r0, #7
2401b318:	1ac2      	subs	r2, r0, r3
2401b31a:	bf1c      	itt	ne
2401b31c:	1a1b      	subne	r3, r3, r0
2401b31e:	50a3      	strne	r3, [r4, r2]
2401b320:	e7af      	b.n	2401b282 <_malloc_r+0x22>
2401b322:	6862      	ldr	r2, [r4, #4]
2401b324:	42a3      	cmp	r3, r4
2401b326:	bf0c      	ite	eq
2401b328:	f8c8 2000 	streq.w	r2, [r8]
2401b32c:	605a      	strne	r2, [r3, #4]
2401b32e:	e7eb      	b.n	2401b308 <_malloc_r+0xa8>
2401b330:	4623      	mov	r3, r4
2401b332:	6864      	ldr	r4, [r4, #4]
2401b334:	e7ae      	b.n	2401b294 <_malloc_r+0x34>
2401b336:	463c      	mov	r4, r7
2401b338:	687f      	ldr	r7, [r7, #4]
2401b33a:	e7b6      	b.n	2401b2aa <_malloc_r+0x4a>
2401b33c:	461a      	mov	r2, r3
2401b33e:	685b      	ldr	r3, [r3, #4]
2401b340:	42a3      	cmp	r3, r4
2401b342:	d1fb      	bne.n	2401b33c <_malloc_r+0xdc>
2401b344:	2300      	movs	r3, #0
2401b346:	6053      	str	r3, [r2, #4]
2401b348:	e7de      	b.n	2401b308 <_malloc_r+0xa8>
2401b34a:	230c      	movs	r3, #12
2401b34c:	6033      	str	r3, [r6, #0]
2401b34e:	4630      	mov	r0, r6
2401b350:	f000 f80c 	bl	2401b36c <__malloc_unlock>
2401b354:	e794      	b.n	2401b280 <_malloc_r+0x20>
2401b356:	6005      	str	r5, [r0, #0]
2401b358:	e7d6      	b.n	2401b308 <_malloc_r+0xa8>
2401b35a:	bf00      	nop
2401b35c:	24002a34 	.word	0x24002a34

2401b360 <__malloc_lock>:
2401b360:	4801      	ldr	r0, [pc, #4]	@ (2401b368 <__malloc_lock+0x8>)
2401b362:	f7ff bf0a 	b.w	2401b17a <__retarget_lock_acquire_recursive>
2401b366:	bf00      	nop
2401b368:	24002a2c 	.word	0x24002a2c

2401b36c <__malloc_unlock>:
2401b36c:	4801      	ldr	r0, [pc, #4]	@ (2401b374 <__malloc_unlock+0x8>)
2401b36e:	f7ff bf0a 	b.w	2401b186 <__retarget_lock_release_recursive>
2401b372:	bf00      	nop
2401b374:	24002a2c 	.word	0x24002a2c

2401b378 <__sflush_r>:
2401b378:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
2401b37c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2401b380:	0716      	lsls	r6, r2, #28
2401b382:	4605      	mov	r5, r0
2401b384:	460c      	mov	r4, r1
2401b386:	d454      	bmi.n	2401b432 <__sflush_r+0xba>
2401b388:	684b      	ldr	r3, [r1, #4]
2401b38a:	2b00      	cmp	r3, #0
2401b38c:	dc02      	bgt.n	2401b394 <__sflush_r+0x1c>
2401b38e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
2401b390:	2b00      	cmp	r3, #0
2401b392:	dd48      	ble.n	2401b426 <__sflush_r+0xae>
2401b394:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
2401b396:	2e00      	cmp	r6, #0
2401b398:	d045      	beq.n	2401b426 <__sflush_r+0xae>
2401b39a:	2300      	movs	r3, #0
2401b39c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
2401b3a0:	682f      	ldr	r7, [r5, #0]
2401b3a2:	6a21      	ldr	r1, [r4, #32]
2401b3a4:	602b      	str	r3, [r5, #0]
2401b3a6:	d030      	beq.n	2401b40a <__sflush_r+0x92>
2401b3a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
2401b3aa:	89a3      	ldrh	r3, [r4, #12]
2401b3ac:	0759      	lsls	r1, r3, #29
2401b3ae:	d505      	bpl.n	2401b3bc <__sflush_r+0x44>
2401b3b0:	6863      	ldr	r3, [r4, #4]
2401b3b2:	1ad2      	subs	r2, r2, r3
2401b3b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
2401b3b6:	b10b      	cbz	r3, 2401b3bc <__sflush_r+0x44>
2401b3b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
2401b3ba:	1ad2      	subs	r2, r2, r3
2401b3bc:	2300      	movs	r3, #0
2401b3be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
2401b3c0:	6a21      	ldr	r1, [r4, #32]
2401b3c2:	4628      	mov	r0, r5
2401b3c4:	47b0      	blx	r6
2401b3c6:	1c43      	adds	r3, r0, #1
2401b3c8:	89a3      	ldrh	r3, [r4, #12]
2401b3ca:	d106      	bne.n	2401b3da <__sflush_r+0x62>
2401b3cc:	6829      	ldr	r1, [r5, #0]
2401b3ce:	291d      	cmp	r1, #29
2401b3d0:	d82b      	bhi.n	2401b42a <__sflush_r+0xb2>
2401b3d2:	4a2a      	ldr	r2, [pc, #168]	@ (2401b47c <__sflush_r+0x104>)
2401b3d4:	410a      	asrs	r2, r1
2401b3d6:	07d6      	lsls	r6, r2, #31
2401b3d8:	d427      	bmi.n	2401b42a <__sflush_r+0xb2>
2401b3da:	2200      	movs	r2, #0
2401b3dc:	6062      	str	r2, [r4, #4]
2401b3de:	04d9      	lsls	r1, r3, #19
2401b3e0:	6922      	ldr	r2, [r4, #16]
2401b3e2:	6022      	str	r2, [r4, #0]
2401b3e4:	d504      	bpl.n	2401b3f0 <__sflush_r+0x78>
2401b3e6:	1c42      	adds	r2, r0, #1
2401b3e8:	d101      	bne.n	2401b3ee <__sflush_r+0x76>
2401b3ea:	682b      	ldr	r3, [r5, #0]
2401b3ec:	b903      	cbnz	r3, 2401b3f0 <__sflush_r+0x78>
2401b3ee:	6560      	str	r0, [r4, #84]	@ 0x54
2401b3f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
2401b3f2:	602f      	str	r7, [r5, #0]
2401b3f4:	b1b9      	cbz	r1, 2401b426 <__sflush_r+0xae>
2401b3f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
2401b3fa:	4299      	cmp	r1, r3
2401b3fc:	d002      	beq.n	2401b404 <__sflush_r+0x8c>
2401b3fe:	4628      	mov	r0, r5
2401b400:	f7ff fec2 	bl	2401b188 <_free_r>
2401b404:	2300      	movs	r3, #0
2401b406:	6363      	str	r3, [r4, #52]	@ 0x34
2401b408:	e00d      	b.n	2401b426 <__sflush_r+0xae>
2401b40a:	2301      	movs	r3, #1
2401b40c:	4628      	mov	r0, r5
2401b40e:	47b0      	blx	r6
2401b410:	4602      	mov	r2, r0
2401b412:	1c50      	adds	r0, r2, #1
2401b414:	d1c9      	bne.n	2401b3aa <__sflush_r+0x32>
2401b416:	682b      	ldr	r3, [r5, #0]
2401b418:	2b00      	cmp	r3, #0
2401b41a:	d0c6      	beq.n	2401b3aa <__sflush_r+0x32>
2401b41c:	2b1d      	cmp	r3, #29
2401b41e:	d001      	beq.n	2401b424 <__sflush_r+0xac>
2401b420:	2b16      	cmp	r3, #22
2401b422:	d11e      	bne.n	2401b462 <__sflush_r+0xea>
2401b424:	602f      	str	r7, [r5, #0]
2401b426:	2000      	movs	r0, #0
2401b428:	e022      	b.n	2401b470 <__sflush_r+0xf8>
2401b42a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
2401b42e:	b21b      	sxth	r3, r3
2401b430:	e01b      	b.n	2401b46a <__sflush_r+0xf2>
2401b432:	690f      	ldr	r7, [r1, #16]
2401b434:	2f00      	cmp	r7, #0
2401b436:	d0f6      	beq.n	2401b426 <__sflush_r+0xae>
2401b438:	0793      	lsls	r3, r2, #30
2401b43a:	680e      	ldr	r6, [r1, #0]
2401b43c:	bf08      	it	eq
2401b43e:	694b      	ldreq	r3, [r1, #20]
2401b440:	600f      	str	r7, [r1, #0]
2401b442:	bf18      	it	ne
2401b444:	2300      	movne	r3, #0
2401b446:	eba6 0807 	sub.w	r8, r6, r7
2401b44a:	608b      	str	r3, [r1, #8]
2401b44c:	f1b8 0f00 	cmp.w	r8, #0
2401b450:	dde9      	ble.n	2401b426 <__sflush_r+0xae>
2401b452:	6a21      	ldr	r1, [r4, #32]
2401b454:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
2401b456:	4643      	mov	r3, r8
2401b458:	463a      	mov	r2, r7
2401b45a:	4628      	mov	r0, r5
2401b45c:	47b0      	blx	r6
2401b45e:	2800      	cmp	r0, #0
2401b460:	dc08      	bgt.n	2401b474 <__sflush_r+0xfc>
2401b462:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
2401b466:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
2401b46a:	81a3      	strh	r3, [r4, #12]
2401b46c:	f04f 30ff 	mov.w	r0, #4294967295
2401b470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
2401b474:	4407      	add	r7, r0
2401b476:	eba8 0800 	sub.w	r8, r8, r0
2401b47a:	e7e7      	b.n	2401b44c <__sflush_r+0xd4>
2401b47c:	dfbffffe 	.word	0xdfbffffe

2401b480 <_fflush_r>:
2401b480:	b538      	push	{r3, r4, r5, lr}
2401b482:	690b      	ldr	r3, [r1, #16]
2401b484:	4605      	mov	r5, r0
2401b486:	460c      	mov	r4, r1
2401b488:	b913      	cbnz	r3, 2401b490 <_fflush_r+0x10>
2401b48a:	2500      	movs	r5, #0
2401b48c:	4628      	mov	r0, r5
2401b48e:	bd38      	pop	{r3, r4, r5, pc}
2401b490:	b118      	cbz	r0, 2401b49a <_fflush_r+0x1a>
2401b492:	6a03      	ldr	r3, [r0, #32]
2401b494:	b90b      	cbnz	r3, 2401b49a <_fflush_r+0x1a>
2401b496:	f7ff fd05 	bl	2401aea4 <__sinit>
2401b49a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
2401b49e:	2b00      	cmp	r3, #0
2401b4a0:	d0f3      	beq.n	2401b48a <_fflush_r+0xa>
2401b4a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
2401b4a4:	07d0      	lsls	r0, r2, #31
2401b4a6:	d404      	bmi.n	2401b4b2 <_fflush_r+0x32>
2401b4a8:	0599      	lsls	r1, r3, #22
2401b4aa:	d402      	bmi.n	2401b4b2 <_fflush_r+0x32>
2401b4ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
2401b4ae:	f7ff fe64 	bl	2401b17a <__retarget_lock_acquire_recursive>
2401b4b2:	4628      	mov	r0, r5
2401b4b4:	4621      	mov	r1, r4
2401b4b6:	f7ff ff5f 	bl	2401b378 <__sflush_r>
2401b4ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
2401b4bc:	07da      	lsls	r2, r3, #31
2401b4be:	4605      	mov	r5, r0
2401b4c0:	d4e4      	bmi.n	2401b48c <_fflush_r+0xc>
2401b4c2:	89a3      	ldrh	r3, [r4, #12]
2401b4c4:	059b      	lsls	r3, r3, #22
2401b4c6:	d4e1      	bmi.n	2401b48c <_fflush_r+0xc>
2401b4c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
2401b4ca:	f7ff fe5c 	bl	2401b186 <__retarget_lock_release_recursive>
2401b4ce:	e7dd      	b.n	2401b48c <_fflush_r+0xc>

2401b4d0 <fflush>:
2401b4d0:	4601      	mov	r1, r0
2401b4d2:	b920      	cbnz	r0, 2401b4de <fflush+0xe>
2401b4d4:	4a04      	ldr	r2, [pc, #16]	@ (2401b4e8 <fflush+0x18>)
2401b4d6:	4905      	ldr	r1, [pc, #20]	@ (2401b4ec <fflush+0x1c>)
2401b4d8:	4805      	ldr	r0, [pc, #20]	@ (2401b4f0 <fflush+0x20>)
2401b4da:	f7ff bd17 	b.w	2401af0c <_fwalk_sglue>
2401b4de:	4b05      	ldr	r3, [pc, #20]	@ (2401b4f4 <fflush+0x24>)
2401b4e0:	6818      	ldr	r0, [r3, #0]
2401b4e2:	f7ff bfcd 	b.w	2401b480 <_fflush_r>
2401b4e6:	bf00      	nop
2401b4e8:	240004c0 	.word	0x240004c0
2401b4ec:	2401b481 	.word	0x2401b481
2401b4f0:	240004d0 	.word	0x240004d0
2401b4f4:	240004cc 	.word	0x240004cc

2401b4f8 <_sbrk_r>:
2401b4f8:	b538      	push	{r3, r4, r5, lr}
2401b4fa:	4d06      	ldr	r5, [pc, #24]	@ (2401b514 <_sbrk_r+0x1c>)
2401b4fc:	2300      	movs	r3, #0
2401b4fe:	4604      	mov	r4, r0
2401b500:	4608      	mov	r0, r1
2401b502:	602b      	str	r3, [r5, #0]
2401b504:	f7fe ff94 	bl	2401a430 <_sbrk>
2401b508:	1c43      	adds	r3, r0, #1
2401b50a:	d102      	bne.n	2401b512 <_sbrk_r+0x1a>
2401b50c:	682b      	ldr	r3, [r5, #0]
2401b50e:	b103      	cbz	r3, 2401b512 <_sbrk_r+0x1a>
2401b510:	6023      	str	r3, [r4, #0]
2401b512:	bd38      	pop	{r3, r4, r5, pc}
2401b514:	24002a24 	.word	0x24002a24

2401b518 <__EH_FRAME_BEGIN__>:
2401b518:	00000000                                ....

2401b51c <_init>:
2401b51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2401b51e:	bf00      	nop
2401b520:	bcf8      	pop	{r3, r4, r5, r6, r7}
2401b522:	bc08      	pop	{r3}
2401b524:	469e      	mov	lr, r3
2401b526:	4770      	bx	lr

2401b528 <_fini>:
2401b528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2401b52a:	bf00      	nop
2401b52c:	bcf8      	pop	{r3, r4, r5, r6, r7}
2401b52e:	bc08      	pop	{r3}
2401b530:	469e      	mov	lr, r3
2401b532:	4770      	bx	lr
